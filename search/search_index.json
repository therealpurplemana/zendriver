{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zendriver","text":"<p>Zendriver is a blazing fast, async-first, undetectable webscraping/web automation framework implemented using the Chrome Devtools Protocol. Visit websites, scrape content, and run JavaScript using a real browser (no Selenium/Webdriver) all with just a few lines of Python.</p> <p>This package is a fork of the excellent <code>ultrafunkamsterdam/nodriver</code>, created in order to compile a variety of unmerged bugfixes and increase overall community engagement with the project.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Undetectable - Zendriver uses the Chrome Devtools Protocol instead of Selenium/WebDriver, making it (almost) impossible to detect</li> <li>Blazing fast - Chrome Devtools Protocol is fast, much faster than previous Selenium/WebDriver solutions. CDP combined with an async Python API makes Zendriver highly performant.</li> <li>Feature complete and easy to use - Packed with allowing you to get up and running in just a few lines of code.</li> <li>Automatic cookie and profile management - By default, uses fresh profile on each run, cleaning up on exit. Or, save and load cookies to a file to avoid repeating tedious login steps.</li> <li>Smart element lookup - Find elements selector or text, including iframe content. This could also be used as wait condition for a element to appear, since it will retry for the duration of <code>timeout</code> until found. Single element lookup by text using <code>tab.find()</code> accepts a <code>best_match flag</code>, which will not naively return the first match, but will match candidates by closest matching text length.</li> <li>Easy debugging - Descriptive <code>repr</code> for elements, which represents the element as HTML makes debugging much easier.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install, simply use <code>pip</code> (or your favorite package manager):</p> <pre><code>pip install zendriver\n# or uv add zendriver, poetry add zendriver, etc.\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Example for visiting https://www.browserscan.net/bot-detection and saving a screenshot of the results:</p> <pre><code>import asyncio\n\nimport zendriver as zd\n\n\nasync def main():\n    browser = await zd.start()\n    page = await browser.get(\"https://www.browserscan.net/bot-detection\")\n    await page.save_screenshot(\"browserscan.png\")\n    await browser.close()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>See Quickstart for more examples.</p>"},{"location":"#rationale-for-the-fork","title":"Rationale for the fork","text":"<p>Zendriver remains committed to <code>nodriver</code>'s goals of staying undetected for all modern anti-bot solutions and also keeps with the batteries-included approach of its predecessor. Unfortunately, contributions to the original <code>nodriver</code> repo are heavily restricted, making it difficult to submit issues or pull requests. At the time of writing, there are several pull requests open to fix critical bugs which have beeen left unaddressed for many months.</p> <p>Zendriver aims to change this by:</p> <ol> <li>Including open pull requests in the original <code>nodriver</code> repo as part of the initial release</li> <li>Modernizing the development process to include static analysis tools such as <code>ruff</code> and <code>mypy</code>, reducing the number of easy-to-catch bugs which make it through in the future</li> <li>Opening up the issue tracker and pull requests for community contributions, allowing the project to continue to grow along with its community.</li> </ol> <p>With these changes in place, we hope to further development of state-of-the-art open-source web automation tools even further, helping to once again make the web truly open for all.</p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#installation","title":"Installation","text":"<p>To install, simply use <code>pip</code> (or your favorite package manager):</p> <pre><code>pip install zendriver\n</code></pre>"},{"location":"quickstart/#usage-example","title":"Usage example","text":"<p>The aim of this project (just like undetected-chromedriver, somewhere long ago) is to keep it short and simple, so you can quickly open an editor or interactive session, type or paste a few lines and off you go.</p> <pre><code>import asyncio\nimport zendriver as zd\n\nasync def main():\n    browser = await zd.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    # ...further code...\n\n    await browser.close()\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"quickstart/#more-complete-example","title":"More complete example","text":"<pre><code>import asyncio\nimport zendriver as zd\n\nasync def main():\n    browser = await zd.start()\n    page = await browser.get('https://www.nowsecure.nl')\n\n    await page.save_screenshot()\n    await page.get_content()\n    await page.scroll_down(150)\n    elems = await page.select_all('*[src]')\n\n    for elem in elems:\n        await elem.flash()\n\n    page2 = await browser.get('https://twitter.com', new_tab=True)\n    page3 = await browser.get('https://github.com/ultrafunkamsterdam/nodriver', new_window=True)\n\n    for p in (page, page2, page3):\n        await p.bring_to_front()\n        await p.scroll_down(200)\n        await p   # wait for events to be processed\n        await p.reload()\n        if p != page3:\n            await p.close()\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre> <p>I'll leave out the async boilerplate here</p> <pre><code>import zendriver as zd\n\nbrowser = await zd.start(\n    headless=False,\n    user_data_dir=\"/path/to/existing/profile\",  # by specifying it, it won't be automatically cleaned up when finished\n    browser_executable_path=\"/path/to/some/other/browser\",\n    browser_args=['--some-browser-arg=true', '--some-other-option'],\n    lang=\"en-US\"   # this could set iso-language-code in navigator, not recommended to change\n)\ntab = await browser.get('https://somewebsite.com')\n</code></pre>"},{"location":"quickstart/#alternative-custom-options","title":"Alternative custom options","text":"<p>I'll leave out the async boilerplate here</p> <pre><code>import zendriver as zd\n\nconfig = zd.Config()\nconfig.headless = False\nconfig.user_data_dir=\"/path/to/existing/profile\",  # by specifying it, it won't be automatically cleaned up when finished\nconfig.browser_executable_path=\"/path/to/some/other/browser\",\nconfig.browser_args=['--some-browser-arg=true', '--some-other-option'],\nconfig.lang=\"en-US\"   # this could set iso-language-code in navigator, not recommended to change\n)\n</code></pre> <p>A more concrete example, which can be found in the ./example/ folder, shows a script for uploading an image to imgur.</p> <pre><code>import asyncio\nfrom pathlib import Path\nimport zendriver as zd\n\n# interesting, this is a typical site which runs completely on javascript, and that causes\n# this script to be faster than the js can present the elements. This may be one of the downsides\n# of this fast beast. You have to carefully consider timing.\nDELAY = 2\n\nasync def main():\n    browser = await zd.start()\n    tab = await browser.get(\"https://imgur.com\")\n\n    # now we first need an image to upload, lets make a screenshot of the project page\n    save_path = Path(\"screenshot.jpg\").resolve()\n    # create new tab with the project page\n    temp_tab = await browser.get(\n        \"https://github.com/ultrafunkamsterdam/undetected-chromedriver\", new_tab=True\n    )\n\n    # wait page to load\n    await temp_tab\n    # save the screenshot to the previously declared path of screenshot.jpg (which is just current directory)\n    await temp_tab.save_screenshot(save_path)\n    # done, discard the temp_tab\n    await temp_tab.close()\n\n    # accept goddamn cookies\n    # the best_match flag will filter the best match from\n    # matching elements containing \"consent\" and takes the\n    # one having most similar text length\n    consent = await tab.find(\"Consent\", best_match=True)\n    await consent.click()\n\n    # shortcut\n    await (await tab.find(\"new post\", best_match=True)).click()\n\n    file_input = await tab.select(\"input[type=file]\")\n    await file_input.send_file(save_path)\n    # since file upload takes a while , the next buttons are not available yet\n\n    await tab.wait(DELAY)\n\n    # wait until the grab link becomes clickable, by waiting for the toast message\n    await tab.select(\".Toast-message--check\")\n\n    # this one is tricky. we are trying to find a element by text content\n    # usually. the text node itself is not needed, but it's enclosing element.\n    # in this case however, the text is NOT a text node, but an \"placeholder\" attribute of a span element.\n    # so for this one, we use the flag return_enclosing_element and set it to False\n    title_field = await tab.find(\"give your post a unique title\", best_match=True)\n    print(title_field)\n    await title_field.send_keys(\"undetected zendriver\")\n\n    grab_link = await tab.find(\"grab link\", best_match=True)\n    await grab_link.click()\n\n    # there is a delay for the link sharing popup.\n    # let's pause for a sec\n    await tab.wait(DELAY)\n\n    # get inputs of which the value starts with http\n    input_thing = await tab.select(\"input[value^=https]\")\n\n    my_link = input_thing.attrs.value\n\n    print(my_link)\n    await browser.close()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#010-2024-10-20","title":"[0.1.0] - 2024-10-20","text":"<p>Initial version, forked from ultrafunkamsterdam/nodriver@<code>1bb6003</code> with a variety of improvements.</p>"},{"location":"release-notes/#fixed","title":"Fixed","text":"<ul> <li><code>Browser.set_all</code> cookies function now correctly uses provided cookies @ilkecan</li> <li>\"successfully removed temp profile\" message printed on exit is now only shown only when a profile was actually removed. Message is now logged at debug level instead of printed. @mreiden @stephanlensky</li> <li>Fix crash on starting browser in headless mode @ilkecan</li> <li>Fix <code>Browser.close()</code> method to give the browser instance time to shut down before force killing @stephanlensky</li> <li>Many <code>ruff</code> lint issues @stephanlensky</li> </ul>"},{"location":"release-notes/#added","title":"Added","text":"<ul> <li>Support for linting with <code>ruff</code> and <code>mypy</code>. All <code>ruff</code> lints are fixed in the initial release, but many <code>mypy</code> issues remain to be fixed at a later date. @stephanlensky</li> <li><code>py.typed</code> marker so importing as a library in other packages no longer causes <code>mypy</code> errors. @stephanlensky</li> </ul>"},{"location":"release-notes/#changed","title":"Changed","text":"<ul> <li>Project is now built with <code>uv</code>. Automatically install dependencies to a venv with <code>uv sync</code>, run commands from the venv with <code>uv run</code>, and build the project with <code>uv build</code>. See the official <code>uv</code> docs for more information. @stephanlensky</li> <li>Docs migrated from sphinx to mkdocs-material. @stephanlensky</li> <li><code>Browser.close()</code> is now async (so it must be <code>await</code>ed) @stephanlensky</li> </ul>"},{"location":"release-notes/#removed","title":"Removed","text":"<ul> <li>Twitter account creation example @stephanlensky</li> </ul>"},{"location":"reference/cdp/accessibility/","title":"accessibility","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode","title":"<code>AXNode</code>  <code>dataclass</code>","text":"<p>A node in the accessibility tree.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@dataclass\nclass AXNode:\n    \"\"\"\n    A node in the accessibility tree.\n    \"\"\"\n\n    #: Unique identifier for this node.\n    node_id: AXNodeId\n\n    #: Whether this node is ignored for accessibility\n    ignored: bool\n\n    #: Collection of reasons why this node is hidden.\n    ignored_reasons: typing.Optional[typing.List[AXProperty]] = None\n\n    #: This ``Node``'s role, whether explicit or implicit.\n    role: typing.Optional[AXValue] = None\n\n    #: This ``Node``'s Chrome raw role.\n    chrome_role: typing.Optional[AXValue] = None\n\n    #: The accessible name for this ``Node``.\n    name: typing.Optional[AXValue] = None\n\n    #: The accessible description for this ``Node``.\n    description: typing.Optional[AXValue] = None\n\n    #: The value for this ``Node``.\n    value: typing.Optional[AXValue] = None\n\n    #: All other properties\n    properties: typing.Optional[typing.List[AXProperty]] = None\n\n    #: ID for this node's parent.\n    parent_id: typing.Optional[AXNodeId] = None\n\n    #: IDs for each of this node's child nodes.\n    child_ids: typing.Optional[typing.List[AXNodeId]] = None\n\n    #: The backend ID for the associated DOM node, if any.\n    backend_dom_node_id: typing.Optional[dom.BackendNodeId] = None\n\n    #: The frame ID for the frame associated with this nodes document.\n    frame_id: typing.Optional[page.FrameId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"nodeId\"] = self.node_id.to_json()\n        json[\"ignored\"] = self.ignored\n        if self.ignored_reasons is not None:\n            json[\"ignoredReasons\"] = [i.to_json() for i in self.ignored_reasons]\n        if self.role is not None:\n            json[\"role\"] = self.role.to_json()\n        if self.chrome_role is not None:\n            json[\"chromeRole\"] = self.chrome_role.to_json()\n        if self.name is not None:\n            json[\"name\"] = self.name.to_json()\n        if self.description is not None:\n            json[\"description\"] = self.description.to_json()\n        if self.value is not None:\n            json[\"value\"] = self.value.to_json()\n        if self.properties is not None:\n            json[\"properties\"] = [i.to_json() for i in self.properties]\n        if self.parent_id is not None:\n            json[\"parentId\"] = self.parent_id.to_json()\n        if self.child_ids is not None:\n            json[\"childIds\"] = [i.to_json() for i in self.child_ids]\n        if self.backend_dom_node_id is not None:\n            json[\"backendDOMNodeId\"] = self.backend_dom_node_id.to_json()\n        if self.frame_id is not None:\n            json[\"frameId\"] = self.frame_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AXNode:\n        return cls(\n            node_id=AXNodeId.from_json(json[\"nodeId\"]),\n            ignored=bool(json[\"ignored\"]),\n            ignored_reasons=(\n                [AXProperty.from_json(i) for i in json[\"ignoredReasons\"]]\n                if json.get(\"ignoredReasons\", None) is not None\n                else None\n            ),\n            role=(\n                AXValue.from_json(json[\"role\"])\n                if json.get(\"role\", None) is not None\n                else None\n            ),\n            chrome_role=(\n                AXValue.from_json(json[\"chromeRole\"])\n                if json.get(\"chromeRole\", None) is not None\n                else None\n            ),\n            name=(\n                AXValue.from_json(json[\"name\"])\n                if json.get(\"name\", None) is not None\n                else None\n            ),\n            description=(\n                AXValue.from_json(json[\"description\"])\n                if json.get(\"description\", None) is not None\n                else None\n            ),\n            value=(\n                AXValue.from_json(json[\"value\"])\n                if json.get(\"value\", None) is not None\n                else None\n            ),\n            properties=(\n                [AXProperty.from_json(i) for i in json[\"properties\"]]\n                if json.get(\"properties\", None) is not None\n                else None\n            ),\n            parent_id=(\n                AXNodeId.from_json(json[\"parentId\"])\n                if json.get(\"parentId\", None) is not None\n                else None\n            ),\n            child_ids=(\n                [AXNodeId.from_json(i) for i in json[\"childIds\"]]\n                if json.get(\"childIds\", None) is not None\n                else None\n            ),\n            backend_dom_node_id=(\n                dom.BackendNodeId.from_json(json[\"backendDOMNodeId\"])\n                if json.get(\"backendDOMNodeId\", None) is not None\n                else None\n            ),\n            frame_id=(\n                page.FrameId.from_json(json[\"frameId\"])\n                if json.get(\"frameId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.backend_dom_node_id","title":"<code>backend_dom_node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.child_ids","title":"<code>child_ids: typing.Optional[typing.List[AXNodeId]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.chrome_role","title":"<code>chrome_role: typing.Optional[AXValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.description","title":"<code>description: typing.Optional[AXValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.frame_id","title":"<code>frame_id: typing.Optional[page.FrameId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.ignored","title":"<code>ignored: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.ignored_reasons","title":"<code>ignored_reasons: typing.Optional[typing.List[AXProperty]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.name","title":"<code>name: typing.Optional[AXValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.node_id","title":"<code>node_id: AXNodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.parent_id","title":"<code>parent_id: typing.Optional[AXNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.properties","title":"<code>properties: typing.Optional[typing.List[AXProperty]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.role","title":"<code>role: typing.Optional[AXValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.value","title":"<code>value: typing.Optional[AXValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.__init__","title":"<code>__init__(node_id, ignored, ignored_reasons=None, role=None, chrome_role=None, name=None, description=None, value=None, properties=None, parent_id=None, child_ids=None, backend_dom_node_id=None, frame_id=None)</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AXNode:\n    return cls(\n        node_id=AXNodeId.from_json(json[\"nodeId\"]),\n        ignored=bool(json[\"ignored\"]),\n        ignored_reasons=(\n            [AXProperty.from_json(i) for i in json[\"ignoredReasons\"]]\n            if json.get(\"ignoredReasons\", None) is not None\n            else None\n        ),\n        role=(\n            AXValue.from_json(json[\"role\"])\n            if json.get(\"role\", None) is not None\n            else None\n        ),\n        chrome_role=(\n            AXValue.from_json(json[\"chromeRole\"])\n            if json.get(\"chromeRole\", None) is not None\n            else None\n        ),\n        name=(\n            AXValue.from_json(json[\"name\"])\n            if json.get(\"name\", None) is not None\n            else None\n        ),\n        description=(\n            AXValue.from_json(json[\"description\"])\n            if json.get(\"description\", None) is not None\n            else None\n        ),\n        value=(\n            AXValue.from_json(json[\"value\"])\n            if json.get(\"value\", None) is not None\n            else None\n        ),\n        properties=(\n            [AXProperty.from_json(i) for i in json[\"properties\"]]\n            if json.get(\"properties\", None) is not None\n            else None\n        ),\n        parent_id=(\n            AXNodeId.from_json(json[\"parentId\"])\n            if json.get(\"parentId\", None) is not None\n            else None\n        ),\n        child_ids=(\n            [AXNodeId.from_json(i) for i in json[\"childIds\"]]\n            if json.get(\"childIds\", None) is not None\n            else None\n        ),\n        backend_dom_node_id=(\n            dom.BackendNodeId.from_json(json[\"backendDOMNodeId\"])\n            if json.get(\"backendDOMNodeId\", None) is not None\n            else None\n        ),\n        frame_id=(\n            page.FrameId.from_json(json[\"frameId\"])\n            if json.get(\"frameId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"nodeId\"] = self.node_id.to_json()\n    json[\"ignored\"] = self.ignored\n    if self.ignored_reasons is not None:\n        json[\"ignoredReasons\"] = [i.to_json() for i in self.ignored_reasons]\n    if self.role is not None:\n        json[\"role\"] = self.role.to_json()\n    if self.chrome_role is not None:\n        json[\"chromeRole\"] = self.chrome_role.to_json()\n    if self.name is not None:\n        json[\"name\"] = self.name.to_json()\n    if self.description is not None:\n        json[\"description\"] = self.description.to_json()\n    if self.value is not None:\n        json[\"value\"] = self.value.to_json()\n    if self.properties is not None:\n        json[\"properties\"] = [i.to_json() for i in self.properties]\n    if self.parent_id is not None:\n        json[\"parentId\"] = self.parent_id.to_json()\n    if self.child_ids is not None:\n        json[\"childIds\"] = [i.to_json() for i in self.child_ids]\n    if self.backend_dom_node_id is not None:\n        json[\"backendDOMNodeId\"] = self.backend_dom_node_id.to_json()\n    if self.frame_id is not None:\n        json[\"frameId\"] = self.frame_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNodeId","title":"<code>AXNodeId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique accessibility node identifier.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>class AXNodeId(str):\n    \"\"\"\n    Unique accessibility node identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AXNodeId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"AXNodeId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNodeId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def __repr__(self):\n    return \"AXNodeId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNodeId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AXNodeId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXNodeId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXProperty","title":"<code>AXProperty</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@dataclass\nclass AXProperty:\n    #: The name of this property.\n    name: AXPropertyName\n\n    #: The value of this property.\n    value: AXValue\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name.to_json()\n        json[\"value\"] = self.value.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AXProperty:\n        return cls(\n            name=AXPropertyName.from_json(json[\"name\"]),\n            value=AXValue.from_json(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXProperty.name","title":"<code>name: AXPropertyName</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXProperty.value","title":"<code>value: AXValue</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXProperty.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXProperty.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AXProperty:\n    return cls(\n        name=AXPropertyName.from_json(json[\"name\"]),\n        value=AXValue.from_json(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXProperty.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name.to_json()\n    json[\"value\"] = self.value.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName","title":"<code>AXPropertyName</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Values of AXProperty name: - from 'busy' to 'roledescription': states which apply to every AX node - from 'live' to 'root': attributes which apply to nodes in live regions - from 'autocomplete' to 'valuetext': attributes which apply to widgets - from 'checked' to 'selected': states which apply to widgets - from 'activedescendant' to 'owns' - relationships between elements other than parent/child/sibling.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>class AXPropertyName(enum.Enum):\n    \"\"\"\n    Values of AXProperty name:\n    - from 'busy' to 'roledescription': states which apply to every AX node\n    - from 'live' to 'root': attributes which apply to nodes in live regions\n    - from 'autocomplete' to 'valuetext': attributes which apply to widgets\n    - from 'checked' to 'selected': states which apply to widgets\n    - from 'activedescendant' to 'owns' - relationships between elements other than parent/child/sibling.\n    \"\"\"\n\n    BUSY = \"busy\"\n    DISABLED = \"disabled\"\n    EDITABLE = \"editable\"\n    FOCUSABLE = \"focusable\"\n    FOCUSED = \"focused\"\n    HIDDEN = \"hidden\"\n    HIDDEN_ROOT = \"hiddenRoot\"\n    INVALID = \"invalid\"\n    KEYSHORTCUTS = \"keyshortcuts\"\n    SETTABLE = \"settable\"\n    ROLEDESCRIPTION = \"roledescription\"\n    LIVE = \"live\"\n    ATOMIC = \"atomic\"\n    RELEVANT = \"relevant\"\n    ROOT = \"root\"\n    AUTOCOMPLETE = \"autocomplete\"\n    HAS_POPUP = \"hasPopup\"\n    LEVEL = \"level\"\n    MULTISELECTABLE = \"multiselectable\"\n    ORIENTATION = \"orientation\"\n    MULTILINE = \"multiline\"\n    READONLY = \"readonly\"\n    REQUIRED = \"required\"\n    VALUEMIN = \"valuemin\"\n    VALUEMAX = \"valuemax\"\n    VALUETEXT = \"valuetext\"\n    CHECKED = \"checked\"\n    EXPANDED = \"expanded\"\n    MODAL = \"modal\"\n    PRESSED = \"pressed\"\n    SELECTED = \"selected\"\n    ACTIVEDESCENDANT = \"activedescendant\"\n    CONTROLS = \"controls\"\n    DESCRIBEDBY = \"describedby\"\n    DETAILS = \"details\"\n    ERRORMESSAGE = \"errormessage\"\n    FLOWTO = \"flowto\"\n    LABELLEDBY = \"labelledby\"\n    OWNS = \"owns\"\n    URL = \"url\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AXPropertyName:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.ACTIVEDESCENDANT","title":"<code>ACTIVEDESCENDANT = 'activedescendant'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.ATOMIC","title":"<code>ATOMIC = 'atomic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.AUTOCOMPLETE","title":"<code>AUTOCOMPLETE = 'autocomplete'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.BUSY","title":"<code>BUSY = 'busy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.CHECKED","title":"<code>CHECKED = 'checked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.CONTROLS","title":"<code>CONTROLS = 'controls'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.DESCRIBEDBY","title":"<code>DESCRIBEDBY = 'describedby'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.DETAILS","title":"<code>DETAILS = 'details'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.DISABLED","title":"<code>DISABLED = 'disabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.EDITABLE","title":"<code>EDITABLE = 'editable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.ERRORMESSAGE","title":"<code>ERRORMESSAGE = 'errormessage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.EXPANDED","title":"<code>EXPANDED = 'expanded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.FLOWTO","title":"<code>FLOWTO = 'flowto'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.FOCUSABLE","title":"<code>FOCUSABLE = 'focusable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.FOCUSED","title":"<code>FOCUSED = 'focused'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.HAS_POPUP","title":"<code>HAS_POPUP = 'hasPopup'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.HIDDEN","title":"<code>HIDDEN = 'hidden'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.HIDDEN_ROOT","title":"<code>HIDDEN_ROOT = 'hiddenRoot'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.INVALID","title":"<code>INVALID = 'invalid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.KEYSHORTCUTS","title":"<code>KEYSHORTCUTS = 'keyshortcuts'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.LABELLEDBY","title":"<code>LABELLEDBY = 'labelledby'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.LEVEL","title":"<code>LEVEL = 'level'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.LIVE","title":"<code>LIVE = 'live'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.MODAL","title":"<code>MODAL = 'modal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.MULTILINE","title":"<code>MULTILINE = 'multiline'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.MULTISELECTABLE","title":"<code>MULTISELECTABLE = 'multiselectable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.ORIENTATION","title":"<code>ORIENTATION = 'orientation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.OWNS","title":"<code>OWNS = 'owns'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.PRESSED","title":"<code>PRESSED = 'pressed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.READONLY","title":"<code>READONLY = 'readonly'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.RELEVANT","title":"<code>RELEVANT = 'relevant'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.REQUIRED","title":"<code>REQUIRED = 'required'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.ROLEDESCRIPTION","title":"<code>ROLEDESCRIPTION = 'roledescription'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.ROOT","title":"<code>ROOT = 'root'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.SELECTED","title":"<code>SELECTED = 'selected'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.SETTABLE","title":"<code>SETTABLE = 'settable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.URL","title":"<code>URL = 'url'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.VALUEMAX","title":"<code>VALUEMAX = 'valuemax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.VALUEMIN","title":"<code>VALUEMIN = 'valuemin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.VALUETEXT","title":"<code>VALUETEXT = 'valuetext'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AXPropertyName:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXPropertyName.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXRelatedNode","title":"<code>AXRelatedNode</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@dataclass\nclass AXRelatedNode:\n    #: The BackendNodeId of the related DOM node.\n    backend_dom_node_id: dom.BackendNodeId\n\n    #: The IDRef value provided, if any.\n    idref: typing.Optional[str] = None\n\n    #: The text alternative of this node in the current context.\n    text: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"backendDOMNodeId\"] = self.backend_dom_node_id.to_json()\n        if self.idref is not None:\n            json[\"idref\"] = self.idref\n        if self.text is not None:\n            json[\"text\"] = self.text\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AXRelatedNode:\n        return cls(\n            backend_dom_node_id=dom.BackendNodeId.from_json(json[\"backendDOMNodeId\"]),\n            idref=str(json[\"idref\"]) if json.get(\"idref\", None) is not None else None,\n            text=str(json[\"text\"]) if json.get(\"text\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXRelatedNode.backend_dom_node_id","title":"<code>backend_dom_node_id: dom.BackendNodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXRelatedNode.idref","title":"<code>idref: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXRelatedNode.text","title":"<code>text: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXRelatedNode.__init__","title":"<code>__init__(backend_dom_node_id, idref=None, text=None)</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXRelatedNode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AXRelatedNode:\n    return cls(\n        backend_dom_node_id=dom.BackendNodeId.from_json(json[\"backendDOMNodeId\"]),\n        idref=str(json[\"idref\"]) if json.get(\"idref\", None) is not None else None,\n        text=str(json[\"text\"]) if json.get(\"text\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXRelatedNode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"backendDOMNodeId\"] = self.backend_dom_node_id.to_json()\n    if self.idref is not None:\n        json[\"idref\"] = self.idref\n    if self.text is not None:\n        json[\"text\"] = self.text\n    return json\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValue","title":"<code>AXValue</code>  <code>dataclass</code>","text":"<p>A single computed AX property.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@dataclass\nclass AXValue:\n    \"\"\"\n    A single computed AX property.\n    \"\"\"\n\n    #: The type of this value.\n    type_: AXValueType\n\n    #: The computed value of this property.\n    value: typing.Optional[typing.Any] = None\n\n    #: One or more related nodes, if applicable.\n    related_nodes: typing.Optional[typing.List[AXRelatedNode]] = None\n\n    #: The sources which contributed to the computation of this property.\n    sources: typing.Optional[typing.List[AXValueSource]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_.to_json()\n        if self.value is not None:\n            json[\"value\"] = self.value\n        if self.related_nodes is not None:\n            json[\"relatedNodes\"] = [i.to_json() for i in self.related_nodes]\n        if self.sources is not None:\n            json[\"sources\"] = [i.to_json() for i in self.sources]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AXValue:\n        return cls(\n            type_=AXValueType.from_json(json[\"type\"]),\n            value=json[\"value\"] if json.get(\"value\", None) is not None else None,\n            related_nodes=(\n                [AXRelatedNode.from_json(i) for i in json[\"relatedNodes\"]]\n                if json.get(\"relatedNodes\", None) is not None\n                else None\n            ),\n            sources=(\n                [AXValueSource.from_json(i) for i in json[\"sources\"]]\n                if json.get(\"sources\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValue.related_nodes","title":"<code>related_nodes: typing.Optional[typing.List[AXRelatedNode]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValue.sources","title":"<code>sources: typing.Optional[typing.List[AXValueSource]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValue.type_","title":"<code>type_: AXValueType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValue.value","title":"<code>value: typing.Optional[typing.Any] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValue.__init__","title":"<code>__init__(type_, value=None, related_nodes=None, sources=None)</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValue.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AXValue:\n    return cls(\n        type_=AXValueType.from_json(json[\"type\"]),\n        value=json[\"value\"] if json.get(\"value\", None) is not None else None,\n        related_nodes=(\n            [AXRelatedNode.from_json(i) for i in json[\"relatedNodes\"]]\n            if json.get(\"relatedNodes\", None) is not None\n            else None\n        ),\n        sources=(\n            [AXValueSource.from_json(i) for i in json[\"sources\"]]\n            if json.get(\"sources\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValue.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_.to_json()\n    if self.value is not None:\n        json[\"value\"] = self.value\n    if self.related_nodes is not None:\n        json[\"relatedNodes\"] = [i.to_json() for i in self.related_nodes]\n    if self.sources is not None:\n        json[\"sources\"] = [i.to_json() for i in self.sources]\n    return json\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType","title":"<code>AXValueNativeSourceType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of possible native property sources (as a subtype of a particular AXValueSourceType).</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>class AXValueNativeSourceType(enum.Enum):\n    \"\"\"\n    Enum of possible native property sources (as a subtype of a particular AXValueSourceType).\n    \"\"\"\n\n    DESCRIPTION = \"description\"\n    FIGCAPTION = \"figcaption\"\n    LABEL = \"label\"\n    LABELFOR = \"labelfor\"\n    LABELWRAPPED = \"labelwrapped\"\n    LEGEND = \"legend\"\n    RUBYANNOTATION = \"rubyannotation\"\n    TABLECAPTION = \"tablecaption\"\n    TITLE = \"title\"\n    OTHER = \"other\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AXValueNativeSourceType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.DESCRIPTION","title":"<code>DESCRIPTION = 'description'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.FIGCAPTION","title":"<code>FIGCAPTION = 'figcaption'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.LABEL","title":"<code>LABEL = 'label'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.LABELFOR","title":"<code>LABELFOR = 'labelfor'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.LABELWRAPPED","title":"<code>LABELWRAPPED = 'labelwrapped'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.LEGEND","title":"<code>LEGEND = 'legend'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.OTHER","title":"<code>OTHER = 'other'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.RUBYANNOTATION","title":"<code>RUBYANNOTATION = 'rubyannotation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.TABLECAPTION","title":"<code>TABLECAPTION = 'tablecaption'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.TITLE","title":"<code>TITLE = 'title'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AXValueNativeSourceType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueNativeSourceType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource","title":"<code>AXValueSource</code>  <code>dataclass</code>","text":"<p>A single source for a computed AX property.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@dataclass\nclass AXValueSource:\n    \"\"\"\n    A single source for a computed AX property.\n    \"\"\"\n\n    #: What type of source this is.\n    type_: AXValueSourceType\n\n    #: The value of this property source.\n    value: typing.Optional[AXValue] = None\n\n    #: The name of the relevant attribute, if any.\n    attribute: typing.Optional[str] = None\n\n    #: The value of the relevant attribute, if any.\n    attribute_value: typing.Optional[AXValue] = None\n\n    #: Whether this source is superseded by a higher priority source.\n    superseded: typing.Optional[bool] = None\n\n    #: The native markup source for this value, e.g. a ``&lt;label&gt;`` element.\n    native_source: typing.Optional[AXValueNativeSourceType] = None\n\n    #: The value, such as a node or node list, of the native source.\n    native_source_value: typing.Optional[AXValue] = None\n\n    #: Whether the value for this property is invalid.\n    invalid: typing.Optional[bool] = None\n\n    #: Reason for the value being invalid, if it is.\n    invalid_reason: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_.to_json()\n        if self.value is not None:\n            json[\"value\"] = self.value.to_json()\n        if self.attribute is not None:\n            json[\"attribute\"] = self.attribute\n        if self.attribute_value is not None:\n            json[\"attributeValue\"] = self.attribute_value.to_json()\n        if self.superseded is not None:\n            json[\"superseded\"] = self.superseded\n        if self.native_source is not None:\n            json[\"nativeSource\"] = self.native_source.to_json()\n        if self.native_source_value is not None:\n            json[\"nativeSourceValue\"] = self.native_source_value.to_json()\n        if self.invalid is not None:\n            json[\"invalid\"] = self.invalid\n        if self.invalid_reason is not None:\n            json[\"invalidReason\"] = self.invalid_reason\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AXValueSource:\n        return cls(\n            type_=AXValueSourceType.from_json(json[\"type\"]),\n            value=(\n                AXValue.from_json(json[\"value\"])\n                if json.get(\"value\", None) is not None\n                else None\n            ),\n            attribute=(\n                str(json[\"attribute\"])\n                if json.get(\"attribute\", None) is not None\n                else None\n            ),\n            attribute_value=(\n                AXValue.from_json(json[\"attributeValue\"])\n                if json.get(\"attributeValue\", None) is not None\n                else None\n            ),\n            superseded=(\n                bool(json[\"superseded\"])\n                if json.get(\"superseded\", None) is not None\n                else None\n            ),\n            native_source=(\n                AXValueNativeSourceType.from_json(json[\"nativeSource\"])\n                if json.get(\"nativeSource\", None) is not None\n                else None\n            ),\n            native_source_value=(\n                AXValue.from_json(json[\"nativeSourceValue\"])\n                if json.get(\"nativeSourceValue\", None) is not None\n                else None\n            ),\n            invalid=(\n                bool(json[\"invalid\"]) if json.get(\"invalid\", None) is not None else None\n            ),\n            invalid_reason=(\n                str(json[\"invalidReason\"])\n                if json.get(\"invalidReason\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.attribute","title":"<code>attribute: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.attribute_value","title":"<code>attribute_value: typing.Optional[AXValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.invalid","title":"<code>invalid: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.invalid_reason","title":"<code>invalid_reason: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.native_source","title":"<code>native_source: typing.Optional[AXValueNativeSourceType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.native_source_value","title":"<code>native_source_value: typing.Optional[AXValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.superseded","title":"<code>superseded: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.type_","title":"<code>type_: AXValueSourceType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.value","title":"<code>value: typing.Optional[AXValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.__init__","title":"<code>__init__(type_, value=None, attribute=None, attribute_value=None, superseded=None, native_source=None, native_source_value=None, invalid=None, invalid_reason=None)</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AXValueSource:\n    return cls(\n        type_=AXValueSourceType.from_json(json[\"type\"]),\n        value=(\n            AXValue.from_json(json[\"value\"])\n            if json.get(\"value\", None) is not None\n            else None\n        ),\n        attribute=(\n            str(json[\"attribute\"])\n            if json.get(\"attribute\", None) is not None\n            else None\n        ),\n        attribute_value=(\n            AXValue.from_json(json[\"attributeValue\"])\n            if json.get(\"attributeValue\", None) is not None\n            else None\n        ),\n        superseded=(\n            bool(json[\"superseded\"])\n            if json.get(\"superseded\", None) is not None\n            else None\n        ),\n        native_source=(\n            AXValueNativeSourceType.from_json(json[\"nativeSource\"])\n            if json.get(\"nativeSource\", None) is not None\n            else None\n        ),\n        native_source_value=(\n            AXValue.from_json(json[\"nativeSourceValue\"])\n            if json.get(\"nativeSourceValue\", None) is not None\n            else None\n        ),\n        invalid=(\n            bool(json[\"invalid\"]) if json.get(\"invalid\", None) is not None else None\n        ),\n        invalid_reason=(\n            str(json[\"invalidReason\"])\n            if json.get(\"invalidReason\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSource.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_.to_json()\n    if self.value is not None:\n        json[\"value\"] = self.value.to_json()\n    if self.attribute is not None:\n        json[\"attribute\"] = self.attribute\n    if self.attribute_value is not None:\n        json[\"attributeValue\"] = self.attribute_value.to_json()\n    if self.superseded is not None:\n        json[\"superseded\"] = self.superseded\n    if self.native_source is not None:\n        json[\"nativeSource\"] = self.native_source.to_json()\n    if self.native_source_value is not None:\n        json[\"nativeSourceValue\"] = self.native_source_value.to_json()\n    if self.invalid is not None:\n        json[\"invalid\"] = self.invalid\n    if self.invalid_reason is not None:\n        json[\"invalidReason\"] = self.invalid_reason\n    return json\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSourceType","title":"<code>AXValueSourceType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of possible property sources.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>class AXValueSourceType(enum.Enum):\n    \"\"\"\n    Enum of possible property sources.\n    \"\"\"\n\n    ATTRIBUTE = \"attribute\"\n    IMPLICIT = \"implicit\"\n    STYLE = \"style\"\n    CONTENTS = \"contents\"\n    PLACEHOLDER = \"placeholder\"\n    RELATED_ELEMENT = \"relatedElement\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AXValueSourceType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSourceType.ATTRIBUTE","title":"<code>ATTRIBUTE = 'attribute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSourceType.CONTENTS","title":"<code>CONTENTS = 'contents'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSourceType.IMPLICIT","title":"<code>IMPLICIT = 'implicit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSourceType.PLACEHOLDER","title":"<code>PLACEHOLDER = 'placeholder'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSourceType.RELATED_ELEMENT","title":"<code>RELATED_ELEMENT = 'relatedElement'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSourceType.STYLE","title":"<code>STYLE = 'style'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSourceType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AXValueSourceType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueSourceType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType","title":"<code>AXValueType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of possible property types.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>class AXValueType(enum.Enum):\n    \"\"\"\n    Enum of possible property types.\n    \"\"\"\n\n    BOOLEAN = \"boolean\"\n    TRISTATE = \"tristate\"\n    BOOLEAN_OR_UNDEFINED = \"booleanOrUndefined\"\n    IDREF = \"idref\"\n    IDREF_LIST = \"idrefList\"\n    INTEGER = \"integer\"\n    NODE = \"node\"\n    NODE_LIST = \"nodeList\"\n    NUMBER = \"number\"\n    STRING = \"string\"\n    COMPUTED_STRING = \"computedString\"\n    TOKEN = \"token\"\n    TOKEN_LIST = \"tokenList\"\n    DOM_RELATION = \"domRelation\"\n    ROLE = \"role\"\n    INTERNAL_ROLE = \"internalRole\"\n    VALUE_UNDEFINED = \"valueUndefined\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AXValueType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.BOOLEAN","title":"<code>BOOLEAN = 'boolean'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.BOOLEAN_OR_UNDEFINED","title":"<code>BOOLEAN_OR_UNDEFINED = 'booleanOrUndefined'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.COMPUTED_STRING","title":"<code>COMPUTED_STRING = 'computedString'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.DOM_RELATION","title":"<code>DOM_RELATION = 'domRelation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.IDREF","title":"<code>IDREF = 'idref'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.IDREF_LIST","title":"<code>IDREF_LIST = 'idrefList'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.INTEGER","title":"<code>INTEGER = 'integer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.INTERNAL_ROLE","title":"<code>INTERNAL_ROLE = 'internalRole'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.NODE","title":"<code>NODE = 'node'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.NODE_LIST","title":"<code>NODE_LIST = 'nodeList'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.NUMBER","title":"<code>NUMBER = 'number'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.ROLE","title":"<code>ROLE = 'role'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.STRING","title":"<code>STRING = 'string'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.TOKEN","title":"<code>TOKEN = 'token'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.TOKEN_LIST","title":"<code>TOKEN_LIST = 'tokenList'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.TRISTATE","title":"<code>TRISTATE = 'tristate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.VALUE_UNDEFINED","title":"<code>VALUE_UNDEFINED = 'valueUndefined'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AXValueType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.AXValueType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.LoadComplete","title":"<code>LoadComplete</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>The loadComplete event mirrors the load complete event sent by the browser to assistive technology when the web page has finished loading.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@event_class(\"Accessibility.loadComplete\")\n@dataclass\nclass LoadComplete:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    The loadComplete event mirrors the load complete event sent by the browser to assistive\n    technology when the web page has finished loading.\n    \"\"\"\n\n    #: New document root node.\n    root: AXNode\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LoadComplete:\n        return cls(root=AXNode.from_json(json[\"root\"]))\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.LoadComplete.root","title":"<code>root: AXNode</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.LoadComplete.__init__","title":"<code>__init__(root)</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.LoadComplete.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LoadComplete:\n    return cls(root=AXNode.from_json(json[\"root\"]))\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.NodesUpdated","title":"<code>NodesUpdated</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>The nodesUpdated event is sent every time a previously requested node has changed the in tree.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@event_class(\"Accessibility.nodesUpdated\")\n@dataclass\nclass NodesUpdated:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    The nodesUpdated event is sent every time a previously requested node has changed the in tree.\n    \"\"\"\n\n    #: Updated node data.\n    nodes: typing.List[AXNode]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NodesUpdated:\n        return cls(nodes=[AXNode.from_json(i) for i in json[\"nodes\"]])\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.NodesUpdated.nodes","title":"<code>nodes: typing.List[AXNode]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.NodesUpdated.__init__","title":"<code>__init__(nodes)</code>","text":""},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.NodesUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NodesUpdated:\n    return cls(nodes=[AXNode.from_json(i) for i in json[\"nodes\"]])\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.disable","title":"<code>disable()</code>","text":"<p>Disables the accessibility domain.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables the accessibility domain.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Accessibility.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.enable","title":"<code>enable()</code>","text":"<p>Enables the accessibility domain which causes <code>AXNodeId</code>'s to remain consistent between method calls. This turns on accessibility for the page, which can impact performance until accessibility is disabled.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables the accessibility domain which causes ``AXNodeId``'s to remain consistent between method calls.\n    This turns on accessibility for the page, which can impact performance until accessibility is disabled.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Accessibility.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.get_ax_node_and_ancestors","title":"<code>get_ax_node_and_ancestors(node_id=None, backend_node_id=None, object_id=None)</code>","text":"<p>Fetches a node and all ancestors up to and including the root. Requires <code>enable()</code> to have been called previously.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node to get.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node to get.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node wrapper to get.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[AXNode]]</code> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def get_ax_node_and_ancestors(\n    node_id: typing.Optional[dom.NodeId] = None,\n    backend_node_id: typing.Optional[dom.BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[AXNode]]:\n    \"\"\"\n    Fetches a node and all ancestors up to and including the root.\n    Requires ``enable()`` to have been called previously.\n\n    **EXPERIMENTAL**\n\n    :param node_id: *(Optional)* Identifier of the node to get.\n    :param backend_node_id: *(Optional)* Identifier of the backend node to get.\n    :param object_id: *(Optional)* JavaScript object id of the node wrapper to get.\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Accessibility.getAXNodeAndAncestors\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [AXNode.from_json(i) for i in json[\"nodes\"]]\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.get_child_ax_nodes","title":"<code>get_child_ax_nodes(id_, frame_id=None)</code>","text":"<p>Fetches a particular accessibility node by AXNodeId. Requires <code>enable()</code> to have been called previously.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>AXNodeId</code> required <code>frame_id</code> <code>Optional[FrameId]</code> <p>(Optional) The frame in whose document the node resides. If omitted, the root frame is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[AXNode]]</code> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def get_child_ax_nodes(\n    id_: AXNodeId, frame_id: typing.Optional[page.FrameId] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[AXNode]]:\n    \"\"\"\n    Fetches a particular accessibility node by AXNodeId.\n    Requires ``enable()`` to have been called previously.\n\n    **EXPERIMENTAL**\n\n    :param id_:\n    :param frame_id: *(Optional)* The frame in whose document the node resides. If omitted, the root frame is used.\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"id\"] = id_.to_json()\n    if frame_id is not None:\n        params[\"frameId\"] = frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Accessibility.getChildAXNodes\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [AXNode.from_json(i) for i in json[\"nodes\"]]\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.get_full_ax_tree","title":"<code>get_full_ax_tree(depth=None, frame_id=None)</code>","text":"<p>Fetches the entire accessibility tree for the root Document</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>depth</code> <code>Optional[int]</code> <p>(Optional) The maximum depth at which descendants of the root node should be retrieved. If omitted, the full tree is returned.</p> <code>None</code> <code>frame_id</code> <code>Optional[FrameId]</code> <p>(Optional) The frame for whose document the AX tree should be retrieved. If omitted, the root frame is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[AXNode]]</code> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def get_full_ax_tree(\n    depth: typing.Optional[int] = None, frame_id: typing.Optional[page.FrameId] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[AXNode]]:\n    \"\"\"\n    Fetches the entire accessibility tree for the root Document\n\n    **EXPERIMENTAL**\n\n    :param depth: *(Optional)* The maximum depth at which descendants of the root node should be retrieved. If omitted, the full tree is returned.\n    :param frame_id: *(Optional)* The frame for whose document the AX tree should be retrieved. If omitted, the root frame is used.\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if depth is not None:\n        params[\"depth\"] = depth\n    if frame_id is not None:\n        params[\"frameId\"] = frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Accessibility.getFullAXTree\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [AXNode.from_json(i) for i in json[\"nodes\"]]\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.get_partial_ax_tree","title":"<code>get_partial_ax_tree(node_id=None, backend_node_id=None, object_id=None, fetch_relatives=None)</code>","text":"<p>Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node to get the partial accessibility tree for.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node to get the partial accessibility tree for.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node wrapper to get the partial accessibility tree for.</p> <code>None</code> <code>fetch_relatives</code> <code>Optional[bool]</code> <p>(Optional) Whether to fetch this node's ancestors, siblings and children. Defaults to true.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[AXNode]]</code> <p>The <code>Accessibility.AXNode</code> for this DOM node, if it exists, plus its ancestors, siblings and children, if requested.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def get_partial_ax_tree(\n    node_id: typing.Optional[dom.NodeId] = None,\n    backend_node_id: typing.Optional[dom.BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n    fetch_relatives: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[AXNode]]:\n    \"\"\"\n    Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.\n\n    **EXPERIMENTAL**\n\n    :param node_id: *(Optional)* Identifier of the node to get the partial accessibility tree for.\n    :param backend_node_id: *(Optional)* Identifier of the backend node to get the partial accessibility tree for.\n    :param object_id: *(Optional)* JavaScript object id of the node wrapper to get the partial accessibility tree for.\n    :param fetch_relatives: *(Optional)* Whether to fetch this node's ancestors, siblings and children. Defaults to true.\n    :returns: The ``Accessibility.AXNode`` for this DOM node, if it exists, plus its ancestors, siblings and children, if requested.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    if fetch_relatives is not None:\n        params[\"fetchRelatives\"] = fetch_relatives\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Accessibility.getPartialAXTree\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [AXNode.from_json(i) for i in json[\"nodes\"]]\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.get_root_ax_node","title":"<code>get_root_ax_node(frame_id=None)</code>","text":"<p>Fetches the root node. Requires <code>enable()</code> to have been called previously.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>Optional[FrameId]</code> <p>(Optional) The frame in whose document the node resides. If omitted, the root frame is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, AXNode]</code> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def get_root_ax_node(\n    frame_id: typing.Optional[page.FrameId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, AXNode]:\n    \"\"\"\n    Fetches the root node.\n    Requires ``enable()`` to have been called previously.\n\n    **EXPERIMENTAL**\n\n    :param frame_id: *(Optional)* The frame in whose document the node resides. If omitted, the root frame is used.\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if frame_id is not None:\n        params[\"frameId\"] = frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Accessibility.getRootAXNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return AXNode.from_json(json[\"node\"])\n</code></pre>"},{"location":"reference/cdp/accessibility/#zendriver.cdp.accessibility.query_ax_tree","title":"<code>query_ax_tree(node_id=None, backend_node_id=None, object_id=None, accessible_name=None, role=None)</code>","text":"<p>Query a DOM node's accessibility subtree for accessible name and role. This command computes the name and role for all nodes in the subtree, including those that are ignored for accessibility, and returns those that match the specified name and role. If no DOM node is specified, or the DOM node does not exist, the command returns an error. If neither <code>accessibleName</code> or <code>role</code> is specified, it returns all the accessibility nodes in the subtree.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node for the root to query.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node for the root to query.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node wrapper for the root to query.</p> <code>None</code> <code>accessible_name</code> <code>Optional[str]</code> <p>(Optional) Find nodes with this computed name.</p> <code>None</code> <code>role</code> <code>Optional[str]</code> <p>(Optional) Find nodes with this computed role.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[AXNode]]</code> <p>A list of <code>Accessibility.AXNode</code> matching the specified attributes, including nodes that are ignored for accessibility.</p> Source code in <code>zendriver/cdp/accessibility.py</code> <pre><code>def query_ax_tree(\n    node_id: typing.Optional[dom.NodeId] = None,\n    backend_node_id: typing.Optional[dom.BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n    accessible_name: typing.Optional[str] = None,\n    role: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[AXNode]]:\n    \"\"\"\n    Query a DOM node's accessibility subtree for accessible name and role.\n    This command computes the name and role for all nodes in the subtree, including those that are\n    ignored for accessibility, and returns those that match the specified name and role. If no DOM\n    node is specified, or the DOM node does not exist, the command returns an error. If neither\n    ``accessibleName`` or ``role`` is specified, it returns all the accessibility nodes in the subtree.\n\n    **EXPERIMENTAL**\n\n    :param node_id: *(Optional)* Identifier of the node for the root to query.\n    :param backend_node_id: *(Optional)* Identifier of the backend node for the root to query.\n    :param object_id: *(Optional)* JavaScript object id of the node wrapper for the root to query.\n    :param accessible_name: *(Optional)* Find nodes with this computed name.\n    :param role: *(Optional)* Find nodes with this computed role.\n    :returns: A list of ``Accessibility.AXNode`` matching the specified attributes, including nodes that are ignored for accessibility.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    if accessible_name is not None:\n        params[\"accessibleName\"] = accessible_name\n    if role is not None:\n        params[\"role\"] = role\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Accessibility.queryAXTree\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [AXNode.from_json(i) for i in json[\"nodes\"]]\n</code></pre>"},{"location":"reference/cdp/animation/","title":"animation","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation","title":"<code>Animation</code>  <code>dataclass</code>","text":"<p>Animation instance.</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@dataclass\nclass Animation:\n    \"\"\"\n    Animation instance.\n    \"\"\"\n\n    #: ``Animation``'s id.\n    id_: str\n\n    #: ``Animation``'s name.\n    name: str\n\n    #: ``Animation``'s internal paused state.\n    paused_state: bool\n\n    #: ``Animation``'s play state.\n    play_state: str\n\n    #: ``Animation``'s playback rate.\n    playback_rate: float\n\n    #: ``Animation``'s start time.\n    #: Milliseconds for time based animations and\n    #: percentage [0 - 100] for scroll driven animations\n    #: (i.e. when viewOrScrollTimeline exists).\n    start_time: float\n\n    #: ``Animation``'s current time.\n    current_time: float\n\n    #: Animation type of ``Animation``.\n    type_: str\n\n    #: ``Animation``'s source animation node.\n    source: typing.Optional[AnimationEffect] = None\n\n    #: A unique ID for ``Animation`` representing the sources that triggered this CSS\n    #: animation/transition.\n    css_id: typing.Optional[str] = None\n\n    #: View or scroll timeline\n    view_or_scroll_timeline: typing.Optional[ViewOrScrollTimeline] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"id\"] = self.id_\n        json[\"name\"] = self.name\n        json[\"pausedState\"] = self.paused_state\n        json[\"playState\"] = self.play_state\n        json[\"playbackRate\"] = self.playback_rate\n        json[\"startTime\"] = self.start_time\n        json[\"currentTime\"] = self.current_time\n        json[\"type\"] = self.type_\n        if self.source is not None:\n            json[\"source\"] = self.source.to_json()\n        if self.css_id is not None:\n            json[\"cssId\"] = self.css_id\n        if self.view_or_scroll_timeline is not None:\n            json[\"viewOrScrollTimeline\"] = self.view_or_scroll_timeline.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Animation:\n        return cls(\n            id_=str(json[\"id\"]),\n            name=str(json[\"name\"]),\n            paused_state=bool(json[\"pausedState\"]),\n            play_state=str(json[\"playState\"]),\n            playback_rate=float(json[\"playbackRate\"]),\n            start_time=float(json[\"startTime\"]),\n            current_time=float(json[\"currentTime\"]),\n            type_=str(json[\"type\"]),\n            source=(\n                AnimationEffect.from_json(json[\"source\"])\n                if json.get(\"source\", None) is not None\n                else None\n            ),\n            css_id=str(json[\"cssId\"]) if json.get(\"cssId\", None) is not None else None,\n            view_or_scroll_timeline=(\n                ViewOrScrollTimeline.from_json(json[\"viewOrScrollTimeline\"])\n                if json.get(\"viewOrScrollTimeline\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.css_id","title":"<code>css_id: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.current_time","title":"<code>current_time: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.id_","title":"<code>id_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.paused_state","title":"<code>paused_state: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.play_state","title":"<code>play_state: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.playback_rate","title":"<code>playback_rate: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.source","title":"<code>source: typing.Optional[AnimationEffect] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.start_time","title":"<code>start_time: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.view_or_scroll_timeline","title":"<code>view_or_scroll_timeline: typing.Optional[ViewOrScrollTimeline] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.__init__","title":"<code>__init__(id_, name, paused_state, play_state, playback_rate, start_time, current_time, type_, source=None, css_id=None, view_or_scroll_timeline=None)</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Animation:\n    return cls(\n        id_=str(json[\"id\"]),\n        name=str(json[\"name\"]),\n        paused_state=bool(json[\"pausedState\"]),\n        play_state=str(json[\"playState\"]),\n        playback_rate=float(json[\"playbackRate\"]),\n        start_time=float(json[\"startTime\"]),\n        current_time=float(json[\"currentTime\"]),\n        type_=str(json[\"type\"]),\n        source=(\n            AnimationEffect.from_json(json[\"source\"])\n            if json.get(\"source\", None) is not None\n            else None\n        ),\n        css_id=str(json[\"cssId\"]) if json.get(\"cssId\", None) is not None else None,\n        view_or_scroll_timeline=(\n            ViewOrScrollTimeline.from_json(json[\"viewOrScrollTimeline\"])\n            if json.get(\"viewOrScrollTimeline\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.Animation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"id\"] = self.id_\n    json[\"name\"] = self.name\n    json[\"pausedState\"] = self.paused_state\n    json[\"playState\"] = self.play_state\n    json[\"playbackRate\"] = self.playback_rate\n    json[\"startTime\"] = self.start_time\n    json[\"currentTime\"] = self.current_time\n    json[\"type\"] = self.type_\n    if self.source is not None:\n        json[\"source\"] = self.source.to_json()\n    if self.css_id is not None:\n        json[\"cssId\"] = self.css_id\n    if self.view_or_scroll_timeline is not None:\n        json[\"viewOrScrollTimeline\"] = self.view_or_scroll_timeline.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationCanceled","title":"<code>AnimationCanceled</code>  <code>dataclass</code>","text":"<p>Event for when an animation has been cancelled.</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@event_class(\"Animation.animationCanceled\")\n@dataclass\nclass AnimationCanceled:\n    \"\"\"\n    Event for when an animation has been cancelled.\n    \"\"\"\n\n    #: Id of the animation that was cancelled.\n    id_: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AnimationCanceled:\n        return cls(id_=str(json[\"id\"]))\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationCanceled.id_","title":"<code>id_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationCanceled.__init__","title":"<code>__init__(id_)</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationCanceled.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AnimationCanceled:\n    return cls(id_=str(json[\"id\"]))\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationCreated","title":"<code>AnimationCreated</code>  <code>dataclass</code>","text":"<p>Event for each animation that has been created.</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@event_class(\"Animation.animationCreated\")\n@dataclass\nclass AnimationCreated:\n    \"\"\"\n    Event for each animation that has been created.\n    \"\"\"\n\n    #: Id of the animation that was created.\n    id_: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AnimationCreated:\n        return cls(id_=str(json[\"id\"]))\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationCreated.id_","title":"<code>id_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationCreated.__init__","title":"<code>__init__(id_)</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AnimationCreated:\n    return cls(id_=str(json[\"id\"]))\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect","title":"<code>AnimationEffect</code>  <code>dataclass</code>","text":"<p>AnimationEffect instance</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@dataclass\nclass AnimationEffect:\n    \"\"\"\n    AnimationEffect instance\n    \"\"\"\n\n    #: ``AnimationEffect``'s delay.\n    delay: float\n\n    #: ``AnimationEffect``'s end delay.\n    end_delay: float\n\n    #: ``AnimationEffect``'s iteration start.\n    iteration_start: float\n\n    #: ``AnimationEffect``'s iterations.\n    iterations: float\n\n    #: ``AnimationEffect``'s iteration duration.\n    #: Milliseconds for time based animations and\n    #: percentage [0 - 100] for scroll driven animations\n    #: (i.e. when viewOrScrollTimeline exists).\n    duration: float\n\n    #: ``AnimationEffect``'s playback direction.\n    direction: str\n\n    #: ``AnimationEffect``'s fill mode.\n    fill: str\n\n    #: ``AnimationEffect``'s timing function.\n    easing: str\n\n    #: ``AnimationEffect``'s target node.\n    backend_node_id: typing.Optional[dom.BackendNodeId] = None\n\n    #: ``AnimationEffect``'s keyframes.\n    keyframes_rule: typing.Optional[KeyframesRule] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"delay\"] = self.delay\n        json[\"endDelay\"] = self.end_delay\n        json[\"iterationStart\"] = self.iteration_start\n        json[\"iterations\"] = self.iterations\n        json[\"duration\"] = self.duration\n        json[\"direction\"] = self.direction\n        json[\"fill\"] = self.fill\n        json[\"easing\"] = self.easing\n        if self.backend_node_id is not None:\n            json[\"backendNodeId\"] = self.backend_node_id.to_json()\n        if self.keyframes_rule is not None:\n            json[\"keyframesRule\"] = self.keyframes_rule.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AnimationEffect:\n        return cls(\n            delay=float(json[\"delay\"]),\n            end_delay=float(json[\"endDelay\"]),\n            iteration_start=float(json[\"iterationStart\"]),\n            iterations=float(json[\"iterations\"]),\n            duration=float(json[\"duration\"]),\n            direction=str(json[\"direction\"]),\n            fill=str(json[\"fill\"]),\n            easing=str(json[\"easing\"]),\n            backend_node_id=(\n                dom.BackendNodeId.from_json(json[\"backendNodeId\"])\n                if json.get(\"backendNodeId\", None) is not None\n                else None\n            ),\n            keyframes_rule=(\n                KeyframesRule.from_json(json[\"keyframesRule\"])\n                if json.get(\"keyframesRule\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.backend_node_id","title":"<code>backend_node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.delay","title":"<code>delay: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.direction","title":"<code>direction: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.duration","title":"<code>duration: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.easing","title":"<code>easing: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.end_delay","title":"<code>end_delay: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.fill","title":"<code>fill: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.iteration_start","title":"<code>iteration_start: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.iterations","title":"<code>iterations: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.keyframes_rule","title":"<code>keyframes_rule: typing.Optional[KeyframesRule] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.__init__","title":"<code>__init__(delay, end_delay, iteration_start, iterations, duration, direction, fill, easing, backend_node_id=None, keyframes_rule=None)</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AnimationEffect:\n    return cls(\n        delay=float(json[\"delay\"]),\n        end_delay=float(json[\"endDelay\"]),\n        iteration_start=float(json[\"iterationStart\"]),\n        iterations=float(json[\"iterations\"]),\n        duration=float(json[\"duration\"]),\n        direction=str(json[\"direction\"]),\n        fill=str(json[\"fill\"]),\n        easing=str(json[\"easing\"]),\n        backend_node_id=(\n            dom.BackendNodeId.from_json(json[\"backendNodeId\"])\n            if json.get(\"backendNodeId\", None) is not None\n            else None\n        ),\n        keyframes_rule=(\n            KeyframesRule.from_json(json[\"keyframesRule\"])\n            if json.get(\"keyframesRule\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationEffect.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"delay\"] = self.delay\n    json[\"endDelay\"] = self.end_delay\n    json[\"iterationStart\"] = self.iteration_start\n    json[\"iterations\"] = self.iterations\n    json[\"duration\"] = self.duration\n    json[\"direction\"] = self.direction\n    json[\"fill\"] = self.fill\n    json[\"easing\"] = self.easing\n    if self.backend_node_id is not None:\n        json[\"backendNodeId\"] = self.backend_node_id.to_json()\n    if self.keyframes_rule is not None:\n        json[\"keyframesRule\"] = self.keyframes_rule.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationStarted","title":"<code>AnimationStarted</code>  <code>dataclass</code>","text":"<p>Event for animation that has been started.</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@event_class(\"Animation.animationStarted\")\n@dataclass\nclass AnimationStarted:\n    \"\"\"\n    Event for animation that has been started.\n    \"\"\"\n\n    #: Animation that was started.\n    animation: Animation\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AnimationStarted:\n        return cls(animation=Animation.from_json(json[\"animation\"]))\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationStarted.animation","title":"<code>animation: Animation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationStarted.__init__","title":"<code>__init__(animation)</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationStarted.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AnimationStarted:\n    return cls(animation=Animation.from_json(json[\"animation\"]))\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationUpdated","title":"<code>AnimationUpdated</code>  <code>dataclass</code>","text":"<p>Event for animation that has been updated.</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@event_class(\"Animation.animationUpdated\")\n@dataclass\nclass AnimationUpdated:\n    \"\"\"\n    Event for animation that has been updated.\n    \"\"\"\n\n    #: Animation that was updated.\n    animation: Animation\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AnimationUpdated:\n        return cls(animation=Animation.from_json(json[\"animation\"]))\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationUpdated.animation","title":"<code>animation: Animation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationUpdated.__init__","title":"<code>__init__(animation)</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.AnimationUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AnimationUpdated:\n    return cls(animation=Animation.from_json(json[\"animation\"]))\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframeStyle","title":"<code>KeyframeStyle</code>  <code>dataclass</code>","text":"<p>Keyframe Style</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@dataclass\nclass KeyframeStyle:\n    \"\"\"\n    Keyframe Style\n    \"\"\"\n\n    #: Keyframe's time offset.\n    offset: str\n\n    #: ``AnimationEffect``'s timing function.\n    easing: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"offset\"] = self.offset\n        json[\"easing\"] = self.easing\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; KeyframeStyle:\n        return cls(\n            offset=str(json[\"offset\"]),\n            easing=str(json[\"easing\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframeStyle.easing","title":"<code>easing: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframeStyle.offset","title":"<code>offset: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframeStyle.__init__","title":"<code>__init__(offset, easing)</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframeStyle.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; KeyframeStyle:\n    return cls(\n        offset=str(json[\"offset\"]),\n        easing=str(json[\"easing\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframeStyle.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"offset\"] = self.offset\n    json[\"easing\"] = self.easing\n    return json\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframesRule","title":"<code>KeyframesRule</code>  <code>dataclass</code>","text":"<p>Keyframes Rule</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@dataclass\nclass KeyframesRule:\n    \"\"\"\n    Keyframes Rule\n    \"\"\"\n\n    #: List of animation keyframes.\n    keyframes: typing.List[KeyframeStyle]\n\n    #: CSS keyframed animation's name.\n    name: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"keyframes\"] = [i.to_json() for i in self.keyframes]\n        if self.name is not None:\n            json[\"name\"] = self.name\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; KeyframesRule:\n        return cls(\n            keyframes=[KeyframeStyle.from_json(i) for i in json[\"keyframes\"]],\n            name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframesRule.keyframes","title":"<code>keyframes: typing.List[KeyframeStyle]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframesRule.name","title":"<code>name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframesRule.__init__","title":"<code>__init__(keyframes, name=None)</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframesRule.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; KeyframesRule:\n    return cls(\n        keyframes=[KeyframeStyle.from_json(i) for i in json[\"keyframes\"]],\n        name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.KeyframesRule.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"keyframes\"] = [i.to_json() for i in self.keyframes]\n    if self.name is not None:\n        json[\"name\"] = self.name\n    return json\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.ViewOrScrollTimeline","title":"<code>ViewOrScrollTimeline</code>  <code>dataclass</code>","text":"<p>Timeline instance</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@dataclass\nclass ViewOrScrollTimeline:\n    \"\"\"\n    Timeline instance\n    \"\"\"\n\n    #: Orientation of the scroll\n    axis: dom.ScrollOrientation\n\n    #: Scroll container node\n    source_node_id: typing.Optional[dom.BackendNodeId] = None\n\n    #: Represents the starting scroll position of the timeline\n    #: as a length offset in pixels from scroll origin.\n    start_offset: typing.Optional[float] = None\n\n    #: Represents the ending scroll position of the timeline\n    #: as a length offset in pixels from scroll origin.\n    end_offset: typing.Optional[float] = None\n\n    #: The element whose principal box's visibility in the\n    #: scrollport defined the progress of the timeline.\n    #: Does not exist for animations with ScrollTimeline\n    subject_node_id: typing.Optional[dom.BackendNodeId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"axis\"] = self.axis.to_json()\n        if self.source_node_id is not None:\n            json[\"sourceNodeId\"] = self.source_node_id.to_json()\n        if self.start_offset is not None:\n            json[\"startOffset\"] = self.start_offset\n        if self.end_offset is not None:\n            json[\"endOffset\"] = self.end_offset\n        if self.subject_node_id is not None:\n            json[\"subjectNodeId\"] = self.subject_node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ViewOrScrollTimeline:\n        return cls(\n            axis=dom.ScrollOrientation.from_json(json[\"axis\"]),\n            source_node_id=(\n                dom.BackendNodeId.from_json(json[\"sourceNodeId\"])\n                if json.get(\"sourceNodeId\", None) is not None\n                else None\n            ),\n            start_offset=(\n                float(json[\"startOffset\"])\n                if json.get(\"startOffset\", None) is not None\n                else None\n            ),\n            end_offset=(\n                float(json[\"endOffset\"])\n                if json.get(\"endOffset\", None) is not None\n                else None\n            ),\n            subject_node_id=(\n                dom.BackendNodeId.from_json(json[\"subjectNodeId\"])\n                if json.get(\"subjectNodeId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.ViewOrScrollTimeline.axis","title":"<code>axis: dom.ScrollOrientation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.ViewOrScrollTimeline.end_offset","title":"<code>end_offset: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.ViewOrScrollTimeline.source_node_id","title":"<code>source_node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.ViewOrScrollTimeline.start_offset","title":"<code>start_offset: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.ViewOrScrollTimeline.subject_node_id","title":"<code>subject_node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.ViewOrScrollTimeline.__init__","title":"<code>__init__(axis, source_node_id=None, start_offset=None, end_offset=None, subject_node_id=None)</code>","text":""},{"location":"reference/cdp/animation/#zendriver.cdp.animation.ViewOrScrollTimeline.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ViewOrScrollTimeline:\n    return cls(\n        axis=dom.ScrollOrientation.from_json(json[\"axis\"]),\n        source_node_id=(\n            dom.BackendNodeId.from_json(json[\"sourceNodeId\"])\n            if json.get(\"sourceNodeId\", None) is not None\n            else None\n        ),\n        start_offset=(\n            float(json[\"startOffset\"])\n            if json.get(\"startOffset\", None) is not None\n            else None\n        ),\n        end_offset=(\n            float(json[\"endOffset\"])\n            if json.get(\"endOffset\", None) is not None\n            else None\n        ),\n        subject_node_id=(\n            dom.BackendNodeId.from_json(json[\"subjectNodeId\"])\n            if json.get(\"subjectNodeId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.ViewOrScrollTimeline.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"axis\"] = self.axis.to_json()\n    if self.source_node_id is not None:\n        json[\"sourceNodeId\"] = self.source_node_id.to_json()\n    if self.start_offset is not None:\n        json[\"startOffset\"] = self.start_offset\n    if self.end_offset is not None:\n        json[\"endOffset\"] = self.end_offset\n    if self.subject_node_id is not None:\n        json[\"subjectNodeId\"] = self.subject_node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.disable","title":"<code>disable()</code>","text":"<p>Disables animation domain notifications.</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables animation domain notifications.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Animation.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.enable","title":"<code>enable()</code>","text":"<p>Enables animation domain notifications.</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables animation domain notifications.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Animation.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.get_current_time","title":"<code>get_current_time(id_)</code>","text":"<p>Returns the current time of the an animation.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>str</code> <p>Id of animation.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, float]</code> <p>Current time of the page.</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def get_current_time(id_: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, float]:\n    \"\"\"\n    Returns the current time of the an animation.\n\n    :param id_: Id of animation.\n    :returns: Current time of the page.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"id\"] = id_\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Animation.getCurrentTime\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return float(json[\"currentTime\"])\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.get_playback_rate","title":"<code>get_playback_rate()</code>","text":"<p>Gets the playback rate of the document timeline.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, float]</code> <p>Playback rate for animations on page.</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def get_playback_rate() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, float]:\n    \"\"\"\n    Gets the playback rate of the document timeline.\n\n    :returns: Playback rate for animations on page.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Animation.getPlaybackRate\",\n    }\n    json = yield cmd_dict\n    return float(json[\"playbackRate\"])\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.release_animations","title":"<code>release_animations(animations)</code>","text":"<p>Releases a set of animations to no longer be manipulated.</p> <p>Parameters:</p> Name Type Description Default <code>animations</code> <code>List[str]</code> <p>List of animation ids to seek.</p> required Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def release_animations(\n    animations: typing.List[str],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Releases a set of animations to no longer be manipulated.\n\n    :param animations: List of animation ids to seek.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"animations\"] = [i for i in animations]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Animation.releaseAnimations\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.resolve_animation","title":"<code>resolve_animation(animation_id)</code>","text":"<p>Gets the remote object of the Animation.</p> <p>Parameters:</p> Name Type Description Default <code>animation_id</code> <code>str</code> <p>Animation id.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, RemoteObject]</code> <p>Corresponding remote object.</p> Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def resolve_animation(\n    animation_id: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.RemoteObject]:\n    \"\"\"\n    Gets the remote object of the Animation.\n\n    :param animation_id: Animation id.\n    :returns: Corresponding remote object.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"animationId\"] = animation_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Animation.resolveAnimation\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return runtime.RemoteObject.from_json(json[\"remoteObject\"])\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.seek_animations","title":"<code>seek_animations(animations, current_time)</code>","text":"<p>Seek a set of animations to a particular time within each animation.</p> <p>Parameters:</p> Name Type Description Default <code>animations</code> <code>List[str]</code> <p>List of animation ids to seek.</p> required <code>current_time</code> <code>float</code> <p>Set the current time of each animation.</p> required Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def seek_animations(\n    animations: typing.List[str], current_time: float\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Seek a set of animations to a particular time within each animation.\n\n    :param animations: List of animation ids to seek.\n    :param current_time: Set the current time of each animation.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"animations\"] = [i for i in animations]\n    params[\"currentTime\"] = current_time\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Animation.seekAnimations\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.set_paused","title":"<code>set_paused(animations, paused)</code>","text":"<p>Sets the paused state of a set of animations.</p> <p>Parameters:</p> Name Type Description Default <code>animations</code> <code>List[str]</code> <p>Animations to set the pause state of.</p> required <code>paused</code> <code>bool</code> <p>Paused state to set to.</p> required Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def set_paused(\n    animations: typing.List[str], paused: bool\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets the paused state of a set of animations.\n\n    :param animations: Animations to set the pause state of.\n    :param paused: Paused state to set to.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"animations\"] = [i for i in animations]\n    params[\"paused\"] = paused\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Animation.setPaused\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.set_playback_rate","title":"<code>set_playback_rate(playback_rate)</code>","text":"<p>Sets the playback rate of the document timeline.</p> <p>Parameters:</p> Name Type Description Default <code>playback_rate</code> <code>float</code> <p>Playback rate for animations on page</p> required Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def set_playback_rate(\n    playback_rate: float,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets the playback rate of the document timeline.\n\n    :param playback_rate: Playback rate for animations on page\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"playbackRate\"] = playback_rate\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Animation.setPlaybackRate\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/animation/#zendriver.cdp.animation.set_timing","title":"<code>set_timing(animation_id, duration, delay)</code>","text":"<p>Sets the timing of an animation node.</p> <p>Parameters:</p> Name Type Description Default <code>animation_id</code> <code>str</code> <p>Animation id.</p> required <code>duration</code> <code>float</code> <p>Duration of the animation.</p> required <code>delay</code> <code>float</code> <p>Delay of the animation.</p> required Source code in <code>zendriver/cdp/animation.py</code> <pre><code>def set_timing(\n    animation_id: str, duration: float, delay: float\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets the timing of an animation node.\n\n    :param animation_id: Animation id.\n    :param duration: Duration of the animation.\n    :param delay: Delay of the animation.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"animationId\"] = animation_id\n    params[\"duration\"] = duration\n    params[\"delay\"] = delay\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Animation.setTiming\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/audits/","title":"audits","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedCookie","title":"<code>AffectedCookie</code>  <code>dataclass</code>","text":"<p>Information about a cookie that is affected by an inspector issue.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass AffectedCookie:\n    \"\"\"\n    Information about a cookie that is affected by an inspector issue.\n    \"\"\"\n\n    #: The following three properties uniquely identify a cookie\n    name: str\n\n    path: str\n\n    domain: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"path\"] = self.path\n        json[\"domain\"] = self.domain\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AffectedCookie:\n        return cls(\n            name=str(json[\"name\"]),\n            path=str(json[\"path\"]),\n            domain=str(json[\"domain\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedCookie.domain","title":"<code>domain: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedCookie.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedCookie.path","title":"<code>path: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedCookie.__init__","title":"<code>__init__(name, path, domain)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedCookie.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AffectedCookie:\n    return cls(\n        name=str(json[\"name\"]),\n        path=str(json[\"path\"]),\n        domain=str(json[\"domain\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedCookie.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"path\"] = self.path\n    json[\"domain\"] = self.domain\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedFrame","title":"<code>AffectedFrame</code>  <code>dataclass</code>","text":"<p>Information about the frame affected by an inspector issue.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass AffectedFrame:\n    \"\"\"\n    Information about the frame affected by an inspector issue.\n    \"\"\"\n\n    frame_id: page.FrameId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"frameId\"] = self.frame_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AffectedFrame:\n        return cls(\n            frame_id=page.FrameId.from_json(json[\"frameId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedFrame.frame_id","title":"<code>frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedFrame.__init__","title":"<code>__init__(frame_id)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedFrame.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AffectedFrame:\n    return cls(\n        frame_id=page.FrameId.from_json(json[\"frameId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedFrame.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"frameId\"] = self.frame_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedRequest","title":"<code>AffectedRequest</code>  <code>dataclass</code>","text":"<p>Information about a request that is affected by an inspector issue.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass AffectedRequest:\n    \"\"\"\n    Information about a request that is affected by an inspector issue.\n    \"\"\"\n\n    #: The unique request id.\n    request_id: network.RequestId\n\n    url: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"requestId\"] = self.request_id.to_json()\n        if self.url is not None:\n            json[\"url\"] = self.url\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AffectedRequest:\n        return cls(\n            request_id=network.RequestId.from_json(json[\"requestId\"]),\n            url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedRequest.request_id","title":"<code>request_id: network.RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedRequest.url","title":"<code>url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedRequest.__init__","title":"<code>__init__(request_id, url=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedRequest.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AffectedRequest:\n    return cls(\n        request_id=network.RequestId.from_json(json[\"requestId\"]),\n        url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AffectedRequest.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"requestId\"] = self.request_id.to_json()\n    if self.url is not None:\n        json[\"url\"] = self.url\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueDetails","title":"<code>AttributionReportingIssueDetails</code>  <code>dataclass</code>","text":"<p>Details for issues around \"Attribution Reporting API\" usage. Explainer: https://github.com/WICG/attribution-reporting-api</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass AttributionReportingIssueDetails:\n    \"\"\"\n    Details for issues around \"Attribution Reporting API\" usage.\n    Explainer: https://github.com/WICG/attribution-reporting-api\n    \"\"\"\n\n    violation_type: AttributionReportingIssueType\n\n    request: typing.Optional[AffectedRequest] = None\n\n    violating_node_id: typing.Optional[dom.BackendNodeId] = None\n\n    invalid_parameter: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"violationType\"] = self.violation_type.to_json()\n        if self.request is not None:\n            json[\"request\"] = self.request.to_json()\n        if self.violating_node_id is not None:\n            json[\"violatingNodeId\"] = self.violating_node_id.to_json()\n        if self.invalid_parameter is not None:\n            json[\"invalidParameter\"] = self.invalid_parameter\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingIssueDetails:\n        return cls(\n            violation_type=AttributionReportingIssueType.from_json(\n                json[\"violationType\"]\n            ),\n            request=(\n                AffectedRequest.from_json(json[\"request\"])\n                if json.get(\"request\", None) is not None\n                else None\n            ),\n            violating_node_id=(\n                dom.BackendNodeId.from_json(json[\"violatingNodeId\"])\n                if json.get(\"violatingNodeId\", None) is not None\n                else None\n            ),\n            invalid_parameter=(\n                str(json[\"invalidParameter\"])\n                if json.get(\"invalidParameter\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueDetails.invalid_parameter","title":"<code>invalid_parameter: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueDetails.request","title":"<code>request: typing.Optional[AffectedRequest] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueDetails.violating_node_id","title":"<code>violating_node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueDetails.violation_type","title":"<code>violation_type: AttributionReportingIssueType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueDetails.__init__","title":"<code>__init__(violation_type, request=None, violating_node_id=None, invalid_parameter=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingIssueDetails:\n    return cls(\n        violation_type=AttributionReportingIssueType.from_json(\n            json[\"violationType\"]\n        ),\n        request=(\n            AffectedRequest.from_json(json[\"request\"])\n            if json.get(\"request\", None) is not None\n            else None\n        ),\n        violating_node_id=(\n            dom.BackendNodeId.from_json(json[\"violatingNodeId\"])\n            if json.get(\"violatingNodeId\", None) is not None\n            else None\n        ),\n        invalid_parameter=(\n            str(json[\"invalidParameter\"])\n            if json.get(\"invalidParameter\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"violationType\"] = self.violation_type.to_json()\n    if self.request is not None:\n        json[\"request\"] = self.request.to_json()\n    if self.violating_node_id is not None:\n        json[\"violatingNodeId\"] = self.violating_node_id.to_json()\n    if self.invalid_parameter is not None:\n        json[\"invalidParameter\"] = self.invalid_parameter\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType","title":"<code>AttributionReportingIssueType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class AttributionReportingIssueType(enum.Enum):\n    PERMISSION_POLICY_DISABLED = \"PermissionPolicyDisabled\"\n    UNTRUSTWORTHY_REPORTING_ORIGIN = \"UntrustworthyReportingOrigin\"\n    INSECURE_CONTEXT = \"InsecureContext\"\n    INVALID_HEADER = \"InvalidHeader\"\n    INVALID_REGISTER_TRIGGER_HEADER = \"InvalidRegisterTriggerHeader\"\n    SOURCE_AND_TRIGGER_HEADERS = \"SourceAndTriggerHeaders\"\n    SOURCE_IGNORED = \"SourceIgnored\"\n    TRIGGER_IGNORED = \"TriggerIgnored\"\n    OS_SOURCE_IGNORED = \"OsSourceIgnored\"\n    OS_TRIGGER_IGNORED = \"OsTriggerIgnored\"\n    INVALID_REGISTER_OS_SOURCE_HEADER = \"InvalidRegisterOsSourceHeader\"\n    INVALID_REGISTER_OS_TRIGGER_HEADER = \"InvalidRegisterOsTriggerHeader\"\n    WEB_AND_OS_HEADERS = \"WebAndOsHeaders\"\n    NO_WEB_OR_OS_SUPPORT = \"NoWebOrOsSupport\"\n    NAVIGATION_REGISTRATION_WITHOUT_TRANSIENT_USER_ACTIVATION = (\n        \"NavigationRegistrationWithoutTransientUserActivation\"\n    )\n    INVALID_INFO_HEADER = \"InvalidInfoHeader\"\n    NO_REGISTER_SOURCE_HEADER = \"NoRegisterSourceHeader\"\n    NO_REGISTER_TRIGGER_HEADER = \"NoRegisterTriggerHeader\"\n    NO_REGISTER_OS_SOURCE_HEADER = \"NoRegisterOsSourceHeader\"\n    NO_REGISTER_OS_TRIGGER_HEADER = \"NoRegisterOsTriggerHeader\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AttributionReportingIssueType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.INSECURE_CONTEXT","title":"<code>INSECURE_CONTEXT = 'InsecureContext'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.INVALID_HEADER","title":"<code>INVALID_HEADER = 'InvalidHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.INVALID_INFO_HEADER","title":"<code>INVALID_INFO_HEADER = 'InvalidInfoHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.INVALID_REGISTER_OS_SOURCE_HEADER","title":"<code>INVALID_REGISTER_OS_SOURCE_HEADER = 'InvalidRegisterOsSourceHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.INVALID_REGISTER_OS_TRIGGER_HEADER","title":"<code>INVALID_REGISTER_OS_TRIGGER_HEADER = 'InvalidRegisterOsTriggerHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.INVALID_REGISTER_TRIGGER_HEADER","title":"<code>INVALID_REGISTER_TRIGGER_HEADER = 'InvalidRegisterTriggerHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.NAVIGATION_REGISTRATION_WITHOUT_TRANSIENT_USER_ACTIVATION","title":"<code>NAVIGATION_REGISTRATION_WITHOUT_TRANSIENT_USER_ACTIVATION = 'NavigationRegistrationWithoutTransientUserActivation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.NO_REGISTER_OS_SOURCE_HEADER","title":"<code>NO_REGISTER_OS_SOURCE_HEADER = 'NoRegisterOsSourceHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.NO_REGISTER_OS_TRIGGER_HEADER","title":"<code>NO_REGISTER_OS_TRIGGER_HEADER = 'NoRegisterOsTriggerHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.NO_REGISTER_SOURCE_HEADER","title":"<code>NO_REGISTER_SOURCE_HEADER = 'NoRegisterSourceHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.NO_REGISTER_TRIGGER_HEADER","title":"<code>NO_REGISTER_TRIGGER_HEADER = 'NoRegisterTriggerHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.NO_WEB_OR_OS_SUPPORT","title":"<code>NO_WEB_OR_OS_SUPPORT = 'NoWebOrOsSupport'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.OS_SOURCE_IGNORED","title":"<code>OS_SOURCE_IGNORED = 'OsSourceIgnored'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.OS_TRIGGER_IGNORED","title":"<code>OS_TRIGGER_IGNORED = 'OsTriggerIgnored'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.PERMISSION_POLICY_DISABLED","title":"<code>PERMISSION_POLICY_DISABLED = 'PermissionPolicyDisabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.SOURCE_AND_TRIGGER_HEADERS","title":"<code>SOURCE_AND_TRIGGER_HEADERS = 'SourceAndTriggerHeaders'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.SOURCE_IGNORED","title":"<code>SOURCE_IGNORED = 'SourceIgnored'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.TRIGGER_IGNORED","title":"<code>TRIGGER_IGNORED = 'TriggerIgnored'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.UNTRUSTWORTHY_REPORTING_ORIGIN","title":"<code>UNTRUSTWORTHY_REPORTING_ORIGIN = 'UntrustworthyReportingOrigin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.WEB_AND_OS_HEADERS","title":"<code>WEB_AND_OS_HEADERS = 'WebAndOsHeaders'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AttributionReportingIssueType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.AttributionReportingIssueType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseIssueDetails","title":"<code>BlockedByResponseIssueDetails</code>  <code>dataclass</code>","text":"<p>Details for a request that has been blocked with the BLOCKED_BY_RESPONSE code. Currently only used for COEP/COOP, but may be extended to include some CSP errors in the future.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass BlockedByResponseIssueDetails:\n    \"\"\"\n    Details for a request that has been blocked with the BLOCKED_BY_RESPONSE\n    code. Currently only used for COEP/COOP, but may be extended to include\n    some CSP errors in the future.\n    \"\"\"\n\n    request: AffectedRequest\n\n    reason: BlockedByResponseReason\n\n    parent_frame: typing.Optional[AffectedFrame] = None\n\n    blocked_frame: typing.Optional[AffectedFrame] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"request\"] = self.request.to_json()\n        json[\"reason\"] = self.reason.to_json()\n        if self.parent_frame is not None:\n            json[\"parentFrame\"] = self.parent_frame.to_json()\n        if self.blocked_frame is not None:\n            json[\"blockedFrame\"] = self.blocked_frame.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BlockedByResponseIssueDetails:\n        return cls(\n            request=AffectedRequest.from_json(json[\"request\"]),\n            reason=BlockedByResponseReason.from_json(json[\"reason\"]),\n            parent_frame=(\n                AffectedFrame.from_json(json[\"parentFrame\"])\n                if json.get(\"parentFrame\", None) is not None\n                else None\n            ),\n            blocked_frame=(\n                AffectedFrame.from_json(json[\"blockedFrame\"])\n                if json.get(\"blockedFrame\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseIssueDetails.blocked_frame","title":"<code>blocked_frame: typing.Optional[AffectedFrame] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseIssueDetails.parent_frame","title":"<code>parent_frame: typing.Optional[AffectedFrame] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseIssueDetails.reason","title":"<code>reason: BlockedByResponseReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseIssueDetails.request","title":"<code>request: AffectedRequest</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseIssueDetails.__init__","title":"<code>__init__(request, reason, parent_frame=None, blocked_frame=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BlockedByResponseIssueDetails:\n    return cls(\n        request=AffectedRequest.from_json(json[\"request\"]),\n        reason=BlockedByResponseReason.from_json(json[\"reason\"]),\n        parent_frame=(\n            AffectedFrame.from_json(json[\"parentFrame\"])\n            if json.get(\"parentFrame\", None) is not None\n            else None\n        ),\n        blocked_frame=(\n            AffectedFrame.from_json(json[\"blockedFrame\"])\n            if json.get(\"blockedFrame\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"request\"] = self.request.to_json()\n    json[\"reason\"] = self.reason.to_json()\n    if self.parent_frame is not None:\n        json[\"parentFrame\"] = self.parent_frame.to_json()\n    if self.blocked_frame is not None:\n        json[\"blockedFrame\"] = self.blocked_frame.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseReason","title":"<code>BlockedByResponseReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum indicating the reason a response has been blocked. These reasons are refinements of the net error BLOCKED_BY_RESPONSE.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class BlockedByResponseReason(enum.Enum):\n    \"\"\"\n    Enum indicating the reason a response has been blocked. These reasons are\n    refinements of the net error BLOCKED_BY_RESPONSE.\n    \"\"\"\n\n    COEP_FRAME_RESOURCE_NEEDS_COEP_HEADER = \"CoepFrameResourceNeedsCoepHeader\"\n    COOP_SANDBOXED_I_FRAME_CANNOT_NAVIGATE_TO_COOP_PAGE = (\n        \"CoopSandboxedIFrameCannotNavigateToCoopPage\"\n    )\n    CORP_NOT_SAME_ORIGIN = \"CorpNotSameOrigin\"\n    CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP = (\n        \"CorpNotSameOriginAfterDefaultedToSameOriginByCoep\"\n    )\n    CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_DIP = (\n        \"CorpNotSameOriginAfterDefaultedToSameOriginByDip\"\n    )\n    CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP_AND_DIP = (\n        \"CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip\"\n    )\n    CORP_NOT_SAME_SITE = \"CorpNotSameSite\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; BlockedByResponseReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseReason.COEP_FRAME_RESOURCE_NEEDS_COEP_HEADER","title":"<code>COEP_FRAME_RESOURCE_NEEDS_COEP_HEADER = 'CoepFrameResourceNeedsCoepHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseReason.COOP_SANDBOXED_I_FRAME_CANNOT_NAVIGATE_TO_COOP_PAGE","title":"<code>COOP_SANDBOXED_I_FRAME_CANNOT_NAVIGATE_TO_COOP_PAGE = 'CoopSandboxedIFrameCannotNavigateToCoopPage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseReason.CORP_NOT_SAME_ORIGIN","title":"<code>CORP_NOT_SAME_ORIGIN = 'CorpNotSameOrigin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseReason.CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP","title":"<code>CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP = 'CorpNotSameOriginAfterDefaultedToSameOriginByCoep'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseReason.CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP_AND_DIP","title":"<code>CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP_AND_DIP = 'CorpNotSameOriginAfterDefaultedToSameOriginByCoepAndDip'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseReason.CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_DIP","title":"<code>CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_DIP = 'CorpNotSameOriginAfterDefaultedToSameOriginByDip'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseReason.CORP_NOT_SAME_SITE","title":"<code>CORP_NOT_SAME_SITE = 'CorpNotSameSite'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; BlockedByResponseReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BlockedByResponseReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BounceTrackingIssueDetails","title":"<code>BounceTrackingIssueDetails</code>  <code>dataclass</code>","text":"<p>This issue warns about sites in the redirect chain of a finished navigation that may be flagged as trackers and have their state cleared if they don't receive a user interaction. Note that in this context 'site' means eTLD+1. For example, if the URL <code>https://example.test:80/bounce</code> was in the redirect chain, the site reported would be <code>example.test</code>.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass BounceTrackingIssueDetails:\n    \"\"\"\n    This issue warns about sites in the redirect chain of a finished navigation\n    that may be flagged as trackers and have their state cleared if they don't\n    receive a user interaction. Note that in this context 'site' means eTLD+1.\n    For example, if the URL ``https://example.test:80/bounce`` was in the\n    redirect chain, the site reported would be ``example.test``.\n    \"\"\"\n\n    tracking_sites: typing.List[str]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"trackingSites\"] = [i for i in self.tracking_sites]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BounceTrackingIssueDetails:\n        return cls(\n            tracking_sites=[str(i) for i in json[\"trackingSites\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BounceTrackingIssueDetails.tracking_sites","title":"<code>tracking_sites: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BounceTrackingIssueDetails.__init__","title":"<code>__init__(tracking_sites)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BounceTrackingIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BounceTrackingIssueDetails:\n    return cls(\n        tracking_sites=[str(i) for i in json[\"trackingSites\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.BounceTrackingIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"trackingSites\"] = [i for i in self.tracking_sites]\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueDetails","title":"<code>ClientHintIssueDetails</code>  <code>dataclass</code>","text":"<p>This issue tracks client hints related issues. It's used to deprecate old features, encourage the use of new ones, and provide general guidance.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass ClientHintIssueDetails:\n    \"\"\"\n    This issue tracks client hints related issues. It's used to deprecate old\n    features, encourage the use of new ones, and provide general guidance.\n    \"\"\"\n\n    source_code_location: SourceCodeLocation\n\n    client_hint_issue_reason: ClientHintIssueReason\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n        json[\"clientHintIssueReason\"] = self.client_hint_issue_reason.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ClientHintIssueDetails:\n        return cls(\n            source_code_location=SourceCodeLocation.from_json(\n                json[\"sourceCodeLocation\"]\n            ),\n            client_hint_issue_reason=ClientHintIssueReason.from_json(\n                json[\"clientHintIssueReason\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueDetails.client_hint_issue_reason","title":"<code>client_hint_issue_reason: ClientHintIssueReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueDetails.source_code_location","title":"<code>source_code_location: SourceCodeLocation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueDetails.__init__","title":"<code>__init__(source_code_location, client_hint_issue_reason)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ClientHintIssueDetails:\n    return cls(\n        source_code_location=SourceCodeLocation.from_json(\n            json[\"sourceCodeLocation\"]\n        ),\n        client_hint_issue_reason=ClientHintIssueReason.from_json(\n            json[\"clientHintIssueReason\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n    json[\"clientHintIssueReason\"] = self.client_hint_issue_reason.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueReason","title":"<code>ClientHintIssueReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class ClientHintIssueReason(enum.Enum):\n    META_TAG_ALLOW_LIST_INVALID_ORIGIN = \"MetaTagAllowListInvalidOrigin\"\n    META_TAG_MODIFIED_HTML = \"MetaTagModifiedHTML\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ClientHintIssueReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueReason.META_TAG_ALLOW_LIST_INVALID_ORIGIN","title":"<code>META_TAG_ALLOW_LIST_INVALID_ORIGIN = 'MetaTagAllowListInvalidOrigin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueReason.META_TAG_MODIFIED_HTML","title":"<code>META_TAG_MODIFIED_HTML = 'MetaTagModifiedHTML'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ClientHintIssueReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ClientHintIssueReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails","title":"<code>ContentSecurityPolicyIssueDetails</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass ContentSecurityPolicyIssueDetails:\n    #: Specific directive that is violated, causing the CSP issue.\n    violated_directive: str\n\n    is_report_only: bool\n\n    content_security_policy_violation_type: ContentSecurityPolicyViolationType\n\n    #: The url not included in allowed sources.\n    blocked_url: typing.Optional[str] = None\n\n    frame_ancestor: typing.Optional[AffectedFrame] = None\n\n    source_code_location: typing.Optional[SourceCodeLocation] = None\n\n    violating_node_id: typing.Optional[dom.BackendNodeId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"violatedDirective\"] = self.violated_directive\n        json[\"isReportOnly\"] = self.is_report_only\n        json[\"contentSecurityPolicyViolationType\"] = (\n            self.content_security_policy_violation_type.to_json()\n        )\n        if self.blocked_url is not None:\n            json[\"blockedURL\"] = self.blocked_url\n        if self.frame_ancestor is not None:\n            json[\"frameAncestor\"] = self.frame_ancestor.to_json()\n        if self.source_code_location is not None:\n            json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n        if self.violating_node_id is not None:\n            json[\"violatingNodeId\"] = self.violating_node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ContentSecurityPolicyIssueDetails:\n        return cls(\n            violated_directive=str(json[\"violatedDirective\"]),\n            is_report_only=bool(json[\"isReportOnly\"]),\n            content_security_policy_violation_type=ContentSecurityPolicyViolationType.from_json(\n                json[\"contentSecurityPolicyViolationType\"]\n            ),\n            blocked_url=(\n                str(json[\"blockedURL\"])\n                if json.get(\"blockedURL\", None) is not None\n                else None\n            ),\n            frame_ancestor=(\n                AffectedFrame.from_json(json[\"frameAncestor\"])\n                if json.get(\"frameAncestor\", None) is not None\n                else None\n            ),\n            source_code_location=(\n                SourceCodeLocation.from_json(json[\"sourceCodeLocation\"])\n                if json.get(\"sourceCodeLocation\", None) is not None\n                else None\n            ),\n            violating_node_id=(\n                dom.BackendNodeId.from_json(json[\"violatingNodeId\"])\n                if json.get(\"violatingNodeId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails.blocked_url","title":"<code>blocked_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails.content_security_policy_violation_type","title":"<code>content_security_policy_violation_type: ContentSecurityPolicyViolationType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails.frame_ancestor","title":"<code>frame_ancestor: typing.Optional[AffectedFrame] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails.is_report_only","title":"<code>is_report_only: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails.source_code_location","title":"<code>source_code_location: typing.Optional[SourceCodeLocation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails.violated_directive","title":"<code>violated_directive: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails.violating_node_id","title":"<code>violating_node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails.__init__","title":"<code>__init__(violated_directive, is_report_only, content_security_policy_violation_type, blocked_url=None, frame_ancestor=None, source_code_location=None, violating_node_id=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ContentSecurityPolicyIssueDetails:\n    return cls(\n        violated_directive=str(json[\"violatedDirective\"]),\n        is_report_only=bool(json[\"isReportOnly\"]),\n        content_security_policy_violation_type=ContentSecurityPolicyViolationType.from_json(\n            json[\"contentSecurityPolicyViolationType\"]\n        ),\n        blocked_url=(\n            str(json[\"blockedURL\"])\n            if json.get(\"blockedURL\", None) is not None\n            else None\n        ),\n        frame_ancestor=(\n            AffectedFrame.from_json(json[\"frameAncestor\"])\n            if json.get(\"frameAncestor\", None) is not None\n            else None\n        ),\n        source_code_location=(\n            SourceCodeLocation.from_json(json[\"sourceCodeLocation\"])\n            if json.get(\"sourceCodeLocation\", None) is not None\n            else None\n        ),\n        violating_node_id=(\n            dom.BackendNodeId.from_json(json[\"violatingNodeId\"])\n            if json.get(\"violatingNodeId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"violatedDirective\"] = self.violated_directive\n    json[\"isReportOnly\"] = self.is_report_only\n    json[\"contentSecurityPolicyViolationType\"] = (\n        self.content_security_policy_violation_type.to_json()\n    )\n    if self.blocked_url is not None:\n        json[\"blockedURL\"] = self.blocked_url\n    if self.frame_ancestor is not None:\n        json[\"frameAncestor\"] = self.frame_ancestor.to_json()\n    if self.source_code_location is not None:\n        json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n    if self.violating_node_id is not None:\n        json[\"violatingNodeId\"] = self.violating_node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyViolationType","title":"<code>ContentSecurityPolicyViolationType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class ContentSecurityPolicyViolationType(enum.Enum):\n    K_INLINE_VIOLATION = \"kInlineViolation\"\n    K_EVAL_VIOLATION = \"kEvalViolation\"\n    K_URL_VIOLATION = \"kURLViolation\"\n    K_TRUSTED_TYPES_SINK_VIOLATION = \"kTrustedTypesSinkViolation\"\n    K_TRUSTED_TYPES_POLICY_VIOLATION = \"kTrustedTypesPolicyViolation\"\n    K_WASM_EVAL_VIOLATION = \"kWasmEvalViolation\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ContentSecurityPolicyViolationType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyViolationType.K_EVAL_VIOLATION","title":"<code>K_EVAL_VIOLATION = 'kEvalViolation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyViolationType.K_INLINE_VIOLATION","title":"<code>K_INLINE_VIOLATION = 'kInlineViolation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyViolationType.K_TRUSTED_TYPES_POLICY_VIOLATION","title":"<code>K_TRUSTED_TYPES_POLICY_VIOLATION = 'kTrustedTypesPolicyViolation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyViolationType.K_TRUSTED_TYPES_SINK_VIOLATION","title":"<code>K_TRUSTED_TYPES_SINK_VIOLATION = 'kTrustedTypesSinkViolation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyViolationType.K_URL_VIOLATION","title":"<code>K_URL_VIOLATION = 'kURLViolation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyViolationType.K_WASM_EVAL_VIOLATION","title":"<code>K_WASM_EVAL_VIOLATION = 'kWasmEvalViolation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyViolationType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ContentSecurityPolicyViolationType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.ContentSecurityPolicyViolationType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieDeprecationMetadataIssueDetails","title":"<code>CookieDeprecationMetadataIssueDetails</code>  <code>dataclass</code>","text":"<p>This issue warns about third-party sites that are accessing cookies on the current page, and have been permitted due to having a global metadata grant. Note that in this context 'site' means eTLD+1. For example, if the URL <code>https://example.test:80/web_page</code> was accessing cookies, the site reported would be <code>example.test</code>.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass CookieDeprecationMetadataIssueDetails:\n    \"\"\"\n    This issue warns about third-party sites that are accessing cookies on the\n    current page, and have been permitted due to having a global metadata grant.\n    Note that in this context 'site' means eTLD+1. For example, if the URL\n    ``https://example.test:80/web_page`` was accessing cookies, the site reported\n    would be ``example.test``.\n    \"\"\"\n\n    allowed_sites: typing.List[str]\n\n    opt_out_percentage: float\n\n    is_opt_out_top_level: bool\n\n    operation: CookieOperation\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"allowedSites\"] = [i for i in self.allowed_sites]\n        json[\"optOutPercentage\"] = self.opt_out_percentage\n        json[\"isOptOutTopLevel\"] = self.is_opt_out_top_level\n        json[\"operation\"] = self.operation.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CookieDeprecationMetadataIssueDetails:\n        return cls(\n            allowed_sites=[str(i) for i in json[\"allowedSites\"]],\n            opt_out_percentage=float(json[\"optOutPercentage\"]),\n            is_opt_out_top_level=bool(json[\"isOptOutTopLevel\"]),\n            operation=CookieOperation.from_json(json[\"operation\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieDeprecationMetadataIssueDetails.allowed_sites","title":"<code>allowed_sites: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieDeprecationMetadataIssueDetails.is_opt_out_top_level","title":"<code>is_opt_out_top_level: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieDeprecationMetadataIssueDetails.operation","title":"<code>operation: CookieOperation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieDeprecationMetadataIssueDetails.opt_out_percentage","title":"<code>opt_out_percentage: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieDeprecationMetadataIssueDetails.__init__","title":"<code>__init__(allowed_sites, opt_out_percentage, is_opt_out_top_level, operation)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieDeprecationMetadataIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CookieDeprecationMetadataIssueDetails:\n    return cls(\n        allowed_sites=[str(i) for i in json[\"allowedSites\"]],\n        opt_out_percentage=float(json[\"optOutPercentage\"]),\n        is_opt_out_top_level=bool(json[\"isOptOutTopLevel\"]),\n        operation=CookieOperation.from_json(json[\"operation\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieDeprecationMetadataIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"allowedSites\"] = [i for i in self.allowed_sites]\n    json[\"optOutPercentage\"] = self.opt_out_percentage\n    json[\"isOptOutTopLevel\"] = self.is_opt_out_top_level\n    json[\"operation\"] = self.operation.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason","title":"<code>CookieExclusionReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class CookieExclusionReason(enum.Enum):\n    EXCLUDE_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX = (\n        \"ExcludeSameSiteUnspecifiedTreatedAsLax\"\n    )\n    EXCLUDE_SAME_SITE_NONE_INSECURE = \"ExcludeSameSiteNoneInsecure\"\n    EXCLUDE_SAME_SITE_LAX = \"ExcludeSameSiteLax\"\n    EXCLUDE_SAME_SITE_STRICT = \"ExcludeSameSiteStrict\"\n    EXCLUDE_INVALID_SAME_PARTY = \"ExcludeInvalidSameParty\"\n    EXCLUDE_SAME_PARTY_CROSS_PARTY_CONTEXT = \"ExcludeSamePartyCrossPartyContext\"\n    EXCLUDE_DOMAIN_NON_ASCII = \"ExcludeDomainNonASCII\"\n    EXCLUDE_THIRD_PARTY_COOKIE_BLOCKED_IN_FIRST_PARTY_SET = (\n        \"ExcludeThirdPartyCookieBlockedInFirstPartySet\"\n    )\n    EXCLUDE_THIRD_PARTY_PHASEOUT = \"ExcludeThirdPartyPhaseout\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CookieExclusionReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.EXCLUDE_DOMAIN_NON_ASCII","title":"<code>EXCLUDE_DOMAIN_NON_ASCII = 'ExcludeDomainNonASCII'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.EXCLUDE_INVALID_SAME_PARTY","title":"<code>EXCLUDE_INVALID_SAME_PARTY = 'ExcludeInvalidSameParty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.EXCLUDE_SAME_PARTY_CROSS_PARTY_CONTEXT","title":"<code>EXCLUDE_SAME_PARTY_CROSS_PARTY_CONTEXT = 'ExcludeSamePartyCrossPartyContext'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.EXCLUDE_SAME_SITE_LAX","title":"<code>EXCLUDE_SAME_SITE_LAX = 'ExcludeSameSiteLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.EXCLUDE_SAME_SITE_NONE_INSECURE","title":"<code>EXCLUDE_SAME_SITE_NONE_INSECURE = 'ExcludeSameSiteNoneInsecure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.EXCLUDE_SAME_SITE_STRICT","title":"<code>EXCLUDE_SAME_SITE_STRICT = 'ExcludeSameSiteStrict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.EXCLUDE_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX","title":"<code>EXCLUDE_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX = 'ExcludeSameSiteUnspecifiedTreatedAsLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.EXCLUDE_THIRD_PARTY_COOKIE_BLOCKED_IN_FIRST_PARTY_SET","title":"<code>EXCLUDE_THIRD_PARTY_COOKIE_BLOCKED_IN_FIRST_PARTY_SET = 'ExcludeThirdPartyCookieBlockedInFirstPartySet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.EXCLUDE_THIRD_PARTY_PHASEOUT","title":"<code>EXCLUDE_THIRD_PARTY_PHASEOUT = 'ExcludeThirdPartyPhaseout'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CookieExclusionReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieExclusionReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails","title":"<code>CookieIssueDetails</code>  <code>dataclass</code>","text":"<p>This information is currently necessary, as the front-end has a difficult time finding a specific cookie. With this, we can convey specific error information without the cookie.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass CookieIssueDetails:\n    \"\"\"\n    This information is currently necessary, as the front-end has a difficult\n    time finding a specific cookie. With this, we can convey specific error\n    information without the cookie.\n    \"\"\"\n\n    cookie_warning_reasons: typing.List[CookieWarningReason]\n\n    cookie_exclusion_reasons: typing.List[CookieExclusionReason]\n\n    #: Optionally identifies the site-for-cookies and the cookie url, which\n    #: may be used by the front-end as additional context.\n    operation: CookieOperation\n\n    #: If AffectedCookie is not set then rawCookieLine contains the raw\n    #: Set-Cookie header string. This hints at a problem where the\n    #: cookie line is syntactically or semantically malformed in a way\n    #: that no valid cookie could be created.\n    cookie: typing.Optional[AffectedCookie] = None\n\n    raw_cookie_line: typing.Optional[str] = None\n\n    site_for_cookies: typing.Optional[str] = None\n\n    cookie_url: typing.Optional[str] = None\n\n    request: typing.Optional[AffectedRequest] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"cookieWarningReasons\"] = [\n            i.to_json() for i in self.cookie_warning_reasons\n        ]\n        json[\"cookieExclusionReasons\"] = [\n            i.to_json() for i in self.cookie_exclusion_reasons\n        ]\n        json[\"operation\"] = self.operation.to_json()\n        if self.cookie is not None:\n            json[\"cookie\"] = self.cookie.to_json()\n        if self.raw_cookie_line is not None:\n            json[\"rawCookieLine\"] = self.raw_cookie_line\n        if self.site_for_cookies is not None:\n            json[\"siteForCookies\"] = self.site_for_cookies\n        if self.cookie_url is not None:\n            json[\"cookieUrl\"] = self.cookie_url\n        if self.request is not None:\n            json[\"request\"] = self.request.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CookieIssueDetails:\n        return cls(\n            cookie_warning_reasons=[\n                CookieWarningReason.from_json(i) for i in json[\"cookieWarningReasons\"]\n            ],\n            cookie_exclusion_reasons=[\n                CookieExclusionReason.from_json(i)\n                for i in json[\"cookieExclusionReasons\"]\n            ],\n            operation=CookieOperation.from_json(json[\"operation\"]),\n            cookie=(\n                AffectedCookie.from_json(json[\"cookie\"])\n                if json.get(\"cookie\", None) is not None\n                else None\n            ),\n            raw_cookie_line=(\n                str(json[\"rawCookieLine\"])\n                if json.get(\"rawCookieLine\", None) is not None\n                else None\n            ),\n            site_for_cookies=(\n                str(json[\"siteForCookies\"])\n                if json.get(\"siteForCookies\", None) is not None\n                else None\n            ),\n            cookie_url=(\n                str(json[\"cookieUrl\"])\n                if json.get(\"cookieUrl\", None) is not None\n                else None\n            ),\n            request=(\n                AffectedRequest.from_json(json[\"request\"])\n                if json.get(\"request\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.cookie","title":"<code>cookie: typing.Optional[AffectedCookie] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.cookie_exclusion_reasons","title":"<code>cookie_exclusion_reasons: typing.List[CookieExclusionReason]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.cookie_url","title":"<code>cookie_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.cookie_warning_reasons","title":"<code>cookie_warning_reasons: typing.List[CookieWarningReason]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.operation","title":"<code>operation: CookieOperation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.raw_cookie_line","title":"<code>raw_cookie_line: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.request","title":"<code>request: typing.Optional[AffectedRequest] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.site_for_cookies","title":"<code>site_for_cookies: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.__init__","title":"<code>__init__(cookie_warning_reasons, cookie_exclusion_reasons, operation, cookie=None, raw_cookie_line=None, site_for_cookies=None, cookie_url=None, request=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CookieIssueDetails:\n    return cls(\n        cookie_warning_reasons=[\n            CookieWarningReason.from_json(i) for i in json[\"cookieWarningReasons\"]\n        ],\n        cookie_exclusion_reasons=[\n            CookieExclusionReason.from_json(i)\n            for i in json[\"cookieExclusionReasons\"]\n        ],\n        operation=CookieOperation.from_json(json[\"operation\"]),\n        cookie=(\n            AffectedCookie.from_json(json[\"cookie\"])\n            if json.get(\"cookie\", None) is not None\n            else None\n        ),\n        raw_cookie_line=(\n            str(json[\"rawCookieLine\"])\n            if json.get(\"rawCookieLine\", None) is not None\n            else None\n        ),\n        site_for_cookies=(\n            str(json[\"siteForCookies\"])\n            if json.get(\"siteForCookies\", None) is not None\n            else None\n        ),\n        cookie_url=(\n            str(json[\"cookieUrl\"])\n            if json.get(\"cookieUrl\", None) is not None\n            else None\n        ),\n        request=(\n            AffectedRequest.from_json(json[\"request\"])\n            if json.get(\"request\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"cookieWarningReasons\"] = [\n        i.to_json() for i in self.cookie_warning_reasons\n    ]\n    json[\"cookieExclusionReasons\"] = [\n        i.to_json() for i in self.cookie_exclusion_reasons\n    ]\n    json[\"operation\"] = self.operation.to_json()\n    if self.cookie is not None:\n        json[\"cookie\"] = self.cookie.to_json()\n    if self.raw_cookie_line is not None:\n        json[\"rawCookieLine\"] = self.raw_cookie_line\n    if self.site_for_cookies is not None:\n        json[\"siteForCookies\"] = self.site_for_cookies\n    if self.cookie_url is not None:\n        json[\"cookieUrl\"] = self.cookie_url\n    if self.request is not None:\n        json[\"request\"] = self.request.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieOperation","title":"<code>CookieOperation</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class CookieOperation(enum.Enum):\n    SET_COOKIE = \"SetCookie\"\n    READ_COOKIE = \"ReadCookie\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CookieOperation:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieOperation.READ_COOKIE","title":"<code>READ_COOKIE = 'ReadCookie'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieOperation.SET_COOKIE","title":"<code>SET_COOKIE = 'SetCookie'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieOperation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CookieOperation:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieOperation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason","title":"<code>CookieWarningReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class CookieWarningReason(enum.Enum):\n    WARN_SAME_SITE_UNSPECIFIED_CROSS_SITE_CONTEXT = (\n        \"WarnSameSiteUnspecifiedCrossSiteContext\"\n    )\n    WARN_SAME_SITE_NONE_INSECURE = \"WarnSameSiteNoneInsecure\"\n    WARN_SAME_SITE_UNSPECIFIED_LAX_ALLOW_UNSAFE = (\n        \"WarnSameSiteUnspecifiedLaxAllowUnsafe\"\n    )\n    WARN_SAME_SITE_STRICT_LAX_DOWNGRADE_STRICT = \"WarnSameSiteStrictLaxDowngradeStrict\"\n    WARN_SAME_SITE_STRICT_CROSS_DOWNGRADE_STRICT = (\n        \"WarnSameSiteStrictCrossDowngradeStrict\"\n    )\n    WARN_SAME_SITE_STRICT_CROSS_DOWNGRADE_LAX = \"WarnSameSiteStrictCrossDowngradeLax\"\n    WARN_SAME_SITE_LAX_CROSS_DOWNGRADE_STRICT = \"WarnSameSiteLaxCrossDowngradeStrict\"\n    WARN_SAME_SITE_LAX_CROSS_DOWNGRADE_LAX = \"WarnSameSiteLaxCrossDowngradeLax\"\n    WARN_ATTRIBUTE_VALUE_EXCEEDS_MAX_SIZE = \"WarnAttributeValueExceedsMaxSize\"\n    WARN_DOMAIN_NON_ASCII = \"WarnDomainNonASCII\"\n    WARN_THIRD_PARTY_PHASEOUT = \"WarnThirdPartyPhaseout\"\n    WARN_CROSS_SITE_REDIRECT_DOWNGRADE_CHANGES_INCLUSION = (\n        \"WarnCrossSiteRedirectDowngradeChangesInclusion\"\n    )\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CookieWarningReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_ATTRIBUTE_VALUE_EXCEEDS_MAX_SIZE","title":"<code>WARN_ATTRIBUTE_VALUE_EXCEEDS_MAX_SIZE = 'WarnAttributeValueExceedsMaxSize'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_CROSS_SITE_REDIRECT_DOWNGRADE_CHANGES_INCLUSION","title":"<code>WARN_CROSS_SITE_REDIRECT_DOWNGRADE_CHANGES_INCLUSION = 'WarnCrossSiteRedirectDowngradeChangesInclusion'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_DOMAIN_NON_ASCII","title":"<code>WARN_DOMAIN_NON_ASCII = 'WarnDomainNonASCII'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_SAME_SITE_LAX_CROSS_DOWNGRADE_LAX","title":"<code>WARN_SAME_SITE_LAX_CROSS_DOWNGRADE_LAX = 'WarnSameSiteLaxCrossDowngradeLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_SAME_SITE_LAX_CROSS_DOWNGRADE_STRICT","title":"<code>WARN_SAME_SITE_LAX_CROSS_DOWNGRADE_STRICT = 'WarnSameSiteLaxCrossDowngradeStrict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_SAME_SITE_NONE_INSECURE","title":"<code>WARN_SAME_SITE_NONE_INSECURE = 'WarnSameSiteNoneInsecure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_SAME_SITE_STRICT_CROSS_DOWNGRADE_LAX","title":"<code>WARN_SAME_SITE_STRICT_CROSS_DOWNGRADE_LAX = 'WarnSameSiteStrictCrossDowngradeLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_SAME_SITE_STRICT_CROSS_DOWNGRADE_STRICT","title":"<code>WARN_SAME_SITE_STRICT_CROSS_DOWNGRADE_STRICT = 'WarnSameSiteStrictCrossDowngradeStrict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_SAME_SITE_STRICT_LAX_DOWNGRADE_STRICT","title":"<code>WARN_SAME_SITE_STRICT_LAX_DOWNGRADE_STRICT = 'WarnSameSiteStrictLaxDowngradeStrict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_SAME_SITE_UNSPECIFIED_CROSS_SITE_CONTEXT","title":"<code>WARN_SAME_SITE_UNSPECIFIED_CROSS_SITE_CONTEXT = 'WarnSameSiteUnspecifiedCrossSiteContext'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_SAME_SITE_UNSPECIFIED_LAX_ALLOW_UNSAFE","title":"<code>WARN_SAME_SITE_UNSPECIFIED_LAX_ALLOW_UNSAFE = 'WarnSameSiteUnspecifiedLaxAllowUnsafe'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.WARN_THIRD_PARTY_PHASEOUT","title":"<code>WARN_THIRD_PARTY_PHASEOUT = 'WarnThirdPartyPhaseout'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CookieWarningReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CookieWarningReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails","title":"<code>CorsIssueDetails</code>  <code>dataclass</code>","text":"<p>Details for a CORS related issue, e.g. a warning or error related to CORS RFC1918 enforcement.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass CorsIssueDetails:\n    \"\"\"\n    Details for a CORS related issue, e.g. a warning or error related to\n    CORS RFC1918 enforcement.\n    \"\"\"\n\n    cors_error_status: network.CorsErrorStatus\n\n    is_warning: bool\n\n    request: AffectedRequest\n\n    location: typing.Optional[SourceCodeLocation] = None\n\n    initiator_origin: typing.Optional[str] = None\n\n    resource_ip_address_space: typing.Optional[network.IPAddressSpace] = None\n\n    client_security_state: typing.Optional[network.ClientSecurityState] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"corsErrorStatus\"] = self.cors_error_status.to_json()\n        json[\"isWarning\"] = self.is_warning\n        json[\"request\"] = self.request.to_json()\n        if self.location is not None:\n            json[\"location\"] = self.location.to_json()\n        if self.initiator_origin is not None:\n            json[\"initiatorOrigin\"] = self.initiator_origin\n        if self.resource_ip_address_space is not None:\n            json[\"resourceIPAddressSpace\"] = self.resource_ip_address_space.to_json()\n        if self.client_security_state is not None:\n            json[\"clientSecurityState\"] = self.client_security_state.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CorsIssueDetails:\n        return cls(\n            cors_error_status=network.CorsErrorStatus.from_json(\n                json[\"corsErrorStatus\"]\n            ),\n            is_warning=bool(json[\"isWarning\"]),\n            request=AffectedRequest.from_json(json[\"request\"]),\n            location=(\n                SourceCodeLocation.from_json(json[\"location\"])\n                if json.get(\"location\", None) is not None\n                else None\n            ),\n            initiator_origin=(\n                str(json[\"initiatorOrigin\"])\n                if json.get(\"initiatorOrigin\", None) is not None\n                else None\n            ),\n            resource_ip_address_space=(\n                network.IPAddressSpace.from_json(json[\"resourceIPAddressSpace\"])\n                if json.get(\"resourceIPAddressSpace\", None) is not None\n                else None\n            ),\n            client_security_state=(\n                network.ClientSecurityState.from_json(json[\"clientSecurityState\"])\n                if json.get(\"clientSecurityState\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails.client_security_state","title":"<code>client_security_state: typing.Optional[network.ClientSecurityState] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails.cors_error_status","title":"<code>cors_error_status: network.CorsErrorStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails.initiator_origin","title":"<code>initiator_origin: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails.is_warning","title":"<code>is_warning: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails.location","title":"<code>location: typing.Optional[SourceCodeLocation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails.request","title":"<code>request: AffectedRequest</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails.resource_ip_address_space","title":"<code>resource_ip_address_space: typing.Optional[network.IPAddressSpace] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails.__init__","title":"<code>__init__(cors_error_status, is_warning, request, location=None, initiator_origin=None, resource_ip_address_space=None, client_security_state=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CorsIssueDetails:\n    return cls(\n        cors_error_status=network.CorsErrorStatus.from_json(\n            json[\"corsErrorStatus\"]\n        ),\n        is_warning=bool(json[\"isWarning\"]),\n        request=AffectedRequest.from_json(json[\"request\"]),\n        location=(\n            SourceCodeLocation.from_json(json[\"location\"])\n            if json.get(\"location\", None) is not None\n            else None\n        ),\n        initiator_origin=(\n            str(json[\"initiatorOrigin\"])\n            if json.get(\"initiatorOrigin\", None) is not None\n            else None\n        ),\n        resource_ip_address_space=(\n            network.IPAddressSpace.from_json(json[\"resourceIPAddressSpace\"])\n            if json.get(\"resourceIPAddressSpace\", None) is not None\n            else None\n        ),\n        client_security_state=(\n            network.ClientSecurityState.from_json(json[\"clientSecurityState\"])\n            if json.get(\"clientSecurityState\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.CorsIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"corsErrorStatus\"] = self.cors_error_status.to_json()\n    json[\"isWarning\"] = self.is_warning\n    json[\"request\"] = self.request.to_json()\n    if self.location is not None:\n        json[\"location\"] = self.location.to_json()\n    if self.initiator_origin is not None:\n        json[\"initiatorOrigin\"] = self.initiator_origin\n    if self.resource_ip_address_space is not None:\n        json[\"resourceIPAddressSpace\"] = self.resource_ip_address_space.to_json()\n    if self.client_security_state is not None:\n        json[\"clientSecurityState\"] = self.client_security_state.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.DeprecationIssueDetails","title":"<code>DeprecationIssueDetails</code>  <code>dataclass</code>","text":"<p>This issue tracks information needed to print a deprecation message. https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass DeprecationIssueDetails:\n    \"\"\"\n    This issue tracks information needed to print a deprecation message.\n    https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md\n    \"\"\"\n\n    source_code_location: SourceCodeLocation\n\n    #: One of the deprecation names from third_party/blink/renderer/core/frame/deprecation/deprecation.json5\n    type_: str\n\n    affected_frame: typing.Optional[AffectedFrame] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n        json[\"type\"] = self.type_\n        if self.affected_frame is not None:\n            json[\"affectedFrame\"] = self.affected_frame.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DeprecationIssueDetails:\n        return cls(\n            source_code_location=SourceCodeLocation.from_json(\n                json[\"sourceCodeLocation\"]\n            ),\n            type_=str(json[\"type\"]),\n            affected_frame=(\n                AffectedFrame.from_json(json[\"affectedFrame\"])\n                if json.get(\"affectedFrame\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.DeprecationIssueDetails.affected_frame","title":"<code>affected_frame: typing.Optional[AffectedFrame] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.DeprecationIssueDetails.source_code_location","title":"<code>source_code_location: SourceCodeLocation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.DeprecationIssueDetails.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.DeprecationIssueDetails.__init__","title":"<code>__init__(source_code_location, type_, affected_frame=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.DeprecationIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DeprecationIssueDetails:\n    return cls(\n        source_code_location=SourceCodeLocation.from_json(\n            json[\"sourceCodeLocation\"]\n        ),\n        type_=str(json[\"type\"]),\n        affected_frame=(\n            AffectedFrame.from_json(json[\"affectedFrame\"])\n            if json.get(\"affectedFrame\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.DeprecationIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n    json[\"type\"] = self.type_\n    if self.affected_frame is not None:\n        json[\"affectedFrame\"] = self.affected_frame.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FailedRequestInfo","title":"<code>FailedRequestInfo</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass FailedRequestInfo:\n    #: The URL that failed to load.\n    url: str\n\n    #: The failure message for the failed request.\n    failure_message: str\n\n    request_id: typing.Optional[network.RequestId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        json[\"failureMessage\"] = self.failure_message\n        if self.request_id is not None:\n            json[\"requestId\"] = self.request_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FailedRequestInfo:\n        return cls(\n            url=str(json[\"url\"]),\n            failure_message=str(json[\"failureMessage\"]),\n            request_id=(\n                network.RequestId.from_json(json[\"requestId\"])\n                if json.get(\"requestId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FailedRequestInfo.failure_message","title":"<code>failure_message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FailedRequestInfo.request_id","title":"<code>request_id: typing.Optional[network.RequestId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FailedRequestInfo.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FailedRequestInfo.__init__","title":"<code>__init__(url, failure_message, request_id=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FailedRequestInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FailedRequestInfo:\n    return cls(\n        url=str(json[\"url\"]),\n        failure_message=str(json[\"failureMessage\"]),\n        request_id=(\n            network.RequestId.from_json(json[\"requestId\"])\n            if json.get(\"requestId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FailedRequestInfo.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    json[\"failureMessage\"] = self.failure_message\n    if self.request_id is not None:\n        json[\"requestId\"] = self.request_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueDetails","title":"<code>FederatedAuthRequestIssueDetails</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass FederatedAuthRequestIssueDetails:\n    federated_auth_request_issue_reason: FederatedAuthRequestIssueReason\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"federatedAuthRequestIssueReason\"] = (\n            self.federated_auth_request_issue_reason.to_json()\n        )\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FederatedAuthRequestIssueDetails:\n        return cls(\n            federated_auth_request_issue_reason=FederatedAuthRequestIssueReason.from_json(\n                json[\"federatedAuthRequestIssueReason\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueDetails.federated_auth_request_issue_reason","title":"<code>federated_auth_request_issue_reason: FederatedAuthRequestIssueReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueDetails.__init__","title":"<code>__init__(federated_auth_request_issue_reason)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FederatedAuthRequestIssueDetails:\n    return cls(\n        federated_auth_request_issue_reason=FederatedAuthRequestIssueReason.from_json(\n            json[\"federatedAuthRequestIssueReason\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"federatedAuthRequestIssueReason\"] = (\n        self.federated_auth_request_issue_reason.to_json()\n    )\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason","title":"<code>FederatedAuthRequestIssueReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the failure reason when a federated authentication reason fails. Should be updated alongside RequestIdTokenStatus in third_party/blink/public/mojom/devtools/inspector_issue.mojom to include all cases except for success.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class FederatedAuthRequestIssueReason(enum.Enum):\n    \"\"\"\n    Represents the failure reason when a federated authentication reason fails.\n    Should be updated alongside RequestIdTokenStatus in\n    third_party/blink/public/mojom/devtools/inspector_issue.mojom to include\n    all cases except for success.\n    \"\"\"\n\n    SHOULD_EMBARGO = \"ShouldEmbargo\"\n    TOO_MANY_REQUESTS = \"TooManyRequests\"\n    WELL_KNOWN_HTTP_NOT_FOUND = \"WellKnownHttpNotFound\"\n    WELL_KNOWN_NO_RESPONSE = \"WellKnownNoResponse\"\n    WELL_KNOWN_INVALID_RESPONSE = \"WellKnownInvalidResponse\"\n    WELL_KNOWN_LIST_EMPTY = \"WellKnownListEmpty\"\n    WELL_KNOWN_INVALID_CONTENT_TYPE = \"WellKnownInvalidContentType\"\n    CONFIG_NOT_IN_WELL_KNOWN = \"ConfigNotInWellKnown\"\n    WELL_KNOWN_TOO_BIG = \"WellKnownTooBig\"\n    CONFIG_HTTP_NOT_FOUND = \"ConfigHttpNotFound\"\n    CONFIG_NO_RESPONSE = \"ConfigNoResponse\"\n    CONFIG_INVALID_RESPONSE = \"ConfigInvalidResponse\"\n    CONFIG_INVALID_CONTENT_TYPE = \"ConfigInvalidContentType\"\n    CLIENT_METADATA_HTTP_NOT_FOUND = \"ClientMetadataHttpNotFound\"\n    CLIENT_METADATA_NO_RESPONSE = \"ClientMetadataNoResponse\"\n    CLIENT_METADATA_INVALID_RESPONSE = \"ClientMetadataInvalidResponse\"\n    CLIENT_METADATA_INVALID_CONTENT_TYPE = \"ClientMetadataInvalidContentType\"\n    IDP_NOT_POTENTIALLY_TRUSTWORTHY = \"IdpNotPotentiallyTrustworthy\"\n    DISABLED_IN_SETTINGS = \"DisabledInSettings\"\n    DISABLED_IN_FLAGS = \"DisabledInFlags\"\n    ERROR_FETCHING_SIGNIN = \"ErrorFetchingSignin\"\n    INVALID_SIGNIN_RESPONSE = \"InvalidSigninResponse\"\n    ACCOUNTS_HTTP_NOT_FOUND = \"AccountsHttpNotFound\"\n    ACCOUNTS_NO_RESPONSE = \"AccountsNoResponse\"\n    ACCOUNTS_INVALID_RESPONSE = \"AccountsInvalidResponse\"\n    ACCOUNTS_LIST_EMPTY = \"AccountsListEmpty\"\n    ACCOUNTS_INVALID_CONTENT_TYPE = \"AccountsInvalidContentType\"\n    ID_TOKEN_HTTP_NOT_FOUND = \"IdTokenHttpNotFound\"\n    ID_TOKEN_NO_RESPONSE = \"IdTokenNoResponse\"\n    ID_TOKEN_INVALID_RESPONSE = \"IdTokenInvalidResponse\"\n    ID_TOKEN_IDP_ERROR_RESPONSE = \"IdTokenIdpErrorResponse\"\n    ID_TOKEN_CROSS_SITE_IDP_ERROR_RESPONSE = \"IdTokenCrossSiteIdpErrorResponse\"\n    ID_TOKEN_INVALID_REQUEST = \"IdTokenInvalidRequest\"\n    ID_TOKEN_INVALID_CONTENT_TYPE = \"IdTokenInvalidContentType\"\n    ERROR_ID_TOKEN = \"ErrorIdToken\"\n    CANCELED = \"Canceled\"\n    RP_PAGE_NOT_VISIBLE = \"RpPageNotVisible\"\n    SILENT_MEDIATION_FAILURE = \"SilentMediationFailure\"\n    THIRD_PARTY_COOKIES_BLOCKED = \"ThirdPartyCookiesBlocked\"\n    NOT_SIGNED_IN_WITH_IDP = \"NotSignedInWithIdp\"\n    MISSING_TRANSIENT_USER_ACTIVATION = \"MissingTransientUserActivation\"\n    REPLACED_BY_BUTTON_MODE = \"ReplacedByButtonMode\"\n    INVALID_FIELDS_SPECIFIED = \"InvalidFieldsSpecified\"\n    RELYING_PARTY_ORIGIN_IS_OPAQUE = \"RelyingPartyOriginIsOpaque\"\n    TYPE_NOT_MATCHING = \"TypeNotMatching\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; FederatedAuthRequestIssueReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ACCOUNTS_HTTP_NOT_FOUND","title":"<code>ACCOUNTS_HTTP_NOT_FOUND = 'AccountsHttpNotFound'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ACCOUNTS_INVALID_CONTENT_TYPE","title":"<code>ACCOUNTS_INVALID_CONTENT_TYPE = 'AccountsInvalidContentType'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ACCOUNTS_INVALID_RESPONSE","title":"<code>ACCOUNTS_INVALID_RESPONSE = 'AccountsInvalidResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ACCOUNTS_LIST_EMPTY","title":"<code>ACCOUNTS_LIST_EMPTY = 'AccountsListEmpty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ACCOUNTS_NO_RESPONSE","title":"<code>ACCOUNTS_NO_RESPONSE = 'AccountsNoResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.CANCELED","title":"<code>CANCELED = 'Canceled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.CLIENT_METADATA_HTTP_NOT_FOUND","title":"<code>CLIENT_METADATA_HTTP_NOT_FOUND = 'ClientMetadataHttpNotFound'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.CLIENT_METADATA_INVALID_CONTENT_TYPE","title":"<code>CLIENT_METADATA_INVALID_CONTENT_TYPE = 'ClientMetadataInvalidContentType'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.CLIENT_METADATA_INVALID_RESPONSE","title":"<code>CLIENT_METADATA_INVALID_RESPONSE = 'ClientMetadataInvalidResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.CLIENT_METADATA_NO_RESPONSE","title":"<code>CLIENT_METADATA_NO_RESPONSE = 'ClientMetadataNoResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.CONFIG_HTTP_NOT_FOUND","title":"<code>CONFIG_HTTP_NOT_FOUND = 'ConfigHttpNotFound'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.CONFIG_INVALID_CONTENT_TYPE","title":"<code>CONFIG_INVALID_CONTENT_TYPE = 'ConfigInvalidContentType'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.CONFIG_INVALID_RESPONSE","title":"<code>CONFIG_INVALID_RESPONSE = 'ConfigInvalidResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.CONFIG_NOT_IN_WELL_KNOWN","title":"<code>CONFIG_NOT_IN_WELL_KNOWN = 'ConfigNotInWellKnown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.CONFIG_NO_RESPONSE","title":"<code>CONFIG_NO_RESPONSE = 'ConfigNoResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.DISABLED_IN_FLAGS","title":"<code>DISABLED_IN_FLAGS = 'DisabledInFlags'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.DISABLED_IN_SETTINGS","title":"<code>DISABLED_IN_SETTINGS = 'DisabledInSettings'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ERROR_FETCHING_SIGNIN","title":"<code>ERROR_FETCHING_SIGNIN = 'ErrorFetchingSignin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ERROR_ID_TOKEN","title":"<code>ERROR_ID_TOKEN = 'ErrorIdToken'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.IDP_NOT_POTENTIALLY_TRUSTWORTHY","title":"<code>IDP_NOT_POTENTIALLY_TRUSTWORTHY = 'IdpNotPotentiallyTrustworthy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ID_TOKEN_CROSS_SITE_IDP_ERROR_RESPONSE","title":"<code>ID_TOKEN_CROSS_SITE_IDP_ERROR_RESPONSE = 'IdTokenCrossSiteIdpErrorResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ID_TOKEN_HTTP_NOT_FOUND","title":"<code>ID_TOKEN_HTTP_NOT_FOUND = 'IdTokenHttpNotFound'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ID_TOKEN_IDP_ERROR_RESPONSE","title":"<code>ID_TOKEN_IDP_ERROR_RESPONSE = 'IdTokenIdpErrorResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ID_TOKEN_INVALID_CONTENT_TYPE","title":"<code>ID_TOKEN_INVALID_CONTENT_TYPE = 'IdTokenInvalidContentType'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ID_TOKEN_INVALID_REQUEST","title":"<code>ID_TOKEN_INVALID_REQUEST = 'IdTokenInvalidRequest'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ID_TOKEN_INVALID_RESPONSE","title":"<code>ID_TOKEN_INVALID_RESPONSE = 'IdTokenInvalidResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.ID_TOKEN_NO_RESPONSE","title":"<code>ID_TOKEN_NO_RESPONSE = 'IdTokenNoResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.INVALID_FIELDS_SPECIFIED","title":"<code>INVALID_FIELDS_SPECIFIED = 'InvalidFieldsSpecified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.INVALID_SIGNIN_RESPONSE","title":"<code>INVALID_SIGNIN_RESPONSE = 'InvalidSigninResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.MISSING_TRANSIENT_USER_ACTIVATION","title":"<code>MISSING_TRANSIENT_USER_ACTIVATION = 'MissingTransientUserActivation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.NOT_SIGNED_IN_WITH_IDP","title":"<code>NOT_SIGNED_IN_WITH_IDP = 'NotSignedInWithIdp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.RELYING_PARTY_ORIGIN_IS_OPAQUE","title":"<code>RELYING_PARTY_ORIGIN_IS_OPAQUE = 'RelyingPartyOriginIsOpaque'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.REPLACED_BY_BUTTON_MODE","title":"<code>REPLACED_BY_BUTTON_MODE = 'ReplacedByButtonMode'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.RP_PAGE_NOT_VISIBLE","title":"<code>RP_PAGE_NOT_VISIBLE = 'RpPageNotVisible'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.SHOULD_EMBARGO","title":"<code>SHOULD_EMBARGO = 'ShouldEmbargo'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.SILENT_MEDIATION_FAILURE","title":"<code>SILENT_MEDIATION_FAILURE = 'SilentMediationFailure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.THIRD_PARTY_COOKIES_BLOCKED","title":"<code>THIRD_PARTY_COOKIES_BLOCKED = 'ThirdPartyCookiesBlocked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.TOO_MANY_REQUESTS","title":"<code>TOO_MANY_REQUESTS = 'TooManyRequests'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.TYPE_NOT_MATCHING","title":"<code>TYPE_NOT_MATCHING = 'TypeNotMatching'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.WELL_KNOWN_HTTP_NOT_FOUND","title":"<code>WELL_KNOWN_HTTP_NOT_FOUND = 'WellKnownHttpNotFound'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.WELL_KNOWN_INVALID_CONTENT_TYPE","title":"<code>WELL_KNOWN_INVALID_CONTENT_TYPE = 'WellKnownInvalidContentType'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.WELL_KNOWN_INVALID_RESPONSE","title":"<code>WELL_KNOWN_INVALID_RESPONSE = 'WellKnownInvalidResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.WELL_KNOWN_LIST_EMPTY","title":"<code>WELL_KNOWN_LIST_EMPTY = 'WellKnownListEmpty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.WELL_KNOWN_NO_RESPONSE","title":"<code>WELL_KNOWN_NO_RESPONSE = 'WellKnownNoResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.WELL_KNOWN_TOO_BIG","title":"<code>WELL_KNOWN_TOO_BIG = 'WellKnownTooBig'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; FederatedAuthRequestIssueReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthRequestIssueReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueDetails","title":"<code>FederatedAuthUserInfoRequestIssueDetails</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass FederatedAuthUserInfoRequestIssueDetails:\n    federated_auth_user_info_request_issue_reason: (\n        FederatedAuthUserInfoRequestIssueReason\n    )\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"federatedAuthUserInfoRequestIssueReason\"] = (\n            self.federated_auth_user_info_request_issue_reason.to_json()\n        )\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FederatedAuthUserInfoRequestIssueDetails:\n        return cls(\n            federated_auth_user_info_request_issue_reason=FederatedAuthUserInfoRequestIssueReason.from_json(\n                json[\"federatedAuthUserInfoRequestIssueReason\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueDetails.federated_auth_user_info_request_issue_reason","title":"<code>federated_auth_user_info_request_issue_reason: FederatedAuthUserInfoRequestIssueReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueDetails.__init__","title":"<code>__init__(federated_auth_user_info_request_issue_reason)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FederatedAuthUserInfoRequestIssueDetails:\n    return cls(\n        federated_auth_user_info_request_issue_reason=FederatedAuthUserInfoRequestIssueReason.from_json(\n            json[\"federatedAuthUserInfoRequestIssueReason\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"federatedAuthUserInfoRequestIssueReason\"] = (\n        self.federated_auth_user_info_request_issue_reason.to_json()\n    )\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason","title":"<code>FederatedAuthUserInfoRequestIssueReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the failure reason when a getUserInfo() call fails. Should be updated alongside FederatedAuthUserInfoRequestResult in third_party/blink/public/mojom/devtools/inspector_issue.mojom.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class FederatedAuthUserInfoRequestIssueReason(enum.Enum):\n    \"\"\"\n    Represents the failure reason when a getUserInfo() call fails.\n    Should be updated alongside FederatedAuthUserInfoRequestResult in\n    third_party/blink/public/mojom/devtools/inspector_issue.mojom.\n    \"\"\"\n\n    NOT_SAME_ORIGIN = \"NotSameOrigin\"\n    NOT_IFRAME = \"NotIframe\"\n    NOT_POTENTIALLY_TRUSTWORTHY = \"NotPotentiallyTrustworthy\"\n    NO_API_PERMISSION = \"NoApiPermission\"\n    NOT_SIGNED_IN_WITH_IDP = \"NotSignedInWithIdp\"\n    NO_ACCOUNT_SHARING_PERMISSION = \"NoAccountSharingPermission\"\n    INVALID_CONFIG_OR_WELL_KNOWN = \"InvalidConfigOrWellKnown\"\n    INVALID_ACCOUNTS_RESPONSE = \"InvalidAccountsResponse\"\n    NO_RETURNING_USER_FROM_FETCHED_ACCOUNTS = \"NoReturningUserFromFetchedAccounts\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; FederatedAuthUserInfoRequestIssueReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.INVALID_ACCOUNTS_RESPONSE","title":"<code>INVALID_ACCOUNTS_RESPONSE = 'InvalidAccountsResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.INVALID_CONFIG_OR_WELL_KNOWN","title":"<code>INVALID_CONFIG_OR_WELL_KNOWN = 'InvalidConfigOrWellKnown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.NOT_IFRAME","title":"<code>NOT_IFRAME = 'NotIframe'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.NOT_POTENTIALLY_TRUSTWORTHY","title":"<code>NOT_POTENTIALLY_TRUSTWORTHY = 'NotPotentiallyTrustworthy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.NOT_SAME_ORIGIN","title":"<code>NOT_SAME_ORIGIN = 'NotSameOrigin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.NOT_SIGNED_IN_WITH_IDP","title":"<code>NOT_SIGNED_IN_WITH_IDP = 'NotSignedInWithIdp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.NO_ACCOUNT_SHARING_PERMISSION","title":"<code>NO_ACCOUNT_SHARING_PERMISSION = 'NoAccountSharingPermission'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.NO_API_PERMISSION","title":"<code>NO_API_PERMISSION = 'NoApiPermission'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.NO_RETURNING_USER_FROM_FETCHED_ACCOUNTS","title":"<code>NO_RETURNING_USER_FROM_FETCHED_ACCOUNTS = 'NoReturningUserFromFetchedAccounts'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; FederatedAuthUserInfoRequestIssueReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.FederatedAuthUserInfoRequestIssueReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueDetails","title":"<code>GenericIssueDetails</code>  <code>dataclass</code>","text":"<p>Depending on the concrete errorType, different properties are set.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass GenericIssueDetails:\n    \"\"\"\n    Depending on the concrete errorType, different properties are set.\n    \"\"\"\n\n    #: Issues with the same errorType are aggregated in the frontend.\n    error_type: GenericIssueErrorType\n\n    frame_id: typing.Optional[page.FrameId] = None\n\n    violating_node_id: typing.Optional[dom.BackendNodeId] = None\n\n    violating_node_attribute: typing.Optional[str] = None\n\n    request: typing.Optional[AffectedRequest] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"errorType\"] = self.error_type.to_json()\n        if self.frame_id is not None:\n            json[\"frameId\"] = self.frame_id.to_json()\n        if self.violating_node_id is not None:\n            json[\"violatingNodeId\"] = self.violating_node_id.to_json()\n        if self.violating_node_attribute is not None:\n            json[\"violatingNodeAttribute\"] = self.violating_node_attribute\n        if self.request is not None:\n            json[\"request\"] = self.request.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; GenericIssueDetails:\n        return cls(\n            error_type=GenericIssueErrorType.from_json(json[\"errorType\"]),\n            frame_id=(\n                page.FrameId.from_json(json[\"frameId\"])\n                if json.get(\"frameId\", None) is not None\n                else None\n            ),\n            violating_node_id=(\n                dom.BackendNodeId.from_json(json[\"violatingNodeId\"])\n                if json.get(\"violatingNodeId\", None) is not None\n                else None\n            ),\n            violating_node_attribute=(\n                str(json[\"violatingNodeAttribute\"])\n                if json.get(\"violatingNodeAttribute\", None) is not None\n                else None\n            ),\n            request=(\n                AffectedRequest.from_json(json[\"request\"])\n                if json.get(\"request\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueDetails.error_type","title":"<code>error_type: GenericIssueErrorType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueDetails.frame_id","title":"<code>frame_id: typing.Optional[page.FrameId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueDetails.request","title":"<code>request: typing.Optional[AffectedRequest] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueDetails.violating_node_attribute","title":"<code>violating_node_attribute: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueDetails.violating_node_id","title":"<code>violating_node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueDetails.__init__","title":"<code>__init__(error_type, frame_id=None, violating_node_id=None, violating_node_attribute=None, request=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; GenericIssueDetails:\n    return cls(\n        error_type=GenericIssueErrorType.from_json(json[\"errorType\"]),\n        frame_id=(\n            page.FrameId.from_json(json[\"frameId\"])\n            if json.get(\"frameId\", None) is not None\n            else None\n        ),\n        violating_node_id=(\n            dom.BackendNodeId.from_json(json[\"violatingNodeId\"])\n            if json.get(\"violatingNodeId\", None) is not None\n            else None\n        ),\n        violating_node_attribute=(\n            str(json[\"violatingNodeAttribute\"])\n            if json.get(\"violatingNodeAttribute\", None) is not None\n            else None\n        ),\n        request=(\n            AffectedRequest.from_json(json[\"request\"])\n            if json.get(\"request\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"errorType\"] = self.error_type.to_json()\n    if self.frame_id is not None:\n        json[\"frameId\"] = self.frame_id.to_json()\n    if self.violating_node_id is not None:\n        json[\"violatingNodeId\"] = self.violating_node_id.to_json()\n    if self.violating_node_attribute is not None:\n        json[\"violatingNodeAttribute\"] = self.violating_node_attribute\n    if self.request is not None:\n        json[\"request\"] = self.request.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType","title":"<code>GenericIssueErrorType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class GenericIssueErrorType(enum.Enum):\n    CROSS_ORIGIN_PORTAL_POST_MESSAGE_ERROR = \"CrossOriginPortalPostMessageError\"\n    FORM_LABEL_FOR_NAME_ERROR = \"FormLabelForNameError\"\n    FORM_DUPLICATE_ID_FOR_INPUT_ERROR = \"FormDuplicateIdForInputError\"\n    FORM_INPUT_WITH_NO_LABEL_ERROR = \"FormInputWithNoLabelError\"\n    FORM_AUTOCOMPLETE_ATTRIBUTE_EMPTY_ERROR = \"FormAutocompleteAttributeEmptyError\"\n    FORM_EMPTY_ID_AND_NAME_ATTRIBUTES_FOR_INPUT_ERROR = (\n        \"FormEmptyIdAndNameAttributesForInputError\"\n    )\n    FORM_ARIA_LABELLED_BY_TO_NON_EXISTING_ID = \"FormAriaLabelledByToNonExistingId\"\n    FORM_INPUT_ASSIGNED_AUTOCOMPLETE_VALUE_TO_ID_OR_NAME_ATTRIBUTE_ERROR = (\n        \"FormInputAssignedAutocompleteValueToIdOrNameAttributeError\"\n    )\n    FORM_LABEL_HAS_NEITHER_FOR_NOR_NESTED_INPUT = \"FormLabelHasNeitherForNorNestedInput\"\n    FORM_LABEL_FOR_MATCHES_NON_EXISTING_ID_ERROR = (\n        \"FormLabelForMatchesNonExistingIdError\"\n    )\n    FORM_INPUT_HAS_WRONG_BUT_WELL_INTENDED_AUTOCOMPLETE_VALUE_ERROR = (\n        \"FormInputHasWrongButWellIntendedAutocompleteValueError\"\n    )\n    RESPONSE_WAS_BLOCKED_BY_ORB = \"ResponseWasBlockedByORB\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; GenericIssueErrorType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.CROSS_ORIGIN_PORTAL_POST_MESSAGE_ERROR","title":"<code>CROSS_ORIGIN_PORTAL_POST_MESSAGE_ERROR = 'CrossOriginPortalPostMessageError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.FORM_ARIA_LABELLED_BY_TO_NON_EXISTING_ID","title":"<code>FORM_ARIA_LABELLED_BY_TO_NON_EXISTING_ID = 'FormAriaLabelledByToNonExistingId'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.FORM_AUTOCOMPLETE_ATTRIBUTE_EMPTY_ERROR","title":"<code>FORM_AUTOCOMPLETE_ATTRIBUTE_EMPTY_ERROR = 'FormAutocompleteAttributeEmptyError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.FORM_DUPLICATE_ID_FOR_INPUT_ERROR","title":"<code>FORM_DUPLICATE_ID_FOR_INPUT_ERROR = 'FormDuplicateIdForInputError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.FORM_EMPTY_ID_AND_NAME_ATTRIBUTES_FOR_INPUT_ERROR","title":"<code>FORM_EMPTY_ID_AND_NAME_ATTRIBUTES_FOR_INPUT_ERROR = 'FormEmptyIdAndNameAttributesForInputError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.FORM_INPUT_ASSIGNED_AUTOCOMPLETE_VALUE_TO_ID_OR_NAME_ATTRIBUTE_ERROR","title":"<code>FORM_INPUT_ASSIGNED_AUTOCOMPLETE_VALUE_TO_ID_OR_NAME_ATTRIBUTE_ERROR = 'FormInputAssignedAutocompleteValueToIdOrNameAttributeError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.FORM_INPUT_HAS_WRONG_BUT_WELL_INTENDED_AUTOCOMPLETE_VALUE_ERROR","title":"<code>FORM_INPUT_HAS_WRONG_BUT_WELL_INTENDED_AUTOCOMPLETE_VALUE_ERROR = 'FormInputHasWrongButWellIntendedAutocompleteValueError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.FORM_INPUT_WITH_NO_LABEL_ERROR","title":"<code>FORM_INPUT_WITH_NO_LABEL_ERROR = 'FormInputWithNoLabelError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.FORM_LABEL_FOR_MATCHES_NON_EXISTING_ID_ERROR","title":"<code>FORM_LABEL_FOR_MATCHES_NON_EXISTING_ID_ERROR = 'FormLabelForMatchesNonExistingIdError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.FORM_LABEL_FOR_NAME_ERROR","title":"<code>FORM_LABEL_FOR_NAME_ERROR = 'FormLabelForNameError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.FORM_LABEL_HAS_NEITHER_FOR_NOR_NESTED_INPUT","title":"<code>FORM_LABEL_HAS_NEITHER_FOR_NOR_NESTED_INPUT = 'FormLabelHasNeitherForNorNestedInput'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.RESPONSE_WAS_BLOCKED_BY_ORB","title":"<code>RESPONSE_WAS_BLOCKED_BY_ORB = 'ResponseWasBlockedByORB'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; GenericIssueErrorType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.GenericIssueErrorType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdIssueDetails","title":"<code>HeavyAdIssueDetails</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass HeavyAdIssueDetails:\n    #: The resolution status, either blocking the content or warning.\n    resolution: HeavyAdResolutionStatus\n\n    #: The reason the ad was blocked, total network or cpu or peak cpu.\n    reason: HeavyAdReason\n\n    #: The frame that was blocked.\n    frame: AffectedFrame\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"resolution\"] = self.resolution.to_json()\n        json[\"reason\"] = self.reason.to_json()\n        json[\"frame\"] = self.frame.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; HeavyAdIssueDetails:\n        return cls(\n            resolution=HeavyAdResolutionStatus.from_json(json[\"resolution\"]),\n            reason=HeavyAdReason.from_json(json[\"reason\"]),\n            frame=AffectedFrame.from_json(json[\"frame\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdIssueDetails.frame","title":"<code>frame: AffectedFrame</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdIssueDetails.reason","title":"<code>reason: HeavyAdReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdIssueDetails.resolution","title":"<code>resolution: HeavyAdResolutionStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdIssueDetails.__init__","title":"<code>__init__(resolution, reason, frame)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; HeavyAdIssueDetails:\n    return cls(\n        resolution=HeavyAdResolutionStatus.from_json(json[\"resolution\"]),\n        reason=HeavyAdReason.from_json(json[\"reason\"]),\n        frame=AffectedFrame.from_json(json[\"frame\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"resolution\"] = self.resolution.to_json()\n    json[\"reason\"] = self.reason.to_json()\n    json[\"frame\"] = self.frame.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdReason","title":"<code>HeavyAdReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class HeavyAdReason(enum.Enum):\n    NETWORK_TOTAL_LIMIT = \"NetworkTotalLimit\"\n    CPU_TOTAL_LIMIT = \"CpuTotalLimit\"\n    CPU_PEAK_LIMIT = \"CpuPeakLimit\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; HeavyAdReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdReason.CPU_PEAK_LIMIT","title":"<code>CPU_PEAK_LIMIT = 'CpuPeakLimit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdReason.CPU_TOTAL_LIMIT","title":"<code>CPU_TOTAL_LIMIT = 'CpuTotalLimit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdReason.NETWORK_TOTAL_LIMIT","title":"<code>NETWORK_TOTAL_LIMIT = 'NetworkTotalLimit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; HeavyAdReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdResolutionStatus","title":"<code>HeavyAdResolutionStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class HeavyAdResolutionStatus(enum.Enum):\n    HEAVY_AD_BLOCKED = \"HeavyAdBlocked\"\n    HEAVY_AD_WARNING = \"HeavyAdWarning\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; HeavyAdResolutionStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdResolutionStatus.HEAVY_AD_BLOCKED","title":"<code>HEAVY_AD_BLOCKED = 'HeavyAdBlocked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdResolutionStatus.HEAVY_AD_WARNING","title":"<code>HEAVY_AD_WARNING = 'HeavyAdWarning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdResolutionStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; HeavyAdResolutionStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.HeavyAdResolutionStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssue","title":"<code>InspectorIssue</code>  <code>dataclass</code>","text":"<p>An inspector issue reported from the back-end.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass InspectorIssue:\n    \"\"\"\n    An inspector issue reported from the back-end.\n    \"\"\"\n\n    code: InspectorIssueCode\n\n    details: InspectorIssueDetails\n\n    #: A unique id for this issue. May be omitted if no other entity (e.g.\n    #: exception, CDP message, etc.) is referencing this issue.\n    issue_id: typing.Optional[IssueId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"code\"] = self.code.to_json()\n        json[\"details\"] = self.details.to_json()\n        if self.issue_id is not None:\n            json[\"issueId\"] = self.issue_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InspectorIssue:\n        return cls(\n            code=InspectorIssueCode.from_json(json[\"code\"]),\n            details=InspectorIssueDetails.from_json(json[\"details\"]),\n            issue_id=(\n                IssueId.from_json(json[\"issueId\"])\n                if json.get(\"issueId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssue.code","title":"<code>code: InspectorIssueCode</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssue.details","title":"<code>details: InspectorIssueDetails</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssue.issue_id","title":"<code>issue_id: typing.Optional[IssueId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssue.__init__","title":"<code>__init__(code, details, issue_id=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssue.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InspectorIssue:\n    return cls(\n        code=InspectorIssueCode.from_json(json[\"code\"]),\n        details=InspectorIssueDetails.from_json(json[\"details\"]),\n        issue_id=(\n            IssueId.from_json(json[\"issueId\"])\n            if json.get(\"issueId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssue.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"code\"] = self.code.to_json()\n    json[\"details\"] = self.details.to_json()\n    if self.issue_id is not None:\n        json[\"issueId\"] = self.issue_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode","title":"<code>InspectorIssueCode</code>","text":"<p>               Bases: <code>Enum</code></p> <p>A unique identifier for the type of issue. Each type may use one of the optional fields in InspectorIssueDetails to convey more specific information about the kind of issue.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class InspectorIssueCode(enum.Enum):\n    \"\"\"\n    A unique identifier for the type of issue. Each type may use one of the\n    optional fields in InspectorIssueDetails to convey more specific\n    information about the kind of issue.\n    \"\"\"\n\n    COOKIE_ISSUE = \"CookieIssue\"\n    MIXED_CONTENT_ISSUE = \"MixedContentIssue\"\n    BLOCKED_BY_RESPONSE_ISSUE = \"BlockedByResponseIssue\"\n    HEAVY_AD_ISSUE = \"HeavyAdIssue\"\n    CONTENT_SECURITY_POLICY_ISSUE = \"ContentSecurityPolicyIssue\"\n    SHARED_ARRAY_BUFFER_ISSUE = \"SharedArrayBufferIssue\"\n    LOW_TEXT_CONTRAST_ISSUE = \"LowTextContrastIssue\"\n    CORS_ISSUE = \"CorsIssue\"\n    ATTRIBUTION_REPORTING_ISSUE = \"AttributionReportingIssue\"\n    QUIRKS_MODE_ISSUE = \"QuirksModeIssue\"\n    NAVIGATOR_USER_AGENT_ISSUE = \"NavigatorUserAgentIssue\"\n    GENERIC_ISSUE = \"GenericIssue\"\n    DEPRECATION_ISSUE = \"DeprecationIssue\"\n    CLIENT_HINT_ISSUE = \"ClientHintIssue\"\n    FEDERATED_AUTH_REQUEST_ISSUE = \"FederatedAuthRequestIssue\"\n    BOUNCE_TRACKING_ISSUE = \"BounceTrackingIssue\"\n    COOKIE_DEPRECATION_METADATA_ISSUE = \"CookieDeprecationMetadataIssue\"\n    STYLESHEET_LOADING_ISSUE = \"StylesheetLoadingIssue\"\n    FEDERATED_AUTH_USER_INFO_REQUEST_ISSUE = \"FederatedAuthUserInfoRequestIssue\"\n    PROPERTY_RULE_ISSUE = \"PropertyRuleIssue\"\n    SHARED_DICTIONARY_ISSUE = \"SharedDictionaryIssue\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; InspectorIssueCode:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.ATTRIBUTION_REPORTING_ISSUE","title":"<code>ATTRIBUTION_REPORTING_ISSUE = 'AttributionReportingIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.BLOCKED_BY_RESPONSE_ISSUE","title":"<code>BLOCKED_BY_RESPONSE_ISSUE = 'BlockedByResponseIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.BOUNCE_TRACKING_ISSUE","title":"<code>BOUNCE_TRACKING_ISSUE = 'BounceTrackingIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.CLIENT_HINT_ISSUE","title":"<code>CLIENT_HINT_ISSUE = 'ClientHintIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.CONTENT_SECURITY_POLICY_ISSUE","title":"<code>CONTENT_SECURITY_POLICY_ISSUE = 'ContentSecurityPolicyIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.COOKIE_DEPRECATION_METADATA_ISSUE","title":"<code>COOKIE_DEPRECATION_METADATA_ISSUE = 'CookieDeprecationMetadataIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.COOKIE_ISSUE","title":"<code>COOKIE_ISSUE = 'CookieIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.CORS_ISSUE","title":"<code>CORS_ISSUE = 'CorsIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.DEPRECATION_ISSUE","title":"<code>DEPRECATION_ISSUE = 'DeprecationIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.FEDERATED_AUTH_REQUEST_ISSUE","title":"<code>FEDERATED_AUTH_REQUEST_ISSUE = 'FederatedAuthRequestIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.FEDERATED_AUTH_USER_INFO_REQUEST_ISSUE","title":"<code>FEDERATED_AUTH_USER_INFO_REQUEST_ISSUE = 'FederatedAuthUserInfoRequestIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.GENERIC_ISSUE","title":"<code>GENERIC_ISSUE = 'GenericIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.HEAVY_AD_ISSUE","title":"<code>HEAVY_AD_ISSUE = 'HeavyAdIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.LOW_TEXT_CONTRAST_ISSUE","title":"<code>LOW_TEXT_CONTRAST_ISSUE = 'LowTextContrastIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.MIXED_CONTENT_ISSUE","title":"<code>MIXED_CONTENT_ISSUE = 'MixedContentIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.NAVIGATOR_USER_AGENT_ISSUE","title":"<code>NAVIGATOR_USER_AGENT_ISSUE = 'NavigatorUserAgentIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.PROPERTY_RULE_ISSUE","title":"<code>PROPERTY_RULE_ISSUE = 'PropertyRuleIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.QUIRKS_MODE_ISSUE","title":"<code>QUIRKS_MODE_ISSUE = 'QuirksModeIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.SHARED_ARRAY_BUFFER_ISSUE","title":"<code>SHARED_ARRAY_BUFFER_ISSUE = 'SharedArrayBufferIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.SHARED_DICTIONARY_ISSUE","title":"<code>SHARED_DICTIONARY_ISSUE = 'SharedDictionaryIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.STYLESHEET_LOADING_ISSUE","title":"<code>STYLESHEET_LOADING_ISSUE = 'StylesheetLoadingIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; InspectorIssueCode:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueCode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails","title":"<code>InspectorIssueDetails</code>  <code>dataclass</code>","text":"<p>This struct holds a list of optional fields with additional information specific to the kind of issue. When adding a new issue code, please also add a new optional field to this type.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass InspectorIssueDetails:\n    \"\"\"\n    This struct holds a list of optional fields with additional information\n    specific to the kind of issue. When adding a new issue code, please also\n    add a new optional field to this type.\n    \"\"\"\n\n    cookie_issue_details: typing.Optional[CookieIssueDetails] = None\n\n    mixed_content_issue_details: typing.Optional[MixedContentIssueDetails] = None\n\n    blocked_by_response_issue_details: typing.Optional[\n        BlockedByResponseIssueDetails\n    ] = None\n\n    heavy_ad_issue_details: typing.Optional[HeavyAdIssueDetails] = None\n\n    content_security_policy_issue_details: typing.Optional[\n        ContentSecurityPolicyIssueDetails\n    ] = None\n\n    shared_array_buffer_issue_details: typing.Optional[\n        SharedArrayBufferIssueDetails\n    ] = None\n\n    low_text_contrast_issue_details: typing.Optional[LowTextContrastIssueDetails] = None\n\n    cors_issue_details: typing.Optional[CorsIssueDetails] = None\n\n    attribution_reporting_issue_details: typing.Optional[\n        AttributionReportingIssueDetails\n    ] = None\n\n    quirks_mode_issue_details: typing.Optional[QuirksModeIssueDetails] = None\n\n    navigator_user_agent_issue_details: typing.Optional[\n        NavigatorUserAgentIssueDetails\n    ] = None\n\n    generic_issue_details: typing.Optional[GenericIssueDetails] = None\n\n    deprecation_issue_details: typing.Optional[DeprecationIssueDetails] = None\n\n    client_hint_issue_details: typing.Optional[ClientHintIssueDetails] = None\n\n    federated_auth_request_issue_details: typing.Optional[\n        FederatedAuthRequestIssueDetails\n    ] = None\n\n    bounce_tracking_issue_details: typing.Optional[BounceTrackingIssueDetails] = None\n\n    cookie_deprecation_metadata_issue_details: typing.Optional[\n        CookieDeprecationMetadataIssueDetails\n    ] = None\n\n    stylesheet_loading_issue_details: typing.Optional[StylesheetLoadingIssueDetails] = (\n        None\n    )\n\n    property_rule_issue_details: typing.Optional[PropertyRuleIssueDetails] = None\n\n    federated_auth_user_info_request_issue_details: typing.Optional[\n        FederatedAuthUserInfoRequestIssueDetails\n    ] = None\n\n    shared_dictionary_issue_details: typing.Optional[SharedDictionaryIssueDetails] = (\n        None\n    )\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.cookie_issue_details is not None:\n            json[\"cookieIssueDetails\"] = self.cookie_issue_details.to_json()\n        if self.mixed_content_issue_details is not None:\n            json[\"mixedContentIssueDetails\"] = (\n                self.mixed_content_issue_details.to_json()\n            )\n        if self.blocked_by_response_issue_details is not None:\n            json[\"blockedByResponseIssueDetails\"] = (\n                self.blocked_by_response_issue_details.to_json()\n            )\n        if self.heavy_ad_issue_details is not None:\n            json[\"heavyAdIssueDetails\"] = self.heavy_ad_issue_details.to_json()\n        if self.content_security_policy_issue_details is not None:\n            json[\"contentSecurityPolicyIssueDetails\"] = (\n                self.content_security_policy_issue_details.to_json()\n            )\n        if self.shared_array_buffer_issue_details is not None:\n            json[\"sharedArrayBufferIssueDetails\"] = (\n                self.shared_array_buffer_issue_details.to_json()\n            )\n        if self.low_text_contrast_issue_details is not None:\n            json[\"lowTextContrastIssueDetails\"] = (\n                self.low_text_contrast_issue_details.to_json()\n            )\n        if self.cors_issue_details is not None:\n            json[\"corsIssueDetails\"] = self.cors_issue_details.to_json()\n        if self.attribution_reporting_issue_details is not None:\n            json[\"attributionReportingIssueDetails\"] = (\n                self.attribution_reporting_issue_details.to_json()\n            )\n        if self.quirks_mode_issue_details is not None:\n            json[\"quirksModeIssueDetails\"] = self.quirks_mode_issue_details.to_json()\n        if self.navigator_user_agent_issue_details is not None:\n            json[\"navigatorUserAgentIssueDetails\"] = (\n                self.navigator_user_agent_issue_details.to_json()\n            )\n        if self.generic_issue_details is not None:\n            json[\"genericIssueDetails\"] = self.generic_issue_details.to_json()\n        if self.deprecation_issue_details is not None:\n            json[\"deprecationIssueDetails\"] = self.deprecation_issue_details.to_json()\n        if self.client_hint_issue_details is not None:\n            json[\"clientHintIssueDetails\"] = self.client_hint_issue_details.to_json()\n        if self.federated_auth_request_issue_details is not None:\n            json[\"federatedAuthRequestIssueDetails\"] = (\n                self.federated_auth_request_issue_details.to_json()\n            )\n        if self.bounce_tracking_issue_details is not None:\n            json[\"bounceTrackingIssueDetails\"] = (\n                self.bounce_tracking_issue_details.to_json()\n            )\n        if self.cookie_deprecation_metadata_issue_details is not None:\n            json[\"cookieDeprecationMetadataIssueDetails\"] = (\n                self.cookie_deprecation_metadata_issue_details.to_json()\n            )\n        if self.stylesheet_loading_issue_details is not None:\n            json[\"stylesheetLoadingIssueDetails\"] = (\n                self.stylesheet_loading_issue_details.to_json()\n            )\n        if self.property_rule_issue_details is not None:\n            json[\"propertyRuleIssueDetails\"] = (\n                self.property_rule_issue_details.to_json()\n            )\n        if self.federated_auth_user_info_request_issue_details is not None:\n            json[\"federatedAuthUserInfoRequestIssueDetails\"] = (\n                self.federated_auth_user_info_request_issue_details.to_json()\n            )\n        if self.shared_dictionary_issue_details is not None:\n            json[\"sharedDictionaryIssueDetails\"] = (\n                self.shared_dictionary_issue_details.to_json()\n            )\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InspectorIssueDetails:\n        return cls(\n            cookie_issue_details=(\n                CookieIssueDetails.from_json(json[\"cookieIssueDetails\"])\n                if json.get(\"cookieIssueDetails\", None) is not None\n                else None\n            ),\n            mixed_content_issue_details=(\n                MixedContentIssueDetails.from_json(json[\"mixedContentIssueDetails\"])\n                if json.get(\"mixedContentIssueDetails\", None) is not None\n                else None\n            ),\n            blocked_by_response_issue_details=(\n                BlockedByResponseIssueDetails.from_json(\n                    json[\"blockedByResponseIssueDetails\"]\n                )\n                if json.get(\"blockedByResponseIssueDetails\", None) is not None\n                else None\n            ),\n            heavy_ad_issue_details=(\n                HeavyAdIssueDetails.from_json(json[\"heavyAdIssueDetails\"])\n                if json.get(\"heavyAdIssueDetails\", None) is not None\n                else None\n            ),\n            content_security_policy_issue_details=(\n                ContentSecurityPolicyIssueDetails.from_json(\n                    json[\"contentSecurityPolicyIssueDetails\"]\n                )\n                if json.get(\"contentSecurityPolicyIssueDetails\", None) is not None\n                else None\n            ),\n            shared_array_buffer_issue_details=(\n                SharedArrayBufferIssueDetails.from_json(\n                    json[\"sharedArrayBufferIssueDetails\"]\n                )\n                if json.get(\"sharedArrayBufferIssueDetails\", None) is not None\n                else None\n            ),\n            low_text_contrast_issue_details=(\n                LowTextContrastIssueDetails.from_json(\n                    json[\"lowTextContrastIssueDetails\"]\n                )\n                if json.get(\"lowTextContrastIssueDetails\", None) is not None\n                else None\n            ),\n            cors_issue_details=(\n                CorsIssueDetails.from_json(json[\"corsIssueDetails\"])\n                if json.get(\"corsIssueDetails\", None) is not None\n                else None\n            ),\n            attribution_reporting_issue_details=(\n                AttributionReportingIssueDetails.from_json(\n                    json[\"attributionReportingIssueDetails\"]\n                )\n                if json.get(\"attributionReportingIssueDetails\", None) is not None\n                else None\n            ),\n            quirks_mode_issue_details=(\n                QuirksModeIssueDetails.from_json(json[\"quirksModeIssueDetails\"])\n                if json.get(\"quirksModeIssueDetails\", None) is not None\n                else None\n            ),\n            navigator_user_agent_issue_details=(\n                NavigatorUserAgentIssueDetails.from_json(\n                    json[\"navigatorUserAgentIssueDetails\"]\n                )\n                if json.get(\"navigatorUserAgentIssueDetails\", None) is not None\n                else None\n            ),\n            generic_issue_details=(\n                GenericIssueDetails.from_json(json[\"genericIssueDetails\"])\n                if json.get(\"genericIssueDetails\", None) is not None\n                else None\n            ),\n            deprecation_issue_details=(\n                DeprecationIssueDetails.from_json(json[\"deprecationIssueDetails\"])\n                if json.get(\"deprecationIssueDetails\", None) is not None\n                else None\n            ),\n            client_hint_issue_details=(\n                ClientHintIssueDetails.from_json(json[\"clientHintIssueDetails\"])\n                if json.get(\"clientHintIssueDetails\", None) is not None\n                else None\n            ),\n            federated_auth_request_issue_details=(\n                FederatedAuthRequestIssueDetails.from_json(\n                    json[\"federatedAuthRequestIssueDetails\"]\n                )\n                if json.get(\"federatedAuthRequestIssueDetails\", None) is not None\n                else None\n            ),\n            bounce_tracking_issue_details=(\n                BounceTrackingIssueDetails.from_json(json[\"bounceTrackingIssueDetails\"])\n                if json.get(\"bounceTrackingIssueDetails\", None) is not None\n                else None\n            ),\n            cookie_deprecation_metadata_issue_details=(\n                CookieDeprecationMetadataIssueDetails.from_json(\n                    json[\"cookieDeprecationMetadataIssueDetails\"]\n                )\n                if json.get(\"cookieDeprecationMetadataIssueDetails\", None) is not None\n                else None\n            ),\n            stylesheet_loading_issue_details=(\n                StylesheetLoadingIssueDetails.from_json(\n                    json[\"stylesheetLoadingIssueDetails\"]\n                )\n                if json.get(\"stylesheetLoadingIssueDetails\", None) is not None\n                else None\n            ),\n            property_rule_issue_details=(\n                PropertyRuleIssueDetails.from_json(json[\"propertyRuleIssueDetails\"])\n                if json.get(\"propertyRuleIssueDetails\", None) is not None\n                else None\n            ),\n            federated_auth_user_info_request_issue_details=(\n                FederatedAuthUserInfoRequestIssueDetails.from_json(\n                    json[\"federatedAuthUserInfoRequestIssueDetails\"]\n                )\n                if json.get(\"federatedAuthUserInfoRequestIssueDetails\", None)\n                is not None\n                else None\n            ),\n            shared_dictionary_issue_details=(\n                SharedDictionaryIssueDetails.from_json(\n                    json[\"sharedDictionaryIssueDetails\"]\n                )\n                if json.get(\"sharedDictionaryIssueDetails\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.attribution_reporting_issue_details","title":"<code>attribution_reporting_issue_details: typing.Optional[AttributionReportingIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.blocked_by_response_issue_details","title":"<code>blocked_by_response_issue_details: typing.Optional[BlockedByResponseIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.bounce_tracking_issue_details","title":"<code>bounce_tracking_issue_details: typing.Optional[BounceTrackingIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.client_hint_issue_details","title":"<code>client_hint_issue_details: typing.Optional[ClientHintIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.content_security_policy_issue_details","title":"<code>content_security_policy_issue_details: typing.Optional[ContentSecurityPolicyIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.cookie_deprecation_metadata_issue_details","title":"<code>cookie_deprecation_metadata_issue_details: typing.Optional[CookieDeprecationMetadataIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.cookie_issue_details","title":"<code>cookie_issue_details: typing.Optional[CookieIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.cors_issue_details","title":"<code>cors_issue_details: typing.Optional[CorsIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.deprecation_issue_details","title":"<code>deprecation_issue_details: typing.Optional[DeprecationIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.federated_auth_request_issue_details","title":"<code>federated_auth_request_issue_details: typing.Optional[FederatedAuthRequestIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.federated_auth_user_info_request_issue_details","title":"<code>federated_auth_user_info_request_issue_details: typing.Optional[FederatedAuthUserInfoRequestIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.generic_issue_details","title":"<code>generic_issue_details: typing.Optional[GenericIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.heavy_ad_issue_details","title":"<code>heavy_ad_issue_details: typing.Optional[HeavyAdIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.low_text_contrast_issue_details","title":"<code>low_text_contrast_issue_details: typing.Optional[LowTextContrastIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.mixed_content_issue_details","title":"<code>mixed_content_issue_details: typing.Optional[MixedContentIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.navigator_user_agent_issue_details","title":"<code>navigator_user_agent_issue_details: typing.Optional[NavigatorUserAgentIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.property_rule_issue_details","title":"<code>property_rule_issue_details: typing.Optional[PropertyRuleIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.quirks_mode_issue_details","title":"<code>quirks_mode_issue_details: typing.Optional[QuirksModeIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.shared_array_buffer_issue_details","title":"<code>shared_array_buffer_issue_details: typing.Optional[SharedArrayBufferIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.shared_dictionary_issue_details","title":"<code>shared_dictionary_issue_details: typing.Optional[SharedDictionaryIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.stylesheet_loading_issue_details","title":"<code>stylesheet_loading_issue_details: typing.Optional[StylesheetLoadingIssueDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.__init__","title":"<code>__init__(cookie_issue_details=None, mixed_content_issue_details=None, blocked_by_response_issue_details=None, heavy_ad_issue_details=None, content_security_policy_issue_details=None, shared_array_buffer_issue_details=None, low_text_contrast_issue_details=None, cors_issue_details=None, attribution_reporting_issue_details=None, quirks_mode_issue_details=None, navigator_user_agent_issue_details=None, generic_issue_details=None, deprecation_issue_details=None, client_hint_issue_details=None, federated_auth_request_issue_details=None, bounce_tracking_issue_details=None, cookie_deprecation_metadata_issue_details=None, stylesheet_loading_issue_details=None, property_rule_issue_details=None, federated_auth_user_info_request_issue_details=None, shared_dictionary_issue_details=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InspectorIssueDetails:\n    return cls(\n        cookie_issue_details=(\n            CookieIssueDetails.from_json(json[\"cookieIssueDetails\"])\n            if json.get(\"cookieIssueDetails\", None) is not None\n            else None\n        ),\n        mixed_content_issue_details=(\n            MixedContentIssueDetails.from_json(json[\"mixedContentIssueDetails\"])\n            if json.get(\"mixedContentIssueDetails\", None) is not None\n            else None\n        ),\n        blocked_by_response_issue_details=(\n            BlockedByResponseIssueDetails.from_json(\n                json[\"blockedByResponseIssueDetails\"]\n            )\n            if json.get(\"blockedByResponseIssueDetails\", None) is not None\n            else None\n        ),\n        heavy_ad_issue_details=(\n            HeavyAdIssueDetails.from_json(json[\"heavyAdIssueDetails\"])\n            if json.get(\"heavyAdIssueDetails\", None) is not None\n            else None\n        ),\n        content_security_policy_issue_details=(\n            ContentSecurityPolicyIssueDetails.from_json(\n                json[\"contentSecurityPolicyIssueDetails\"]\n            )\n            if json.get(\"contentSecurityPolicyIssueDetails\", None) is not None\n            else None\n        ),\n        shared_array_buffer_issue_details=(\n            SharedArrayBufferIssueDetails.from_json(\n                json[\"sharedArrayBufferIssueDetails\"]\n            )\n            if json.get(\"sharedArrayBufferIssueDetails\", None) is not None\n            else None\n        ),\n        low_text_contrast_issue_details=(\n            LowTextContrastIssueDetails.from_json(\n                json[\"lowTextContrastIssueDetails\"]\n            )\n            if json.get(\"lowTextContrastIssueDetails\", None) is not None\n            else None\n        ),\n        cors_issue_details=(\n            CorsIssueDetails.from_json(json[\"corsIssueDetails\"])\n            if json.get(\"corsIssueDetails\", None) is not None\n            else None\n        ),\n        attribution_reporting_issue_details=(\n            AttributionReportingIssueDetails.from_json(\n                json[\"attributionReportingIssueDetails\"]\n            )\n            if json.get(\"attributionReportingIssueDetails\", None) is not None\n            else None\n        ),\n        quirks_mode_issue_details=(\n            QuirksModeIssueDetails.from_json(json[\"quirksModeIssueDetails\"])\n            if json.get(\"quirksModeIssueDetails\", None) is not None\n            else None\n        ),\n        navigator_user_agent_issue_details=(\n            NavigatorUserAgentIssueDetails.from_json(\n                json[\"navigatorUserAgentIssueDetails\"]\n            )\n            if json.get(\"navigatorUserAgentIssueDetails\", None) is not None\n            else None\n        ),\n        generic_issue_details=(\n            GenericIssueDetails.from_json(json[\"genericIssueDetails\"])\n            if json.get(\"genericIssueDetails\", None) is not None\n            else None\n        ),\n        deprecation_issue_details=(\n            DeprecationIssueDetails.from_json(json[\"deprecationIssueDetails\"])\n            if json.get(\"deprecationIssueDetails\", None) is not None\n            else None\n        ),\n        client_hint_issue_details=(\n            ClientHintIssueDetails.from_json(json[\"clientHintIssueDetails\"])\n            if json.get(\"clientHintIssueDetails\", None) is not None\n            else None\n        ),\n        federated_auth_request_issue_details=(\n            FederatedAuthRequestIssueDetails.from_json(\n                json[\"federatedAuthRequestIssueDetails\"]\n            )\n            if json.get(\"federatedAuthRequestIssueDetails\", None) is not None\n            else None\n        ),\n        bounce_tracking_issue_details=(\n            BounceTrackingIssueDetails.from_json(json[\"bounceTrackingIssueDetails\"])\n            if json.get(\"bounceTrackingIssueDetails\", None) is not None\n            else None\n        ),\n        cookie_deprecation_metadata_issue_details=(\n            CookieDeprecationMetadataIssueDetails.from_json(\n                json[\"cookieDeprecationMetadataIssueDetails\"]\n            )\n            if json.get(\"cookieDeprecationMetadataIssueDetails\", None) is not None\n            else None\n        ),\n        stylesheet_loading_issue_details=(\n            StylesheetLoadingIssueDetails.from_json(\n                json[\"stylesheetLoadingIssueDetails\"]\n            )\n            if json.get(\"stylesheetLoadingIssueDetails\", None) is not None\n            else None\n        ),\n        property_rule_issue_details=(\n            PropertyRuleIssueDetails.from_json(json[\"propertyRuleIssueDetails\"])\n            if json.get(\"propertyRuleIssueDetails\", None) is not None\n            else None\n        ),\n        federated_auth_user_info_request_issue_details=(\n            FederatedAuthUserInfoRequestIssueDetails.from_json(\n                json[\"federatedAuthUserInfoRequestIssueDetails\"]\n            )\n            if json.get(\"federatedAuthUserInfoRequestIssueDetails\", None)\n            is not None\n            else None\n        ),\n        shared_dictionary_issue_details=(\n            SharedDictionaryIssueDetails.from_json(\n                json[\"sharedDictionaryIssueDetails\"]\n            )\n            if json.get(\"sharedDictionaryIssueDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.InspectorIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.cookie_issue_details is not None:\n        json[\"cookieIssueDetails\"] = self.cookie_issue_details.to_json()\n    if self.mixed_content_issue_details is not None:\n        json[\"mixedContentIssueDetails\"] = (\n            self.mixed_content_issue_details.to_json()\n        )\n    if self.blocked_by_response_issue_details is not None:\n        json[\"blockedByResponseIssueDetails\"] = (\n            self.blocked_by_response_issue_details.to_json()\n        )\n    if self.heavy_ad_issue_details is not None:\n        json[\"heavyAdIssueDetails\"] = self.heavy_ad_issue_details.to_json()\n    if self.content_security_policy_issue_details is not None:\n        json[\"contentSecurityPolicyIssueDetails\"] = (\n            self.content_security_policy_issue_details.to_json()\n        )\n    if self.shared_array_buffer_issue_details is not None:\n        json[\"sharedArrayBufferIssueDetails\"] = (\n            self.shared_array_buffer_issue_details.to_json()\n        )\n    if self.low_text_contrast_issue_details is not None:\n        json[\"lowTextContrastIssueDetails\"] = (\n            self.low_text_contrast_issue_details.to_json()\n        )\n    if self.cors_issue_details is not None:\n        json[\"corsIssueDetails\"] = self.cors_issue_details.to_json()\n    if self.attribution_reporting_issue_details is not None:\n        json[\"attributionReportingIssueDetails\"] = (\n            self.attribution_reporting_issue_details.to_json()\n        )\n    if self.quirks_mode_issue_details is not None:\n        json[\"quirksModeIssueDetails\"] = self.quirks_mode_issue_details.to_json()\n    if self.navigator_user_agent_issue_details is not None:\n        json[\"navigatorUserAgentIssueDetails\"] = (\n            self.navigator_user_agent_issue_details.to_json()\n        )\n    if self.generic_issue_details is not None:\n        json[\"genericIssueDetails\"] = self.generic_issue_details.to_json()\n    if self.deprecation_issue_details is not None:\n        json[\"deprecationIssueDetails\"] = self.deprecation_issue_details.to_json()\n    if self.client_hint_issue_details is not None:\n        json[\"clientHintIssueDetails\"] = self.client_hint_issue_details.to_json()\n    if self.federated_auth_request_issue_details is not None:\n        json[\"federatedAuthRequestIssueDetails\"] = (\n            self.federated_auth_request_issue_details.to_json()\n        )\n    if self.bounce_tracking_issue_details is not None:\n        json[\"bounceTrackingIssueDetails\"] = (\n            self.bounce_tracking_issue_details.to_json()\n        )\n    if self.cookie_deprecation_metadata_issue_details is not None:\n        json[\"cookieDeprecationMetadataIssueDetails\"] = (\n            self.cookie_deprecation_metadata_issue_details.to_json()\n        )\n    if self.stylesheet_loading_issue_details is not None:\n        json[\"stylesheetLoadingIssueDetails\"] = (\n            self.stylesheet_loading_issue_details.to_json()\n        )\n    if self.property_rule_issue_details is not None:\n        json[\"propertyRuleIssueDetails\"] = (\n            self.property_rule_issue_details.to_json()\n        )\n    if self.federated_auth_user_info_request_issue_details is not None:\n        json[\"federatedAuthUserInfoRequestIssueDetails\"] = (\n            self.federated_auth_user_info_request_issue_details.to_json()\n        )\n    if self.shared_dictionary_issue_details is not None:\n        json[\"sharedDictionaryIssueDetails\"] = (\n            self.shared_dictionary_issue_details.to_json()\n        )\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.IssueAdded","title":"<code>IssueAdded</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@event_class(\"Audits.issueAdded\")\n@dataclass\nclass IssueAdded:\n    issue: InspectorIssue\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; IssueAdded:\n        return cls(issue=InspectorIssue.from_json(json[\"issue\"]))\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.IssueAdded.issue","title":"<code>issue: InspectorIssue</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.IssueAdded.__init__","title":"<code>__init__(issue)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.IssueAdded.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; IssueAdded:\n    return cls(issue=InspectorIssue.from_json(json[\"issue\"]))\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.IssueId","title":"<code>IssueId</code>","text":"<p>               Bases: <code>str</code></p> <p>A unique id for a DevTools inspector issue. Allows other entities (e.g. exceptions, CDP message, console messages, etc.) to reference an issue.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class IssueId(str):\n    \"\"\"\n    A unique id for a DevTools inspector issue. Allows other entities (e.g.\n    exceptions, CDP message, console messages, etc.) to reference an issue.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; IssueId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"IssueId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.IssueId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def __repr__(self):\n    return \"IssueId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.IssueId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; IssueId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.IssueId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails","title":"<code>LowTextContrastIssueDetails</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass LowTextContrastIssueDetails:\n    violating_node_id: dom.BackendNodeId\n\n    violating_node_selector: str\n\n    contrast_ratio: float\n\n    threshold_aa: float\n\n    threshold_aaa: float\n\n    font_size: str\n\n    font_weight: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"violatingNodeId\"] = self.violating_node_id.to_json()\n        json[\"violatingNodeSelector\"] = self.violating_node_selector\n        json[\"contrastRatio\"] = self.contrast_ratio\n        json[\"thresholdAA\"] = self.threshold_aa\n        json[\"thresholdAAA\"] = self.threshold_aaa\n        json[\"fontSize\"] = self.font_size\n        json[\"fontWeight\"] = self.font_weight\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LowTextContrastIssueDetails:\n        return cls(\n            violating_node_id=dom.BackendNodeId.from_json(json[\"violatingNodeId\"]),\n            violating_node_selector=str(json[\"violatingNodeSelector\"]),\n            contrast_ratio=float(json[\"contrastRatio\"]),\n            threshold_aa=float(json[\"thresholdAA\"]),\n            threshold_aaa=float(json[\"thresholdAAA\"]),\n            font_size=str(json[\"fontSize\"]),\n            font_weight=str(json[\"fontWeight\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails.contrast_ratio","title":"<code>contrast_ratio: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails.font_size","title":"<code>font_size: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails.font_weight","title":"<code>font_weight: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails.threshold_aa","title":"<code>threshold_aa: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails.threshold_aaa","title":"<code>threshold_aaa: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails.violating_node_id","title":"<code>violating_node_id: dom.BackendNodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails.violating_node_selector","title":"<code>violating_node_selector: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails.__init__","title":"<code>__init__(violating_node_id, violating_node_selector, contrast_ratio, threshold_aa, threshold_aaa, font_size, font_weight)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LowTextContrastIssueDetails:\n    return cls(\n        violating_node_id=dom.BackendNodeId.from_json(json[\"violatingNodeId\"]),\n        violating_node_selector=str(json[\"violatingNodeSelector\"]),\n        contrast_ratio=float(json[\"contrastRatio\"]),\n        threshold_aa=float(json[\"thresholdAA\"]),\n        threshold_aaa=float(json[\"thresholdAAA\"]),\n        font_size=str(json[\"fontSize\"]),\n        font_weight=str(json[\"fontWeight\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.LowTextContrastIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"violatingNodeId\"] = self.violating_node_id.to_json()\n    json[\"violatingNodeSelector\"] = self.violating_node_selector\n    json[\"contrastRatio\"] = self.contrast_ratio\n    json[\"thresholdAA\"] = self.threshold_aa\n    json[\"thresholdAAA\"] = self.threshold_aaa\n    json[\"fontSize\"] = self.font_size\n    json[\"fontWeight\"] = self.font_weight\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentIssueDetails","title":"<code>MixedContentIssueDetails</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass MixedContentIssueDetails:\n    #: The way the mixed content issue is being resolved.\n    resolution_status: MixedContentResolutionStatus\n\n    #: The unsafe http url causing the mixed content issue.\n    insecure_url: str\n\n    #: The url responsible for the call to an unsafe url.\n    main_resource_url: str\n\n    #: The type of resource causing the mixed content issue (css, js, iframe,\n    #: form,...). Marked as optional because it is mapped to from\n    #: blink::mojom::RequestContextType, which will be replaced\n    #: by network::mojom::RequestDestination\n    resource_type: typing.Optional[MixedContentResourceType] = None\n\n    #: The mixed content request.\n    #: Does not always exist (e.g. for unsafe form submission urls).\n    request: typing.Optional[AffectedRequest] = None\n\n    #: Optional because not every mixed content issue is necessarily linked to a frame.\n    frame: typing.Optional[AffectedFrame] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"resolutionStatus\"] = self.resolution_status.to_json()\n        json[\"insecureURL\"] = self.insecure_url\n        json[\"mainResourceURL\"] = self.main_resource_url\n        if self.resource_type is not None:\n            json[\"resourceType\"] = self.resource_type.to_json()\n        if self.request is not None:\n            json[\"request\"] = self.request.to_json()\n        if self.frame is not None:\n            json[\"frame\"] = self.frame.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; MixedContentIssueDetails:\n        return cls(\n            resolution_status=MixedContentResolutionStatus.from_json(\n                json[\"resolutionStatus\"]\n            ),\n            insecure_url=str(json[\"insecureURL\"]),\n            main_resource_url=str(json[\"mainResourceURL\"]),\n            resource_type=(\n                MixedContentResourceType.from_json(json[\"resourceType\"])\n                if json.get(\"resourceType\", None) is not None\n                else None\n            ),\n            request=(\n                AffectedRequest.from_json(json[\"request\"])\n                if json.get(\"request\", None) is not None\n                else None\n            ),\n            frame=(\n                AffectedFrame.from_json(json[\"frame\"])\n                if json.get(\"frame\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentIssueDetails.frame","title":"<code>frame: typing.Optional[AffectedFrame] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentIssueDetails.insecure_url","title":"<code>insecure_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentIssueDetails.main_resource_url","title":"<code>main_resource_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentIssueDetails.request","title":"<code>request: typing.Optional[AffectedRequest] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentIssueDetails.resolution_status","title":"<code>resolution_status: MixedContentResolutionStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentIssueDetails.resource_type","title":"<code>resource_type: typing.Optional[MixedContentResourceType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentIssueDetails.__init__","title":"<code>__init__(resolution_status, insecure_url, main_resource_url, resource_type=None, request=None, frame=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; MixedContentIssueDetails:\n    return cls(\n        resolution_status=MixedContentResolutionStatus.from_json(\n            json[\"resolutionStatus\"]\n        ),\n        insecure_url=str(json[\"insecureURL\"]),\n        main_resource_url=str(json[\"mainResourceURL\"]),\n        resource_type=(\n            MixedContentResourceType.from_json(json[\"resourceType\"])\n            if json.get(\"resourceType\", None) is not None\n            else None\n        ),\n        request=(\n            AffectedRequest.from_json(json[\"request\"])\n            if json.get(\"request\", None) is not None\n            else None\n        ),\n        frame=(\n            AffectedFrame.from_json(json[\"frame\"])\n            if json.get(\"frame\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"resolutionStatus\"] = self.resolution_status.to_json()\n    json[\"insecureURL\"] = self.insecure_url\n    json[\"mainResourceURL\"] = self.main_resource_url\n    if self.resource_type is not None:\n        json[\"resourceType\"] = self.resource_type.to_json()\n    if self.request is not None:\n        json[\"request\"] = self.request.to_json()\n    if self.frame is not None:\n        json[\"frame\"] = self.frame.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResolutionStatus","title":"<code>MixedContentResolutionStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class MixedContentResolutionStatus(enum.Enum):\n    MIXED_CONTENT_BLOCKED = \"MixedContentBlocked\"\n    MIXED_CONTENT_AUTOMATICALLY_UPGRADED = \"MixedContentAutomaticallyUpgraded\"\n    MIXED_CONTENT_WARNING = \"MixedContentWarning\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; MixedContentResolutionStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResolutionStatus.MIXED_CONTENT_AUTOMATICALLY_UPGRADED","title":"<code>MIXED_CONTENT_AUTOMATICALLY_UPGRADED = 'MixedContentAutomaticallyUpgraded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResolutionStatus.MIXED_CONTENT_BLOCKED","title":"<code>MIXED_CONTENT_BLOCKED = 'MixedContentBlocked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResolutionStatus.MIXED_CONTENT_WARNING","title":"<code>MIXED_CONTENT_WARNING = 'MixedContentWarning'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResolutionStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; MixedContentResolutionStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResolutionStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType","title":"<code>MixedContentResourceType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class MixedContentResourceType(enum.Enum):\n    ATTRIBUTION_SRC = \"AttributionSrc\"\n    AUDIO = \"Audio\"\n    BEACON = \"Beacon\"\n    CSP_REPORT = \"CSPReport\"\n    DOWNLOAD = \"Download\"\n    EVENT_SOURCE = \"EventSource\"\n    FAVICON = \"Favicon\"\n    FONT = \"Font\"\n    FORM = \"Form\"\n    FRAME = \"Frame\"\n    IMAGE = \"Image\"\n    IMPORT = \"Import\"\n    JSON = \"JSON\"\n    MANIFEST = \"Manifest\"\n    PING = \"Ping\"\n    PLUGIN_DATA = \"PluginData\"\n    PLUGIN_RESOURCE = \"PluginResource\"\n    PREFETCH = \"Prefetch\"\n    RESOURCE = \"Resource\"\n    SCRIPT = \"Script\"\n    SERVICE_WORKER = \"ServiceWorker\"\n    SHARED_WORKER = \"SharedWorker\"\n    SPECULATION_RULES = \"SpeculationRules\"\n    STYLESHEET = \"Stylesheet\"\n    TRACK = \"Track\"\n    VIDEO = \"Video\"\n    WORKER = \"Worker\"\n    XML_HTTP_REQUEST = \"XMLHttpRequest\"\n    XSLT = \"XSLT\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; MixedContentResourceType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.ATTRIBUTION_SRC","title":"<code>ATTRIBUTION_SRC = 'AttributionSrc'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.AUDIO","title":"<code>AUDIO = 'Audio'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.BEACON","title":"<code>BEACON = 'Beacon'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.CSP_REPORT","title":"<code>CSP_REPORT = 'CSPReport'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.DOWNLOAD","title":"<code>DOWNLOAD = 'Download'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.EVENT_SOURCE","title":"<code>EVENT_SOURCE = 'EventSource'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.FAVICON","title":"<code>FAVICON = 'Favicon'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.FONT","title":"<code>FONT = 'Font'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.FORM","title":"<code>FORM = 'Form'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.FRAME","title":"<code>FRAME = 'Frame'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.IMAGE","title":"<code>IMAGE = 'Image'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.IMPORT","title":"<code>IMPORT = 'Import'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.JSON","title":"<code>JSON = 'JSON'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.MANIFEST","title":"<code>MANIFEST = 'Manifest'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.PING","title":"<code>PING = 'Ping'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.PLUGIN_DATA","title":"<code>PLUGIN_DATA = 'PluginData'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.PLUGIN_RESOURCE","title":"<code>PLUGIN_RESOURCE = 'PluginResource'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.PREFETCH","title":"<code>PREFETCH = 'Prefetch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.RESOURCE","title":"<code>RESOURCE = 'Resource'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.SCRIPT","title":"<code>SCRIPT = 'Script'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.SERVICE_WORKER","title":"<code>SERVICE_WORKER = 'ServiceWorker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.SHARED_WORKER","title":"<code>SHARED_WORKER = 'SharedWorker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.SPECULATION_RULES","title":"<code>SPECULATION_RULES = 'SpeculationRules'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.STYLESHEET","title":"<code>STYLESHEET = 'Stylesheet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.TRACK","title":"<code>TRACK = 'Track'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.VIDEO","title":"<code>VIDEO = 'Video'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.WORKER","title":"<code>WORKER = 'Worker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.XML_HTTP_REQUEST","title":"<code>XML_HTTP_REQUEST = 'XMLHttpRequest'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.XSLT","title":"<code>XSLT = 'XSLT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; MixedContentResourceType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.MixedContentResourceType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.NavigatorUserAgentIssueDetails","title":"<code>NavigatorUserAgentIssueDetails</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass NavigatorUserAgentIssueDetails:\n    url: str\n\n    location: typing.Optional[SourceCodeLocation] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        if self.location is not None:\n            json[\"location\"] = self.location.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NavigatorUserAgentIssueDetails:\n        return cls(\n            url=str(json[\"url\"]),\n            location=(\n                SourceCodeLocation.from_json(json[\"location\"])\n                if json.get(\"location\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.NavigatorUserAgentIssueDetails.location","title":"<code>location: typing.Optional[SourceCodeLocation] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.NavigatorUserAgentIssueDetails.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.NavigatorUserAgentIssueDetails.__init__","title":"<code>__init__(url, location=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.NavigatorUserAgentIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NavigatorUserAgentIssueDetails:\n    return cls(\n        url=str(json[\"url\"]),\n        location=(\n            SourceCodeLocation.from_json(json[\"location\"])\n            if json.get(\"location\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.NavigatorUserAgentIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    if self.location is not None:\n        json[\"location\"] = self.location.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueDetails","title":"<code>PropertyRuleIssueDetails</code>  <code>dataclass</code>","text":"<p>This issue warns about errors in property rules that lead to property registrations being ignored.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass PropertyRuleIssueDetails:\n    \"\"\"\n    This issue warns about errors in property rules that lead to property\n    registrations being ignored.\n    \"\"\"\n\n    #: Source code position of the property rule.\n    source_code_location: SourceCodeLocation\n\n    #: Reason why the property rule was discarded.\n    property_rule_issue_reason: PropertyRuleIssueReason\n\n    #: The value of the property rule property that failed to parse\n    property_value: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n        json[\"propertyRuleIssueReason\"] = self.property_rule_issue_reason.to_json()\n        if self.property_value is not None:\n            json[\"propertyValue\"] = self.property_value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PropertyRuleIssueDetails:\n        return cls(\n            source_code_location=SourceCodeLocation.from_json(\n                json[\"sourceCodeLocation\"]\n            ),\n            property_rule_issue_reason=PropertyRuleIssueReason.from_json(\n                json[\"propertyRuleIssueReason\"]\n            ),\n            property_value=(\n                str(json[\"propertyValue\"])\n                if json.get(\"propertyValue\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueDetails.property_rule_issue_reason","title":"<code>property_rule_issue_reason: PropertyRuleIssueReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueDetails.property_value","title":"<code>property_value: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueDetails.source_code_location","title":"<code>source_code_location: SourceCodeLocation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueDetails.__init__","title":"<code>__init__(source_code_location, property_rule_issue_reason, property_value=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PropertyRuleIssueDetails:\n    return cls(\n        source_code_location=SourceCodeLocation.from_json(\n            json[\"sourceCodeLocation\"]\n        ),\n        property_rule_issue_reason=PropertyRuleIssueReason.from_json(\n            json[\"propertyRuleIssueReason\"]\n        ),\n        property_value=(\n            str(json[\"propertyValue\"])\n            if json.get(\"propertyValue\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n    json[\"propertyRuleIssueReason\"] = self.property_rule_issue_reason.to_json()\n    if self.property_value is not None:\n        json[\"propertyValue\"] = self.property_value\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueReason","title":"<code>PropertyRuleIssueReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class PropertyRuleIssueReason(enum.Enum):\n    INVALID_SYNTAX = \"InvalidSyntax\"\n    INVALID_INITIAL_VALUE = \"InvalidInitialValue\"\n    INVALID_INHERITS = \"InvalidInherits\"\n    INVALID_NAME = \"InvalidName\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PropertyRuleIssueReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueReason.INVALID_INHERITS","title":"<code>INVALID_INHERITS = 'InvalidInherits'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueReason.INVALID_INITIAL_VALUE","title":"<code>INVALID_INITIAL_VALUE = 'InvalidInitialValue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueReason.INVALID_NAME","title":"<code>INVALID_NAME = 'InvalidName'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueReason.INVALID_SYNTAX","title":"<code>INVALID_SYNTAX = 'InvalidSyntax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PropertyRuleIssueReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.PropertyRuleIssueReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.QuirksModeIssueDetails","title":"<code>QuirksModeIssueDetails</code>  <code>dataclass</code>","text":"<p>Details for issues about documents in Quirks Mode or Limited Quirks Mode that affects page layouting.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass QuirksModeIssueDetails:\n    \"\"\"\n    Details for issues about documents in Quirks Mode\n    or Limited Quirks Mode that affects page layouting.\n    \"\"\"\n\n    #: If false, it means the document's mode is \"quirks\"\n    #: instead of \"limited-quirks\".\n    is_limited_quirks_mode: bool\n\n    document_node_id: dom.BackendNodeId\n\n    url: str\n\n    frame_id: page.FrameId\n\n    loader_id: network.LoaderId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"isLimitedQuirksMode\"] = self.is_limited_quirks_mode\n        json[\"documentNodeId\"] = self.document_node_id.to_json()\n        json[\"url\"] = self.url\n        json[\"frameId\"] = self.frame_id.to_json()\n        json[\"loaderId\"] = self.loader_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; QuirksModeIssueDetails:\n        return cls(\n            is_limited_quirks_mode=bool(json[\"isLimitedQuirksMode\"]),\n            document_node_id=dom.BackendNodeId.from_json(json[\"documentNodeId\"]),\n            url=str(json[\"url\"]),\n            frame_id=page.FrameId.from_json(json[\"frameId\"]),\n            loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.QuirksModeIssueDetails.document_node_id","title":"<code>document_node_id: dom.BackendNodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.QuirksModeIssueDetails.frame_id","title":"<code>frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.QuirksModeIssueDetails.is_limited_quirks_mode","title":"<code>is_limited_quirks_mode: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.QuirksModeIssueDetails.loader_id","title":"<code>loader_id: network.LoaderId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.QuirksModeIssueDetails.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.QuirksModeIssueDetails.__init__","title":"<code>__init__(is_limited_quirks_mode, document_node_id, url, frame_id, loader_id)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.QuirksModeIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; QuirksModeIssueDetails:\n    return cls(\n        is_limited_quirks_mode=bool(json[\"isLimitedQuirksMode\"]),\n        document_node_id=dom.BackendNodeId.from_json(json[\"documentNodeId\"]),\n        url=str(json[\"url\"]),\n        frame_id=page.FrameId.from_json(json[\"frameId\"]),\n        loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.QuirksModeIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"isLimitedQuirksMode\"] = self.is_limited_quirks_mode\n    json[\"documentNodeId\"] = self.document_node_id.to_json()\n    json[\"url\"] = self.url\n    json[\"frameId\"] = self.frame_id.to_json()\n    json[\"loaderId\"] = self.loader_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueDetails","title":"<code>SharedArrayBufferIssueDetails</code>  <code>dataclass</code>","text":"<p>Details for a issue arising from an SAB being instantiated in, or transferred to a context that is not cross-origin isolated.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass SharedArrayBufferIssueDetails:\n    \"\"\"\n    Details for a issue arising from an SAB being instantiated in, or\n    transferred to a context that is not cross-origin isolated.\n    \"\"\"\n\n    source_code_location: SourceCodeLocation\n\n    is_warning: bool\n\n    type_: SharedArrayBufferIssueType\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n        json[\"isWarning\"] = self.is_warning\n        json[\"type\"] = self.type_.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SharedArrayBufferIssueDetails:\n        return cls(\n            source_code_location=SourceCodeLocation.from_json(\n                json[\"sourceCodeLocation\"]\n            ),\n            is_warning=bool(json[\"isWarning\"]),\n            type_=SharedArrayBufferIssueType.from_json(json[\"type\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueDetails.is_warning","title":"<code>is_warning: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueDetails.source_code_location","title":"<code>source_code_location: SourceCodeLocation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueDetails.type_","title":"<code>type_: SharedArrayBufferIssueType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueDetails.__init__","title":"<code>__init__(source_code_location, is_warning, type_)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SharedArrayBufferIssueDetails:\n    return cls(\n        source_code_location=SourceCodeLocation.from_json(\n            json[\"sourceCodeLocation\"]\n        ),\n        is_warning=bool(json[\"isWarning\"]),\n        type_=SharedArrayBufferIssueType.from_json(json[\"type\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n    json[\"isWarning\"] = self.is_warning\n    json[\"type\"] = self.type_.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueType","title":"<code>SharedArrayBufferIssueType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class SharedArrayBufferIssueType(enum.Enum):\n    TRANSFER_ISSUE = \"TransferIssue\"\n    CREATION_ISSUE = \"CreationIssue\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SharedArrayBufferIssueType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueType.CREATION_ISSUE","title":"<code>CREATION_ISSUE = 'CreationIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueType.TRANSFER_ISSUE","title":"<code>TRANSFER_ISSUE = 'TransferIssue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SharedArrayBufferIssueType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedArrayBufferIssueType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError","title":"<code>SharedDictionaryError</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class SharedDictionaryError(enum.Enum):\n    USE_ERROR_CROSS_ORIGIN_NO_CORS_REQUEST = \"UseErrorCrossOriginNoCorsRequest\"\n    USE_ERROR_DICTIONARY_LOAD_FAILURE = \"UseErrorDictionaryLoadFailure\"\n    USE_ERROR_MATCHING_DICTIONARY_NOT_USED = \"UseErrorMatchingDictionaryNotUsed\"\n    USE_ERROR_UNEXPECTED_CONTENT_DICTIONARY_HEADER = (\n        \"UseErrorUnexpectedContentDictionaryHeader\"\n    )\n    WRITE_ERROR_COSS_ORIGIN_NO_CORS_REQUEST = \"WriteErrorCossOriginNoCorsRequest\"\n    WRITE_ERROR_DISALLOWED_BY_SETTINGS = \"WriteErrorDisallowedBySettings\"\n    WRITE_ERROR_EXPIRED_RESPONSE = \"WriteErrorExpiredResponse\"\n    WRITE_ERROR_FEATURE_DISABLED = \"WriteErrorFeatureDisabled\"\n    WRITE_ERROR_INSUFFICIENT_RESOURCES = \"WriteErrorInsufficientResources\"\n    WRITE_ERROR_INVALID_MATCH_FIELD = \"WriteErrorInvalidMatchField\"\n    WRITE_ERROR_INVALID_STRUCTURED_HEADER = \"WriteErrorInvalidStructuredHeader\"\n    WRITE_ERROR_NAVIGATION_REQUEST = \"WriteErrorNavigationRequest\"\n    WRITE_ERROR_NO_MATCH_FIELD = \"WriteErrorNoMatchField\"\n    WRITE_ERROR_NON_LIST_MATCH_DEST_FIELD = \"WriteErrorNonListMatchDestField\"\n    WRITE_ERROR_NON_SECURE_CONTEXT = \"WriteErrorNonSecureContext\"\n    WRITE_ERROR_NON_STRING_ID_FIELD = \"WriteErrorNonStringIdField\"\n    WRITE_ERROR_NON_STRING_IN_MATCH_DEST_LIST = \"WriteErrorNonStringInMatchDestList\"\n    WRITE_ERROR_NON_STRING_MATCH_FIELD = \"WriteErrorNonStringMatchField\"\n    WRITE_ERROR_NON_TOKEN_TYPE_FIELD = \"WriteErrorNonTokenTypeField\"\n    WRITE_ERROR_REQUEST_ABORTED = \"WriteErrorRequestAborted\"\n    WRITE_ERROR_SHUTTING_DOWN = \"WriteErrorShuttingDown\"\n    WRITE_ERROR_TOO_LONG_ID_FIELD = \"WriteErrorTooLongIdField\"\n    WRITE_ERROR_UNSUPPORTED_TYPE = \"WriteErrorUnsupportedType\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SharedDictionaryError:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.USE_ERROR_CROSS_ORIGIN_NO_CORS_REQUEST","title":"<code>USE_ERROR_CROSS_ORIGIN_NO_CORS_REQUEST = 'UseErrorCrossOriginNoCorsRequest'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.USE_ERROR_DICTIONARY_LOAD_FAILURE","title":"<code>USE_ERROR_DICTIONARY_LOAD_FAILURE = 'UseErrorDictionaryLoadFailure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.USE_ERROR_MATCHING_DICTIONARY_NOT_USED","title":"<code>USE_ERROR_MATCHING_DICTIONARY_NOT_USED = 'UseErrorMatchingDictionaryNotUsed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.USE_ERROR_UNEXPECTED_CONTENT_DICTIONARY_HEADER","title":"<code>USE_ERROR_UNEXPECTED_CONTENT_DICTIONARY_HEADER = 'UseErrorUnexpectedContentDictionaryHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_COSS_ORIGIN_NO_CORS_REQUEST","title":"<code>WRITE_ERROR_COSS_ORIGIN_NO_CORS_REQUEST = 'WriteErrorCossOriginNoCorsRequest'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_DISALLOWED_BY_SETTINGS","title":"<code>WRITE_ERROR_DISALLOWED_BY_SETTINGS = 'WriteErrorDisallowedBySettings'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_EXPIRED_RESPONSE","title":"<code>WRITE_ERROR_EXPIRED_RESPONSE = 'WriteErrorExpiredResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_FEATURE_DISABLED","title":"<code>WRITE_ERROR_FEATURE_DISABLED = 'WriteErrorFeatureDisabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_INSUFFICIENT_RESOURCES","title":"<code>WRITE_ERROR_INSUFFICIENT_RESOURCES = 'WriteErrorInsufficientResources'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_INVALID_MATCH_FIELD","title":"<code>WRITE_ERROR_INVALID_MATCH_FIELD = 'WriteErrorInvalidMatchField'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_INVALID_STRUCTURED_HEADER","title":"<code>WRITE_ERROR_INVALID_STRUCTURED_HEADER = 'WriteErrorInvalidStructuredHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_NAVIGATION_REQUEST","title":"<code>WRITE_ERROR_NAVIGATION_REQUEST = 'WriteErrorNavigationRequest'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_NON_LIST_MATCH_DEST_FIELD","title":"<code>WRITE_ERROR_NON_LIST_MATCH_DEST_FIELD = 'WriteErrorNonListMatchDestField'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_NON_SECURE_CONTEXT","title":"<code>WRITE_ERROR_NON_SECURE_CONTEXT = 'WriteErrorNonSecureContext'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_NON_STRING_ID_FIELD","title":"<code>WRITE_ERROR_NON_STRING_ID_FIELD = 'WriteErrorNonStringIdField'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_NON_STRING_IN_MATCH_DEST_LIST","title":"<code>WRITE_ERROR_NON_STRING_IN_MATCH_DEST_LIST = 'WriteErrorNonStringInMatchDestList'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_NON_STRING_MATCH_FIELD","title":"<code>WRITE_ERROR_NON_STRING_MATCH_FIELD = 'WriteErrorNonStringMatchField'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_NON_TOKEN_TYPE_FIELD","title":"<code>WRITE_ERROR_NON_TOKEN_TYPE_FIELD = 'WriteErrorNonTokenTypeField'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_NO_MATCH_FIELD","title":"<code>WRITE_ERROR_NO_MATCH_FIELD = 'WriteErrorNoMatchField'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_REQUEST_ABORTED","title":"<code>WRITE_ERROR_REQUEST_ABORTED = 'WriteErrorRequestAborted'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_SHUTTING_DOWN","title":"<code>WRITE_ERROR_SHUTTING_DOWN = 'WriteErrorShuttingDown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_TOO_LONG_ID_FIELD","title":"<code>WRITE_ERROR_TOO_LONG_ID_FIELD = 'WriteErrorTooLongIdField'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.WRITE_ERROR_UNSUPPORTED_TYPE","title":"<code>WRITE_ERROR_UNSUPPORTED_TYPE = 'WriteErrorUnsupportedType'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SharedDictionaryError:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryError.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryIssueDetails","title":"<code>SharedDictionaryIssueDetails</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass SharedDictionaryIssueDetails:\n    shared_dictionary_error: SharedDictionaryError\n\n    request: AffectedRequest\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"sharedDictionaryError\"] = self.shared_dictionary_error.to_json()\n        json[\"request\"] = self.request.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SharedDictionaryIssueDetails:\n        return cls(\n            shared_dictionary_error=SharedDictionaryError.from_json(\n                json[\"sharedDictionaryError\"]\n            ),\n            request=AffectedRequest.from_json(json[\"request\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryIssueDetails.request","title":"<code>request: AffectedRequest</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryIssueDetails.shared_dictionary_error","title":"<code>shared_dictionary_error: SharedDictionaryError</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryIssueDetails.__init__","title":"<code>__init__(shared_dictionary_error, request)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SharedDictionaryIssueDetails:\n    return cls(\n        shared_dictionary_error=SharedDictionaryError.from_json(\n            json[\"sharedDictionaryError\"]\n        ),\n        request=AffectedRequest.from_json(json[\"request\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SharedDictionaryIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"sharedDictionaryError\"] = self.shared_dictionary_error.to_json()\n    json[\"request\"] = self.request.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SourceCodeLocation","title":"<code>SourceCodeLocation</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass SourceCodeLocation:\n    url: str\n\n    line_number: int\n\n    column_number: int\n\n    script_id: typing.Optional[runtime.ScriptId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        json[\"lineNumber\"] = self.line_number\n        json[\"columnNumber\"] = self.column_number\n        if self.script_id is not None:\n            json[\"scriptId\"] = self.script_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SourceCodeLocation:\n        return cls(\n            url=str(json[\"url\"]),\n            line_number=int(json[\"lineNumber\"]),\n            column_number=int(json[\"columnNumber\"]),\n            script_id=(\n                runtime.ScriptId.from_json(json[\"scriptId\"])\n                if json.get(\"scriptId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SourceCodeLocation.column_number","title":"<code>column_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SourceCodeLocation.line_number","title":"<code>line_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SourceCodeLocation.script_id","title":"<code>script_id: typing.Optional[runtime.ScriptId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SourceCodeLocation.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SourceCodeLocation.__init__","title":"<code>__init__(url, line_number, column_number, script_id=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SourceCodeLocation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SourceCodeLocation:\n    return cls(\n        url=str(json[\"url\"]),\n        line_number=int(json[\"lineNumber\"]),\n        column_number=int(json[\"columnNumber\"]),\n        script_id=(\n            runtime.ScriptId.from_json(json[\"scriptId\"])\n            if json.get(\"scriptId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.SourceCodeLocation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    json[\"lineNumber\"] = self.line_number\n    json[\"columnNumber\"] = self.column_number\n    if self.script_id is not None:\n        json[\"scriptId\"] = self.script_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StyleSheetLoadingIssueReason","title":"<code>StyleSheetLoadingIssueReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>class StyleSheetLoadingIssueReason(enum.Enum):\n    LATE_IMPORT_RULE = \"LateImportRule\"\n    REQUEST_FAILED = \"RequestFailed\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; StyleSheetLoadingIssueReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StyleSheetLoadingIssueReason.LATE_IMPORT_RULE","title":"<code>LATE_IMPORT_RULE = 'LateImportRule'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StyleSheetLoadingIssueReason.REQUEST_FAILED","title":"<code>REQUEST_FAILED = 'RequestFailed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StyleSheetLoadingIssueReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; StyleSheetLoadingIssueReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StyleSheetLoadingIssueReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StylesheetLoadingIssueDetails","title":"<code>StylesheetLoadingIssueDetails</code>  <code>dataclass</code>","text":"<p>This issue warns when a referenced stylesheet couldn't be loaded.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@dataclass\nclass StylesheetLoadingIssueDetails:\n    \"\"\"\n    This issue warns when a referenced stylesheet couldn't be loaded.\n    \"\"\"\n\n    #: Source code position that referenced the failing stylesheet.\n    source_code_location: SourceCodeLocation\n\n    #: Reason why the stylesheet couldn't be loaded.\n    style_sheet_loading_issue_reason: StyleSheetLoadingIssueReason\n\n    #: Contains additional info when the failure was due to a request.\n    failed_request_info: typing.Optional[FailedRequestInfo] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n        json[\"styleSheetLoadingIssueReason\"] = (\n            self.style_sheet_loading_issue_reason.to_json()\n        )\n        if self.failed_request_info is not None:\n            json[\"failedRequestInfo\"] = self.failed_request_info.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StylesheetLoadingIssueDetails:\n        return cls(\n            source_code_location=SourceCodeLocation.from_json(\n                json[\"sourceCodeLocation\"]\n            ),\n            style_sheet_loading_issue_reason=StyleSheetLoadingIssueReason.from_json(\n                json[\"styleSheetLoadingIssueReason\"]\n            ),\n            failed_request_info=(\n                FailedRequestInfo.from_json(json[\"failedRequestInfo\"])\n                if json.get(\"failedRequestInfo\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StylesheetLoadingIssueDetails.failed_request_info","title":"<code>failed_request_info: typing.Optional[FailedRequestInfo] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StylesheetLoadingIssueDetails.source_code_location","title":"<code>source_code_location: SourceCodeLocation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StylesheetLoadingIssueDetails.style_sheet_loading_issue_reason","title":"<code>style_sheet_loading_issue_reason: StyleSheetLoadingIssueReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StylesheetLoadingIssueDetails.__init__","title":"<code>__init__(source_code_location, style_sheet_loading_issue_reason, failed_request_info=None)</code>","text":""},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StylesheetLoadingIssueDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StylesheetLoadingIssueDetails:\n    return cls(\n        source_code_location=SourceCodeLocation.from_json(\n            json[\"sourceCodeLocation\"]\n        ),\n        style_sheet_loading_issue_reason=StyleSheetLoadingIssueReason.from_json(\n            json[\"styleSheetLoadingIssueReason\"]\n        ),\n        failed_request_info=(\n            FailedRequestInfo.from_json(json[\"failedRequestInfo\"])\n            if json.get(\"failedRequestInfo\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.StylesheetLoadingIssueDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"sourceCodeLocation\"] = self.source_code_location.to_json()\n    json[\"styleSheetLoadingIssueReason\"] = (\n        self.style_sheet_loading_issue_reason.to_json()\n    )\n    if self.failed_request_info is not None:\n        json[\"failedRequestInfo\"] = self.failed_request_info.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.check_contrast","title":"<code>check_contrast(report_aaa=None)</code>","text":"<p>Runs the contrast check for the target page. Found issues are reported using Audits.issueAdded event.</p> <p>Parameters:</p> Name Type Description Default <code>report_aaa</code> <code>Optional[bool]</code> <p>(Optional) Whether to report WCAG AAA level issues. Default is false.</p> <code>None</code> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def check_contrast(\n    report_aaa: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Runs the contrast check for the target page. Found issues are reported\n    using Audits.issueAdded event.\n\n    :param report_aaa: *(Optional)* Whether to report WCAG AAA level issues. Default is false.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if report_aaa is not None:\n        params[\"reportAAA\"] = report_aaa\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Audits.checkContrast\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.check_forms_issues","title":"<code>check_forms_issues()</code>","text":"<p>Runs the form issues check for the target page. Found issues are reported using Audits.issueAdded event.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[GenericIssueDetails]]</code> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def check_forms_issues() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[GenericIssueDetails]]\n):\n    \"\"\"\n    Runs the form issues check for the target page. Found issues are reported\n    using Audits.issueAdded event.\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Audits.checkFormsIssues\",\n    }\n    json = yield cmd_dict\n    return [GenericIssueDetails.from_json(i) for i in json[\"formIssues\"]]\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.disable","title":"<code>disable()</code>","text":"<p>Disables issues domain, prevents further issues from being reported to the client.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables issues domain, prevents further issues from being reported to the client.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Audits.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.enable","title":"<code>enable()</code>","text":"<p>Enables issues domain, sends the issues collected so far to the client by means of the <code>issueAdded</code> event.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables issues domain, sends the issues collected so far to the client by means of the\n    ``issueAdded`` event.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Audits.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/audits/#zendriver.cdp.audits.get_encoded_response","title":"<code>get_encoded_response(request_id, encoding, quality=None, size_only=None)</code>","text":"<p>Returns the response body and size if it were re-encoded with the specified settings. Only applies to images.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>Identifier of the network request to get content for.</p> required <code>encoding</code> <code>str</code> <p>The encoding to use.</p> required <code>quality</code> <code>Optional[float]</code> <p>(Optional) The quality of the encoding (0-1). (defaults to 1)</p> <code>None</code> <code>size_only</code> <code>Optional[bool]</code> <p>(Optional) Whether to only return the size information (defaults to false).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[Optional[str], int, int]]</code> <p>A tuple with the following items:  0. body - (Optional) The encoded body as a base64 string. Omitted if sizeOnly is true. (Encoded as a base64 string when passed over JSON) 1. originalSize - Size before re-encoding. 2. encodedSize - Size after re-encoding.</p> Source code in <code>zendriver/cdp/audits.py</code> <pre><code>def get_encoded_response(\n    request_id: network.RequestId,\n    encoding: str,\n    quality: typing.Optional[float] = None,\n    size_only: typing.Optional[bool] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.Optional[str], int, int]\n]:\n    \"\"\"\n    Returns the response body and size if it were re-encoded with the specified settings. Only\n    applies to images.\n\n    :param request_id: Identifier of the network request to get content for.\n    :param encoding: The encoding to use.\n    :param quality: *(Optional)* The quality of the encoding (0-1). (defaults to 1)\n    :param size_only: *(Optional)* Whether to only return the size information (defaults to false).\n    :returns: A tuple with the following items:\n\n        0. **body** - *(Optional)* The encoded body as a base64 string. Omitted if sizeOnly is true. (Encoded as a base64 string when passed over JSON)\n        1. **originalSize** - Size before re-encoding.\n        2. **encodedSize** - Size after re-encoding.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    params[\"encoding\"] = encoding\n    if quality is not None:\n        params[\"quality\"] = quality\n    if size_only is not None:\n        params[\"sizeOnly\"] = size_only\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Audits.getEncodedResponse\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        str(json[\"body\"]) if json.get(\"body\", None) is not None else None,\n        int(json[\"originalSize\"]),\n        int(json[\"encodedSize\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/autofill/","title":"autofill","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.Address","title":"<code>Address</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@dataclass\nclass Address:\n    #: fields and values defining an address.\n    fields: typing.List[AddressField]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"fields\"] = [i.to_json() for i in self.fields]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Address:\n        return cls(\n            fields=[AddressField.from_json(i) for i in json[\"fields\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.Address.fields","title":"<code>fields: typing.List[AddressField]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.Address.__init__","title":"<code>__init__(fields)</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.Address.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Address:\n    return cls(\n        fields=[AddressField.from_json(i) for i in json[\"fields\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.Address.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"fields\"] = [i.to_json() for i in self.fields]\n    return json\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressField","title":"<code>AddressField</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@dataclass\nclass AddressField:\n    #: address field name, for example GIVEN_NAME.\n    name: str\n\n    #: address field value, for example Jon Doe.\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AddressField:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressField.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressField.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressField.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressField.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AddressField:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressField.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressFields","title":"<code>AddressFields</code>  <code>dataclass</code>","text":"<p>A list of address fields.</p> Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@dataclass\nclass AddressFields:\n    \"\"\"\n    A list of address fields.\n    \"\"\"\n\n    fields: typing.List[AddressField]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"fields\"] = [i.to_json() for i in self.fields]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AddressFields:\n        return cls(\n            fields=[AddressField.from_json(i) for i in json[\"fields\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressFields.fields","title":"<code>fields: typing.List[AddressField]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressFields.__init__","title":"<code>__init__(fields)</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressFields.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AddressFields:\n    return cls(\n        fields=[AddressField.from_json(i) for i in json[\"fields\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressFields.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"fields\"] = [i.to_json() for i in self.fields]\n    return json\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressFormFilled","title":"<code>AddressFormFilled</code>  <code>dataclass</code>","text":"<p>Emitted when an address form is filled.</p> Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@event_class(\"Autofill.addressFormFilled\")\n@dataclass\nclass AddressFormFilled:\n    \"\"\"\n    Emitted when an address form is filled.\n    \"\"\"\n\n    #: Information about the fields that were filled\n    filled_fields: typing.List[FilledField]\n    #: An UI representation of the address used to fill the form.\n    #: Consists of a 2D array where each child represents an address/profile line.\n    address_ui: AddressUI\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AddressFormFilled:\n        return cls(\n            filled_fields=[FilledField.from_json(i) for i in json[\"filledFields\"]],\n            address_ui=AddressUI.from_json(json[\"addressUi\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressFormFilled.address_ui","title":"<code>address_ui: AddressUI</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressFormFilled.filled_fields","title":"<code>filled_fields: typing.List[FilledField]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressFormFilled.__init__","title":"<code>__init__(filled_fields, address_ui)</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressFormFilled.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AddressFormFilled:\n    return cls(\n        filled_fields=[FilledField.from_json(i) for i in json[\"filledFields\"]],\n        address_ui=AddressUI.from_json(json[\"addressUi\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressUI","title":"<code>AddressUI</code>  <code>dataclass</code>","text":"<p>Defines how an address can be displayed like in chrome://settings/addresses. Address UI is a two dimensional array, each inner array is an \"address information line\", and when rendered in a UI surface should be displayed as such. The following address UI for instance: [[{name: \"GIVE_NAME\", value: \"Jon\"}, {name: \"FAMILY_NAME\", value: \"Doe\"}], [{name: \"CITY\", value: \"Munich\"}, {name: \"ZIP\", value: \"81456\"}]] should allow the receiver to render: Jon Doe Munich 81456</p> Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@dataclass\nclass AddressUI:\n    \"\"\"\n    Defines how an address can be displayed like in chrome://settings/addresses.\n    Address UI is a two dimensional array, each inner array is an \"address information line\", and when rendered in a UI surface should be displayed as such.\n    The following address UI for instance:\n    [[{name: \"GIVE_NAME\", value: \"Jon\"}, {name: \"FAMILY_NAME\", value: \"Doe\"}], [{name: \"CITY\", value: \"Munich\"}, {name: \"ZIP\", value: \"81456\"}]]\n    should allow the receiver to render:\n    Jon Doe\n    Munich 81456\n    \"\"\"\n\n    #: A two dimension array containing the representation of values from an address profile.\n    address_fields: typing.List[AddressFields]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"addressFields\"] = [i.to_json() for i in self.address_fields]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AddressUI:\n        return cls(\n            address_fields=[AddressFields.from_json(i) for i in json[\"addressFields\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressUI.address_fields","title":"<code>address_fields: typing.List[AddressFields]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressUI.__init__","title":"<code>__init__(address_fields)</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressUI.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AddressUI:\n    return cls(\n        address_fields=[AddressFields.from_json(i) for i in json[\"addressFields\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.AddressUI.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"addressFields\"] = [i.to_json() for i in self.address_fields]\n    return json\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.CreditCard","title":"<code>CreditCard</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@dataclass\nclass CreditCard:\n    #: 16-digit credit card number.\n    number: str\n\n    #: Name of the credit card owner.\n    name: str\n\n    #: 2-digit expiry month.\n    expiry_month: str\n\n    #: 4-digit expiry year.\n    expiry_year: str\n\n    #: 3-digit card verification code.\n    cvc: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"number\"] = self.number\n        json[\"name\"] = self.name\n        json[\"expiryMonth\"] = self.expiry_month\n        json[\"expiryYear\"] = self.expiry_year\n        json[\"cvc\"] = self.cvc\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CreditCard:\n        return cls(\n            number=str(json[\"number\"]),\n            name=str(json[\"name\"]),\n            expiry_month=str(json[\"expiryMonth\"]),\n            expiry_year=str(json[\"expiryYear\"]),\n            cvc=str(json[\"cvc\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.CreditCard.cvc","title":"<code>cvc: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.CreditCard.expiry_month","title":"<code>expiry_month: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.CreditCard.expiry_year","title":"<code>expiry_year: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.CreditCard.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.CreditCard.number","title":"<code>number: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.CreditCard.__init__","title":"<code>__init__(number, name, expiry_month, expiry_year, cvc)</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.CreditCard.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CreditCard:\n    return cls(\n        number=str(json[\"number\"]),\n        name=str(json[\"name\"]),\n        expiry_month=str(json[\"expiryMonth\"]),\n        expiry_year=str(json[\"expiryYear\"]),\n        cvc=str(json[\"cvc\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.CreditCard.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"number\"] = self.number\n    json[\"name\"] = self.name\n    json[\"expiryMonth\"] = self.expiry_month\n    json[\"expiryYear\"] = self.expiry_year\n    json[\"cvc\"] = self.cvc\n    return json\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField","title":"<code>FilledField</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@dataclass\nclass FilledField:\n    #: The type of the field, e.g text, password etc.\n    html_type: str\n\n    #: the html id\n    id_: str\n\n    #: the html name\n    name: str\n\n    #: the field value\n    value: str\n\n    #: The actual field type, e.g FAMILY_NAME\n    autofill_type: str\n\n    #: The filling strategy\n    filling_strategy: FillingStrategy\n\n    #: The frame the field belongs to\n    frame_id: page.FrameId\n\n    #: The form field's DOM node\n    field_id: dom.BackendNodeId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"htmlType\"] = self.html_type\n        json[\"id\"] = self.id_\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        json[\"autofillType\"] = self.autofill_type\n        json[\"fillingStrategy\"] = self.filling_strategy.to_json()\n        json[\"frameId\"] = self.frame_id.to_json()\n        json[\"fieldId\"] = self.field_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FilledField:\n        return cls(\n            html_type=str(json[\"htmlType\"]),\n            id_=str(json[\"id\"]),\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n            autofill_type=str(json[\"autofillType\"]),\n            filling_strategy=FillingStrategy.from_json(json[\"fillingStrategy\"]),\n            frame_id=page.FrameId.from_json(json[\"frameId\"]),\n            field_id=dom.BackendNodeId.from_json(json[\"fieldId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.autofill_type","title":"<code>autofill_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.field_id","title":"<code>field_id: dom.BackendNodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.filling_strategy","title":"<code>filling_strategy: FillingStrategy</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.frame_id","title":"<code>frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.html_type","title":"<code>html_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.id_","title":"<code>id_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.__init__","title":"<code>__init__(html_type, id_, name, value, autofill_type, filling_strategy, frame_id, field_id)</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FilledField:\n    return cls(\n        html_type=str(json[\"htmlType\"]),\n        id_=str(json[\"id\"]),\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n        autofill_type=str(json[\"autofillType\"]),\n        filling_strategy=FillingStrategy.from_json(json[\"fillingStrategy\"]),\n        frame_id=page.FrameId.from_json(json[\"frameId\"]),\n        field_id=dom.BackendNodeId.from_json(json[\"fieldId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FilledField.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"htmlType\"] = self.html_type\n    json[\"id\"] = self.id_\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    json[\"autofillType\"] = self.autofill_type\n    json[\"fillingStrategy\"] = self.filling_strategy.to_json()\n    json[\"frameId\"] = self.frame_id.to_json()\n    json[\"fieldId\"] = self.field_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FillingStrategy","title":"<code>FillingStrategy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Specified whether a filled field was done so by using the html autocomplete attribute or autofill heuristics.</p> Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>class FillingStrategy(enum.Enum):\n    \"\"\"\n    Specified whether a filled field was done so by using the html autocomplete attribute or autofill heuristics.\n    \"\"\"\n\n    AUTOCOMPLETE_ATTRIBUTE = \"autocompleteAttribute\"\n    AUTOFILL_INFERRED = \"autofillInferred\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; FillingStrategy:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FillingStrategy.AUTOCOMPLETE_ATTRIBUTE","title":"<code>AUTOCOMPLETE_ATTRIBUTE = 'autocompleteAttribute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FillingStrategy.AUTOFILL_INFERRED","title":"<code>AUTOFILL_INFERRED = 'autofillInferred'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FillingStrategy.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; FillingStrategy:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.FillingStrategy.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.disable","title":"<code>disable()</code>","text":"<p>Disables autofill domain notifications.</p> Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables autofill domain notifications.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Autofill.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.enable","title":"<code>enable()</code>","text":"<p>Enables autofill domain notifications.</p> Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables autofill domain notifications.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Autofill.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.set_addresses","title":"<code>set_addresses(addresses)</code>","text":"<p>Set addresses so that developers can verify their forms implementation.</p> <p>Parameters:</p> Name Type Description Default <code>addresses</code> <code>List[Address]</code> required Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def set_addresses(\n    addresses: typing.List[Address],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Set addresses so that developers can verify their forms implementation.\n\n    :param addresses:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"addresses\"] = [i.to_json() for i in addresses]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Autofill.setAddresses\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/autofill/#zendriver.cdp.autofill.trigger","title":"<code>trigger(field_id, card, frame_id=None)</code>","text":"<p>Trigger autofill on a form identified by the fieldId. If the field and related form cannot be autofilled, returns an error.</p> <p>Parameters:</p> Name Type Description Default <code>field_id</code> <code>BackendNodeId</code> <p>Identifies a field that serves as an anchor for autofill.</p> required <code>frame_id</code> <code>Optional[FrameId]</code> <p>(Optional) Identifies the frame that field belongs to.</p> <code>None</code> <code>card</code> <code>CreditCard</code> <p>Credit card information to fill out the form. Credit card data is not saved.</p> required Source code in <code>zendriver/cdp/autofill.py</code> <pre><code>def trigger(\n    field_id: dom.BackendNodeId,\n    card: CreditCard,\n    frame_id: typing.Optional[page.FrameId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Trigger autofill on a form identified by the fieldId.\n    If the field and related form cannot be autofilled, returns an error.\n\n    :param field_id: Identifies a field that serves as an anchor for autofill.\n    :param frame_id: *(Optional)* Identifies the frame that field belongs to.\n    :param card: Credit card information to fill out the form. Credit card data is not saved.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"fieldId\"] = field_id.to_json()\n    if frame_id is not None:\n        params[\"frameId\"] = frame_id.to_json()\n    params[\"card\"] = card.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Autofill.trigger\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/background_service/","title":"background_service","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent","title":"<code>BackgroundServiceEvent</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>@dataclass\nclass BackgroundServiceEvent:\n    #: Timestamp of the event (in seconds).\n    timestamp: network.TimeSinceEpoch\n\n    #: The origin this event belongs to.\n    origin: str\n\n    #: The Service Worker ID that initiated the event.\n    service_worker_registration_id: service_worker.RegistrationID\n\n    #: The Background Service this event belongs to.\n    service: ServiceName\n\n    #: A description of the event.\n    event_name: str\n\n    #: An identifier that groups related events together.\n    instance_id: str\n\n    #: A list of event-specific information.\n    event_metadata: typing.List[EventMetadata]\n\n    #: Storage key this event belongs to.\n    storage_key: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"timestamp\"] = self.timestamp.to_json()\n        json[\"origin\"] = self.origin\n        json[\"serviceWorkerRegistrationId\"] = (\n            self.service_worker_registration_id.to_json()\n        )\n        json[\"service\"] = self.service.to_json()\n        json[\"eventName\"] = self.event_name\n        json[\"instanceId\"] = self.instance_id\n        json[\"eventMetadata\"] = [i.to_json() for i in self.event_metadata]\n        json[\"storageKey\"] = self.storage_key\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BackgroundServiceEvent:\n        return cls(\n            timestamp=network.TimeSinceEpoch.from_json(json[\"timestamp\"]),\n            origin=str(json[\"origin\"]),\n            service_worker_registration_id=service_worker.RegistrationID.from_json(\n                json[\"serviceWorkerRegistrationId\"]\n            ),\n            service=ServiceName.from_json(json[\"service\"]),\n            event_name=str(json[\"eventName\"]),\n            instance_id=str(json[\"instanceId\"]),\n            event_metadata=[EventMetadata.from_json(i) for i in json[\"eventMetadata\"]],\n            storage_key=str(json[\"storageKey\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.event_metadata","title":"<code>event_metadata: typing.List[EventMetadata]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.event_name","title":"<code>event_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.instance_id","title":"<code>instance_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.service","title":"<code>service: ServiceName</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.service_worker_registration_id","title":"<code>service_worker_registration_id: service_worker.RegistrationID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.storage_key","title":"<code>storage_key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.timestamp","title":"<code>timestamp: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.__init__","title":"<code>__init__(timestamp, origin, service_worker_registration_id, service, event_name, instance_id, event_metadata, storage_key)</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BackgroundServiceEvent:\n    return cls(\n        timestamp=network.TimeSinceEpoch.from_json(json[\"timestamp\"]),\n        origin=str(json[\"origin\"]),\n        service_worker_registration_id=service_worker.RegistrationID.from_json(\n            json[\"serviceWorkerRegistrationId\"]\n        ),\n        service=ServiceName.from_json(json[\"service\"]),\n        event_name=str(json[\"eventName\"]),\n        instance_id=str(json[\"instanceId\"]),\n        event_metadata=[EventMetadata.from_json(i) for i in json[\"eventMetadata\"]],\n        storage_key=str(json[\"storageKey\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEvent.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"timestamp\"] = self.timestamp.to_json()\n    json[\"origin\"] = self.origin\n    json[\"serviceWorkerRegistrationId\"] = (\n        self.service_worker_registration_id.to_json()\n    )\n    json[\"service\"] = self.service.to_json()\n    json[\"eventName\"] = self.event_name\n    json[\"instanceId\"] = self.instance_id\n    json[\"eventMetadata\"] = [i.to_json() for i in self.event_metadata]\n    json[\"storageKey\"] = self.storage_key\n    return json\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEventReceived","title":"<code>BackgroundServiceEventReceived</code>  <code>dataclass</code>","text":"<p>Called with all existing backgroundServiceEvents when enabled, and all new events afterwards if enabled and recording.</p> Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>@event_class(\"BackgroundService.backgroundServiceEventReceived\")\n@dataclass\nclass BackgroundServiceEventReceived:\n    \"\"\"\n    Called with all existing backgroundServiceEvents when enabled, and all new\n    events afterwards if enabled and recording.\n    \"\"\"\n\n    background_service_event: BackgroundServiceEvent\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BackgroundServiceEventReceived:\n        return cls(\n            background_service_event=BackgroundServiceEvent.from_json(\n                json[\"backgroundServiceEvent\"]\n            )\n        )\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEventReceived.background_service_event","title":"<code>background_service_event: BackgroundServiceEvent</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEventReceived.__init__","title":"<code>__init__(background_service_event)</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.BackgroundServiceEventReceived.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BackgroundServiceEventReceived:\n    return cls(\n        background_service_event=BackgroundServiceEvent.from_json(\n            json[\"backgroundServiceEvent\"]\n        )\n    )\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.EventMetadata","title":"<code>EventMetadata</code>  <code>dataclass</code>","text":"<p>A key-value pair for additional event information to pass along.</p> Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>@dataclass\nclass EventMetadata:\n    \"\"\"\n    A key-value pair for additional event information to pass along.\n    \"\"\"\n\n    key: str\n\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"key\"] = self.key\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; EventMetadata:\n        return cls(\n            key=str(json[\"key\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.EventMetadata.key","title":"<code>key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.EventMetadata.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.EventMetadata.__init__","title":"<code>__init__(key, value)</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.EventMetadata.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; EventMetadata:\n    return cls(\n        key=str(json[\"key\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.EventMetadata.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"key\"] = self.key\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.RecordingStateChanged","title":"<code>RecordingStateChanged</code>  <code>dataclass</code>","text":"<p>Called when the recording state for the service has been updated.</p> Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>@event_class(\"BackgroundService.recordingStateChanged\")\n@dataclass\nclass RecordingStateChanged:\n    \"\"\"\n    Called when the recording state for the service has been updated.\n    \"\"\"\n\n    is_recording: bool\n    service: ServiceName\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RecordingStateChanged:\n        return cls(\n            is_recording=bool(json[\"isRecording\"]),\n            service=ServiceName.from_json(json[\"service\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.RecordingStateChanged.is_recording","title":"<code>is_recording: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.RecordingStateChanged.service","title":"<code>service: ServiceName</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.RecordingStateChanged.__init__","title":"<code>__init__(is_recording, service)</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.RecordingStateChanged.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RecordingStateChanged:\n    return cls(\n        is_recording=bool(json[\"isRecording\"]),\n        service=ServiceName.from_json(json[\"service\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.ServiceName","title":"<code>ServiceName</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The Background Service that will be associated with the commands/events. Every Background Service operates independently, but they share the same API.</p> Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>class ServiceName(enum.Enum):\n    \"\"\"\n    The Background Service that will be associated with the commands/events.\n    Every Background Service operates independently, but they share the same\n    API.\n    \"\"\"\n\n    BACKGROUND_FETCH = \"backgroundFetch\"\n    BACKGROUND_SYNC = \"backgroundSync\"\n    PUSH_MESSAGING = \"pushMessaging\"\n    NOTIFICATIONS = \"notifications\"\n    PAYMENT_HANDLER = \"paymentHandler\"\n    PERIODIC_BACKGROUND_SYNC = \"periodicBackgroundSync\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ServiceName:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.ServiceName.BACKGROUND_FETCH","title":"<code>BACKGROUND_FETCH = 'backgroundFetch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.ServiceName.BACKGROUND_SYNC","title":"<code>BACKGROUND_SYNC = 'backgroundSync'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.ServiceName.NOTIFICATIONS","title":"<code>NOTIFICATIONS = 'notifications'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.ServiceName.PAYMENT_HANDLER","title":"<code>PAYMENT_HANDLER = 'paymentHandler'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.ServiceName.PERIODIC_BACKGROUND_SYNC","title":"<code>PERIODIC_BACKGROUND_SYNC = 'periodicBackgroundSync'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.ServiceName.PUSH_MESSAGING","title":"<code>PUSH_MESSAGING = 'pushMessaging'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.ServiceName.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ServiceName:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.ServiceName.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.clear_events","title":"<code>clear_events(service)</code>","text":"<p>Clears all stored data for the service.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>ServiceName</code> required Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>def clear_events(\n    service: ServiceName,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears all stored data for the service.\n\n    :param service:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"service\"] = service.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"BackgroundService.clearEvents\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.set_recording","title":"<code>set_recording(should_record, service)</code>","text":"<p>Set the recording state for the service.</p> <p>Parameters:</p> Name Type Description Default <code>should_record</code> <code>bool</code> required <code>service</code> <code>ServiceName</code> required Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>def set_recording(\n    should_record: bool, service: ServiceName\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Set the recording state for the service.\n\n    :param should_record:\n    :param service:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"shouldRecord\"] = should_record\n    params[\"service\"] = service.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"BackgroundService.setRecording\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.start_observing","title":"<code>start_observing(service)</code>","text":"<p>Enables event updates for the service.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>ServiceName</code> required Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>def start_observing(\n    service: ServiceName,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables event updates for the service.\n\n    :param service:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"service\"] = service.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"BackgroundService.startObserving\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/background_service/#zendriver.cdp.background_service.stop_observing","title":"<code>stop_observing(service)</code>","text":"<p>Disables event updates for the service.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>ServiceName</code> required Source code in <code>zendriver/cdp/background_service.py</code> <pre><code>def stop_observing(\n    service: ServiceName,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables event updates for the service.\n\n    :param service:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"service\"] = service.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"BackgroundService.stopObserving\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/","title":"browser","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bounds","title":"<code>Bounds</code>  <code>dataclass</code>","text":"<p>Browser window bounds information</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@dataclass\nclass Bounds:\n    \"\"\"\n    Browser window bounds information\n    \"\"\"\n\n    #: The offset from the left edge of the screen to the window in pixels.\n    left: typing.Optional[int] = None\n\n    #: The offset from the top edge of the screen to the window in pixels.\n    top: typing.Optional[int] = None\n\n    #: The window width in pixels.\n    width: typing.Optional[int] = None\n\n    #: The window height in pixels.\n    height: typing.Optional[int] = None\n\n    #: The window state. Default to normal.\n    window_state: typing.Optional[WindowState] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.left is not None:\n            json[\"left\"] = self.left\n        if self.top is not None:\n            json[\"top\"] = self.top\n        if self.width is not None:\n            json[\"width\"] = self.width\n        if self.height is not None:\n            json[\"height\"] = self.height\n        if self.window_state is not None:\n            json[\"windowState\"] = self.window_state.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Bounds:\n        return cls(\n            left=int(json[\"left\"]) if json.get(\"left\", None) is not None else None,\n            top=int(json[\"top\"]) if json.get(\"top\", None) is not None else None,\n            width=int(json[\"width\"]) if json.get(\"width\", None) is not None else None,\n            height=(\n                int(json[\"height\"]) if json.get(\"height\", None) is not None else None\n            ),\n            window_state=(\n                WindowState.from_json(json[\"windowState\"])\n                if json.get(\"windowState\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bounds.height","title":"<code>height: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bounds.left","title":"<code>left: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bounds.top","title":"<code>top: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bounds.width","title":"<code>width: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bounds.window_state","title":"<code>window_state: typing.Optional[WindowState] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bounds.__init__","title":"<code>__init__(left=None, top=None, width=None, height=None, window_state=None)</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bounds.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Bounds:\n    return cls(\n        left=int(json[\"left\"]) if json.get(\"left\", None) is not None else None,\n        top=int(json[\"top\"]) if json.get(\"top\", None) is not None else None,\n        width=int(json[\"width\"]) if json.get(\"width\", None) is not None else None,\n        height=(\n            int(json[\"height\"]) if json.get(\"height\", None) is not None else None\n        ),\n        window_state=(\n            WindowState.from_json(json[\"windowState\"])\n            if json.get(\"windowState\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bounds.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.left is not None:\n        json[\"left\"] = self.left\n    if self.top is not None:\n        json[\"top\"] = self.top\n    if self.width is not None:\n        json[\"width\"] = self.width\n    if self.height is not None:\n        json[\"height\"] = self.height\n    if self.window_state is not None:\n        json[\"windowState\"] = self.window_state.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.BrowserCommandId","title":"<code>BrowserCommandId</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Browser command ids used by executeBrowserCommand.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>class BrowserCommandId(enum.Enum):\n    \"\"\"\n    Browser command ids used by executeBrowserCommand.\n    \"\"\"\n\n    OPEN_TAB_SEARCH = \"openTabSearch\"\n    CLOSE_TAB_SEARCH = \"closeTabSearch\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; BrowserCommandId:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.BrowserCommandId.CLOSE_TAB_SEARCH","title":"<code>CLOSE_TAB_SEARCH = 'closeTabSearch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.BrowserCommandId.OPEN_TAB_SEARCH","title":"<code>OPEN_TAB_SEARCH = 'openTabSearch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.BrowserCommandId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; BrowserCommandId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.BrowserCommandId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.BrowserContextID","title":"<code>BrowserContextID</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>class BrowserContextID(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; BrowserContextID:\n        return cls(json)\n\n    def __repr__(self):\n        return \"BrowserContextID({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.BrowserContextID.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def __repr__(self):\n    return \"BrowserContextID({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.BrowserContextID.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; BrowserContextID:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.BrowserContextID.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bucket","title":"<code>Bucket</code>  <code>dataclass</code>","text":"<p>Chrome histogram bucket.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@dataclass\nclass Bucket:\n    \"\"\"\n    Chrome histogram bucket.\n    \"\"\"\n\n    #: Minimum value (inclusive).\n    low: int\n\n    #: Maximum value (exclusive).\n    high: int\n\n    #: Number of samples.\n    count: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"low\"] = self.low\n        json[\"high\"] = self.high\n        json[\"count\"] = self.count\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Bucket:\n        return cls(\n            low=int(json[\"low\"]),\n            high=int(json[\"high\"]),\n            count=int(json[\"count\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bucket.count","title":"<code>count: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bucket.high","title":"<code>high: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bucket.low","title":"<code>low: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bucket.__init__","title":"<code>__init__(low, high, count)</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bucket.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Bucket:\n    return cls(\n        low=int(json[\"low\"]),\n        high=int(json[\"high\"]),\n        count=int(json[\"count\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Bucket.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"low\"] = self.low\n    json[\"high\"] = self.high\n    json[\"count\"] = self.count\n    return json\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadProgress","title":"<code>DownloadProgress</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when download makes progress. Last call has <code>done</code> == true.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@event_class(\"Browser.downloadProgress\")\n@dataclass\nclass DownloadProgress:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when download makes progress. Last call has ``done`` == true.\n    \"\"\"\n\n    #: Global unique identifier of the download.\n    guid: str\n    #: Total expected bytes to download.\n    total_bytes: float\n    #: Total bytes received.\n    received_bytes: float\n    #: Download status.\n    state: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DownloadProgress:\n        return cls(\n            guid=str(json[\"guid\"]),\n            total_bytes=float(json[\"totalBytes\"]),\n            received_bytes=float(json[\"receivedBytes\"]),\n            state=str(json[\"state\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadProgress.guid","title":"<code>guid: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadProgress.received_bytes","title":"<code>received_bytes: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadProgress.state","title":"<code>state: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadProgress.total_bytes","title":"<code>total_bytes: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadProgress.__init__","title":"<code>__init__(guid, total_bytes, received_bytes, state)</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadProgress.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DownloadProgress:\n    return cls(\n        guid=str(json[\"guid\"]),\n        total_bytes=float(json[\"totalBytes\"]),\n        received_bytes=float(json[\"receivedBytes\"]),\n        state=str(json[\"state\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadWillBegin","title":"<code>DownloadWillBegin</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when page is about to start a download.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@event_class(\"Browser.downloadWillBegin\")\n@dataclass\nclass DownloadWillBegin:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when page is about to start a download.\n    \"\"\"\n\n    #: Id of the frame that caused the download to begin.\n    frame_id: page.FrameId\n    #: Global unique identifier of the download.\n    guid: str\n    #: URL of the resource being downloaded.\n    url: str\n    #: Suggested file name of the resource (the actual name of the file saved on disk may differ).\n    suggested_filename: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DownloadWillBegin:\n        return cls(\n            frame_id=page.FrameId.from_json(json[\"frameId\"]),\n            guid=str(json[\"guid\"]),\n            url=str(json[\"url\"]),\n            suggested_filename=str(json[\"suggestedFilename\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadWillBegin.frame_id","title":"<code>frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadWillBegin.guid","title":"<code>guid: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadWillBegin.suggested_filename","title":"<code>suggested_filename: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadWillBegin.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadWillBegin.__init__","title":"<code>__init__(frame_id, guid, url, suggested_filename)</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.DownloadWillBegin.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DownloadWillBegin:\n    return cls(\n        frame_id=page.FrameId.from_json(json[\"frameId\"]),\n        guid=str(json[\"guid\"]),\n        url=str(json[\"url\"]),\n        suggested_filename=str(json[\"suggestedFilename\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Histogram","title":"<code>Histogram</code>  <code>dataclass</code>","text":"<p>Chrome histogram.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@dataclass\nclass Histogram:\n    \"\"\"\n    Chrome histogram.\n    \"\"\"\n\n    #: Name.\n    name: str\n\n    #: Sum of sample values.\n    sum_: int\n\n    #: Total number of samples.\n    count: int\n\n    #: Buckets.\n    buckets: typing.List[Bucket]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"sum\"] = self.sum_\n        json[\"count\"] = self.count\n        json[\"buckets\"] = [i.to_json() for i in self.buckets]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Histogram:\n        return cls(\n            name=str(json[\"name\"]),\n            sum_=int(json[\"sum\"]),\n            count=int(json[\"count\"]),\n            buckets=[Bucket.from_json(i) for i in json[\"buckets\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Histogram.buckets","title":"<code>buckets: typing.List[Bucket]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Histogram.count","title":"<code>count: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Histogram.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Histogram.sum_","title":"<code>sum_: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Histogram.__init__","title":"<code>__init__(name, sum_, count, buckets)</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Histogram.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Histogram:\n    return cls(\n        name=str(json[\"name\"]),\n        sum_=int(json[\"sum\"]),\n        count=int(json[\"count\"]),\n        buckets=[Bucket.from_json(i) for i in json[\"buckets\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.Histogram.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"sum\"] = self.sum_\n    json[\"count\"] = self.count\n    json[\"buckets\"] = [i.to_json() for i in self.buckets]\n    return json\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionDescriptor","title":"<code>PermissionDescriptor</code>  <code>dataclass</code>","text":"<p>Definition of PermissionDescriptor defined in the Permissions API: https://w3c.github.io/permissions/#dom-permissiondescriptor.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@dataclass\nclass PermissionDescriptor:\n    \"\"\"\n    Definition of PermissionDescriptor defined in the Permissions API:\n    https://w3c.github.io/permissions/#dom-permissiondescriptor.\n    \"\"\"\n\n    #: Name of permission.\n    #: See https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl for valid permission names.\n    name: str\n\n    #: For \"midi\" permission, may also specify sysex control.\n    sysex: typing.Optional[bool] = None\n\n    #: For \"push\" permission, may specify userVisibleOnly.\n    #: Note that userVisibleOnly = true is the only currently supported type.\n    user_visible_only: typing.Optional[bool] = None\n\n    #: For \"clipboard\" permission, may specify allowWithoutSanitization.\n    allow_without_sanitization: typing.Optional[bool] = None\n\n    #: For \"fullscreen\" permission, must specify allowWithoutGesture:true.\n    allow_without_gesture: typing.Optional[bool] = None\n\n    #: For \"camera\" permission, may specify panTiltZoom.\n    pan_tilt_zoom: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        if self.sysex is not None:\n            json[\"sysex\"] = self.sysex\n        if self.user_visible_only is not None:\n            json[\"userVisibleOnly\"] = self.user_visible_only\n        if self.allow_without_sanitization is not None:\n            json[\"allowWithoutSanitization\"] = self.allow_without_sanitization\n        if self.allow_without_gesture is not None:\n            json[\"allowWithoutGesture\"] = self.allow_without_gesture\n        if self.pan_tilt_zoom is not None:\n            json[\"panTiltZoom\"] = self.pan_tilt_zoom\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PermissionDescriptor:\n        return cls(\n            name=str(json[\"name\"]),\n            sysex=bool(json[\"sysex\"]) if json.get(\"sysex\", None) is not None else None,\n            user_visible_only=(\n                bool(json[\"userVisibleOnly\"])\n                if json.get(\"userVisibleOnly\", None) is not None\n                else None\n            ),\n            allow_without_sanitization=(\n                bool(json[\"allowWithoutSanitization\"])\n                if json.get(\"allowWithoutSanitization\", None) is not None\n                else None\n            ),\n            allow_without_gesture=(\n                bool(json[\"allowWithoutGesture\"])\n                if json.get(\"allowWithoutGesture\", None) is not None\n                else None\n            ),\n            pan_tilt_zoom=(\n                bool(json[\"panTiltZoom\"])\n                if json.get(\"panTiltZoom\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionDescriptor.allow_without_gesture","title":"<code>allow_without_gesture: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionDescriptor.allow_without_sanitization","title":"<code>allow_without_sanitization: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionDescriptor.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionDescriptor.pan_tilt_zoom","title":"<code>pan_tilt_zoom: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionDescriptor.sysex","title":"<code>sysex: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionDescriptor.user_visible_only","title":"<code>user_visible_only: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionDescriptor.__init__","title":"<code>__init__(name, sysex=None, user_visible_only=None, allow_without_sanitization=None, allow_without_gesture=None, pan_tilt_zoom=None)</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionDescriptor.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PermissionDescriptor:\n    return cls(\n        name=str(json[\"name\"]),\n        sysex=bool(json[\"sysex\"]) if json.get(\"sysex\", None) is not None else None,\n        user_visible_only=(\n            bool(json[\"userVisibleOnly\"])\n            if json.get(\"userVisibleOnly\", None) is not None\n            else None\n        ),\n        allow_without_sanitization=(\n            bool(json[\"allowWithoutSanitization\"])\n            if json.get(\"allowWithoutSanitization\", None) is not None\n            else None\n        ),\n        allow_without_gesture=(\n            bool(json[\"allowWithoutGesture\"])\n            if json.get(\"allowWithoutGesture\", None) is not None\n            else None\n        ),\n        pan_tilt_zoom=(\n            bool(json[\"panTiltZoom\"])\n            if json.get(\"panTiltZoom\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionDescriptor.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    if self.sysex is not None:\n        json[\"sysex\"] = self.sysex\n    if self.user_visible_only is not None:\n        json[\"userVisibleOnly\"] = self.user_visible_only\n    if self.allow_without_sanitization is not None:\n        json[\"allowWithoutSanitization\"] = self.allow_without_sanitization\n    if self.allow_without_gesture is not None:\n        json[\"allowWithoutGesture\"] = self.allow_without_gesture\n    if self.pan_tilt_zoom is not None:\n        json[\"panTiltZoom\"] = self.pan_tilt_zoom\n    return json\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionSetting","title":"<code>PermissionSetting</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>class PermissionSetting(enum.Enum):\n    GRANTED = \"granted\"\n    DENIED = \"denied\"\n    PROMPT = \"prompt\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PermissionSetting:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionSetting.DENIED","title":"<code>DENIED = 'denied'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionSetting.GRANTED","title":"<code>GRANTED = 'granted'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionSetting.PROMPT","title":"<code>PROMPT = 'prompt'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionSetting.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PermissionSetting:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionSetting.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType","title":"<code>PermissionType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>class PermissionType(enum.Enum):\n    ACCESSIBILITY_EVENTS = \"accessibilityEvents\"\n    AUDIO_CAPTURE = \"audioCapture\"\n    BACKGROUND_SYNC = \"backgroundSync\"\n    BACKGROUND_FETCH = \"backgroundFetch\"\n    CAPTURED_SURFACE_CONTROL = \"capturedSurfaceControl\"\n    CLIPBOARD_READ_WRITE = \"clipboardReadWrite\"\n    CLIPBOARD_SANITIZED_WRITE = \"clipboardSanitizedWrite\"\n    DISPLAY_CAPTURE = \"displayCapture\"\n    DURABLE_STORAGE = \"durableStorage\"\n    FLASH = \"flash\"\n    GEOLOCATION = \"geolocation\"\n    IDLE_DETECTION = \"idleDetection\"\n    LOCAL_FONTS = \"localFonts\"\n    MIDI = \"midi\"\n    MIDI_SYSEX = \"midiSysex\"\n    NFC = \"nfc\"\n    NOTIFICATIONS = \"notifications\"\n    PAYMENT_HANDLER = \"paymentHandler\"\n    PERIODIC_BACKGROUND_SYNC = \"periodicBackgroundSync\"\n    PROTECTED_MEDIA_IDENTIFIER = \"protectedMediaIdentifier\"\n    SENSORS = \"sensors\"\n    STORAGE_ACCESS = \"storageAccess\"\n    SPEAKER_SELECTION = \"speakerSelection\"\n    TOP_LEVEL_STORAGE_ACCESS = \"topLevelStorageAccess\"\n    VIDEO_CAPTURE = \"videoCapture\"\n    VIDEO_CAPTURE_PAN_TILT_ZOOM = \"videoCapturePanTiltZoom\"\n    WAKE_LOCK_SCREEN = \"wakeLockScreen\"\n    WAKE_LOCK_SYSTEM = \"wakeLockSystem\"\n    WINDOW_MANAGEMENT = \"windowManagement\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PermissionType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.ACCESSIBILITY_EVENTS","title":"<code>ACCESSIBILITY_EVENTS = 'accessibilityEvents'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.AUDIO_CAPTURE","title":"<code>AUDIO_CAPTURE = 'audioCapture'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.BACKGROUND_FETCH","title":"<code>BACKGROUND_FETCH = 'backgroundFetch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.BACKGROUND_SYNC","title":"<code>BACKGROUND_SYNC = 'backgroundSync'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.CAPTURED_SURFACE_CONTROL","title":"<code>CAPTURED_SURFACE_CONTROL = 'capturedSurfaceControl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.CLIPBOARD_READ_WRITE","title":"<code>CLIPBOARD_READ_WRITE = 'clipboardReadWrite'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.CLIPBOARD_SANITIZED_WRITE","title":"<code>CLIPBOARD_SANITIZED_WRITE = 'clipboardSanitizedWrite'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.DISPLAY_CAPTURE","title":"<code>DISPLAY_CAPTURE = 'displayCapture'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.DURABLE_STORAGE","title":"<code>DURABLE_STORAGE = 'durableStorage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.FLASH","title":"<code>FLASH = 'flash'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.GEOLOCATION","title":"<code>GEOLOCATION = 'geolocation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.IDLE_DETECTION","title":"<code>IDLE_DETECTION = 'idleDetection'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.LOCAL_FONTS","title":"<code>LOCAL_FONTS = 'localFonts'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.MIDI","title":"<code>MIDI = 'midi'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.MIDI_SYSEX","title":"<code>MIDI_SYSEX = 'midiSysex'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.NFC","title":"<code>NFC = 'nfc'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.NOTIFICATIONS","title":"<code>NOTIFICATIONS = 'notifications'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.PAYMENT_HANDLER","title":"<code>PAYMENT_HANDLER = 'paymentHandler'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.PERIODIC_BACKGROUND_SYNC","title":"<code>PERIODIC_BACKGROUND_SYNC = 'periodicBackgroundSync'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.PROTECTED_MEDIA_IDENTIFIER","title":"<code>PROTECTED_MEDIA_IDENTIFIER = 'protectedMediaIdentifier'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.SENSORS","title":"<code>SENSORS = 'sensors'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.SPEAKER_SELECTION","title":"<code>SPEAKER_SELECTION = 'speakerSelection'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.STORAGE_ACCESS","title":"<code>STORAGE_ACCESS = 'storageAccess'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.TOP_LEVEL_STORAGE_ACCESS","title":"<code>TOP_LEVEL_STORAGE_ACCESS = 'topLevelStorageAccess'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.VIDEO_CAPTURE","title":"<code>VIDEO_CAPTURE = 'videoCapture'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.VIDEO_CAPTURE_PAN_TILT_ZOOM","title":"<code>VIDEO_CAPTURE_PAN_TILT_ZOOM = 'videoCapturePanTiltZoom'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.WAKE_LOCK_SCREEN","title":"<code>WAKE_LOCK_SCREEN = 'wakeLockScreen'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.WAKE_LOCK_SYSTEM","title":"<code>WAKE_LOCK_SYSTEM = 'wakeLockSystem'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.WINDOW_MANAGEMENT","title":"<code>WINDOW_MANAGEMENT = 'windowManagement'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PermissionType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.PermissionType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowID","title":"<code>WindowID</code>","text":"<p>               Bases: <code>int</code></p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>class WindowID(int):\n    def to_json(self) -&gt; int:\n        return self\n\n    @classmethod\n    def from_json(cls, json: int) -&gt; WindowID:\n        return cls(json)\n\n    def __repr__(self):\n        return \"WindowID({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowID.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def __repr__(self):\n    return \"WindowID({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowID.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: int) -&gt; WindowID:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowID.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def to_json(self) -&gt; int:\n    return self\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowState","title":"<code>WindowState</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The state of the browser window.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>class WindowState(enum.Enum):\n    \"\"\"\n    The state of the browser window.\n    \"\"\"\n\n    NORMAL = \"normal\"\n    MINIMIZED = \"minimized\"\n    MAXIMIZED = \"maximized\"\n    FULLSCREEN = \"fullscreen\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; WindowState:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowState.FULLSCREEN","title":"<code>FULLSCREEN = 'fullscreen'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowState.MAXIMIZED","title":"<code>MAXIMIZED = 'maximized'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowState.MINIMIZED","title":"<code>MINIMIZED = 'minimized'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowState.NORMAL","title":"<code>NORMAL = 'normal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowState.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; WindowState:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.WindowState.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.add_privacy_sandbox_enrollment_override","title":"<code>add_privacy_sandbox_enrollment_override(url)</code>","text":"<p>Allows a site to use privacy sandbox features that require enrollment without the site actually being enrolled. Only supported on page targets.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> required Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def add_privacy_sandbox_enrollment_override(\n    url: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Allows a site to use privacy sandbox features that require enrollment\n    without the site actually being enrolled. Only supported on page targets.\n\n    :param url:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"url\"] = url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.addPrivacySandboxEnrollmentOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.cancel_download","title":"<code>cancel_download(guid, browser_context_id=None)</code>","text":"<p>Cancel a download if in progress</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>guid</code> <code>str</code> <p>Global unique identifier of the download.</p> required <code>browser_context_id</code> <code>Optional[BrowserContextID]</code> <p>(Optional) BrowserContext to perform the action in. When omitted, default browser context is used.</p> <code>None</code> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def cancel_download(\n    guid: str, browser_context_id: typing.Optional[BrowserContextID] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Cancel a download if in progress\n\n    **EXPERIMENTAL**\n\n    :param guid: Global unique identifier of the download.\n    :param browser_context_id: *(Optional)* BrowserContext to perform the action in. When omitted, default browser context is used.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"guid\"] = guid\n    if browser_context_id is not None:\n        params[\"browserContextId\"] = browser_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.cancelDownload\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.close","title":"<code>close()</code>","text":"<p>Close browser gracefully.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def close() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Close browser gracefully.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.close\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.crash","title":"<code>crash()</code>","text":"<p>Crashes browser on the main thread.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def crash() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Crashes browser on the main thread.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.crash\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.crash_gpu_process","title":"<code>crash_gpu_process()</code>","text":"<p>Crashes GPU process.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def crash_gpu_process() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Crashes GPU process.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.crashGpuProcess\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.execute_browser_command","title":"<code>execute_browser_command(command_id)</code>","text":"<p>Invoke custom browser commands used by telemetry.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>command_id</code> <code>BrowserCommandId</code> required Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def execute_browser_command(\n    command_id: BrowserCommandId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Invoke custom browser commands used by telemetry.\n\n    **EXPERIMENTAL**\n\n    :param command_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"commandId\"] = command_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.executeBrowserCommand\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.get_browser_command_line","title":"<code>get_browser_command_line()</code>","text":"<p>Returns the command line switches for the browser process if, and only if --enable-automation is on the commandline.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[str]]</code> <p>Commandline parameters</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def get_browser_command_line() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]\n):\n    \"\"\"\n    Returns the command line switches for the browser process if, and only if\n    --enable-automation is on the commandline.\n\n    **EXPERIMENTAL**\n\n    :returns: Commandline parameters\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.getBrowserCommandLine\",\n    }\n    json = yield cmd_dict\n    return [str(i) for i in json[\"arguments\"]]\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.get_histogram","title":"<code>get_histogram(name, delta=None)</code>","text":"<p>Get a Chrome histogram by name.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Requested histogram name.</p> required <code>delta</code> <code>Optional[bool]</code> <p>(Optional) If true, retrieve delta since last delta call.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Histogram]</code> <p>Histogram.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def get_histogram(\n    name: str, delta: typing.Optional[bool] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, Histogram]:\n    \"\"\"\n    Get a Chrome histogram by name.\n\n    **EXPERIMENTAL**\n\n    :param name: Requested histogram name.\n    :param delta: *(Optional)* If true, retrieve delta since last delta call.\n    :returns: Histogram.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"name\"] = name\n    if delta is not None:\n        params[\"delta\"] = delta\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.getHistogram\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return Histogram.from_json(json[\"histogram\"])\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.get_histograms","title":"<code>get_histograms(query=None, delta=None)</code>","text":"<p>Get Chrome histograms.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[str]</code> <p>(Optional) Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.</p> <code>None</code> <code>delta</code> <code>Optional[bool]</code> <p>(Optional) If true, retrieve delta since last delta call.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Histogram]]</code> <p>Histograms.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def get_histograms(\n    query: typing.Optional[str] = None, delta: typing.Optional[bool] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Histogram]]:\n    \"\"\"\n    Get Chrome histograms.\n\n    **EXPERIMENTAL**\n\n    :param query: *(Optional)* Requested substring in name. Only histograms which have query as a substring in their name are extracted. An empty or absent query returns all histograms.\n    :param delta: *(Optional)* If true, retrieve delta since last delta call.\n    :returns: Histograms.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if query is not None:\n        params[\"query\"] = query\n    if delta is not None:\n        params[\"delta\"] = delta\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.getHistograms\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [Histogram.from_json(i) for i in json[\"histograms\"]]\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.get_version","title":"<code>get_version()</code>","text":"<p>Returns version information.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[str, str, str, str, str]]</code> <p>A tuple with the following items:  0. protocolVersion - Protocol version. 1. product - Product name. 2. revision - Product revision. 3. userAgent - User-Agent. 4. jsVersion - V8 version.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def get_version() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, str, str, str, str]]\n):\n    \"\"\"\n    Returns version information.\n\n    :returns: A tuple with the following items:\n\n        0. **protocolVersion** - Protocol version.\n        1. **product** - Product name.\n        2. **revision** - Product revision.\n        3. **userAgent** - User-Agent.\n        4. **jsVersion** - V8 version.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.getVersion\",\n    }\n    json = yield cmd_dict\n    return (\n        str(json[\"protocolVersion\"]),\n        str(json[\"product\"]),\n        str(json[\"revision\"]),\n        str(json[\"userAgent\"]),\n        str(json[\"jsVersion\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.get_window_bounds","title":"<code>get_window_bounds(window_id)</code>","text":"<p>Get position and size of the browser window.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>window_id</code> <code>WindowID</code> <p>Browser window id.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Bounds]</code> <p>Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def get_window_bounds(\n    window_id: WindowID,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, Bounds]:\n    \"\"\"\n    Get position and size of the browser window.\n\n    **EXPERIMENTAL**\n\n    :param window_id: Browser window id.\n    :returns: Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"windowId\"] = window_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.getWindowBounds\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return Bounds.from_json(json[\"bounds\"])\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.get_window_for_target","title":"<code>get_window_for_target(target_id=None)</code>","text":"<p>Get the browser window that contains the devtools target.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>target_id</code> <code>Optional[TargetID]</code> <p>(Optional) Devtools agent host id. If called as a part of the session, associated targetId is used.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[WindowID, Bounds]]</code> <p>A tuple with the following items:  0. windowId - Browser window id. 1. bounds - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.</p> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def get_window_for_target(\n    target_id: typing.Optional[target.TargetID] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[WindowID, Bounds]]:\n    \"\"\"\n    Get the browser window that contains the devtools target.\n\n    **EXPERIMENTAL**\n\n    :param target_id: *(Optional)* Devtools agent host id. If called as a part of the session, associated targetId is used.\n    :returns: A tuple with the following items:\n\n        0. **windowId** - Browser window id.\n        1. **bounds** - Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if target_id is not None:\n        params[\"targetId\"] = target_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.getWindowForTarget\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (WindowID.from_json(json[\"windowId\"]), Bounds.from_json(json[\"bounds\"]))\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.grant_permissions","title":"<code>grant_permissions(permissions, origin=None, browser_context_id=None)</code>","text":"<p>Grant specific permissions to the given origin and reject all others.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>permissions</code> <code>List[PermissionType]</code> required <code>origin</code> <code>Optional[str]</code> <p>(Optional) Origin the permission applies to, all origins if not specified.</p> <code>None</code> <code>browser_context_id</code> <code>Optional[BrowserContextID]</code> <p>(Optional) BrowserContext to override permissions. When omitted, default browser context is used.</p> <code>None</code> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def grant_permissions(\n    permissions: typing.List[PermissionType],\n    origin: typing.Optional[str] = None,\n    browser_context_id: typing.Optional[BrowserContextID] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Grant specific permissions to the given origin and reject all others.\n\n    **EXPERIMENTAL**\n\n    :param permissions:\n    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.\n    :param browser_context_id: *(Optional)* BrowserContext to override permissions. When omitted, default browser context is used.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"permissions\"] = [i.to_json() for i in permissions]\n    if origin is not None:\n        params[\"origin\"] = origin\n    if browser_context_id is not None:\n        params[\"browserContextId\"] = browser_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.grantPermissions\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.reset_permissions","title":"<code>reset_permissions(browser_context_id=None)</code>","text":"<p>Reset all permission management for all origins.</p> <p>Parameters:</p> Name Type Description Default <code>browser_context_id</code> <code>Optional[BrowserContextID]</code> <p>(Optional) BrowserContext to reset permissions. When omitted, default browser context is used.</p> <code>None</code> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def reset_permissions(\n    browser_context_id: typing.Optional[BrowserContextID] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Reset all permission management for all origins.\n\n    :param browser_context_id: *(Optional)* BrowserContext to reset permissions. When omitted, default browser context is used.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if browser_context_id is not None:\n        params[\"browserContextId\"] = browser_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.resetPermissions\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.set_dock_tile","title":"<code>set_dock_tile(badge_label=None, image=None)</code>","text":"<p>Set dock tile details, platform-specific.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>badge_label</code> <code>Optional[str]</code> <p>(Optional)</p> <code>None</code> <code>image</code> <code>Optional[str]</code> <p>(Optional) Png encoded image. (Encoded as a base64 string when passed over JSON)</p> <code>None</code> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def set_dock_tile(\n    badge_label: typing.Optional[str] = None, image: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Set dock tile details, platform-specific.\n\n    **EXPERIMENTAL**\n\n    :param badge_label: *(Optional)*\n    :param image: *(Optional)* Png encoded image. (Encoded as a base64 string when passed over JSON)\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if badge_label is not None:\n        params[\"badgeLabel\"] = badge_label\n    if image is not None:\n        params[\"image\"] = image\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.setDockTile\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.set_download_behavior","title":"<code>set_download_behavior(behavior, browser_context_id=None, download_path=None, events_enabled=None)</code>","text":"<p>Set the behavior when downloading a file.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>behavior</code> <code>str</code> <p>Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). <code>allowAndName</code> allows download and names files according to their download guids.</p> required <code>browser_context_id</code> <code>Optional[BrowserContextID]</code> <p>(Optional) BrowserContext to set download behavior. When omitted, default browser context is used.</p> <code>None</code> <code>download_path</code> <code>Optional[str]</code> <p>(Optional) The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.</p> <code>None</code> <code>events_enabled</code> <code>Optional[bool]</code> <p>(Optional) Whether to emit download events (defaults to false).</p> <code>None</code> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def set_download_behavior(\n    behavior: str,\n    browser_context_id: typing.Optional[BrowserContextID] = None,\n    download_path: typing.Optional[str] = None,\n    events_enabled: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Set the behavior when downloading a file.\n\n    **EXPERIMENTAL**\n\n    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny). ``allowAndName`` allows download and names files according to their download guids.\n    :param browser_context_id: *(Optional)* BrowserContext to set download behavior. When omitted, default browser context is used.\n    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow' or 'allowAndName'.\n    :param events_enabled: *(Optional)* Whether to emit download events (defaults to false).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"behavior\"] = behavior\n    if browser_context_id is not None:\n        params[\"browserContextId\"] = browser_context_id.to_json()\n    if download_path is not None:\n        params[\"downloadPath\"] = download_path\n    if events_enabled is not None:\n        params[\"eventsEnabled\"] = events_enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.setDownloadBehavior\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.set_permission","title":"<code>set_permission(permission, setting, origin=None, browser_context_id=None)</code>","text":"<p>Set permission settings for given origin.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>permission</code> <code>PermissionDescriptor</code> <p>Descriptor of permission to override.</p> required <code>setting</code> <code>PermissionSetting</code> <p>Setting of the permission.</p> required <code>origin</code> <code>Optional[str]</code> <p>(Optional) Origin the permission applies to, all origins if not specified.</p> <code>None</code> <code>browser_context_id</code> <code>Optional[BrowserContextID]</code> <p>(Optional) Context to override. When omitted, default browser context is used.</p> <code>None</code> Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def set_permission(\n    permission: PermissionDescriptor,\n    setting: PermissionSetting,\n    origin: typing.Optional[str] = None,\n    browser_context_id: typing.Optional[BrowserContextID] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Set permission settings for given origin.\n\n    **EXPERIMENTAL**\n\n    :param permission: Descriptor of permission to override.\n    :param setting: Setting of the permission.\n    :param origin: *(Optional)* Origin the permission applies to, all origins if not specified.\n    :param browser_context_id: *(Optional)* Context to override. When omitted, default browser context is used.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"permission\"] = permission.to_json()\n    params[\"setting\"] = setting.to_json()\n    if origin is not None:\n        params[\"origin\"] = origin\n    if browser_context_id is not None:\n        params[\"browserContextId\"] = browser_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.setPermission\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/browser/#zendriver.cdp.browser.set_window_bounds","title":"<code>set_window_bounds(window_id, bounds)</code>","text":"<p>Set position and/or size of the browser window.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>window_id</code> <code>WindowID</code> <p>Browser window id.</p> required <code>bounds</code> <code>Bounds</code> <p>New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.</p> required Source code in <code>zendriver/cdp/browser.py</code> <pre><code>def set_window_bounds(\n    window_id: WindowID, bounds: Bounds\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Set position and/or size of the browser window.\n\n    **EXPERIMENTAL**\n\n    :param window_id: Browser window id.\n    :param bounds: New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"windowId\"] = window_id.to_json()\n    params[\"bounds\"] = bounds.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Browser.setWindowBounds\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/cache_storage/","title":"cache_storage","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Cache","title":"<code>Cache</code>  <code>dataclass</code>","text":"<p>Cache identifier.</p> Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>@dataclass\nclass Cache:\n    \"\"\"\n    Cache identifier.\n    \"\"\"\n\n    #: An opaque unique id of the cache.\n    cache_id: CacheId\n\n    #: Security origin of the cache.\n    security_origin: str\n\n    #: Storage key of the cache.\n    storage_key: str\n\n    #: The name of the cache.\n    cache_name: str\n\n    #: Storage bucket of the cache.\n    storage_bucket: typing.Optional[storage.StorageBucket] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"cacheId\"] = self.cache_id.to_json()\n        json[\"securityOrigin\"] = self.security_origin\n        json[\"storageKey\"] = self.storage_key\n        json[\"cacheName\"] = self.cache_name\n        if self.storage_bucket is not None:\n            json[\"storageBucket\"] = self.storage_bucket.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Cache:\n        return cls(\n            cache_id=CacheId.from_json(json[\"cacheId\"]),\n            security_origin=str(json[\"securityOrigin\"]),\n            storage_key=str(json[\"storageKey\"]),\n            cache_name=str(json[\"cacheName\"]),\n            storage_bucket=(\n                storage.StorageBucket.from_json(json[\"storageBucket\"])\n                if json.get(\"storageBucket\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Cache.cache_id","title":"<code>cache_id: CacheId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Cache.cache_name","title":"<code>cache_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Cache.security_origin","title":"<code>security_origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Cache.storage_bucket","title":"<code>storage_bucket: typing.Optional[storage.StorageBucket] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Cache.storage_key","title":"<code>storage_key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Cache.__init__","title":"<code>__init__(cache_id, security_origin, storage_key, cache_name, storage_bucket=None)</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Cache.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Cache:\n    return cls(\n        cache_id=CacheId.from_json(json[\"cacheId\"]),\n        security_origin=str(json[\"securityOrigin\"]),\n        storage_key=str(json[\"storageKey\"]),\n        cache_name=str(json[\"cacheName\"]),\n        storage_bucket=(\n            storage.StorageBucket.from_json(json[\"storageBucket\"])\n            if json.get(\"storageBucket\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Cache.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"cacheId\"] = self.cache_id.to_json()\n    json[\"securityOrigin\"] = self.security_origin\n    json[\"storageKey\"] = self.storage_key\n    json[\"cacheName\"] = self.cache_name\n    if self.storage_bucket is not None:\n        json[\"storageBucket\"] = self.storage_bucket.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CacheId","title":"<code>CacheId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique identifier of the Cache object.</p> Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>class CacheId(str):\n    \"\"\"\n    Unique identifier of the Cache object.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CacheId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"CacheId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CacheId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def __repr__(self):\n    return \"CacheId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CacheId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CacheId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CacheId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponse","title":"<code>CachedResponse</code>  <code>dataclass</code>","text":"<p>Cached response</p> Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>@dataclass\nclass CachedResponse:\n    \"\"\"\n    Cached response\n    \"\"\"\n\n    #: Entry content, base64-encoded. (Encoded as a base64 string when passed over JSON)\n    body: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"body\"] = self.body\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CachedResponse:\n        return cls(\n            body=str(json[\"body\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponse.body","title":"<code>body: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponse.__init__","title":"<code>__init__(body)</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponse.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CachedResponse:\n    return cls(\n        body=str(json[\"body\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponse.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"body\"] = self.body\n    return json\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponseType","title":"<code>CachedResponseType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>type of HTTP response cached</p> Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>class CachedResponseType(enum.Enum):\n    \"\"\"\n    type of HTTP response cached\n    \"\"\"\n\n    BASIC = \"basic\"\n    CORS = \"cors\"\n    DEFAULT = \"default\"\n    ERROR = \"error\"\n    OPAQUE_RESPONSE = \"opaqueResponse\"\n    OPAQUE_REDIRECT = \"opaqueRedirect\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CachedResponseType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponseType.BASIC","title":"<code>BASIC = 'basic'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponseType.CORS","title":"<code>CORS = 'cors'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponseType.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponseType.ERROR","title":"<code>ERROR = 'error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponseType.OPAQUE_REDIRECT","title":"<code>OPAQUE_REDIRECT = 'opaqueRedirect'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponseType.OPAQUE_RESPONSE","title":"<code>OPAQUE_RESPONSE = 'opaqueResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponseType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CachedResponseType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.CachedResponseType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry","title":"<code>DataEntry</code>  <code>dataclass</code>","text":"<p>Data entry.</p> Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>@dataclass\nclass DataEntry:\n    \"\"\"\n    Data entry.\n    \"\"\"\n\n    #: Request URL.\n    request_url: str\n\n    #: Request method.\n    request_method: str\n\n    #: Request headers\n    request_headers: typing.List[Header]\n\n    #: Number of seconds since epoch.\n    response_time: float\n\n    #: HTTP response status code.\n    response_status: int\n\n    #: HTTP response status text.\n    response_status_text: str\n\n    #: HTTP response type\n    response_type: CachedResponseType\n\n    #: Response headers\n    response_headers: typing.List[Header]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"requestURL\"] = self.request_url\n        json[\"requestMethod\"] = self.request_method\n        json[\"requestHeaders\"] = [i.to_json() for i in self.request_headers]\n        json[\"responseTime\"] = self.response_time\n        json[\"responseStatus\"] = self.response_status\n        json[\"responseStatusText\"] = self.response_status_text\n        json[\"responseType\"] = self.response_type.to_json()\n        json[\"responseHeaders\"] = [i.to_json() for i in self.response_headers]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DataEntry:\n        return cls(\n            request_url=str(json[\"requestURL\"]),\n            request_method=str(json[\"requestMethod\"]),\n            request_headers=[Header.from_json(i) for i in json[\"requestHeaders\"]],\n            response_time=float(json[\"responseTime\"]),\n            response_status=int(json[\"responseStatus\"]),\n            response_status_text=str(json[\"responseStatusText\"]),\n            response_type=CachedResponseType.from_json(json[\"responseType\"]),\n            response_headers=[Header.from_json(i) for i in json[\"responseHeaders\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.request_headers","title":"<code>request_headers: typing.List[Header]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.request_method","title":"<code>request_method: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.request_url","title":"<code>request_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.response_headers","title":"<code>response_headers: typing.List[Header]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.response_status","title":"<code>response_status: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.response_status_text","title":"<code>response_status_text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.response_time","title":"<code>response_time: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.response_type","title":"<code>response_type: CachedResponseType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.__init__","title":"<code>__init__(request_url, request_method, request_headers, response_time, response_status, response_status_text, response_type, response_headers)</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DataEntry:\n    return cls(\n        request_url=str(json[\"requestURL\"]),\n        request_method=str(json[\"requestMethod\"]),\n        request_headers=[Header.from_json(i) for i in json[\"requestHeaders\"]],\n        response_time=float(json[\"responseTime\"]),\n        response_status=int(json[\"responseStatus\"]),\n        response_status_text=str(json[\"responseStatusText\"]),\n        response_type=CachedResponseType.from_json(json[\"responseType\"]),\n        response_headers=[Header.from_json(i) for i in json[\"responseHeaders\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.DataEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"requestURL\"] = self.request_url\n    json[\"requestMethod\"] = self.request_method\n    json[\"requestHeaders\"] = [i.to_json() for i in self.request_headers]\n    json[\"responseTime\"] = self.response_time\n    json[\"responseStatus\"] = self.response_status\n    json[\"responseStatusText\"] = self.response_status_text\n    json[\"responseType\"] = self.response_type.to_json()\n    json[\"responseHeaders\"] = [i.to_json() for i in self.response_headers]\n    return json\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Header","title":"<code>Header</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>@dataclass\nclass Header:\n    name: str\n\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Header:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Header.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Header.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Header.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Header.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Header:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.Header.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.delete_cache","title":"<code>delete_cache(cache_id)</code>","text":"<p>Deletes a cache.</p> <p>Parameters:</p> Name Type Description Default <code>cache_id</code> <code>CacheId</code> <p>Id of cache for deletion.</p> required Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def delete_cache(cache_id: CacheId) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Deletes a cache.\n\n    :param cache_id: Id of cache for deletion.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"cacheId\"] = cache_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CacheStorage.deleteCache\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.delete_entry","title":"<code>delete_entry(cache_id, request)</code>","text":"<p>Deletes a cache entry.</p> <p>Parameters:</p> Name Type Description Default <code>cache_id</code> <code>CacheId</code> <p>Id of cache where the entry will be deleted.</p> required <code>request</code> <code>str</code> <p>URL spec of the request.</p> required Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def delete_entry(\n    cache_id: CacheId, request: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Deletes a cache entry.\n\n    :param cache_id: Id of cache where the entry will be deleted.\n    :param request: URL spec of the request.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"cacheId\"] = cache_id.to_json()\n    params[\"request\"] = request\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CacheStorage.deleteEntry\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.request_cache_names","title":"<code>request_cache_names(security_origin=None, storage_key=None, storage_bucket=None)</code>","text":"<p>Requests cache names.</p> <p>Parameters:</p> Name Type Description Default <code>security_origin</code> <code>Optional[str]</code> <p>(Optional) At least and at most one of securityOrigin, storageKey, storageBucket must be specified. Security origin.</p> <code>None</code> <code>storage_key</code> <code>Optional[str]</code> <p>(Optional) Storage key.</p> <code>None</code> <code>storage_bucket</code> <code>Optional[StorageBucket]</code> <p>(Optional) Storage bucket. If not specified, it uses the default bucket.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Cache]]</code> <p>Caches for the security origin.</p> Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def request_cache_names(\n    security_origin: typing.Optional[str] = None,\n    storage_key: typing.Optional[str] = None,\n    storage_bucket: typing.Optional[storage.StorageBucket] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Cache]]:\n    \"\"\"\n    Requests cache names.\n\n    :param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, storageBucket must be specified. Security origin.\n    :param storage_key: *(Optional)* Storage key.\n    :param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.\n    :returns: Caches for the security origin.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if security_origin is not None:\n        params[\"securityOrigin\"] = security_origin\n    if storage_key is not None:\n        params[\"storageKey\"] = storage_key\n    if storage_bucket is not None:\n        params[\"storageBucket\"] = storage_bucket.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CacheStorage.requestCacheNames\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [Cache.from_json(i) for i in json[\"caches\"]]\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.request_cached_response","title":"<code>request_cached_response(cache_id, request_url, request_headers)</code>","text":"<p>Fetches cache entry.</p> <p>Parameters:</p> Name Type Description Default <code>cache_id</code> <code>CacheId</code> <p>Id of cache that contains the entry.</p> required <code>request_url</code> <code>str</code> <p>URL spec of the request.</p> required <code>request_headers</code> <code>List[Header]</code> <p>headers of the request.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, CachedResponse]</code> <p>Response read from the cache.</p> Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def request_cached_response(\n    cache_id: CacheId, request_url: str, request_headers: typing.List[Header]\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, CachedResponse]:\n    \"\"\"\n    Fetches cache entry.\n\n    :param cache_id: Id of cache that contains the entry.\n    :param request_url: URL spec of the request.\n    :param request_headers: headers of the request.\n    :returns: Response read from the cache.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"cacheId\"] = cache_id.to_json()\n    params[\"requestURL\"] = request_url\n    params[\"requestHeaders\"] = [i.to_json() for i in request_headers]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CacheStorage.requestCachedResponse\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return CachedResponse.from_json(json[\"response\"])\n</code></pre>"},{"location":"reference/cdp/cache_storage/#zendriver.cdp.cache_storage.request_entries","title":"<code>request_entries(cache_id, skip_count=None, page_size=None, path_filter=None)</code>","text":"<p>Requests data from cache.</p> <p>Parameters:</p> Name Type Description Default <code>cache_id</code> <code>CacheId</code> <p>ID of cache to get entries from.</p> required <code>skip_count</code> <code>Optional[int]</code> <p>(Optional) Number of records to skip.</p> <code>None</code> <code>page_size</code> <code>Optional[int]</code> <p>(Optional) Number of records to fetch.</p> <code>None</code> <code>path_filter</code> <code>Optional[str]</code> <p>(Optional) If present, only return the entries containing this substring in the path</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[List[DataEntry], float]]</code> <p>A tuple with the following items:  0. cacheDataEntries - Array of object store data entries. 1. returnCount - Count of returned entries from this storage. If pathFilter is empty, it is the count of all entries from this storage.</p> Source code in <code>zendriver/cdp/cache_storage.py</code> <pre><code>def request_entries(\n    cache_id: CacheId,\n    skip_count: typing.Optional[int] = None,\n    page_size: typing.Optional[int] = None,\n    path_filter: typing.Optional[str] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List[DataEntry], float]\n]:\n    \"\"\"\n    Requests data from cache.\n\n    :param cache_id: ID of cache to get entries from.\n    :param skip_count: *(Optional)* Number of records to skip.\n    :param page_size: *(Optional)* Number of records to fetch.\n    :param path_filter: *(Optional)* If present, only return the entries containing this substring in the path\n    :returns: A tuple with the following items:\n\n        0. **cacheDataEntries** - Array of object store data entries.\n        1. **returnCount** - Count of returned entries from this storage. If pathFilter is empty, it is the count of all entries from this storage.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"cacheId\"] = cache_id.to_json()\n    if skip_count is not None:\n        params[\"skipCount\"] = skip_count\n    if page_size is not None:\n        params[\"pageSize\"] = page_size\n    if path_filter is not None:\n        params[\"pathFilter\"] = path_filter\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CacheStorage.requestEntries\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        [DataEntry.from_json(i) for i in json[\"cacheDataEntries\"]],\n        float(json[\"returnCount\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/cast/","title":"cast","text":""},{"location":"reference/cdp/cast/#zendriver.cdp.cast.IssueUpdated","title":"<code>IssueUpdated</code>  <code>dataclass</code>","text":"<p>This is fired whenever the outstanding issue/error message changes. <code>issueMessage</code> is empty if there is no issue.</p> Source code in <code>zendriver/cdp/cast.py</code> <pre><code>@event_class(\"Cast.issueUpdated\")\n@dataclass\nclass IssueUpdated:\n    \"\"\"\n    This is fired whenever the outstanding issue/error message changes.\n    ``issueMessage`` is empty if there is no issue.\n    \"\"\"\n\n    issue_message: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; IssueUpdated:\n        return cls(issue_message=str(json[\"issueMessage\"]))\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.IssueUpdated.issue_message","title":"<code>issue_message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cast/#zendriver.cdp.cast.IssueUpdated.__init__","title":"<code>__init__(issue_message)</code>","text":""},{"location":"reference/cdp/cast/#zendriver.cdp.cast.IssueUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/cast.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; IssueUpdated:\n    return cls(issue_message=str(json[\"issueMessage\"]))\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.Sink","title":"<code>Sink</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/cast.py</code> <pre><code>@dataclass\nclass Sink:\n    name: str\n\n    id_: str\n\n    #: Text describing the current session. Present only if there is an active\n    #: session on the sink.\n    session: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"id\"] = self.id_\n        if self.session is not None:\n            json[\"session\"] = self.session\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Sink:\n        return cls(\n            name=str(json[\"name\"]),\n            id_=str(json[\"id\"]),\n            session=(\n                str(json[\"session\"]) if json.get(\"session\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.Sink.id_","title":"<code>id_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cast/#zendriver.cdp.cast.Sink.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cast/#zendriver.cdp.cast.Sink.session","title":"<code>session: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cast/#zendriver.cdp.cast.Sink.__init__","title":"<code>__init__(name, id_, session=None)</code>","text":""},{"location":"reference/cdp/cast/#zendriver.cdp.cast.Sink.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/cast.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Sink:\n    return cls(\n        name=str(json[\"name\"]),\n        id_=str(json[\"id\"]),\n        session=(\n            str(json[\"session\"]) if json.get(\"session\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.Sink.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/cast.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"id\"] = self.id_\n    if self.session is not None:\n        json[\"session\"] = self.session\n    return json\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.SinksUpdated","title":"<code>SinksUpdated</code>  <code>dataclass</code>","text":"<p>This is fired whenever the list of available sinks changes. A sink is a device or a software surface that you can cast to.</p> Source code in <code>zendriver/cdp/cast.py</code> <pre><code>@event_class(\"Cast.sinksUpdated\")\n@dataclass\nclass SinksUpdated:\n    \"\"\"\n    This is fired whenever the list of available sinks changes. A sink is a\n    device or a software surface that you can cast to.\n    \"\"\"\n\n    sinks: typing.List[Sink]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SinksUpdated:\n        return cls(sinks=[Sink.from_json(i) for i in json[\"sinks\"]])\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.SinksUpdated.sinks","title":"<code>sinks: typing.List[Sink]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/cast/#zendriver.cdp.cast.SinksUpdated.__init__","title":"<code>__init__(sinks)</code>","text":""},{"location":"reference/cdp/cast/#zendriver.cdp.cast.SinksUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/cast.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SinksUpdated:\n    return cls(sinks=[Sink.from_json(i) for i in json[\"sinks\"]])\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.disable","title":"<code>disable()</code>","text":"<p>Stops observing for sinks and issues.</p> Source code in <code>zendriver/cdp/cast.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Stops observing for sinks and issues.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Cast.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.enable","title":"<code>enable(presentation_url=None)</code>","text":"<p>Starts observing for sinks that can be used for tab mirroring, and if set, sinks compatible with <code>presentationUrl</code> as well. When sinks are found, a <code>sinksUpdated</code> event is fired. Also starts observing for issue messages. When an issue is added or removed, an <code>issueUpdated</code> event is fired.</p> <p>Parameters:</p> Name Type Description Default <code>presentation_url</code> <code>Optional[str]</code> <p>(Optional)</p> <code>None</code> Source code in <code>zendriver/cdp/cast.py</code> <pre><code>def enable(\n    presentation_url: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Starts observing for sinks that can be used for tab mirroring, and if set,\n    sinks compatible with ``presentationUrl`` as well. When sinks are found, a\n    ``sinksUpdated`` event is fired.\n    Also starts observing for issue messages. When an issue is added or removed,\n    an ``issueUpdated`` event is fired.\n\n    :param presentation_url: *(Optional)*\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if presentation_url is not None:\n        params[\"presentationUrl\"] = presentation_url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Cast.enable\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.set_sink_to_use","title":"<code>set_sink_to_use(sink_name)</code>","text":"<p>Sets a sink to be used when the web page requests the browser to choose a sink via Presentation API, Remote Playback API, or Cast SDK.</p> <p>Parameters:</p> Name Type Description Default <code>sink_name</code> <code>str</code> required Source code in <code>zendriver/cdp/cast.py</code> <pre><code>def set_sink_to_use(sink_name: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets a sink to be used when the web page requests the browser to choose a\n    sink via Presentation API, Remote Playback API, or Cast SDK.\n\n    :param sink_name:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"sinkName\"] = sink_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Cast.setSinkToUse\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.start_desktop_mirroring","title":"<code>start_desktop_mirroring(sink_name)</code>","text":"<p>Starts mirroring the desktop to the sink.</p> <p>Parameters:</p> Name Type Description Default <code>sink_name</code> <code>str</code> required Source code in <code>zendriver/cdp/cast.py</code> <pre><code>def start_desktop_mirroring(\n    sink_name: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Starts mirroring the desktop to the sink.\n\n    :param sink_name:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"sinkName\"] = sink_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Cast.startDesktopMirroring\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.start_tab_mirroring","title":"<code>start_tab_mirroring(sink_name)</code>","text":"<p>Starts mirroring the tab to the sink.</p> <p>Parameters:</p> Name Type Description Default <code>sink_name</code> <code>str</code> required Source code in <code>zendriver/cdp/cast.py</code> <pre><code>def start_tab_mirroring(\n    sink_name: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Starts mirroring the tab to the sink.\n\n    :param sink_name:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"sinkName\"] = sink_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Cast.startTabMirroring\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/cast/#zendriver.cdp.cast.stop_casting","title":"<code>stop_casting(sink_name)</code>","text":"<p>Stops the active Cast session on the sink.</p> <p>Parameters:</p> Name Type Description Default <code>sink_name</code> <code>str</code> required Source code in <code>zendriver/cdp/cast.py</code> <pre><code>def stop_casting(sink_name: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Stops the active Cast session on the sink.\n\n    :param sink_name:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"sinkName\"] = sink_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Cast.stopCasting\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/console/","title":"console","text":""},{"location":"reference/cdp/console/#zendriver.cdp.console.ConsoleMessage","title":"<code>ConsoleMessage</code>  <code>dataclass</code>","text":"<p>Console message.</p> Source code in <code>zendriver/cdp/console.py</code> <pre><code>@dataclass\nclass ConsoleMessage:\n    \"\"\"\n    Console message.\n    \"\"\"\n\n    #: Message source.\n    source: str\n\n    #: Message severity.\n    level: str\n\n    #: Message text.\n    text: str\n\n    #: URL of the message origin.\n    url: typing.Optional[str] = None\n\n    #: Line number in the resource that generated this message (1-based).\n    line: typing.Optional[int] = None\n\n    #: Column number in the resource that generated this message (1-based).\n    column: typing.Optional[int] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"source\"] = self.source\n        json[\"level\"] = self.level\n        json[\"text\"] = self.text\n        if self.url is not None:\n            json[\"url\"] = self.url\n        if self.line is not None:\n            json[\"line\"] = self.line\n        if self.column is not None:\n            json[\"column\"] = self.column\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ConsoleMessage:\n        return cls(\n            source=str(json[\"source\"]),\n            level=str(json[\"level\"]),\n            text=str(json[\"text\"]),\n            url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n            line=int(json[\"line\"]) if json.get(\"line\", None) is not None else None,\n            column=(\n                int(json[\"column\"]) if json.get(\"column\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/console/#zendriver.cdp.console.ConsoleMessage.column","title":"<code>column: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/console/#zendriver.cdp.console.ConsoleMessage.level","title":"<code>level: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/console/#zendriver.cdp.console.ConsoleMessage.line","title":"<code>line: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/console/#zendriver.cdp.console.ConsoleMessage.source","title":"<code>source: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/console/#zendriver.cdp.console.ConsoleMessage.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/console/#zendriver.cdp.console.ConsoleMessage.url","title":"<code>url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/console/#zendriver.cdp.console.ConsoleMessage.__init__","title":"<code>__init__(source, level, text, url=None, line=None, column=None)</code>","text":""},{"location":"reference/cdp/console/#zendriver.cdp.console.ConsoleMessage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/console.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ConsoleMessage:\n    return cls(\n        source=str(json[\"source\"]),\n        level=str(json[\"level\"]),\n        text=str(json[\"text\"]),\n        url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n        line=int(json[\"line\"]) if json.get(\"line\", None) is not None else None,\n        column=(\n            int(json[\"column\"]) if json.get(\"column\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/console/#zendriver.cdp.console.ConsoleMessage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/console.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"source\"] = self.source\n    json[\"level\"] = self.level\n    json[\"text\"] = self.text\n    if self.url is not None:\n        json[\"url\"] = self.url\n    if self.line is not None:\n        json[\"line\"] = self.line\n    if self.column is not None:\n        json[\"column\"] = self.column\n    return json\n</code></pre>"},{"location":"reference/cdp/console/#zendriver.cdp.console.MessageAdded","title":"<code>MessageAdded</code>  <code>dataclass</code>","text":"<p>Issued when new console message is added.</p> Source code in <code>zendriver/cdp/console.py</code> <pre><code>@event_class(\"Console.messageAdded\")\n@dataclass\nclass MessageAdded:\n    \"\"\"\n    Issued when new console message is added.\n    \"\"\"\n\n    #: Console message that has been added.\n    message: ConsoleMessage\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; MessageAdded:\n        return cls(message=ConsoleMessage.from_json(json[\"message\"]))\n</code></pre>"},{"location":"reference/cdp/console/#zendriver.cdp.console.MessageAdded.message","title":"<code>message: ConsoleMessage</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/console/#zendriver.cdp.console.MessageAdded.__init__","title":"<code>__init__(message)</code>","text":""},{"location":"reference/cdp/console/#zendriver.cdp.console.MessageAdded.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/console.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; MessageAdded:\n    return cls(message=ConsoleMessage.from_json(json[\"message\"]))\n</code></pre>"},{"location":"reference/cdp/console/#zendriver.cdp.console.clear_messages","title":"<code>clear_messages()</code>","text":"<p>Does nothing.</p> Source code in <code>zendriver/cdp/console.py</code> <pre><code>def clear_messages() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Does nothing.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Console.clearMessages\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/console/#zendriver.cdp.console.disable","title":"<code>disable()</code>","text":"<p>Disables console domain, prevents further console messages from being reported to the client.</p> Source code in <code>zendriver/cdp/console.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables console domain, prevents further console messages from being reported to the client.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Console.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/console/#zendriver.cdp.console.enable","title":"<code>enable()</code>","text":"<p>Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.</p> Source code in <code>zendriver/cdp/console.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables console domain, sends the messages collected so far to the client by means of the\n    ``messageAdded`` notification.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Console.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/css/","title":"css","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSComputedStyleProperty","title":"<code>CSSComputedStyleProperty</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSComputedStyleProperty:\n    #: Computed style property name.\n    name: str\n\n    #: Computed style property value.\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSComputedStyleProperty:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSComputedStyleProperty.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSComputedStyleProperty.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSComputedStyleProperty.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSComputedStyleProperty.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSComputedStyleProperty:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSComputedStyleProperty.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSContainerQuery","title":"<code>CSSContainerQuery</code>  <code>dataclass</code>","text":"<p>CSS container query rule descriptor.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSContainerQuery:\n    \"\"\"\n    CSS container query rule descriptor.\n    \"\"\"\n\n    #: Container query text.\n    text: str\n\n    #: The associated rule header range in the enclosing stylesheet (if\n    #: available).\n    range_: typing.Optional[SourceRange] = None\n\n    #: Identifier of the stylesheet containing this object (if exists).\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    #: Optional name for the container.\n    name: typing.Optional[str] = None\n\n    #: Optional physical axes queried for the container.\n    physical_axes: typing.Optional[dom.PhysicalAxes] = None\n\n    #: Optional logical axes queried for the container.\n    logical_axes: typing.Optional[dom.LogicalAxes] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"text\"] = self.text\n        if self.range_ is not None:\n            json[\"range\"] = self.range_.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        if self.name is not None:\n            json[\"name\"] = self.name\n        if self.physical_axes is not None:\n            json[\"physicalAxes\"] = self.physical_axes.to_json()\n        if self.logical_axes is not None:\n            json[\"logicalAxes\"] = self.logical_axes.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSContainerQuery:\n        return cls(\n            text=str(json[\"text\"]),\n            range_=(\n                SourceRange.from_json(json[\"range\"])\n                if json.get(\"range\", None) is not None\n                else None\n            ),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n            name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n            physical_axes=(\n                dom.PhysicalAxes.from_json(json[\"physicalAxes\"])\n                if json.get(\"physicalAxes\", None) is not None\n                else None\n            ),\n            logical_axes=(\n                dom.LogicalAxes.from_json(json[\"logicalAxes\"])\n                if json.get(\"logicalAxes\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSContainerQuery.logical_axes","title":"<code>logical_axes: typing.Optional[dom.LogicalAxes] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSContainerQuery.name","title":"<code>name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSContainerQuery.physical_axes","title":"<code>physical_axes: typing.Optional[dom.PhysicalAxes] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSContainerQuery.range_","title":"<code>range_: typing.Optional[SourceRange] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSContainerQuery.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSContainerQuery.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSContainerQuery.__init__","title":"<code>__init__(text, range_=None, style_sheet_id=None, name=None, physical_axes=None, logical_axes=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSContainerQuery.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSContainerQuery:\n    return cls(\n        text=str(json[\"text\"]),\n        range_=(\n            SourceRange.from_json(json[\"range\"])\n            if json.get(\"range\", None) is not None\n            else None\n        ),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n        name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n        physical_axes=(\n            dom.PhysicalAxes.from_json(json[\"physicalAxes\"])\n            if json.get(\"physicalAxes\", None) is not None\n            else None\n        ),\n        logical_axes=(\n            dom.LogicalAxes.from_json(json[\"logicalAxes\"])\n            if json.get(\"logicalAxes\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSContainerQuery.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"text\"] = self.text\n    if self.range_ is not None:\n        json[\"range\"] = self.range_.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    if self.name is not None:\n        json[\"name\"] = self.name\n    if self.physical_axes is not None:\n        json[\"physicalAxes\"] = self.physical_axes.to_json()\n    if self.logical_axes is not None:\n        json[\"logicalAxes\"] = self.logical_axes.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSFontPaletteValuesRule","title":"<code>CSSFontPaletteValuesRule</code>  <code>dataclass</code>","text":"<p>CSS font-palette-values rule representation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSFontPaletteValuesRule:\n    \"\"\"\n    CSS font-palette-values rule representation.\n    \"\"\"\n\n    #: Parent stylesheet's origin.\n    origin: StyleSheetOrigin\n\n    #: Associated font palette name.\n    font_palette_name: Value\n\n    #: Associated style declaration.\n    style: CSSStyle\n\n    #: The css style sheet identifier (absent for user agent stylesheet and user-specified\n    #: stylesheet rules) this rule came from.\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"origin\"] = self.origin.to_json()\n        json[\"fontPaletteName\"] = self.font_palette_name.to_json()\n        json[\"style\"] = self.style.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSFontPaletteValuesRule:\n        return cls(\n            origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n            font_palette_name=Value.from_json(json[\"fontPaletteName\"]),\n            style=CSSStyle.from_json(json[\"style\"]),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSFontPaletteValuesRule.font_palette_name","title":"<code>font_palette_name: Value</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSFontPaletteValuesRule.origin","title":"<code>origin: StyleSheetOrigin</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSFontPaletteValuesRule.style","title":"<code>style: CSSStyle</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSFontPaletteValuesRule.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSFontPaletteValuesRule.__init__","title":"<code>__init__(origin, font_palette_name, style, style_sheet_id=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSFontPaletteValuesRule.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSFontPaletteValuesRule:\n    return cls(\n        origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n        font_palette_name=Value.from_json(json[\"fontPaletteName\"]),\n        style=CSSStyle.from_json(json[\"style\"]),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSFontPaletteValuesRule.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"origin\"] = self.origin.to_json()\n    json[\"fontPaletteName\"] = self.font_palette_name.to_json()\n    json[\"style\"] = self.style.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframeRule","title":"<code>CSSKeyframeRule</code>  <code>dataclass</code>","text":"<p>CSS keyframe rule representation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSKeyframeRule:\n    \"\"\"\n    CSS keyframe rule representation.\n    \"\"\"\n\n    #: Parent stylesheet's origin.\n    origin: StyleSheetOrigin\n\n    #: Associated key text.\n    key_text: Value\n\n    #: Associated style declaration.\n    style: CSSStyle\n\n    #: The css style sheet identifier (absent for user agent stylesheet and user-specified\n    #: stylesheet rules) this rule came from.\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"origin\"] = self.origin.to_json()\n        json[\"keyText\"] = self.key_text.to_json()\n        json[\"style\"] = self.style.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSKeyframeRule:\n        return cls(\n            origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n            key_text=Value.from_json(json[\"keyText\"]),\n            style=CSSStyle.from_json(json[\"style\"]),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframeRule.key_text","title":"<code>key_text: Value</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframeRule.origin","title":"<code>origin: StyleSheetOrigin</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframeRule.style","title":"<code>style: CSSStyle</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframeRule.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframeRule.__init__","title":"<code>__init__(origin, key_text, style, style_sheet_id=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframeRule.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSKeyframeRule:\n    return cls(\n        origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n        key_text=Value.from_json(json[\"keyText\"]),\n        style=CSSStyle.from_json(json[\"style\"]),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframeRule.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"origin\"] = self.origin.to_json()\n    json[\"keyText\"] = self.key_text.to_json()\n    json[\"style\"] = self.style.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframesRule","title":"<code>CSSKeyframesRule</code>  <code>dataclass</code>","text":"<p>CSS keyframes rule representation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSKeyframesRule:\n    \"\"\"\n    CSS keyframes rule representation.\n    \"\"\"\n\n    #: Animation name.\n    animation_name: Value\n\n    #: List of keyframes.\n    keyframes: typing.List[CSSKeyframeRule]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"animationName\"] = self.animation_name.to_json()\n        json[\"keyframes\"] = [i.to_json() for i in self.keyframes]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSKeyframesRule:\n        return cls(\n            animation_name=Value.from_json(json[\"animationName\"]),\n            keyframes=[CSSKeyframeRule.from_json(i) for i in json[\"keyframes\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframesRule.animation_name","title":"<code>animation_name: Value</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframesRule.keyframes","title":"<code>keyframes: typing.List[CSSKeyframeRule]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframesRule.__init__","title":"<code>__init__(animation_name, keyframes)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframesRule.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSKeyframesRule:\n    return cls(\n        animation_name=Value.from_json(json[\"animationName\"]),\n        keyframes=[CSSKeyframeRule.from_json(i) for i in json[\"keyframes\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSKeyframesRule.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"animationName\"] = self.animation_name.to_json()\n    json[\"keyframes\"] = [i.to_json() for i in self.keyframes]\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayer","title":"<code>CSSLayer</code>  <code>dataclass</code>","text":"<p>CSS Layer at-rule descriptor.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSLayer:\n    \"\"\"\n    CSS Layer at-rule descriptor.\n    \"\"\"\n\n    #: Layer name.\n    text: str\n\n    #: The associated rule header range in the enclosing stylesheet (if\n    #: available).\n    range_: typing.Optional[SourceRange] = None\n\n    #: Identifier of the stylesheet containing this object (if exists).\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"text\"] = self.text\n        if self.range_ is not None:\n            json[\"range\"] = self.range_.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSLayer:\n        return cls(\n            text=str(json[\"text\"]),\n            range_=(\n                SourceRange.from_json(json[\"range\"])\n                if json.get(\"range\", None) is not None\n                else None\n            ),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayer.range_","title":"<code>range_: typing.Optional[SourceRange] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayer.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayer.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayer.__init__","title":"<code>__init__(text, range_=None, style_sheet_id=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayer.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSLayer:\n    return cls(\n        text=str(json[\"text\"]),\n        range_=(\n            SourceRange.from_json(json[\"range\"])\n            if json.get(\"range\", None) is not None\n            else None\n        ),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayer.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"text\"] = self.text\n    if self.range_ is not None:\n        json[\"range\"] = self.range_.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayerData","title":"<code>CSSLayerData</code>  <code>dataclass</code>","text":"<p>CSS Layer data.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSLayerData:\n    \"\"\"\n    CSS Layer data.\n    \"\"\"\n\n    #: Layer name.\n    name: str\n\n    #: Layer order. The order determines the order of the layer in the cascade order.\n    #: A higher number has higher priority in the cascade order.\n    order: float\n\n    #: Direct sub-layers\n    sub_layers: typing.Optional[typing.List[CSSLayerData]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"order\"] = self.order\n        if self.sub_layers is not None:\n            json[\"subLayers\"] = [i.to_json() for i in self.sub_layers]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSLayerData:\n        return cls(\n            name=str(json[\"name\"]),\n            order=float(json[\"order\"]),\n            sub_layers=(\n                [CSSLayerData.from_json(i) for i in json[\"subLayers\"]]\n                if json.get(\"subLayers\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayerData.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayerData.order","title":"<code>order: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayerData.sub_layers","title":"<code>sub_layers: typing.Optional[typing.List[CSSLayerData]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayerData.__init__","title":"<code>__init__(name, order, sub_layers=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayerData.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSLayerData:\n    return cls(\n        name=str(json[\"name\"]),\n        order=float(json[\"order\"]),\n        sub_layers=(\n            [CSSLayerData.from_json(i) for i in json[\"subLayers\"]]\n            if json.get(\"subLayers\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSLayerData.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"order\"] = self.order\n    if self.sub_layers is not None:\n        json[\"subLayers\"] = [i.to_json() for i in self.sub_layers]\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSMedia","title":"<code>CSSMedia</code>  <code>dataclass</code>","text":"<p>CSS media rule descriptor.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSMedia:\n    \"\"\"\n    CSS media rule descriptor.\n    \"\"\"\n\n    #: Media query text.\n    text: str\n\n    #: Source of the media query: \"mediaRule\" if specified by a @media rule, \"importRule\" if\n    #: specified by an @import rule, \"linkedSheet\" if specified by a \"media\" attribute in a linked\n    #: stylesheet's LINK tag, \"inlineSheet\" if specified by a \"media\" attribute in an inline\n    #: stylesheet's STYLE tag.\n    source: str\n\n    #: URL of the document containing the media query description.\n    source_url: typing.Optional[str] = None\n\n    #: The associated rule (@media or @import) header range in the enclosing stylesheet (if\n    #: available).\n    range_: typing.Optional[SourceRange] = None\n\n    #: Identifier of the stylesheet containing this object (if exists).\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    #: Array of media queries.\n    media_list: typing.Optional[typing.List[MediaQuery]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"text\"] = self.text\n        json[\"source\"] = self.source\n        if self.source_url is not None:\n            json[\"sourceURL\"] = self.source_url\n        if self.range_ is not None:\n            json[\"range\"] = self.range_.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        if self.media_list is not None:\n            json[\"mediaList\"] = [i.to_json() for i in self.media_list]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSMedia:\n        return cls(\n            text=str(json[\"text\"]),\n            source=str(json[\"source\"]),\n            source_url=(\n                str(json[\"sourceURL\"])\n                if json.get(\"sourceURL\", None) is not None\n                else None\n            ),\n            range_=(\n                SourceRange.from_json(json[\"range\"])\n                if json.get(\"range\", None) is not None\n                else None\n            ),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n            media_list=(\n                [MediaQuery.from_json(i) for i in json[\"mediaList\"]]\n                if json.get(\"mediaList\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSMedia.media_list","title":"<code>media_list: typing.Optional[typing.List[MediaQuery]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSMedia.range_","title":"<code>range_: typing.Optional[SourceRange] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSMedia.source","title":"<code>source: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSMedia.source_url","title":"<code>source_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSMedia.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSMedia.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSMedia.__init__","title":"<code>__init__(text, source, source_url=None, range_=None, style_sheet_id=None, media_list=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSMedia.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSMedia:\n    return cls(\n        text=str(json[\"text\"]),\n        source=str(json[\"source\"]),\n        source_url=(\n            str(json[\"sourceURL\"])\n            if json.get(\"sourceURL\", None) is not None\n            else None\n        ),\n        range_=(\n            SourceRange.from_json(json[\"range\"])\n            if json.get(\"range\", None) is not None\n            else None\n        ),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n        media_list=(\n            [MediaQuery.from_json(i) for i in json[\"mediaList\"]]\n            if json.get(\"mediaList\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSMedia.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"text\"] = self.text\n    json[\"source\"] = self.source\n    if self.source_url is not None:\n        json[\"sourceURL\"] = self.source_url\n    if self.range_ is not None:\n        json[\"range\"] = self.range_.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    if self.media_list is not None:\n        json[\"mediaList\"] = [i.to_json() for i in self.media_list]\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionFallbackRule","title":"<code>CSSPositionFallbackRule</code>  <code>dataclass</code>","text":"<p>CSS position-fallback rule representation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSPositionFallbackRule:\n    \"\"\"\n    CSS position-fallback rule representation.\n    \"\"\"\n\n    name: Value\n\n    #: List of keyframes.\n    try_rules: typing.List[CSSTryRule]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name.to_json()\n        json[\"tryRules\"] = [i.to_json() for i in self.try_rules]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSPositionFallbackRule:\n        return cls(\n            name=Value.from_json(json[\"name\"]),\n            try_rules=[CSSTryRule.from_json(i) for i in json[\"tryRules\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionFallbackRule.name","title":"<code>name: Value</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionFallbackRule.try_rules","title":"<code>try_rules: typing.List[CSSTryRule]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionFallbackRule.__init__","title":"<code>__init__(name, try_rules)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionFallbackRule.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSPositionFallbackRule:\n    return cls(\n        name=Value.from_json(json[\"name\"]),\n        try_rules=[CSSTryRule.from_json(i) for i in json[\"tryRules\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionFallbackRule.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name.to_json()\n    json[\"tryRules\"] = [i.to_json() for i in self.try_rules]\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionTryRule","title":"<code>CSSPositionTryRule</code>  <code>dataclass</code>","text":"<p>CSS @position-try rule representation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSPositionTryRule:\n    \"\"\"\n    CSS @position-try rule representation.\n    \"\"\"\n\n    #: The prelude dashed-ident name\n    name: Value\n\n    #: Parent stylesheet's origin.\n    origin: StyleSheetOrigin\n\n    #: Associated style declaration.\n    style: CSSStyle\n\n    #: The css style sheet identifier (absent for user agent stylesheet and user-specified\n    #: stylesheet rules) this rule came from.\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name.to_json()\n        json[\"origin\"] = self.origin.to_json()\n        json[\"style\"] = self.style.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSPositionTryRule:\n        return cls(\n            name=Value.from_json(json[\"name\"]),\n            origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n            style=CSSStyle.from_json(json[\"style\"]),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionTryRule.name","title":"<code>name: Value</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionTryRule.origin","title":"<code>origin: StyleSheetOrigin</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionTryRule.style","title":"<code>style: CSSStyle</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionTryRule.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionTryRule.__init__","title":"<code>__init__(name, origin, style, style_sheet_id=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionTryRule.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSPositionTryRule:\n    return cls(\n        name=Value.from_json(json[\"name\"]),\n        origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n        style=CSSStyle.from_json(json[\"style\"]),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPositionTryRule.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name.to_json()\n    json[\"origin\"] = self.origin.to_json()\n    json[\"style\"] = self.style.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty","title":"<code>CSSProperty</code>  <code>dataclass</code>","text":"<p>CSS property declaration data.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSProperty:\n    \"\"\"\n    CSS property declaration data.\n    \"\"\"\n\n    #: The property name.\n    name: str\n\n    #: The property value.\n    value: str\n\n    #: Whether the property has \"!important\" annotation (implies ``false`` if absent).\n    important: typing.Optional[bool] = None\n\n    #: Whether the property is implicit (implies ``false`` if absent).\n    implicit: typing.Optional[bool] = None\n\n    #: The full property text as specified in the style.\n    text: typing.Optional[str] = None\n\n    #: Whether the property is understood by the browser (implies ``true`` if absent).\n    parsed_ok: typing.Optional[bool] = None\n\n    #: Whether the property is disabled by the user (present for source-based properties only).\n    disabled: typing.Optional[bool] = None\n\n    #: The entire property range in the enclosing style declaration (if available).\n    range_: typing.Optional[SourceRange] = None\n\n    #: Parsed longhand components of this property if it is a shorthand.\n    #: This field will be empty if the given property is not a shorthand.\n    longhand_properties: typing.Optional[typing.List[CSSProperty]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        if self.important is not None:\n            json[\"important\"] = self.important\n        if self.implicit is not None:\n            json[\"implicit\"] = self.implicit\n        if self.text is not None:\n            json[\"text\"] = self.text\n        if self.parsed_ok is not None:\n            json[\"parsedOk\"] = self.parsed_ok\n        if self.disabled is not None:\n            json[\"disabled\"] = self.disabled\n        if self.range_ is not None:\n            json[\"range\"] = self.range_.to_json()\n        if self.longhand_properties is not None:\n            json[\"longhandProperties\"] = [i.to_json() for i in self.longhand_properties]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSProperty:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n            important=(\n                bool(json[\"important\"])\n                if json.get(\"important\", None) is not None\n                else None\n            ),\n            implicit=(\n                bool(json[\"implicit\"])\n                if json.get(\"implicit\", None) is not None\n                else None\n            ),\n            text=str(json[\"text\"]) if json.get(\"text\", None) is not None else None,\n            parsed_ok=(\n                bool(json[\"parsedOk\"])\n                if json.get(\"parsedOk\", None) is not None\n                else None\n            ),\n            disabled=(\n                bool(json[\"disabled\"])\n                if json.get(\"disabled\", None) is not None\n                else None\n            ),\n            range_=(\n                SourceRange.from_json(json[\"range\"])\n                if json.get(\"range\", None) is not None\n                else None\n            ),\n            longhand_properties=(\n                [CSSProperty.from_json(i) for i in json[\"longhandProperties\"]]\n                if json.get(\"longhandProperties\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.disabled","title":"<code>disabled: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.implicit","title":"<code>implicit: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.important","title":"<code>important: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.longhand_properties","title":"<code>longhand_properties: typing.Optional[typing.List[CSSProperty]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.parsed_ok","title":"<code>parsed_ok: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.range_","title":"<code>range_: typing.Optional[SourceRange] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.text","title":"<code>text: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.__init__","title":"<code>__init__(name, value, important=None, implicit=None, text=None, parsed_ok=None, disabled=None, range_=None, longhand_properties=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSProperty:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n        important=(\n            bool(json[\"important\"])\n            if json.get(\"important\", None) is not None\n            else None\n        ),\n        implicit=(\n            bool(json[\"implicit\"])\n            if json.get(\"implicit\", None) is not None\n            else None\n        ),\n        text=str(json[\"text\"]) if json.get(\"text\", None) is not None else None,\n        parsed_ok=(\n            bool(json[\"parsedOk\"])\n            if json.get(\"parsedOk\", None) is not None\n            else None\n        ),\n        disabled=(\n            bool(json[\"disabled\"])\n            if json.get(\"disabled\", None) is not None\n            else None\n        ),\n        range_=(\n            SourceRange.from_json(json[\"range\"])\n            if json.get(\"range\", None) is not None\n            else None\n        ),\n        longhand_properties=(\n            [CSSProperty.from_json(i) for i in json[\"longhandProperties\"]]\n            if json.get(\"longhandProperties\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSProperty.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    if self.important is not None:\n        json[\"important\"] = self.important\n    if self.implicit is not None:\n        json[\"implicit\"] = self.implicit\n    if self.text is not None:\n        json[\"text\"] = self.text\n    if self.parsed_ok is not None:\n        json[\"parsedOk\"] = self.parsed_ok\n    if self.disabled is not None:\n        json[\"disabled\"] = self.disabled\n    if self.range_ is not None:\n        json[\"range\"] = self.range_.to_json()\n    if self.longhand_properties is not None:\n        json[\"longhandProperties\"] = [i.to_json() for i in self.longhand_properties]\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRegistration","title":"<code>CSSPropertyRegistration</code>  <code>dataclass</code>","text":"<p>Representation of a custom property registration through CSS.registerProperty</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSPropertyRegistration:\n    \"\"\"\n    Representation of a custom property registration through CSS.registerProperty\n    \"\"\"\n\n    property_name: str\n\n    inherits: bool\n\n    syntax: str\n\n    initial_value: typing.Optional[Value] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"propertyName\"] = self.property_name\n        json[\"inherits\"] = self.inherits\n        json[\"syntax\"] = self.syntax\n        if self.initial_value is not None:\n            json[\"initialValue\"] = self.initial_value.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSPropertyRegistration:\n        return cls(\n            property_name=str(json[\"propertyName\"]),\n            inherits=bool(json[\"inherits\"]),\n            syntax=str(json[\"syntax\"]),\n            initial_value=(\n                Value.from_json(json[\"initialValue\"])\n                if json.get(\"initialValue\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRegistration.inherits","title":"<code>inherits: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRegistration.initial_value","title":"<code>initial_value: typing.Optional[Value] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRegistration.property_name","title":"<code>property_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRegistration.syntax","title":"<code>syntax: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRegistration.__init__","title":"<code>__init__(property_name, inherits, syntax, initial_value=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRegistration.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSPropertyRegistration:\n    return cls(\n        property_name=str(json[\"propertyName\"]),\n        inherits=bool(json[\"inherits\"]),\n        syntax=str(json[\"syntax\"]),\n        initial_value=(\n            Value.from_json(json[\"initialValue\"])\n            if json.get(\"initialValue\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRegistration.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"propertyName\"] = self.property_name\n    json[\"inherits\"] = self.inherits\n    json[\"syntax\"] = self.syntax\n    if self.initial_value is not None:\n        json[\"initialValue\"] = self.initial_value.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRule","title":"<code>CSSPropertyRule</code>  <code>dataclass</code>","text":"<p>CSS property at-rule representation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSPropertyRule:\n    \"\"\"\n    CSS property at-rule representation.\n    \"\"\"\n\n    #: Parent stylesheet's origin.\n    origin: StyleSheetOrigin\n\n    #: Associated property name.\n    property_name: Value\n\n    #: Associated style declaration.\n    style: CSSStyle\n\n    #: The css style sheet identifier (absent for user agent stylesheet and user-specified\n    #: stylesheet rules) this rule came from.\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"origin\"] = self.origin.to_json()\n        json[\"propertyName\"] = self.property_name.to_json()\n        json[\"style\"] = self.style.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSPropertyRule:\n        return cls(\n            origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n            property_name=Value.from_json(json[\"propertyName\"]),\n            style=CSSStyle.from_json(json[\"style\"]),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRule.origin","title":"<code>origin: StyleSheetOrigin</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRule.property_name","title":"<code>property_name: Value</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRule.style","title":"<code>style: CSSStyle</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRule.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRule.__init__","title":"<code>__init__(origin, property_name, style, style_sheet_id=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRule.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSPropertyRule:\n    return cls(\n        origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n        property_name=Value.from_json(json[\"propertyName\"]),\n        style=CSSStyle.from_json(json[\"style\"]),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSPropertyRule.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"origin\"] = self.origin.to_json()\n    json[\"propertyName\"] = self.property_name.to_json()\n    json[\"style\"] = self.style.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule","title":"<code>CSSRule</code>  <code>dataclass</code>","text":"<p>CSS rule representation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSRule:\n    \"\"\"\n    CSS rule representation.\n    \"\"\"\n\n    #: Rule selector data.\n    selector_list: SelectorList\n\n    #: Parent stylesheet's origin.\n    origin: StyleSheetOrigin\n\n    #: Associated style declaration.\n    style: CSSStyle\n\n    #: The css style sheet identifier (absent for user agent stylesheet and user-specified\n    #: stylesheet rules) this rule came from.\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    #: Array of selectors from ancestor style rules, sorted by distance from the current rule.\n    nesting_selectors: typing.Optional[typing.List[str]] = None\n\n    #: Media list array (for rules involving media queries). The array enumerates media queries\n    #: starting with the innermost one, going outwards.\n    media: typing.Optional[typing.List[CSSMedia]] = None\n\n    #: Container query list array (for rules involving container queries).\n    #: The array enumerates container queries starting with the innermost one, going outwards.\n    container_queries: typing.Optional[typing.List[CSSContainerQuery]] = None\n\n    #: @supports CSS at-rule array.\n    #: The array enumerates @supports at-rules starting with the innermost one, going outwards.\n    supports: typing.Optional[typing.List[CSSSupports]] = None\n\n    #: Cascade layer array. Contains the layer hierarchy that this rule belongs to starting\n    #: with the innermost layer and going outwards.\n    layers: typing.Optional[typing.List[CSSLayer]] = None\n\n    #: @scope CSS at-rule array.\n    #: The array enumerates @scope at-rules starting with the innermost one, going outwards.\n    scopes: typing.Optional[typing.List[CSSScope]] = None\n\n    #: The array keeps the types of ancestor CSSRules from the innermost going outwards.\n    rule_types: typing.Optional[typing.List[CSSRuleType]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"selectorList\"] = self.selector_list.to_json()\n        json[\"origin\"] = self.origin.to_json()\n        json[\"style\"] = self.style.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        if self.nesting_selectors is not None:\n            json[\"nestingSelectors\"] = [i for i in self.nesting_selectors]\n        if self.media is not None:\n            json[\"media\"] = [i.to_json() for i in self.media]\n        if self.container_queries is not None:\n            json[\"containerQueries\"] = [i.to_json() for i in self.container_queries]\n        if self.supports is not None:\n            json[\"supports\"] = [i.to_json() for i in self.supports]\n        if self.layers is not None:\n            json[\"layers\"] = [i.to_json() for i in self.layers]\n        if self.scopes is not None:\n            json[\"scopes\"] = [i.to_json() for i in self.scopes]\n        if self.rule_types is not None:\n            json[\"ruleTypes\"] = [i.to_json() for i in self.rule_types]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSRule:\n        return cls(\n            selector_list=SelectorList.from_json(json[\"selectorList\"]),\n            origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n            style=CSSStyle.from_json(json[\"style\"]),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n            nesting_selectors=(\n                [str(i) for i in json[\"nestingSelectors\"]]\n                if json.get(\"nestingSelectors\", None) is not None\n                else None\n            ),\n            media=(\n                [CSSMedia.from_json(i) for i in json[\"media\"]]\n                if json.get(\"media\", None) is not None\n                else None\n            ),\n            container_queries=(\n                [CSSContainerQuery.from_json(i) for i in json[\"containerQueries\"]]\n                if json.get(\"containerQueries\", None) is not None\n                else None\n            ),\n            supports=(\n                [CSSSupports.from_json(i) for i in json[\"supports\"]]\n                if json.get(\"supports\", None) is not None\n                else None\n            ),\n            layers=(\n                [CSSLayer.from_json(i) for i in json[\"layers\"]]\n                if json.get(\"layers\", None) is not None\n                else None\n            ),\n            scopes=(\n                [CSSScope.from_json(i) for i in json[\"scopes\"]]\n                if json.get(\"scopes\", None) is not None\n                else None\n            ),\n            rule_types=(\n                [CSSRuleType.from_json(i) for i in json[\"ruleTypes\"]]\n                if json.get(\"ruleTypes\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.container_queries","title":"<code>container_queries: typing.Optional[typing.List[CSSContainerQuery]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.layers","title":"<code>layers: typing.Optional[typing.List[CSSLayer]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.media","title":"<code>media: typing.Optional[typing.List[CSSMedia]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.nesting_selectors","title":"<code>nesting_selectors: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.origin","title":"<code>origin: StyleSheetOrigin</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.rule_types","title":"<code>rule_types: typing.Optional[typing.List[CSSRuleType]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.scopes","title":"<code>scopes: typing.Optional[typing.List[CSSScope]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.selector_list","title":"<code>selector_list: SelectorList</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.style","title":"<code>style: CSSStyle</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.supports","title":"<code>supports: typing.Optional[typing.List[CSSSupports]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.__init__","title":"<code>__init__(selector_list, origin, style, style_sheet_id=None, nesting_selectors=None, media=None, container_queries=None, supports=None, layers=None, scopes=None, rule_types=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSRule:\n    return cls(\n        selector_list=SelectorList.from_json(json[\"selectorList\"]),\n        origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n        style=CSSStyle.from_json(json[\"style\"]),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n        nesting_selectors=(\n            [str(i) for i in json[\"nestingSelectors\"]]\n            if json.get(\"nestingSelectors\", None) is not None\n            else None\n        ),\n        media=(\n            [CSSMedia.from_json(i) for i in json[\"media\"]]\n            if json.get(\"media\", None) is not None\n            else None\n        ),\n        container_queries=(\n            [CSSContainerQuery.from_json(i) for i in json[\"containerQueries\"]]\n            if json.get(\"containerQueries\", None) is not None\n            else None\n        ),\n        supports=(\n            [CSSSupports.from_json(i) for i in json[\"supports\"]]\n            if json.get(\"supports\", None) is not None\n            else None\n        ),\n        layers=(\n            [CSSLayer.from_json(i) for i in json[\"layers\"]]\n            if json.get(\"layers\", None) is not None\n            else None\n        ),\n        scopes=(\n            [CSSScope.from_json(i) for i in json[\"scopes\"]]\n            if json.get(\"scopes\", None) is not None\n            else None\n        ),\n        rule_types=(\n            [CSSRuleType.from_json(i) for i in json[\"ruleTypes\"]]\n            if json.get(\"ruleTypes\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRule.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"selectorList\"] = self.selector_list.to_json()\n    json[\"origin\"] = self.origin.to_json()\n    json[\"style\"] = self.style.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    if self.nesting_selectors is not None:\n        json[\"nestingSelectors\"] = [i for i in self.nesting_selectors]\n    if self.media is not None:\n        json[\"media\"] = [i.to_json() for i in self.media]\n    if self.container_queries is not None:\n        json[\"containerQueries\"] = [i.to_json() for i in self.container_queries]\n    if self.supports is not None:\n        json[\"supports\"] = [i.to_json() for i in self.supports]\n    if self.layers is not None:\n        json[\"layers\"] = [i.to_json() for i in self.layers]\n    if self.scopes is not None:\n        json[\"scopes\"] = [i.to_json() for i in self.scopes]\n    if self.rule_types is not None:\n        json[\"ruleTypes\"] = [i.to_json() for i in self.rule_types]\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRuleType","title":"<code>CSSRuleType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum indicating the type of a CSS rule, used to represent the order of a style rule's ancestors. This list only contains rule types that are collected during the ancestor rule collection.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>class CSSRuleType(enum.Enum):\n    \"\"\"\n    Enum indicating the type of a CSS rule, used to represent the order of a style rule's ancestors.\n    This list only contains rule types that are collected during the ancestor rule collection.\n    \"\"\"\n\n    MEDIA_RULE = \"MediaRule\"\n    SUPPORTS_RULE = \"SupportsRule\"\n    CONTAINER_RULE = \"ContainerRule\"\n    LAYER_RULE = \"LayerRule\"\n    SCOPE_RULE = \"ScopeRule\"\n    STYLE_RULE = \"StyleRule\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CSSRuleType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRuleType.CONTAINER_RULE","title":"<code>CONTAINER_RULE = 'ContainerRule'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRuleType.LAYER_RULE","title":"<code>LAYER_RULE = 'LayerRule'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRuleType.MEDIA_RULE","title":"<code>MEDIA_RULE = 'MediaRule'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRuleType.SCOPE_RULE","title":"<code>SCOPE_RULE = 'ScopeRule'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRuleType.STYLE_RULE","title":"<code>STYLE_RULE = 'StyleRule'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRuleType.SUPPORTS_RULE","title":"<code>SUPPORTS_RULE = 'SupportsRule'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRuleType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CSSRuleType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSRuleType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSScope","title":"<code>CSSScope</code>  <code>dataclass</code>","text":"<p>CSS Scope at-rule descriptor.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSScope:\n    \"\"\"\n    CSS Scope at-rule descriptor.\n    \"\"\"\n\n    #: Scope rule text.\n    text: str\n\n    #: The associated rule header range in the enclosing stylesheet (if\n    #: available).\n    range_: typing.Optional[SourceRange] = None\n\n    #: Identifier of the stylesheet containing this object (if exists).\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"text\"] = self.text\n        if self.range_ is not None:\n            json[\"range\"] = self.range_.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSScope:\n        return cls(\n            text=str(json[\"text\"]),\n            range_=(\n                SourceRange.from_json(json[\"range\"])\n                if json.get(\"range\", None) is not None\n                else None\n            ),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSScope.range_","title":"<code>range_: typing.Optional[SourceRange] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSScope.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSScope.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSScope.__init__","title":"<code>__init__(text, range_=None, style_sheet_id=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSScope.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSScope:\n    return cls(\n        text=str(json[\"text\"]),\n        range_=(\n            SourceRange.from_json(json[\"range\"])\n            if json.get(\"range\", None) is not None\n            else None\n        ),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSScope.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"text\"] = self.text\n    if self.range_ is not None:\n        json[\"range\"] = self.range_.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyle","title":"<code>CSSStyle</code>  <code>dataclass</code>","text":"<p>CSS style representation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSStyle:\n    \"\"\"\n    CSS style representation.\n    \"\"\"\n\n    #: CSS properties in the style.\n    css_properties: typing.List[CSSProperty]\n\n    #: Computed values for all shorthands found in the style.\n    shorthand_entries: typing.List[ShorthandEntry]\n\n    #: The css style sheet identifier (absent for user agent stylesheet and user-specified\n    #: stylesheet rules) this rule came from.\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    #: Style declaration text (if available).\n    css_text: typing.Optional[str] = None\n\n    #: Style declaration range in the enclosing stylesheet (if available).\n    range_: typing.Optional[SourceRange] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"cssProperties\"] = [i.to_json() for i in self.css_properties]\n        json[\"shorthandEntries\"] = [i.to_json() for i in self.shorthand_entries]\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        if self.css_text is not None:\n            json[\"cssText\"] = self.css_text\n        if self.range_ is not None:\n            json[\"range\"] = self.range_.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSStyle:\n        return cls(\n            css_properties=[CSSProperty.from_json(i) for i in json[\"cssProperties\"]],\n            shorthand_entries=[\n                ShorthandEntry.from_json(i) for i in json[\"shorthandEntries\"]\n            ],\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n            css_text=(\n                str(json[\"cssText\"]) if json.get(\"cssText\", None) is not None else None\n            ),\n            range_=(\n                SourceRange.from_json(json[\"range\"])\n                if json.get(\"range\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyle.css_properties","title":"<code>css_properties: typing.List[CSSProperty]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyle.css_text","title":"<code>css_text: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyle.range_","title":"<code>range_: typing.Optional[SourceRange] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyle.shorthand_entries","title":"<code>shorthand_entries: typing.List[ShorthandEntry]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyle.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyle.__init__","title":"<code>__init__(css_properties, shorthand_entries, style_sheet_id=None, css_text=None, range_=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyle.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSStyle:\n    return cls(\n        css_properties=[CSSProperty.from_json(i) for i in json[\"cssProperties\"]],\n        shorthand_entries=[\n            ShorthandEntry.from_json(i) for i in json[\"shorthandEntries\"]\n        ],\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n        css_text=(\n            str(json[\"cssText\"]) if json.get(\"cssText\", None) is not None else None\n        ),\n        range_=(\n            SourceRange.from_json(json[\"range\"])\n            if json.get(\"range\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyle.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"cssProperties\"] = [i.to_json() for i in self.css_properties]\n    json[\"shorthandEntries\"] = [i.to_json() for i in self.shorthand_entries]\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    if self.css_text is not None:\n        json[\"cssText\"] = self.css_text\n    if self.range_ is not None:\n        json[\"range\"] = self.range_.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader","title":"<code>CSSStyleSheetHeader</code>  <code>dataclass</code>","text":"<p>CSS stylesheet metainformation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSStyleSheetHeader:\n    \"\"\"\n    CSS stylesheet metainformation.\n    \"\"\"\n\n    #: The stylesheet identifier.\n    style_sheet_id: StyleSheetId\n\n    #: Owner frame identifier.\n    frame_id: page.FrameId\n\n    #: Stylesheet resource URL. Empty if this is a constructed stylesheet created using\n    #: new CSSStyleSheet() (but non-empty if this is a constructed stylesheet imported\n    #: as a CSS module script).\n    source_url: str\n\n    #: Stylesheet origin.\n    origin: StyleSheetOrigin\n\n    #: Stylesheet title.\n    title: str\n\n    #: Denotes whether the stylesheet is disabled.\n    disabled: bool\n\n    #: Whether this stylesheet is created for STYLE tag by parser. This flag is not set for\n    #: document.written STYLE tags.\n    is_inline: bool\n\n    #: Whether this stylesheet is mutable. Inline stylesheets become mutable\n    #: after they have been modified via CSSOM API.\n    #: ``&lt;link&gt;`` element's stylesheets become mutable only if DevTools modifies them.\n    #: Constructed stylesheets (new CSSStyleSheet()) are mutable immediately after creation.\n    is_mutable: bool\n\n    #: True if this stylesheet is created through new CSSStyleSheet() or imported as a\n    #: CSS module script.\n    is_constructed: bool\n\n    #: Line offset of the stylesheet within the resource (zero based).\n    start_line: float\n\n    #: Column offset of the stylesheet within the resource (zero based).\n    start_column: float\n\n    #: Size of the content (in characters).\n    length: float\n\n    #: Line offset of the end of the stylesheet within the resource (zero based).\n    end_line: float\n\n    #: Column offset of the end of the stylesheet within the resource (zero based).\n    end_column: float\n\n    #: URL of source map associated with the stylesheet (if any).\n    source_map_url: typing.Optional[str] = None\n\n    #: The backend id for the owner node of the stylesheet.\n    owner_node: typing.Optional[dom.BackendNodeId] = None\n\n    #: Whether the sourceURL field value comes from the sourceURL comment.\n    has_source_url: typing.Optional[bool] = None\n\n    #: If the style sheet was loaded from a network resource, this indicates when the resource failed to load\n    loading_failed: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        json[\"frameId\"] = self.frame_id.to_json()\n        json[\"sourceURL\"] = self.source_url\n        json[\"origin\"] = self.origin.to_json()\n        json[\"title\"] = self.title\n        json[\"disabled\"] = self.disabled\n        json[\"isInline\"] = self.is_inline\n        json[\"isMutable\"] = self.is_mutable\n        json[\"isConstructed\"] = self.is_constructed\n        json[\"startLine\"] = self.start_line\n        json[\"startColumn\"] = self.start_column\n        json[\"length\"] = self.length\n        json[\"endLine\"] = self.end_line\n        json[\"endColumn\"] = self.end_column\n        if self.source_map_url is not None:\n            json[\"sourceMapURL\"] = self.source_map_url\n        if self.owner_node is not None:\n            json[\"ownerNode\"] = self.owner_node.to_json()\n        if self.has_source_url is not None:\n            json[\"hasSourceURL\"] = self.has_source_url\n        if self.loading_failed is not None:\n            json[\"loadingFailed\"] = self.loading_failed\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSStyleSheetHeader:\n        return cls(\n            style_sheet_id=StyleSheetId.from_json(json[\"styleSheetId\"]),\n            frame_id=page.FrameId.from_json(json[\"frameId\"]),\n            source_url=str(json[\"sourceURL\"]),\n            origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n            title=str(json[\"title\"]),\n            disabled=bool(json[\"disabled\"]),\n            is_inline=bool(json[\"isInline\"]),\n            is_mutable=bool(json[\"isMutable\"]),\n            is_constructed=bool(json[\"isConstructed\"]),\n            start_line=float(json[\"startLine\"]),\n            start_column=float(json[\"startColumn\"]),\n            length=float(json[\"length\"]),\n            end_line=float(json[\"endLine\"]),\n            end_column=float(json[\"endColumn\"]),\n            source_map_url=(\n                str(json[\"sourceMapURL\"])\n                if json.get(\"sourceMapURL\", None) is not None\n                else None\n            ),\n            owner_node=(\n                dom.BackendNodeId.from_json(json[\"ownerNode\"])\n                if json.get(\"ownerNode\", None) is not None\n                else None\n            ),\n            has_source_url=(\n                bool(json[\"hasSourceURL\"])\n                if json.get(\"hasSourceURL\", None) is not None\n                else None\n            ),\n            loading_failed=(\n                bool(json[\"loadingFailed\"])\n                if json.get(\"loadingFailed\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.disabled","title":"<code>disabled: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.end_column","title":"<code>end_column: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.end_line","title":"<code>end_line: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.frame_id","title":"<code>frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.has_source_url","title":"<code>has_source_url: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.is_constructed","title":"<code>is_constructed: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.is_inline","title":"<code>is_inline: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.is_mutable","title":"<code>is_mutable: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.length","title":"<code>length: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.loading_failed","title":"<code>loading_failed: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.origin","title":"<code>origin: StyleSheetOrigin</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.owner_node","title":"<code>owner_node: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.source_map_url","title":"<code>source_map_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.source_url","title":"<code>source_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.start_column","title":"<code>start_column: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.start_line","title":"<code>start_line: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.style_sheet_id","title":"<code>style_sheet_id: StyleSheetId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.__init__","title":"<code>__init__(style_sheet_id, frame_id, source_url, origin, title, disabled, is_inline, is_mutable, is_constructed, start_line, start_column, length, end_line, end_column, source_map_url=None, owner_node=None, has_source_url=None, loading_failed=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSStyleSheetHeader:\n    return cls(\n        style_sheet_id=StyleSheetId.from_json(json[\"styleSheetId\"]),\n        frame_id=page.FrameId.from_json(json[\"frameId\"]),\n        source_url=str(json[\"sourceURL\"]),\n        origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n        title=str(json[\"title\"]),\n        disabled=bool(json[\"disabled\"]),\n        is_inline=bool(json[\"isInline\"]),\n        is_mutable=bool(json[\"isMutable\"]),\n        is_constructed=bool(json[\"isConstructed\"]),\n        start_line=float(json[\"startLine\"]),\n        start_column=float(json[\"startColumn\"]),\n        length=float(json[\"length\"]),\n        end_line=float(json[\"endLine\"]),\n        end_column=float(json[\"endColumn\"]),\n        source_map_url=(\n            str(json[\"sourceMapURL\"])\n            if json.get(\"sourceMapURL\", None) is not None\n            else None\n        ),\n        owner_node=(\n            dom.BackendNodeId.from_json(json[\"ownerNode\"])\n            if json.get(\"ownerNode\", None) is not None\n            else None\n        ),\n        has_source_url=(\n            bool(json[\"hasSourceURL\"])\n            if json.get(\"hasSourceURL\", None) is not None\n            else None\n        ),\n        loading_failed=(\n            bool(json[\"loadingFailed\"])\n            if json.get(\"loadingFailed\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSStyleSheetHeader.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    json[\"frameId\"] = self.frame_id.to_json()\n    json[\"sourceURL\"] = self.source_url\n    json[\"origin\"] = self.origin.to_json()\n    json[\"title\"] = self.title\n    json[\"disabled\"] = self.disabled\n    json[\"isInline\"] = self.is_inline\n    json[\"isMutable\"] = self.is_mutable\n    json[\"isConstructed\"] = self.is_constructed\n    json[\"startLine\"] = self.start_line\n    json[\"startColumn\"] = self.start_column\n    json[\"length\"] = self.length\n    json[\"endLine\"] = self.end_line\n    json[\"endColumn\"] = self.end_column\n    if self.source_map_url is not None:\n        json[\"sourceMapURL\"] = self.source_map_url\n    if self.owner_node is not None:\n        json[\"ownerNode\"] = self.owner_node.to_json()\n    if self.has_source_url is not None:\n        json[\"hasSourceURL\"] = self.has_source_url\n    if self.loading_failed is not None:\n        json[\"loadingFailed\"] = self.loading_failed\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSSupports","title":"<code>CSSSupports</code>  <code>dataclass</code>","text":"<p>CSS Supports at-rule descriptor.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSSupports:\n    \"\"\"\n    CSS Supports at-rule descriptor.\n    \"\"\"\n\n    #: Supports rule text.\n    text: str\n\n    #: Whether the supports condition is satisfied.\n    active: bool\n\n    #: The associated rule header range in the enclosing stylesheet (if\n    #: available).\n    range_: typing.Optional[SourceRange] = None\n\n    #: Identifier of the stylesheet containing this object (if exists).\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"text\"] = self.text\n        json[\"active\"] = self.active\n        if self.range_ is not None:\n            json[\"range\"] = self.range_.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSSupports:\n        return cls(\n            text=str(json[\"text\"]),\n            active=bool(json[\"active\"]),\n            range_=(\n                SourceRange.from_json(json[\"range\"])\n                if json.get(\"range\", None) is not None\n                else None\n            ),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSSupports.active","title":"<code>active: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSSupports.range_","title":"<code>range_: typing.Optional[SourceRange] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSSupports.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSSupports.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSSupports.__init__","title":"<code>__init__(text, active, range_=None, style_sheet_id=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSSupports.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSSupports:\n    return cls(\n        text=str(json[\"text\"]),\n        active=bool(json[\"active\"]),\n        range_=(\n            SourceRange.from_json(json[\"range\"])\n            if json.get(\"range\", None) is not None\n            else None\n        ),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSSupports.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"text\"] = self.text\n    json[\"active\"] = self.active\n    if self.range_ is not None:\n        json[\"range\"] = self.range_.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSTryRule","title":"<code>CSSTryRule</code>  <code>dataclass</code>","text":"<p>CSS try rule representation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass CSSTryRule:\n    \"\"\"\n    CSS try rule representation.\n    \"\"\"\n\n    #: Parent stylesheet's origin.\n    origin: StyleSheetOrigin\n\n    #: Associated style declaration.\n    style: CSSStyle\n\n    #: The css style sheet identifier (absent for user agent stylesheet and user-specified\n    #: stylesheet rules) this rule came from.\n    style_sheet_id: typing.Optional[StyleSheetId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"origin\"] = self.origin.to_json()\n        json[\"style\"] = self.style.to_json()\n        if self.style_sheet_id is not None:\n            json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSTryRule:\n        return cls(\n            origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n            style=CSSStyle.from_json(json[\"style\"]),\n            style_sheet_id=(\n                StyleSheetId.from_json(json[\"styleSheetId\"])\n                if json.get(\"styleSheetId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSTryRule.origin","title":"<code>origin: StyleSheetOrigin</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSTryRule.style","title":"<code>style: CSSStyle</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSTryRule.style_sheet_id","title":"<code>style_sheet_id: typing.Optional[StyleSheetId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSTryRule.__init__","title":"<code>__init__(origin, style, style_sheet_id=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSTryRule.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSTryRule:\n    return cls(\n        origin=StyleSheetOrigin.from_json(json[\"origin\"]),\n        style=CSSStyle.from_json(json[\"style\"]),\n        style_sheet_id=(\n            StyleSheetId.from_json(json[\"styleSheetId\"])\n            if json.get(\"styleSheetId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.CSSTryRule.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"origin\"] = self.origin.to_json()\n    json[\"style\"] = self.style.to_json()\n    if self.style_sheet_id is not None:\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace","title":"<code>FontFace</code>  <code>dataclass</code>","text":"<p>Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions and additional information such as platformFontFamily and fontVariationAxes.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass FontFace:\n    \"\"\"\n    Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions\n    and additional information such as platformFontFamily and fontVariationAxes.\n    \"\"\"\n\n    #: The font-family.\n    font_family: str\n\n    #: The font-style.\n    font_style: str\n\n    #: The font-variant.\n    font_variant: str\n\n    #: The font-weight.\n    font_weight: str\n\n    #: The font-stretch.\n    font_stretch: str\n\n    #: The font-display.\n    font_display: str\n\n    #: The unicode-range.\n    unicode_range: str\n\n    #: The src.\n    src: str\n\n    #: The resolved platform font family\n    platform_font_family: str\n\n    #: Available variation settings (a.k.a. \"axes\").\n    font_variation_axes: typing.Optional[typing.List[FontVariationAxis]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"fontFamily\"] = self.font_family\n        json[\"fontStyle\"] = self.font_style\n        json[\"fontVariant\"] = self.font_variant\n        json[\"fontWeight\"] = self.font_weight\n        json[\"fontStretch\"] = self.font_stretch\n        json[\"fontDisplay\"] = self.font_display\n        json[\"unicodeRange\"] = self.unicode_range\n        json[\"src\"] = self.src\n        json[\"platformFontFamily\"] = self.platform_font_family\n        if self.font_variation_axes is not None:\n            json[\"fontVariationAxes\"] = [i.to_json() for i in self.font_variation_axes]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FontFace:\n        return cls(\n            font_family=str(json[\"fontFamily\"]),\n            font_style=str(json[\"fontStyle\"]),\n            font_variant=str(json[\"fontVariant\"]),\n            font_weight=str(json[\"fontWeight\"]),\n            font_stretch=str(json[\"fontStretch\"]),\n            font_display=str(json[\"fontDisplay\"]),\n            unicode_range=str(json[\"unicodeRange\"]),\n            src=str(json[\"src\"]),\n            platform_font_family=str(json[\"platformFontFamily\"]),\n            font_variation_axes=(\n                [FontVariationAxis.from_json(i) for i in json[\"fontVariationAxes\"]]\n                if json.get(\"fontVariationAxes\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.font_display","title":"<code>font_display: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.font_family","title":"<code>font_family: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.font_stretch","title":"<code>font_stretch: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.font_style","title":"<code>font_style: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.font_variant","title":"<code>font_variant: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.font_variation_axes","title":"<code>font_variation_axes: typing.Optional[typing.List[FontVariationAxis]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.font_weight","title":"<code>font_weight: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.platform_font_family","title":"<code>platform_font_family: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.src","title":"<code>src: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.unicode_range","title":"<code>unicode_range: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.__init__","title":"<code>__init__(font_family, font_style, font_variant, font_weight, font_stretch, font_display, unicode_range, src, platform_font_family, font_variation_axes=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FontFace:\n    return cls(\n        font_family=str(json[\"fontFamily\"]),\n        font_style=str(json[\"fontStyle\"]),\n        font_variant=str(json[\"fontVariant\"]),\n        font_weight=str(json[\"fontWeight\"]),\n        font_stretch=str(json[\"fontStretch\"]),\n        font_display=str(json[\"fontDisplay\"]),\n        unicode_range=str(json[\"unicodeRange\"]),\n        src=str(json[\"src\"]),\n        platform_font_family=str(json[\"platformFontFamily\"]),\n        font_variation_axes=(\n            [FontVariationAxis.from_json(i) for i in json[\"fontVariationAxes\"]]\n            if json.get(\"fontVariationAxes\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.FontFace.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"fontFamily\"] = self.font_family\n    json[\"fontStyle\"] = self.font_style\n    json[\"fontVariant\"] = self.font_variant\n    json[\"fontWeight\"] = self.font_weight\n    json[\"fontStretch\"] = self.font_stretch\n    json[\"fontDisplay\"] = self.font_display\n    json[\"unicodeRange\"] = self.unicode_range\n    json[\"src\"] = self.src\n    json[\"platformFontFamily\"] = self.platform_font_family\n    if self.font_variation_axes is not None:\n        json[\"fontVariationAxes\"] = [i.to_json() for i in self.font_variation_axes]\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.FontVariationAxis","title":"<code>FontVariationAxis</code>  <code>dataclass</code>","text":"<p>Information about font variation axes for variable fonts</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass FontVariationAxis:\n    \"\"\"\n    Information about font variation axes for variable fonts\n    \"\"\"\n\n    #: The font-variation-setting tag (a.k.a. \"axis tag\").\n    tag: str\n\n    #: Human-readable variation name in the default language (normally, \"en\").\n    name: str\n\n    #: The minimum value (inclusive) the font supports for this tag.\n    min_value: float\n\n    #: The maximum value (inclusive) the font supports for this tag.\n    max_value: float\n\n    #: The default value.\n    default_value: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"tag\"] = self.tag\n        json[\"name\"] = self.name\n        json[\"minValue\"] = self.min_value\n        json[\"maxValue\"] = self.max_value\n        json[\"defaultValue\"] = self.default_value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FontVariationAxis:\n        return cls(\n            tag=str(json[\"tag\"]),\n            name=str(json[\"name\"]),\n            min_value=float(json[\"minValue\"]),\n            max_value=float(json[\"maxValue\"]),\n            default_value=float(json[\"defaultValue\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.FontVariationAxis.default_value","title":"<code>default_value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontVariationAxis.max_value","title":"<code>max_value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontVariationAxis.min_value","title":"<code>min_value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontVariationAxis.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontVariationAxis.tag","title":"<code>tag: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontVariationAxis.__init__","title":"<code>__init__(tag, name, min_value, max_value, default_value)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontVariationAxis.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FontVariationAxis:\n    return cls(\n        tag=str(json[\"tag\"]),\n        name=str(json[\"name\"]),\n        min_value=float(json[\"minValue\"]),\n        max_value=float(json[\"maxValue\"]),\n        default_value=float(json[\"defaultValue\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.FontVariationAxis.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"tag\"] = self.tag\n    json[\"name\"] = self.name\n    json[\"minValue\"] = self.min_value\n    json[\"maxValue\"] = self.max_value\n    json[\"defaultValue\"] = self.default_value\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.FontsUpdated","title":"<code>FontsUpdated</code>  <code>dataclass</code>","text":"<p>Fires whenever a web font is updated.  A non-empty font parameter indicates a successfully loaded web font.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@event_class(\"CSS.fontsUpdated\")\n@dataclass\nclass FontsUpdated:\n    \"\"\"\n    Fires whenever a web font is updated.  A non-empty font parameter indicates a successfully loaded\n    web font.\n    \"\"\"\n\n    #: The web font that has loaded.\n    font: typing.Optional[FontFace]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FontsUpdated:\n        return cls(\n            font=(\n                FontFace.from_json(json[\"font\"])\n                if json.get(\"font\", None) is not None\n                else None\n            )\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.FontsUpdated.font","title":"<code>font: typing.Optional[FontFace]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontsUpdated.__init__","title":"<code>__init__(font)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.FontsUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FontsUpdated:\n    return cls(\n        font=(\n            FontFace.from_json(json[\"font\"])\n            if json.get(\"font\", None) is not None\n            else None\n        )\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedPseudoElementMatches","title":"<code>InheritedPseudoElementMatches</code>  <code>dataclass</code>","text":"<p>Inherited pseudo element matches from pseudos of an ancestor node.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass InheritedPseudoElementMatches:\n    \"\"\"\n    Inherited pseudo element matches from pseudos of an ancestor node.\n    \"\"\"\n\n    #: Matches of pseudo styles from the pseudos of an ancestor node.\n    pseudo_elements: typing.List[PseudoElementMatches]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"pseudoElements\"] = [i.to_json() for i in self.pseudo_elements]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InheritedPseudoElementMatches:\n        return cls(\n            pseudo_elements=[\n                PseudoElementMatches.from_json(i) for i in json[\"pseudoElements\"]\n            ],\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedPseudoElementMatches.pseudo_elements","title":"<code>pseudo_elements: typing.List[PseudoElementMatches]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedPseudoElementMatches.__init__","title":"<code>__init__(pseudo_elements)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedPseudoElementMatches.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InheritedPseudoElementMatches:\n    return cls(\n        pseudo_elements=[\n            PseudoElementMatches.from_json(i) for i in json[\"pseudoElements\"]\n        ],\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedPseudoElementMatches.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"pseudoElements\"] = [i.to_json() for i in self.pseudo_elements]\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedStyleEntry","title":"<code>InheritedStyleEntry</code>  <code>dataclass</code>","text":"<p>Inherited CSS rule collection from ancestor node.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass InheritedStyleEntry:\n    \"\"\"\n    Inherited CSS rule collection from ancestor node.\n    \"\"\"\n\n    #: Matches of CSS rules matching the ancestor node in the style inheritance chain.\n    matched_css_rules: typing.List[RuleMatch]\n\n    #: The ancestor node's inline style, if any, in the style inheritance chain.\n    inline_style: typing.Optional[CSSStyle] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"matchedCSSRules\"] = [i.to_json() for i in self.matched_css_rules]\n        if self.inline_style is not None:\n            json[\"inlineStyle\"] = self.inline_style.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InheritedStyleEntry:\n        return cls(\n            matched_css_rules=[RuleMatch.from_json(i) for i in json[\"matchedCSSRules\"]],\n            inline_style=(\n                CSSStyle.from_json(json[\"inlineStyle\"])\n                if json.get(\"inlineStyle\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedStyleEntry.inline_style","title":"<code>inline_style: typing.Optional[CSSStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedStyleEntry.matched_css_rules","title":"<code>matched_css_rules: typing.List[RuleMatch]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedStyleEntry.__init__","title":"<code>__init__(matched_css_rules, inline_style=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedStyleEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InheritedStyleEntry:\n    return cls(\n        matched_css_rules=[RuleMatch.from_json(i) for i in json[\"matchedCSSRules\"]],\n        inline_style=(\n            CSSStyle.from_json(json[\"inlineStyle\"])\n            if json.get(\"inlineStyle\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.InheritedStyleEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"matchedCSSRules\"] = [i.to_json() for i in self.matched_css_rules]\n    if self.inline_style is not None:\n        json[\"inlineStyle\"] = self.inline_style.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQuery","title":"<code>MediaQuery</code>  <code>dataclass</code>","text":"<p>Media query descriptor.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass MediaQuery:\n    \"\"\"\n    Media query descriptor.\n    \"\"\"\n\n    #: Array of media query expressions.\n    expressions: typing.List[MediaQueryExpression]\n\n    #: Whether the media query condition is satisfied.\n    active: bool\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"expressions\"] = [i.to_json() for i in self.expressions]\n        json[\"active\"] = self.active\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; MediaQuery:\n        return cls(\n            expressions=[\n                MediaQueryExpression.from_json(i) for i in json[\"expressions\"]\n            ],\n            active=bool(json[\"active\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQuery.active","title":"<code>active: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQuery.expressions","title":"<code>expressions: typing.List[MediaQueryExpression]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQuery.__init__","title":"<code>__init__(expressions, active)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQuery.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; MediaQuery:\n    return cls(\n        expressions=[\n            MediaQueryExpression.from_json(i) for i in json[\"expressions\"]\n        ],\n        active=bool(json[\"active\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQuery.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"expressions\"] = [i.to_json() for i in self.expressions]\n    json[\"active\"] = self.active\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryExpression","title":"<code>MediaQueryExpression</code>  <code>dataclass</code>","text":"<p>Media query expression descriptor.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass MediaQueryExpression:\n    \"\"\"\n    Media query expression descriptor.\n    \"\"\"\n\n    #: Media query expression value.\n    value: float\n\n    #: Media query expression units.\n    unit: str\n\n    #: Media query expression feature.\n    feature: str\n\n    #: The associated range of the value text in the enclosing stylesheet (if available).\n    value_range: typing.Optional[SourceRange] = None\n\n    #: Computed length of media query expression (if applicable).\n    computed_length: typing.Optional[float] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"value\"] = self.value\n        json[\"unit\"] = self.unit\n        json[\"feature\"] = self.feature\n        if self.value_range is not None:\n            json[\"valueRange\"] = self.value_range.to_json()\n        if self.computed_length is not None:\n            json[\"computedLength\"] = self.computed_length\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; MediaQueryExpression:\n        return cls(\n            value=float(json[\"value\"]),\n            unit=str(json[\"unit\"]),\n            feature=str(json[\"feature\"]),\n            value_range=(\n                SourceRange.from_json(json[\"valueRange\"])\n                if json.get(\"valueRange\", None) is not None\n                else None\n            ),\n            computed_length=(\n                float(json[\"computedLength\"])\n                if json.get(\"computedLength\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryExpression.computed_length","title":"<code>computed_length: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryExpression.feature","title":"<code>feature: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryExpression.unit","title":"<code>unit: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryExpression.value","title":"<code>value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryExpression.value_range","title":"<code>value_range: typing.Optional[SourceRange] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryExpression.__init__","title":"<code>__init__(value, unit, feature, value_range=None, computed_length=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryExpression.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; MediaQueryExpression:\n    return cls(\n        value=float(json[\"value\"]),\n        unit=str(json[\"unit\"]),\n        feature=str(json[\"feature\"]),\n        value_range=(\n            SourceRange.from_json(json[\"valueRange\"])\n            if json.get(\"valueRange\", None) is not None\n            else None\n        ),\n        computed_length=(\n            float(json[\"computedLength\"])\n            if json.get(\"computedLength\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryExpression.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"value\"] = self.value\n    json[\"unit\"] = self.unit\n    json[\"feature\"] = self.feature\n    if self.value_range is not None:\n        json[\"valueRange\"] = self.value_range.to_json()\n    if self.computed_length is not None:\n        json[\"computedLength\"] = self.computed_length\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryResultChanged","title":"<code>MediaQueryResultChanged</code>  <code>dataclass</code>","text":"<p>Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@event_class(\"CSS.mediaQueryResultChanged\")\n@dataclass\nclass MediaQueryResultChanged:\n    \"\"\"\n    Fires whenever a MediaQuery result changes (for example, after a browser window has been\n    resized.) The current implementation considers only viewport-dependent media features.\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; MediaQueryResultChanged:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryResultChanged.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.MediaQueryResultChanged.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; MediaQueryResultChanged:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.PlatformFontUsage","title":"<code>PlatformFontUsage</code>  <code>dataclass</code>","text":"<p>Information about amount of glyphs that were rendered with given font.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass PlatformFontUsage:\n    \"\"\"\n    Information about amount of glyphs that were rendered with given font.\n    \"\"\"\n\n    #: Font's family name reported by platform.\n    family_name: str\n\n    #: Font's PostScript name reported by platform.\n    post_script_name: str\n\n    #: Indicates if the font was downloaded or resolved locally.\n    is_custom_font: bool\n\n    #: Amount of glyphs that were rendered with this font.\n    glyph_count: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"familyName\"] = self.family_name\n        json[\"postScriptName\"] = self.post_script_name\n        json[\"isCustomFont\"] = self.is_custom_font\n        json[\"glyphCount\"] = self.glyph_count\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlatformFontUsage:\n        return cls(\n            family_name=str(json[\"familyName\"]),\n            post_script_name=str(json[\"postScriptName\"]),\n            is_custom_font=bool(json[\"isCustomFont\"]),\n            glyph_count=float(json[\"glyphCount\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.PlatformFontUsage.family_name","title":"<code>family_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.PlatformFontUsage.glyph_count","title":"<code>glyph_count: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.PlatformFontUsage.is_custom_font","title":"<code>is_custom_font: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.PlatformFontUsage.post_script_name","title":"<code>post_script_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.PlatformFontUsage.__init__","title":"<code>__init__(family_name, post_script_name, is_custom_font, glyph_count)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.PlatformFontUsage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlatformFontUsage:\n    return cls(\n        family_name=str(json[\"familyName\"]),\n        post_script_name=str(json[\"postScriptName\"]),\n        is_custom_font=bool(json[\"isCustomFont\"]),\n        glyph_count=float(json[\"glyphCount\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.PlatformFontUsage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"familyName\"] = self.family_name\n    json[\"postScriptName\"] = self.post_script_name\n    json[\"isCustomFont\"] = self.is_custom_font\n    json[\"glyphCount\"] = self.glyph_count\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.PseudoElementMatches","title":"<code>PseudoElementMatches</code>  <code>dataclass</code>","text":"<p>CSS rule collection for a single pseudo style.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass PseudoElementMatches:\n    \"\"\"\n    CSS rule collection for a single pseudo style.\n    \"\"\"\n\n    #: Pseudo element type.\n    pseudo_type: dom.PseudoType\n\n    #: Matches of CSS rules applicable to the pseudo style.\n    matches: typing.List[RuleMatch]\n\n    #: Pseudo element custom ident.\n    pseudo_identifier: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"pseudoType\"] = self.pseudo_type.to_json()\n        json[\"matches\"] = [i.to_json() for i in self.matches]\n        if self.pseudo_identifier is not None:\n            json[\"pseudoIdentifier\"] = self.pseudo_identifier\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PseudoElementMatches:\n        return cls(\n            pseudo_type=dom.PseudoType.from_json(json[\"pseudoType\"]),\n            matches=[RuleMatch.from_json(i) for i in json[\"matches\"]],\n            pseudo_identifier=(\n                str(json[\"pseudoIdentifier\"])\n                if json.get(\"pseudoIdentifier\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.PseudoElementMatches.matches","title":"<code>matches: typing.List[RuleMatch]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.PseudoElementMatches.pseudo_identifier","title":"<code>pseudo_identifier: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.PseudoElementMatches.pseudo_type","title":"<code>pseudo_type: dom.PseudoType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.PseudoElementMatches.__init__","title":"<code>__init__(pseudo_type, matches, pseudo_identifier=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.PseudoElementMatches.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PseudoElementMatches:\n    return cls(\n        pseudo_type=dom.PseudoType.from_json(json[\"pseudoType\"]),\n        matches=[RuleMatch.from_json(i) for i in json[\"matches\"]],\n        pseudo_identifier=(\n            str(json[\"pseudoIdentifier\"])\n            if json.get(\"pseudoIdentifier\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.PseudoElementMatches.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"pseudoType\"] = self.pseudo_type.to_json()\n    json[\"matches\"] = [i.to_json() for i in self.matches]\n    if self.pseudo_identifier is not None:\n        json[\"pseudoIdentifier\"] = self.pseudo_identifier\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleMatch","title":"<code>RuleMatch</code>  <code>dataclass</code>","text":"<p>Match data for a CSS rule.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass RuleMatch:\n    \"\"\"\n    Match data for a CSS rule.\n    \"\"\"\n\n    #: CSS rule in the match.\n    rule: CSSRule\n\n    #: Matching selector indices in the rule's selectorList selectors (0-based).\n    matching_selectors: typing.List[int]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"rule\"] = self.rule.to_json()\n        json[\"matchingSelectors\"] = [i for i in self.matching_selectors]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RuleMatch:\n        return cls(\n            rule=CSSRule.from_json(json[\"rule\"]),\n            matching_selectors=[int(i) for i in json[\"matchingSelectors\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleMatch.matching_selectors","title":"<code>matching_selectors: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleMatch.rule","title":"<code>rule: CSSRule</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleMatch.__init__","title":"<code>__init__(rule, matching_selectors)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleMatch.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RuleMatch:\n    return cls(\n        rule=CSSRule.from_json(json[\"rule\"]),\n        matching_selectors=[int(i) for i in json[\"matchingSelectors\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleMatch.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"rule\"] = self.rule.to_json()\n    json[\"matchingSelectors\"] = [i for i in self.matching_selectors]\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleUsage","title":"<code>RuleUsage</code>  <code>dataclass</code>","text":"<p>CSS coverage information.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass RuleUsage:\n    \"\"\"\n    CSS coverage information.\n    \"\"\"\n\n    #: The css style sheet identifier (absent for user agent stylesheet and user-specified\n    #: stylesheet rules) this rule came from.\n    style_sheet_id: StyleSheetId\n\n    #: Offset of the start of the rule (including selector) from the beginning of the stylesheet.\n    start_offset: float\n\n    #: Offset of the end of the rule body from the beginning of the stylesheet.\n    end_offset: float\n\n    #: Indicates whether the rule was actually used by some element in the page.\n    used: bool\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        json[\"startOffset\"] = self.start_offset\n        json[\"endOffset\"] = self.end_offset\n        json[\"used\"] = self.used\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RuleUsage:\n        return cls(\n            style_sheet_id=StyleSheetId.from_json(json[\"styleSheetId\"]),\n            start_offset=float(json[\"startOffset\"]),\n            end_offset=float(json[\"endOffset\"]),\n            used=bool(json[\"used\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleUsage.end_offset","title":"<code>end_offset: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleUsage.start_offset","title":"<code>start_offset: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleUsage.style_sheet_id","title":"<code>style_sheet_id: StyleSheetId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleUsage.used","title":"<code>used: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleUsage.__init__","title":"<code>__init__(style_sheet_id, start_offset, end_offset, used)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleUsage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RuleUsage:\n    return cls(\n        style_sheet_id=StyleSheetId.from_json(json[\"styleSheetId\"]),\n        start_offset=float(json[\"startOffset\"]),\n        end_offset=float(json[\"endOffset\"]),\n        used=bool(json[\"used\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.RuleUsage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    json[\"startOffset\"] = self.start_offset\n    json[\"endOffset\"] = self.end_offset\n    json[\"used\"] = self.used\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.SelectorList","title":"<code>SelectorList</code>  <code>dataclass</code>","text":"<p>Selector list data.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass SelectorList:\n    \"\"\"\n    Selector list data.\n    \"\"\"\n\n    #: Selectors in the list.\n    selectors: typing.List[Value]\n\n    #: Rule selector text.\n    text: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"selectors\"] = [i.to_json() for i in self.selectors]\n        json[\"text\"] = self.text\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SelectorList:\n        return cls(\n            selectors=[Value.from_json(i) for i in json[\"selectors\"]],\n            text=str(json[\"text\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.SelectorList.selectors","title":"<code>selectors: typing.List[Value]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.SelectorList.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.SelectorList.__init__","title":"<code>__init__(selectors, text)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.SelectorList.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SelectorList:\n    return cls(\n        selectors=[Value.from_json(i) for i in json[\"selectors\"]],\n        text=str(json[\"text\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.SelectorList.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"selectors\"] = [i.to_json() for i in self.selectors]\n    json[\"text\"] = self.text\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.ShorthandEntry","title":"<code>ShorthandEntry</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass ShorthandEntry:\n    #: Shorthand name.\n    name: str\n\n    #: Shorthand value.\n    value: str\n\n    #: Whether the property has \"!important\" annotation (implies ``false`` if absent).\n    important: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        if self.important is not None:\n            json[\"important\"] = self.important\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ShorthandEntry:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n            important=(\n                bool(json[\"important\"])\n                if json.get(\"important\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.ShorthandEntry.important","title":"<code>important: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.ShorthandEntry.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.ShorthandEntry.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.ShorthandEntry.__init__","title":"<code>__init__(name, value, important=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.ShorthandEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ShorthandEntry:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n        important=(\n            bool(json[\"important\"])\n            if json.get(\"important\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.ShorthandEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    if self.important is not None:\n        json[\"important\"] = self.important\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.SourceRange","title":"<code>SourceRange</code>  <code>dataclass</code>","text":"<p>Text range within a resource. All numbers are zero-based.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass SourceRange:\n    \"\"\"\n    Text range within a resource. All numbers are zero-based.\n    \"\"\"\n\n    #: Start line of range.\n    start_line: int\n\n    #: Start column of range (inclusive).\n    start_column: int\n\n    #: End line of range\n    end_line: int\n\n    #: End column of range (exclusive).\n    end_column: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"startLine\"] = self.start_line\n        json[\"startColumn\"] = self.start_column\n        json[\"endLine\"] = self.end_line\n        json[\"endColumn\"] = self.end_column\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SourceRange:\n        return cls(\n            start_line=int(json[\"startLine\"]),\n            start_column=int(json[\"startColumn\"]),\n            end_line=int(json[\"endLine\"]),\n            end_column=int(json[\"endColumn\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.SourceRange.end_column","title":"<code>end_column: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.SourceRange.end_line","title":"<code>end_line: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.SourceRange.start_column","title":"<code>start_column: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.SourceRange.start_line","title":"<code>start_line: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.SourceRange.__init__","title":"<code>__init__(start_line, start_column, end_line, end_column)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.SourceRange.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SourceRange:\n    return cls(\n        start_line=int(json[\"startLine\"]),\n        start_column=int(json[\"startColumn\"]),\n        end_line=int(json[\"endLine\"]),\n        end_column=int(json[\"endColumn\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.SourceRange.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"startLine\"] = self.start_line\n    json[\"startColumn\"] = self.start_column\n    json[\"endLine\"] = self.end_line\n    json[\"endColumn\"] = self.end_column\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.Specificity","title":"<code>Specificity</code>  <code>dataclass</code>","text":"<p>Specificity: https://drafts.csswg.org/selectors/#specificity-rules</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass Specificity:\n    \"\"\"\n    Specificity:\n    https://drafts.csswg.org/selectors/#specificity-rules\n    \"\"\"\n\n    #: The a component, which represents the number of ID selectors.\n    a: int\n\n    #: The b component, which represents the number of class selectors, attributes selectors, and\n    #: pseudo-classes.\n    b: int\n\n    #: The c component, which represents the number of type selectors and pseudo-elements.\n    c: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"a\"] = self.a\n        json[\"b\"] = self.b\n        json[\"c\"] = self.c\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Specificity:\n        return cls(\n            a=int(json[\"a\"]),\n            b=int(json[\"b\"]),\n            c=int(json[\"c\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.Specificity.a","title":"<code>a: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.Specificity.b","title":"<code>b: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.Specificity.c","title":"<code>c: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.Specificity.__init__","title":"<code>__init__(a, b, c)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.Specificity.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Specificity:\n    return cls(\n        a=int(json[\"a\"]),\n        b=int(json[\"b\"]),\n        c=int(json[\"c\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.Specificity.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"a\"] = self.a\n    json[\"b\"] = self.b\n    json[\"c\"] = self.c\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleDeclarationEdit","title":"<code>StyleDeclarationEdit</code>  <code>dataclass</code>","text":"<p>A descriptor of operation to mutate style declaration text.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass StyleDeclarationEdit:\n    \"\"\"\n    A descriptor of operation to mutate style declaration text.\n    \"\"\"\n\n    #: The css style sheet identifier.\n    style_sheet_id: StyleSheetId\n\n    #: The range of the style text in the enclosing stylesheet.\n    range_: SourceRange\n\n    #: New style text.\n    text: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n        json[\"range\"] = self.range_.to_json()\n        json[\"text\"] = self.text\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StyleDeclarationEdit:\n        return cls(\n            style_sheet_id=StyleSheetId.from_json(json[\"styleSheetId\"]),\n            range_=SourceRange.from_json(json[\"range\"]),\n            text=str(json[\"text\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleDeclarationEdit.range_","title":"<code>range_: SourceRange</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleDeclarationEdit.style_sheet_id","title":"<code>style_sheet_id: StyleSheetId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleDeclarationEdit.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleDeclarationEdit.__init__","title":"<code>__init__(style_sheet_id, range_, text)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleDeclarationEdit.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StyleDeclarationEdit:\n    return cls(\n        style_sheet_id=StyleSheetId.from_json(json[\"styleSheetId\"]),\n        range_=SourceRange.from_json(json[\"range\"]),\n        text=str(json[\"text\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleDeclarationEdit.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"styleSheetId\"] = self.style_sheet_id.to_json()\n    json[\"range\"] = self.range_.to_json()\n    json[\"text\"] = self.text\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetAdded","title":"<code>StyleSheetAdded</code>  <code>dataclass</code>","text":"<p>Fired whenever an active document stylesheet is added.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@event_class(\"CSS.styleSheetAdded\")\n@dataclass\nclass StyleSheetAdded:\n    \"\"\"\n    Fired whenever an active document stylesheet is added.\n    \"\"\"\n\n    #: Added stylesheet metainfo.\n    header: CSSStyleSheetHeader\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StyleSheetAdded:\n        return cls(header=CSSStyleSheetHeader.from_json(json[\"header\"]))\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetAdded.header","title":"<code>header: CSSStyleSheetHeader</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetAdded.__init__","title":"<code>__init__(header)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetAdded.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StyleSheetAdded:\n    return cls(header=CSSStyleSheetHeader.from_json(json[\"header\"]))\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetChanged","title":"<code>StyleSheetChanged</code>  <code>dataclass</code>","text":"<p>Fired whenever a stylesheet is changed as a result of the client operation.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@event_class(\"CSS.styleSheetChanged\")\n@dataclass\nclass StyleSheetChanged:\n    \"\"\"\n    Fired whenever a stylesheet is changed as a result of the client operation.\n    \"\"\"\n\n    style_sheet_id: StyleSheetId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StyleSheetChanged:\n        return cls(style_sheet_id=StyleSheetId.from_json(json[\"styleSheetId\"]))\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetChanged.style_sheet_id","title":"<code>style_sheet_id: StyleSheetId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetChanged.__init__","title":"<code>__init__(style_sheet_id)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetChanged.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StyleSheetChanged:\n    return cls(style_sheet_id=StyleSheetId.from_json(json[\"styleSheetId\"]))\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetId","title":"<code>StyleSheetId</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>class StyleSheetId(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; StyleSheetId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"StyleSheetId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def __repr__(self):\n    return \"StyleSheetId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; StyleSheetId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetOrigin","title":"<code>StyleSheetOrigin</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Stylesheet type: \"injected\" for stylesheets injected via extension, \"user-agent\" for user-agent stylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via inspector\" rules), \"regular\" for regular stylesheets.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>class StyleSheetOrigin(enum.Enum):\n    \"\"\"\n    Stylesheet type: \"injected\" for stylesheets injected via extension, \"user-agent\" for user-agent\n    stylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via\n    inspector\" rules), \"regular\" for regular stylesheets.\n    \"\"\"\n\n    INJECTED = \"injected\"\n    USER_AGENT = \"user-agent\"\n    INSPECTOR = \"inspector\"\n    REGULAR = \"regular\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; StyleSheetOrigin:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetOrigin.INJECTED","title":"<code>INJECTED = 'injected'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetOrigin.INSPECTOR","title":"<code>INSPECTOR = 'inspector'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetOrigin.REGULAR","title":"<code>REGULAR = 'regular'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetOrigin.USER_AGENT","title":"<code>USER_AGENT = 'user-agent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetOrigin.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; StyleSheetOrigin:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetOrigin.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetRemoved","title":"<code>StyleSheetRemoved</code>  <code>dataclass</code>","text":"<p>Fired whenever an active document stylesheet is removed.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@event_class(\"CSS.styleSheetRemoved\")\n@dataclass\nclass StyleSheetRemoved:\n    \"\"\"\n    Fired whenever an active document stylesheet is removed.\n    \"\"\"\n\n    #: Identifier of the removed stylesheet.\n    style_sheet_id: StyleSheetId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StyleSheetRemoved:\n        return cls(style_sheet_id=StyleSheetId.from_json(json[\"styleSheetId\"]))\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetRemoved.style_sheet_id","title":"<code>style_sheet_id: StyleSheetId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetRemoved.__init__","title":"<code>__init__(style_sheet_id)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.StyleSheetRemoved.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StyleSheetRemoved:\n    return cls(style_sheet_id=StyleSheetId.from_json(json[\"styleSheetId\"]))\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.Value","title":"<code>Value</code>  <code>dataclass</code>","text":"<p>Data for a simple selector (these are delimited by commas in a selector list).</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>@dataclass\nclass Value:\n    \"\"\"\n    Data for a simple selector (these are delimited by commas in a selector list).\n    \"\"\"\n\n    #: Value text.\n    text: str\n\n    #: Value range in the underlying resource (if available).\n    range_: typing.Optional[SourceRange] = None\n\n    #: Specificity of the selector.\n    specificity: typing.Optional[Specificity] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"text\"] = self.text\n        if self.range_ is not None:\n            json[\"range\"] = self.range_.to_json()\n        if self.specificity is not None:\n            json[\"specificity\"] = self.specificity.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Value:\n        return cls(\n            text=str(json[\"text\"]),\n            range_=(\n                SourceRange.from_json(json[\"range\"])\n                if json.get(\"range\", None) is not None\n                else None\n            ),\n            specificity=(\n                Specificity.from_json(json[\"specificity\"])\n                if json.get(\"specificity\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.Value.range_","title":"<code>range_: typing.Optional[SourceRange] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.Value.specificity","title":"<code>specificity: typing.Optional[Specificity] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.Value.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.Value.__init__","title":"<code>__init__(text, range_=None, specificity=None)</code>","text":""},{"location":"reference/cdp/css/#zendriver.cdp.css.Value.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Value:\n    return cls(\n        text=str(json[\"text\"]),\n        range_=(\n            SourceRange.from_json(json[\"range\"])\n            if json.get(\"range\", None) is not None\n            else None\n        ),\n        specificity=(\n            Specificity.from_json(json[\"specificity\"])\n            if json.get(\"specificity\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.Value.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/css.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"text\"] = self.text\n    if self.range_ is not None:\n        json[\"range\"] = self.range_.to_json()\n    if self.specificity is not None:\n        json[\"specificity\"] = self.specificity.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.add_rule","title":"<code>add_rule(style_sheet_id, rule_text, location, node_for_property_syntax_validation=None)</code>","text":"<p>Inserts a new rule with the given <code>ruleText</code> in a stylesheet with given <code>styleSheetId</code>, at the position specified by <code>location</code>.</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> <p>The css style sheet identifier where a new rule should be inserted.</p> required <code>rule_text</code> <code>str</code> <p>The text of a new rule.</p> required <code>location</code> <code>SourceRange</code> <p>Text position of a new rule in the target style sheet.</p> required <code>node_for_property_syntax_validation</code> <code>Optional[NodeId]</code> <p>(EXPERIMENTAL) (Optional) NodeId for the DOM node in whose context custom property declarations for registered properties should be validated. If omitted, declarations in the new rule text can only be validated statically, which may produce incorrect results if the declaration contains a var() for example.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, CSSRule]</code> <p>The newly created rule.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def add_rule(\n    style_sheet_id: StyleSheetId,\n    rule_text: str,\n    location: SourceRange,\n    node_for_property_syntax_validation: typing.Optional[dom.NodeId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSRule]:\n    \"\"\"\n    Inserts a new rule with the given ``ruleText`` in a stylesheet with given ``styleSheetId``, at the\n    position specified by ``location``.\n\n    :param style_sheet_id: The css style sheet identifier where a new rule should be inserted.\n    :param rule_text: The text of a new rule.\n    :param location: Text position of a new rule in the target style sheet.\n    :param node_for_property_syntax_validation: **(EXPERIMENTAL)** *(Optional)* NodeId for the DOM node in whose context custom property declarations for registered properties should be validated. If omitted, declarations in the new rule text can only be validated statically, which may produce incorrect results if the declaration contains a var() for example.\n    :returns: The newly created rule.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    params[\"ruleText\"] = rule_text\n    params[\"location\"] = location.to_json()\n    if node_for_property_syntax_validation is not None:\n        params[\"nodeForPropertySyntaxValidation\"] = (\n            node_for_property_syntax_validation.to_json()\n        )\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.addRule\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return CSSRule.from_json(json[\"rule\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.collect_class_names","title":"<code>collect_class_names(style_sheet_id)</code>","text":"<p>Returns all class names from specified stylesheet.</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[str]]</code> <p>Class name list.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def collect_class_names(\n    style_sheet_id: StyleSheetId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]:\n    \"\"\"\n    Returns all class names from specified stylesheet.\n\n    :param style_sheet_id:\n    :returns: Class name list.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.collectClassNames\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [str(i) for i in json[\"classNames\"]]\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.create_style_sheet","title":"<code>create_style_sheet(frame_id)</code>","text":"<p>Creates a new special \"via-inspector\" stylesheet in the frame with given <code>frameId</code>.</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> <p>Identifier of the frame where \"via-inspector\" stylesheet should be created.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, StyleSheetId]</code> <p>Identifier of the created \"via-inspector\" stylesheet.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def create_style_sheet(\n    frame_id: page.FrameId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, StyleSheetId]:\n    \"\"\"\n    Creates a new special \"via-inspector\" stylesheet in the frame with given ``frameId``.\n\n    :param frame_id: Identifier of the frame where \"via-inspector\" stylesheet should be created.\n    :returns: Identifier of the created \"via-inspector\" stylesheet.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.createStyleSheet\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return StyleSheetId.from_json(json[\"styleSheetId\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.disable","title":"<code>disable()</code>","text":"<p>Disables the CSS agent for the given page.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables the CSS agent for the given page.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.enable","title":"<code>enable()</code>","text":"<p>Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been\n    enabled until the result of this command is received.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.force_pseudo_state","title":"<code>force_pseudo_state(node_id, forced_pseudo_classes)</code>","text":"<p>Ensures that the given node will have specified pseudo-classes whenever its style is computed by the browser.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>The element id for which to force the pseudo state.</p> required <code>forced_pseudo_classes</code> <code>List[str]</code> <p>Element pseudo classes to force when computing the element's style.</p> required Source code in <code>zendriver/cdp/css.py</code> <pre><code>def force_pseudo_state(\n    node_id: dom.NodeId, forced_pseudo_classes: typing.List[str]\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Ensures that the given node will have specified pseudo-classes whenever its style is computed by\n    the browser.\n\n    :param node_id: The element id for which to force the pseudo state.\n    :param forced_pseudo_classes: Element pseudo classes to force when computing the element's style.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"forcedPseudoClasses\"] = [i for i in forced_pseudo_classes]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.forcePseudoState\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.get_background_colors","title":"<code>get_background_colors(node_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to get background colors for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[Optional[List[str]], Optional[str], Optional[str]]]</code> <p>A tuple with the following items:  0. backgroundColors - (Optional) The range of background colors behind this element, if it contains any visible text. If no visible text is present, this will be undefined. In the case of a flat background color, this will consist of simply that color. In the case of a gradient, this will consist of each of the color stops. For anything more complicated, this will be an empty array. Images will be ignored (as if the image had failed to load). 1. computedFontSize - (Optional) The computed font size for this node, as a CSS computed value string (e.g. '12px'). 2. computedFontWeight - (Optional) The computed font weight for this node, as a CSS computed value string (e.g. 'normal' or '100').</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def get_background_colors(\n    node_id: dom.NodeId,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[\n        typing.Optional[typing.List[str]], typing.Optional[str], typing.Optional[str]\n    ],\n]:\n    \"\"\"\n    :param node_id: Id of the node to get background colors for.\n    :returns: A tuple with the following items:\n\n        0. **backgroundColors** - *(Optional)* The range of background colors behind this element, if it contains any visible text. If no visible text is present, this will be undefined. In the case of a flat background color, this will consist of simply that color. In the case of a gradient, this will consist of each of the color stops. For anything more complicated, this will be an empty array. Images will be ignored (as if the image had failed to load).\n        1. **computedFontSize** - *(Optional)* The computed font size for this node, as a CSS computed value string (e.g. '12px').\n        2. **computedFontWeight** - *(Optional)* The computed font weight for this node, as a CSS computed value string (e.g. 'normal' or '100').\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.getBackgroundColors\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        (\n            [str(i) for i in json[\"backgroundColors\"]]\n            if json.get(\"backgroundColors\", None) is not None\n            else None\n        ),\n        (\n            str(json[\"computedFontSize\"])\n            if json.get(\"computedFontSize\", None) is not None\n            else None\n        ),\n        (\n            str(json[\"computedFontWeight\"])\n            if json.get(\"computedFontWeight\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.get_computed_style_for_node","title":"<code>get_computed_style_for_node(node_id)</code>","text":"<p>Returns the computed style for a DOM node identified by <code>nodeId</code>.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[CSSComputedStyleProperty]]</code> <p>Computed style for the specified DOM node.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def get_computed_style_for_node(\n    node_id: dom.NodeId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[CSSComputedStyleProperty]]:\n    \"\"\"\n    Returns the computed style for a DOM node identified by ``nodeId``.\n\n    :param node_id:\n    :returns: Computed style for the specified DOM node.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.getComputedStyleForNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [CSSComputedStyleProperty.from_json(i) for i in json[\"computedStyle\"]]\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.get_inline_styles_for_node","title":"<code>get_inline_styles_for_node(node_id)</code>","text":"<p>Returns the styles defined inline (explicitly in the \"style\" attribute and implicitly, using DOM attributes) for a DOM node identified by <code>nodeId</code>.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[Optional[CSSStyle], Optional[CSSStyle]]]</code> <p>A tuple with the following items:  0. inlineStyle - (Optional) Inline style for the specified DOM node. 1. attributesStyle - (Optional) Attribute-defined element style (e.g. resulting from \"width=20 height=100%\").</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def get_inline_styles_for_node(\n    node_id: dom.NodeId,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[typing.Optional[CSSStyle], typing.Optional[CSSStyle]],\n]:\n    \"\"\"\n    Returns the styles defined inline (explicitly in the \"style\" attribute and implicitly, using DOM\n    attributes) for a DOM node identified by ``nodeId``.\n\n    :param node_id:\n    :returns: A tuple with the following items:\n\n        0. **inlineStyle** - *(Optional)* Inline style for the specified DOM node.\n        1. **attributesStyle** - *(Optional)* Attribute-defined element style (e.g. resulting from \"width=20 height=100%\").\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.getInlineStylesForNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        (\n            CSSStyle.from_json(json[\"inlineStyle\"])\n            if json.get(\"inlineStyle\", None) is not None\n            else None\n        ),\n        (\n            CSSStyle.from_json(json[\"attributesStyle\"])\n            if json.get(\"attributesStyle\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.get_layers_for_node","title":"<code>get_layers_for_node(node_id)</code>","text":"<p>Returns all layers parsed by the rendering engine for the tree scope of a node. Given a DOM element identified by nodeId, getLayersForNode returns the root layer for the nearest ancestor document or shadow root. The layer root contains the full layer tree for the tree scope and their ordering.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, CSSLayerData]</code> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def get_layers_for_node(\n    node_id: dom.NodeId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSLayerData]:\n    \"\"\"\n    Returns all layers parsed by the rendering engine for the tree scope of a node.\n    Given a DOM element identified by nodeId, getLayersForNode returns the root\n    layer for the nearest ancestor document or shadow root. The layer root contains\n    the full layer tree for the tree scope and their ordering.\n\n    **EXPERIMENTAL**\n\n    :param node_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.getLayersForNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return CSSLayerData.from_json(json[\"rootLayer\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.get_location_for_selector","title":"<code>get_location_for_selector(style_sheet_id, selector_text)</code>","text":"<p>Given a CSS selector text and a style sheet ID, getLocationForSelector returns an array of locations of the CSS selector in the style sheet.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <code>selector_text</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[SourceRange]]</code> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def get_location_for_selector(\n    style_sheet_id: StyleSheetId, selector_text: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[SourceRange]]:\n    \"\"\"\n    Given a CSS selector text and a style sheet ID, getLocationForSelector\n    returns an array of locations of the CSS selector in the style sheet.\n\n    **EXPERIMENTAL**\n\n    :param style_sheet_id:\n    :param selector_text:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    params[\"selectorText\"] = selector_text\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.getLocationForSelector\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [SourceRange.from_json(i) for i in json[\"ranges\"]]\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.get_matched_styles_for_node","title":"<code>get_matched_styles_for_node(node_id)</code>","text":"<p>Returns requested styles for a DOM node identified by <code>nodeId</code>.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[Optional[CSSStyle], Optional[CSSStyle], Optional[List[RuleMatch]], Optional[List[PseudoElementMatches]], Optional[List[InheritedStyleEntry]], Optional[List[InheritedPseudoElementMatches]], Optional[List[CSSKeyframesRule]], Optional[List[CSSPositionFallbackRule]], Optional[List[CSSPositionTryRule]], Optional[List[CSSPropertyRule]], Optional[List[CSSPropertyRegistration]], Optional[CSSFontPaletteValuesRule], Optional[NodeId]]]</code> <p>A tuple with the following items:  0. inlineStyle - (Optional) Inline style for the specified DOM node. 1. attributesStyle - (Optional) Attribute-defined element style (e.g. resulting from \"width=20 height=100%\"). 2. matchedCSSRules - (Optional) CSS rules matching this node, from all applicable stylesheets. 3. pseudoElements - (Optional) Pseudo style matches for this node. 4. inherited - (Optional) A chain of inherited styles (from the immediate node parent up to the DOM tree root). 5. inheritedPseudoElements - (Optional) A chain of inherited pseudo element styles (from the immediate node parent up to the DOM tree root). 6. cssKeyframesRules - (Optional) A list of CSS keyframed animations matching this node. 7. cssPositionFallbackRules - (Optional) A list of CSS position fallbacks matching this node. 8. cssPositionTryRules - (Optional) A list of CSS @position-try rules matching this node, based on the position-try-options property. 9. cssPropertyRules - (Optional) A list of CSS at-property rules matching this node. 10. cssPropertyRegistrations - (Optional) A list of CSS property registrations matching this node. 11. cssFontPaletteValuesRule - (Optional) A font-palette-values rule matching this node. 12. parentLayoutNodeId - (Optional) Id of the first parent element that does not have display: contents.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def get_matched_styles_for_node(\n    node_id: dom.NodeId,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[\n        typing.Optional[CSSStyle],\n        typing.Optional[CSSStyle],\n        typing.Optional[typing.List[RuleMatch]],\n        typing.Optional[typing.List[PseudoElementMatches]],\n        typing.Optional[typing.List[InheritedStyleEntry]],\n        typing.Optional[typing.List[InheritedPseudoElementMatches]],\n        typing.Optional[typing.List[CSSKeyframesRule]],\n        typing.Optional[typing.List[CSSPositionFallbackRule]],\n        typing.Optional[typing.List[CSSPositionTryRule]],\n        typing.Optional[typing.List[CSSPropertyRule]],\n        typing.Optional[typing.List[CSSPropertyRegistration]],\n        typing.Optional[CSSFontPaletteValuesRule],\n        typing.Optional[dom.NodeId],\n    ],\n]:\n    \"\"\"\n    Returns requested styles for a DOM node identified by ``nodeId``.\n\n    :param node_id:\n    :returns: A tuple with the following items:\n\n        0. **inlineStyle** - *(Optional)* Inline style for the specified DOM node.\n        1. **attributesStyle** - *(Optional)* Attribute-defined element style (e.g. resulting from \"width=20 height=100%\").\n        2. **matchedCSSRules** - *(Optional)* CSS rules matching this node, from all applicable stylesheets.\n        3. **pseudoElements** - *(Optional)* Pseudo style matches for this node.\n        4. **inherited** - *(Optional)* A chain of inherited styles (from the immediate node parent up to the DOM tree root).\n        5. **inheritedPseudoElements** - *(Optional)* A chain of inherited pseudo element styles (from the immediate node parent up to the DOM tree root).\n        6. **cssKeyframesRules** - *(Optional)* A list of CSS keyframed animations matching this node.\n        7. **cssPositionFallbackRules** - *(Optional)* A list of CSS position fallbacks matching this node.\n        8. **cssPositionTryRules** - *(Optional)* A list of CSS @position-try rules matching this node, based on the position-try-options property.\n        9. **cssPropertyRules** - *(Optional)* A list of CSS at-property rules matching this node.\n        10. **cssPropertyRegistrations** - *(Optional)* A list of CSS property registrations matching this node.\n        11. **cssFontPaletteValuesRule** - *(Optional)* A font-palette-values rule matching this node.\n        12. **parentLayoutNodeId** - *(Optional)* Id of the first parent element that does not have display: contents.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.getMatchedStylesForNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        (\n            CSSStyle.from_json(json[\"inlineStyle\"])\n            if json.get(\"inlineStyle\", None) is not None\n            else None\n        ),\n        (\n            CSSStyle.from_json(json[\"attributesStyle\"])\n            if json.get(\"attributesStyle\", None) is not None\n            else None\n        ),\n        (\n            [RuleMatch.from_json(i) for i in json[\"matchedCSSRules\"]]\n            if json.get(\"matchedCSSRules\", None) is not None\n            else None\n        ),\n        (\n            [PseudoElementMatches.from_json(i) for i in json[\"pseudoElements\"]]\n            if json.get(\"pseudoElements\", None) is not None\n            else None\n        ),\n        (\n            [InheritedStyleEntry.from_json(i) for i in json[\"inherited\"]]\n            if json.get(\"inherited\", None) is not None\n            else None\n        ),\n        (\n            [\n                InheritedPseudoElementMatches.from_json(i)\n                for i in json[\"inheritedPseudoElements\"]\n            ]\n            if json.get(\"inheritedPseudoElements\", None) is not None\n            else None\n        ),\n        (\n            [CSSKeyframesRule.from_json(i) for i in json[\"cssKeyframesRules\"]]\n            if json.get(\"cssKeyframesRules\", None) is not None\n            else None\n        ),\n        (\n            [\n                CSSPositionFallbackRule.from_json(i)\n                for i in json[\"cssPositionFallbackRules\"]\n            ]\n            if json.get(\"cssPositionFallbackRules\", None) is not None\n            else None\n        ),\n        (\n            [CSSPositionTryRule.from_json(i) for i in json[\"cssPositionTryRules\"]]\n            if json.get(\"cssPositionTryRules\", None) is not None\n            else None\n        ),\n        (\n            [CSSPropertyRule.from_json(i) for i in json[\"cssPropertyRules\"]]\n            if json.get(\"cssPropertyRules\", None) is not None\n            else None\n        ),\n        (\n            [\n                CSSPropertyRegistration.from_json(i)\n                for i in json[\"cssPropertyRegistrations\"]\n            ]\n            if json.get(\"cssPropertyRegistrations\", None) is not None\n            else None\n        ),\n        (\n            CSSFontPaletteValuesRule.from_json(json[\"cssFontPaletteValuesRule\"])\n            if json.get(\"cssFontPaletteValuesRule\", None) is not None\n            else None\n        ),\n        (\n            dom.NodeId.from_json(json[\"parentLayoutNodeId\"])\n            if json.get(\"parentLayoutNodeId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.get_media_queries","title":"<code>get_media_queries()</code>","text":"<p>Returns all media queries parsed by the rendering engine.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[CSSMedia]]</code> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def get_media_queries() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[CSSMedia]]\n):\n    \"\"\"\n    Returns all media queries parsed by the rendering engine.\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.getMediaQueries\",\n    }\n    json = yield cmd_dict\n    return [CSSMedia.from_json(i) for i in json[\"medias\"]]\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.get_platform_fonts_for_node","title":"<code>get_platform_fonts_for_node(node_id)</code>","text":"<p>Requests information about platform fonts which we used to render child TextNodes in the given node.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[PlatformFontUsage]]</code> <p>Usage statistics for every employed platform font.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def get_platform_fonts_for_node(\n    node_id: dom.NodeId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[PlatformFontUsage]]:\n    \"\"\"\n    Requests information about platform fonts which we used to render child TextNodes in the given\n    node.\n\n    :param node_id:\n    :returns: Usage statistics for every employed platform font.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.getPlatformFontsForNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [PlatformFontUsage.from_json(i) for i in json[\"fonts\"]]\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.get_style_sheet_text","title":"<code>get_style_sheet_text(style_sheet_id)</code>","text":"<p>Returns the current textual content for a stylesheet.</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>The stylesheet text.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def get_style_sheet_text(\n    style_sheet_id: StyleSheetId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Returns the current textual content for a stylesheet.\n\n    :param style_sheet_id:\n    :returns: The stylesheet text.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.getStyleSheetText\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"text\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_container_query_text","title":"<code>set_container_query_text(style_sheet_id, range_, text)</code>","text":"<p>Modifies the expression of a container query.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <code>range_</code> <code>SourceRange</code> required <code>text</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, CSSContainerQuery]</code> <p>The resulting CSS container query rule after modification.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_container_query_text(\n    style_sheet_id: StyleSheetId, range_: SourceRange, text: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSContainerQuery]:\n    \"\"\"\n    Modifies the expression of a container query.\n\n    **EXPERIMENTAL**\n\n    :param style_sheet_id:\n    :param range_:\n    :param text:\n    :returns: The resulting CSS container query rule after modification.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    params[\"range\"] = range_.to_json()\n    params[\"text\"] = text\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setContainerQueryText\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return CSSContainerQuery.from_json(json[\"containerQuery\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_effective_property_value_for_node","title":"<code>set_effective_property_value_for_node(node_id, property_name, value)</code>","text":"<p>Find a rule with the given active property for the given node and set the new value for this property</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>The element id for which to set property.</p> required <code>property_name</code> <code>str</code> required <code>value</code> <code>str</code> required Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_effective_property_value_for_node(\n    node_id: dom.NodeId, property_name: str, value: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Find a rule with the given active property for the given node and set the new value for this\n    property\n\n    :param node_id: The element id for which to set property.\n    :param property_name:\n    :param value:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"propertyName\"] = property_name\n    params[\"value\"] = value\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setEffectivePropertyValueForNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_keyframe_key","title":"<code>set_keyframe_key(style_sheet_id, range_, key_text)</code>","text":"<p>Modifies the keyframe rule key text.</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <code>range_</code> <code>SourceRange</code> required <code>key_text</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Value]</code> <p>The resulting key text after modification.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_keyframe_key(\n    style_sheet_id: StyleSheetId, range_: SourceRange, key_text: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, Value]:\n    \"\"\"\n    Modifies the keyframe rule key text.\n\n    :param style_sheet_id:\n    :param range_:\n    :param key_text:\n    :returns: The resulting key text after modification.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    params[\"range\"] = range_.to_json()\n    params[\"keyText\"] = key_text\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setKeyframeKey\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return Value.from_json(json[\"keyText\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_local_fonts_enabled","title":"<code>set_local_fonts_enabled(enabled)</code>","text":"<p>Enables/disables rendering of local CSS fonts (enabled by default).</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether rendering of local fonts is enabled.</p> required Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_local_fonts_enabled(\n    enabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables/disables rendering of local CSS fonts (enabled by default).\n\n    **EXPERIMENTAL**\n\n    :param enabled: Whether rendering of local fonts is enabled.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setLocalFontsEnabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_media_text","title":"<code>set_media_text(style_sheet_id, range_, text)</code>","text":"<p>Modifies the rule selector.</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <code>range_</code> <code>SourceRange</code> required <code>text</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, CSSMedia]</code> <p>The resulting CSS media rule after modification.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_media_text(\n    style_sheet_id: StyleSheetId, range_: SourceRange, text: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSMedia]:\n    \"\"\"\n    Modifies the rule selector.\n\n    :param style_sheet_id:\n    :param range_:\n    :param text:\n    :returns: The resulting CSS media rule after modification.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    params[\"range\"] = range_.to_json()\n    params[\"text\"] = text\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setMediaText\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return CSSMedia.from_json(json[\"media\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_property_rule_property_name","title":"<code>set_property_rule_property_name(style_sheet_id, range_, property_name)</code>","text":"<p>Modifies the property rule property name.</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <code>range_</code> <code>SourceRange</code> required <code>property_name</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Value]</code> <p>The resulting key text after modification.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_property_rule_property_name(\n    style_sheet_id: StyleSheetId, range_: SourceRange, property_name: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, Value]:\n    \"\"\"\n    Modifies the property rule property name.\n\n    :param style_sheet_id:\n    :param range_:\n    :param property_name:\n    :returns: The resulting key text after modification.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    params[\"range\"] = range_.to_json()\n    params[\"propertyName\"] = property_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setPropertyRulePropertyName\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return Value.from_json(json[\"propertyName\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_rule_selector","title":"<code>set_rule_selector(style_sheet_id, range_, selector)</code>","text":"<p>Modifies the rule selector.</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <code>range_</code> <code>SourceRange</code> required <code>selector</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SelectorList]</code> <p>The resulting selector list after modification.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_rule_selector(\n    style_sheet_id: StyleSheetId, range_: SourceRange, selector: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, SelectorList]:\n    \"\"\"\n    Modifies the rule selector.\n\n    :param style_sheet_id:\n    :param range_:\n    :param selector:\n    :returns: The resulting selector list after modification.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    params[\"range\"] = range_.to_json()\n    params[\"selector\"] = selector\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setRuleSelector\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return SelectorList.from_json(json[\"selectorList\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_scope_text","title":"<code>set_scope_text(style_sheet_id, range_, text)</code>","text":"<p>Modifies the expression of a scope at-rule.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <code>range_</code> <code>SourceRange</code> required <code>text</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, CSSScope]</code> <p>The resulting CSS Scope rule after modification.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_scope_text(\n    style_sheet_id: StyleSheetId, range_: SourceRange, text: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSScope]:\n    \"\"\"\n    Modifies the expression of a scope at-rule.\n\n    **EXPERIMENTAL**\n\n    :param style_sheet_id:\n    :param range_:\n    :param text:\n    :returns: The resulting CSS Scope rule after modification.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    params[\"range\"] = range_.to_json()\n    params[\"text\"] = text\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setScopeText\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return CSSScope.from_json(json[\"scope\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_style_sheet_text","title":"<code>set_style_sheet_text(style_sheet_id, text)</code>","text":"<p>Sets the new stylesheet text.</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <code>text</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Optional[str]]</code> <p>(Optional) URL of source map associated with script (if any).</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_style_sheet_text(\n    style_sheet_id: StyleSheetId, text: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Optional[str]]:\n    \"\"\"\n    Sets the new stylesheet text.\n\n    :param style_sheet_id:\n    :param text:\n    :returns: *(Optional)* URL of source map associated with script (if any).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    params[\"text\"] = text\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setStyleSheetText\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        str(json[\"sourceMapURL\"])\n        if json.get(\"sourceMapURL\", None) is not None\n        else None\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_style_texts","title":"<code>set_style_texts(edits, node_for_property_syntax_validation=None)</code>","text":"<p>Applies specified style edits one after another in the given order.</p> <p>Parameters:</p> Name Type Description Default <code>edits</code> <code>List[StyleDeclarationEdit]</code> required <code>node_for_property_syntax_validation</code> <code>Optional[NodeId]</code> <p>(EXPERIMENTAL) (Optional) NodeId for the DOM node in whose context custom property declarations for registered properties should be validated. If omitted, declarations in the new rule text can only be validated statically, which may produce incorrect results if the declaration contains a var() for example.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[CSSStyle]]</code> <p>The resulting styles after modification.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_style_texts(\n    edits: typing.List[StyleDeclarationEdit],\n    node_for_property_syntax_validation: typing.Optional[dom.NodeId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[CSSStyle]]:\n    \"\"\"\n    Applies specified style edits one after another in the given order.\n\n    :param edits:\n    :param node_for_property_syntax_validation: **(EXPERIMENTAL)** *(Optional)* NodeId for the DOM node in whose context custom property declarations for registered properties should be validated. If omitted, declarations in the new rule text can only be validated statically, which may produce incorrect results if the declaration contains a var() for example.\n    :returns: The resulting styles after modification.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"edits\"] = [i.to_json() for i in edits]\n    if node_for_property_syntax_validation is not None:\n        params[\"nodeForPropertySyntaxValidation\"] = (\n            node_for_property_syntax_validation.to_json()\n        )\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setStyleTexts\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [CSSStyle.from_json(i) for i in json[\"styles\"]]\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.set_supports_text","title":"<code>set_supports_text(style_sheet_id, range_, text)</code>","text":"<p>Modifies the expression of a supports at-rule.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>style_sheet_id</code> <code>StyleSheetId</code> required <code>range_</code> <code>SourceRange</code> required <code>text</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, CSSSupports]</code> <p>The resulting CSS Supports rule after modification.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def set_supports_text(\n    style_sheet_id: StyleSheetId, range_: SourceRange, text: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, CSSSupports]:\n    \"\"\"\n    Modifies the expression of a supports at-rule.\n\n    **EXPERIMENTAL**\n\n    :param style_sheet_id:\n    :param range_:\n    :param text:\n    :returns: The resulting CSS Supports rule after modification.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"styleSheetId\"] = style_sheet_id.to_json()\n    params[\"range\"] = range_.to_json()\n    params[\"text\"] = text\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.setSupportsText\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return CSSSupports.from_json(json[\"supports\"])\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.start_rule_usage_tracking","title":"<code>start_rule_usage_tracking()</code>","text":"<p>Enables the selector recording.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def start_rule_usage_tracking() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables the selector recording.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.startRuleUsageTracking\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.stop_rule_usage_tracking","title":"<code>stop_rule_usage_tracking()</code>","text":"<p>Stop tracking rule usage and return the list of rules that were used since last call to <code>takeCoverageDelta</code> (or since start of coverage instrumentation).</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[RuleUsage]]</code> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def stop_rule_usage_tracking() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[RuleUsage]]\n):\n    \"\"\"\n    Stop tracking rule usage and return the list of rules that were used since last call to\n    ``takeCoverageDelta`` (or since start of coverage instrumentation).\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.stopRuleUsageTracking\",\n    }\n    json = yield cmd_dict\n    return [RuleUsage.from_json(i) for i in json[\"ruleUsage\"]]\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.take_computed_style_updates","title":"<code>take_computed_style_updates()</code>","text":"<p>Polls the next batch of computed style updates.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[NodeId]]</code> <p>The list of node Ids that have their tracked computed styles updated.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def take_computed_style_updates() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[dom.NodeId]]\n):\n    \"\"\"\n    Polls the next batch of computed style updates.\n\n    **EXPERIMENTAL**\n\n    :returns: The list of node Ids that have their tracked computed styles updated.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.takeComputedStyleUpdates\",\n    }\n    json = yield cmd_dict\n    return [dom.NodeId.from_json(i) for i in json[\"nodeIds\"]]\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.take_coverage_delta","title":"<code>take_coverage_delta()</code>","text":"<p>Obtain list of rules that became used since last call to this method (or since start of coverage instrumentation).</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[List[RuleUsage], float]]</code> <p>A tuple with the following items:  0. coverage - 1. timestamp - Monotonically increasing time, in seconds.</p> Source code in <code>zendriver/cdp/css.py</code> <pre><code>def take_coverage_delta() -&gt; (\n    typing.Generator[\n        T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List[RuleUsage], float]\n    ]\n):\n    \"\"\"\n    Obtain list of rules that became used since last call to this method (or since start of coverage\n    instrumentation).\n\n    :returns: A tuple with the following items:\n\n        0. **coverage** -\n        1. **timestamp** - Monotonically increasing time, in seconds.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.takeCoverageDelta\",\n    }\n    json = yield cmd_dict\n    return (\n        [RuleUsage.from_json(i) for i in json[\"coverage\"]],\n        float(json[\"timestamp\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/css/#zendriver.cdp.css.track_computed_style_updates","title":"<code>track_computed_style_updates(properties_to_track)</code>","text":"<p>Starts tracking the given computed styles for updates. The specified array of properties replaces the one previously specified. Pass empty array to disable tracking. Use takeComputedStyleUpdates to retrieve the list of nodes that had properties modified. The changes to computed style properties are only tracked for nodes pushed to the front-end by the DOM agent. If no changes to the tracked properties occur after the node has been pushed to the front-end, no updates will be issued for the node.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>properties_to_track</code> <code>List[CSSComputedStyleProperty]</code> required Source code in <code>zendriver/cdp/css.py</code> <pre><code>def track_computed_style_updates(\n    properties_to_track: typing.List[CSSComputedStyleProperty],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Starts tracking the given computed styles for updates. The specified array of properties\n    replaces the one previously specified. Pass empty array to disable tracking.\n    Use takeComputedStyleUpdates to retrieve the list of nodes that had properties modified.\n    The changes to computed style properties are only tracked for nodes pushed to the front-end\n    by the DOM agent. If no changes to the tracked properties occur after the node has been pushed\n    to the front-end, no updates will be issued for the node.\n\n    **EXPERIMENTAL**\n\n    :param properties_to_track:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"propertiesToTrack\"] = [i.to_json() for i in properties_to_track]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"CSS.trackComputedStyleUpdates\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/database/","title":"database","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.AddDatabase","title":"<code>AddDatabase</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/database.py</code> <pre><code>@event_class(\"Database.addDatabase\")\n@dataclass\nclass AddDatabase:\n    database: Database\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AddDatabase:\n        return cls(database=Database.from_json(json[\"database\"]))\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.AddDatabase.database","title":"<code>database: Database</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.AddDatabase.__init__","title":"<code>__init__(database)</code>","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.AddDatabase.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/database.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AddDatabase:\n    return cls(database=Database.from_json(json[\"database\"]))\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.Database","title":"<code>Database</code>  <code>dataclass</code>","text":"<p>Database object.</p> Source code in <code>zendriver/cdp/database.py</code> <pre><code>@dataclass\nclass Database:\n    \"\"\"\n    Database object.\n    \"\"\"\n\n    #: Database ID.\n    id_: DatabaseId\n\n    #: Database domain.\n    domain: str\n\n    #: Database name.\n    name: str\n\n    #: Database version.\n    version: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"id\"] = self.id_.to_json()\n        json[\"domain\"] = self.domain\n        json[\"name\"] = self.name\n        json[\"version\"] = self.version\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Database:\n        return cls(\n            id_=DatabaseId.from_json(json[\"id\"]),\n            domain=str(json[\"domain\"]),\n            name=str(json[\"name\"]),\n            version=str(json[\"version\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.Database.domain","title":"<code>domain: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.Database.id_","title":"<code>id_: DatabaseId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.Database.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.Database.version","title":"<code>version: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.Database.__init__","title":"<code>__init__(id_, domain, name, version)</code>","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.Database.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/database.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Database:\n    return cls(\n        id_=DatabaseId.from_json(json[\"id\"]),\n        domain=str(json[\"domain\"]),\n        name=str(json[\"name\"]),\n        version=str(json[\"version\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.Database.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/database.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"id\"] = self.id_.to_json()\n    json[\"domain\"] = self.domain\n    json[\"name\"] = self.name\n    json[\"version\"] = self.version\n    return json\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.DatabaseId","title":"<code>DatabaseId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique identifier of Database object.</p> Source code in <code>zendriver/cdp/database.py</code> <pre><code>class DatabaseId(str):\n    \"\"\"\n    Unique identifier of Database object.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; DatabaseId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"DatabaseId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.DatabaseId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/database.py</code> <pre><code>def __repr__(self):\n    return \"DatabaseId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.DatabaseId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/database.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; DatabaseId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.DatabaseId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/database.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.Error","title":"<code>Error</code>  <code>dataclass</code>","text":"<p>Database error.</p> Source code in <code>zendriver/cdp/database.py</code> <pre><code>@dataclass\nclass Error:\n    \"\"\"\n    Database error.\n    \"\"\"\n\n    #: Error message.\n    message: str\n\n    #: Error code.\n    code: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"message\"] = self.message\n        json[\"code\"] = self.code\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Error:\n        return cls(\n            message=str(json[\"message\"]),\n            code=int(json[\"code\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.Error.code","title":"<code>code: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.Error.message","title":"<code>message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.Error.__init__","title":"<code>__init__(message, code)</code>","text":""},{"location":"reference/cdp/database/#zendriver.cdp.database.Error.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/database.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Error:\n    return cls(\n        message=str(json[\"message\"]),\n        code=int(json[\"code\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.Error.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/database.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"message\"] = self.message\n    json[\"code\"] = self.code\n    return json\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.disable","title":"<code>disable()</code>","text":"<p>Disables database tracking, prevents database events from being sent to the client.</p> Source code in <code>zendriver/cdp/database.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables database tracking, prevents database events from being sent to the client.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Database.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.enable","title":"<code>enable()</code>","text":"<p>Enables database tracking, database events will now be delivered to the client.</p> Source code in <code>zendriver/cdp/database.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables database tracking, database events will now be delivered to the client.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Database.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.execute_sql","title":"<code>execute_sql(database_id, query)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>DatabaseId</code> required <code>query</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[Optional[List[str]], Optional[List[Any]], Optional[Error]]]</code> <p>A tuple with the following items:  0. columnNames - 1. values - 2. sqlError -</p> Source code in <code>zendriver/cdp/database.py</code> <pre><code>def execute_sql(database_id: DatabaseId, query: str) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[\n        typing.Optional[typing.List[str]],\n        typing.Optional[typing.List[typing.Any]],\n        typing.Optional[Error],\n    ],\n]:\n    \"\"\"\n    :param database_id:\n    :param query:\n    :returns: A tuple with the following items:\n\n        0. **columnNames** -\n        1. **values** -\n        2. **sqlError** -\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"databaseId\"] = database_id.to_json()\n    params[\"query\"] = query\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Database.executeSQL\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        (\n            [str(i) for i in json[\"columnNames\"]]\n            if json.get(\"columnNames\", None) is not None\n            else None\n        ),\n        [i for i in json[\"values\"]] if json.get(\"values\", None) is not None else None,\n        (\n            Error.from_json(json[\"sqlError\"])\n            if json.get(\"sqlError\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/database/#zendriver.cdp.database.get_database_table_names","title":"<code>get_database_table_names(database_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>database_id</code> <code>DatabaseId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[str]]</code> Source code in <code>zendriver/cdp/database.py</code> <pre><code>def get_database_table_names(\n    database_id: DatabaseId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]:\n    \"\"\"\n    :param database_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"databaseId\"] = database_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Database.getDatabaseTableNames\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [str(i) for i in json[\"tableNames\"]]\n</code></pre>"},{"location":"reference/cdp/debugger/","title":"debugger","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakLocation","title":"<code>BreakLocation</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@dataclass\nclass BreakLocation:\n    #: Script identifier as reported in the ``Debugger.scriptParsed``.\n    script_id: runtime.ScriptId\n\n    #: Line number in the script (0-based).\n    line_number: int\n\n    #: Column number in the script (0-based).\n    column_number: typing.Optional[int] = None\n\n    type_: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"scriptId\"] = self.script_id.to_json()\n        json[\"lineNumber\"] = self.line_number\n        if self.column_number is not None:\n            json[\"columnNumber\"] = self.column_number\n        if self.type_ is not None:\n            json[\"type\"] = self.type_\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BreakLocation:\n        return cls(\n            script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n            line_number=int(json[\"lineNumber\"]),\n            column_number=(\n                int(json[\"columnNumber\"])\n                if json.get(\"columnNumber\", None) is not None\n                else None\n            ),\n            type_=str(json[\"type\"]) if json.get(\"type\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakLocation.column_number","title":"<code>column_number: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakLocation.line_number","title":"<code>line_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakLocation.script_id","title":"<code>script_id: runtime.ScriptId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakLocation.type_","title":"<code>type_: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakLocation.__init__","title":"<code>__init__(script_id, line_number, column_number=None, type_=None)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakLocation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BreakLocation:\n    return cls(\n        script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n        line_number=int(json[\"lineNumber\"]),\n        column_number=(\n            int(json[\"columnNumber\"])\n            if json.get(\"columnNumber\", None) is not None\n            else None\n        ),\n        type_=str(json[\"type\"]) if json.get(\"type\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakLocation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"scriptId\"] = self.script_id.to_json()\n    json[\"lineNumber\"] = self.line_number\n    if self.column_number is not None:\n        json[\"columnNumber\"] = self.column_number\n    if self.type_ is not None:\n        json[\"type\"] = self.type_\n    return json\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakpointId","title":"<code>BreakpointId</code>","text":"<p>               Bases: <code>str</code></p> <p>Breakpoint identifier.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>class BreakpointId(str):\n    \"\"\"\n    Breakpoint identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; BreakpointId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"BreakpointId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakpointId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def __repr__(self):\n    return \"BreakpointId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakpointId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; BreakpointId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakpointId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakpointResolved","title":"<code>BreakpointResolved</code>  <code>dataclass</code>","text":"<p>Fired when breakpoint is resolved to an actual script and location.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@event_class(\"Debugger.breakpointResolved\")\n@dataclass\nclass BreakpointResolved:\n    \"\"\"\n    Fired when breakpoint is resolved to an actual script and location.\n    \"\"\"\n\n    #: Breakpoint unique identifier.\n    breakpoint_id: BreakpointId\n    #: Actual breakpoint location.\n    location: Location\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BreakpointResolved:\n        return cls(\n            breakpoint_id=BreakpointId.from_json(json[\"breakpointId\"]),\n            location=Location.from_json(json[\"location\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakpointResolved.breakpoint_id","title":"<code>breakpoint_id: BreakpointId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakpointResolved.location","title":"<code>location: Location</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakpointResolved.__init__","title":"<code>__init__(breakpoint_id, location)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.BreakpointResolved.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BreakpointResolved:\n    return cls(\n        breakpoint_id=BreakpointId.from_json(json[\"breakpointId\"]),\n        location=Location.from_json(json[\"location\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame","title":"<code>CallFrame</code>  <code>dataclass</code>","text":"<p>JavaScript call frame. Array of call frames form the call stack.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@dataclass\nclass CallFrame:\n    \"\"\"\n    JavaScript call frame. Array of call frames form the call stack.\n    \"\"\"\n\n    #: Call frame identifier. This identifier is only valid while the virtual machine is paused.\n    call_frame_id: CallFrameId\n\n    #: Name of the JavaScript function called on this call frame.\n    function_name: str\n\n    #: Location in the source code.\n    location: Location\n\n    #: JavaScript script name or url.\n    #: Deprecated in favor of using the ``location.scriptId`` to resolve the URL via a previously\n    #: sent ``Debugger.scriptParsed`` event.\n    url: str\n\n    #: Scope chain for this call frame.\n    scope_chain: typing.List[Scope]\n\n    #: ``this`` object for this call frame.\n    this: runtime.RemoteObject\n\n    #: Location in the source code.\n    function_location: typing.Optional[Location] = None\n\n    #: The value being returned, if the function is at return point.\n    return_value: typing.Optional[runtime.RemoteObject] = None\n\n    #: Valid only while the VM is paused and indicates whether this frame\n    #: can be restarted or not. Note that a ``true`` value here does not\n    #: guarantee that Debugger#restartFrame with this CallFrameId will be\n    #: successful, but it is very likely.\n    can_be_restarted: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"callFrameId\"] = self.call_frame_id.to_json()\n        json[\"functionName\"] = self.function_name\n        json[\"location\"] = self.location.to_json()\n        json[\"url\"] = self.url\n        json[\"scopeChain\"] = [i.to_json() for i in self.scope_chain]\n        json[\"this\"] = self.this.to_json()\n        if self.function_location is not None:\n            json[\"functionLocation\"] = self.function_location.to_json()\n        if self.return_value is not None:\n            json[\"returnValue\"] = self.return_value.to_json()\n        if self.can_be_restarted is not None:\n            json[\"canBeRestarted\"] = self.can_be_restarted\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CallFrame:\n        return cls(\n            call_frame_id=CallFrameId.from_json(json[\"callFrameId\"]),\n            function_name=str(json[\"functionName\"]),\n            location=Location.from_json(json[\"location\"]),\n            url=str(json[\"url\"]),\n            scope_chain=[Scope.from_json(i) for i in json[\"scopeChain\"]],\n            this=runtime.RemoteObject.from_json(json[\"this\"]),\n            function_location=(\n                Location.from_json(json[\"functionLocation\"])\n                if json.get(\"functionLocation\", None) is not None\n                else None\n            ),\n            return_value=(\n                runtime.RemoteObject.from_json(json[\"returnValue\"])\n                if json.get(\"returnValue\", None) is not None\n                else None\n            ),\n            can_be_restarted=(\n                bool(json[\"canBeRestarted\"])\n                if json.get(\"canBeRestarted\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.call_frame_id","title":"<code>call_frame_id: CallFrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.can_be_restarted","title":"<code>can_be_restarted: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.function_location","title":"<code>function_location: typing.Optional[Location] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.function_name","title":"<code>function_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.location","title":"<code>location: Location</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.return_value","title":"<code>return_value: typing.Optional[runtime.RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.scope_chain","title":"<code>scope_chain: typing.List[Scope]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.this","title":"<code>this: runtime.RemoteObject</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.__init__","title":"<code>__init__(call_frame_id, function_name, location, url, scope_chain, this, function_location=None, return_value=None, can_be_restarted=None)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CallFrame:\n    return cls(\n        call_frame_id=CallFrameId.from_json(json[\"callFrameId\"]),\n        function_name=str(json[\"functionName\"]),\n        location=Location.from_json(json[\"location\"]),\n        url=str(json[\"url\"]),\n        scope_chain=[Scope.from_json(i) for i in json[\"scopeChain\"]],\n        this=runtime.RemoteObject.from_json(json[\"this\"]),\n        function_location=(\n            Location.from_json(json[\"functionLocation\"])\n            if json.get(\"functionLocation\", None) is not None\n            else None\n        ),\n        return_value=(\n            runtime.RemoteObject.from_json(json[\"returnValue\"])\n            if json.get(\"returnValue\", None) is not None\n            else None\n        ),\n        can_be_restarted=(\n            bool(json[\"canBeRestarted\"])\n            if json.get(\"canBeRestarted\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrame.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"callFrameId\"] = self.call_frame_id.to_json()\n    json[\"functionName\"] = self.function_name\n    json[\"location\"] = self.location.to_json()\n    json[\"url\"] = self.url\n    json[\"scopeChain\"] = [i.to_json() for i in self.scope_chain]\n    json[\"this\"] = self.this.to_json()\n    if self.function_location is not None:\n        json[\"functionLocation\"] = self.function_location.to_json()\n    if self.return_value is not None:\n        json[\"returnValue\"] = self.return_value.to_json()\n    if self.can_be_restarted is not None:\n        json[\"canBeRestarted\"] = self.can_be_restarted\n    return json\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrameId","title":"<code>CallFrameId</code>","text":"<p>               Bases: <code>str</code></p> <p>Call frame identifier.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>class CallFrameId(str):\n    \"\"\"\n    Call frame identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CallFrameId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"CallFrameId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrameId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def __repr__(self):\n    return \"CallFrameId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrameId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CallFrameId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.CallFrameId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.DebugSymbols","title":"<code>DebugSymbols</code>  <code>dataclass</code>","text":"<p>Debug symbols available for a wasm script.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@dataclass\nclass DebugSymbols:\n    \"\"\"\n    Debug symbols available for a wasm script.\n    \"\"\"\n\n    #: Type of the debug symbols.\n    type_: str\n\n    #: URL of the external symbol source.\n    external_url: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        if self.external_url is not None:\n            json[\"externalURL\"] = self.external_url\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DebugSymbols:\n        return cls(\n            type_=str(json[\"type\"]),\n            external_url=(\n                str(json[\"externalURL\"])\n                if json.get(\"externalURL\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.DebugSymbols.external_url","title":"<code>external_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.DebugSymbols.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.DebugSymbols.__init__","title":"<code>__init__(type_, external_url=None)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.DebugSymbols.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DebugSymbols:\n    return cls(\n        type_=str(json[\"type\"]),\n        external_url=(\n            str(json[\"externalURL\"])\n            if json.get(\"externalURL\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.DebugSymbols.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    if self.external_url is not None:\n        json[\"externalURL\"] = self.external_url\n    return json\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Location","title":"<code>Location</code>  <code>dataclass</code>","text":"<p>Location in the source code.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@dataclass\nclass Location:\n    \"\"\"\n    Location in the source code.\n    \"\"\"\n\n    #: Script identifier as reported in the ``Debugger.scriptParsed``.\n    script_id: runtime.ScriptId\n\n    #: Line number in the script (0-based).\n    line_number: int\n\n    #: Column number in the script (0-based).\n    column_number: typing.Optional[int] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"scriptId\"] = self.script_id.to_json()\n        json[\"lineNumber\"] = self.line_number\n        if self.column_number is not None:\n            json[\"columnNumber\"] = self.column_number\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Location:\n        return cls(\n            script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n            line_number=int(json[\"lineNumber\"]),\n            column_number=(\n                int(json[\"columnNumber\"])\n                if json.get(\"columnNumber\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Location.column_number","title":"<code>column_number: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Location.line_number","title":"<code>line_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Location.script_id","title":"<code>script_id: runtime.ScriptId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Location.__init__","title":"<code>__init__(script_id, line_number, column_number=None)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Location.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Location:\n    return cls(\n        script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n        line_number=int(json[\"lineNumber\"]),\n        column_number=(\n            int(json[\"columnNumber\"])\n            if json.get(\"columnNumber\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Location.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"scriptId\"] = self.script_id.to_json()\n    json[\"lineNumber\"] = self.line_number\n    if self.column_number is not None:\n        json[\"columnNumber\"] = self.column_number\n    return json\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.LocationRange","title":"<code>LocationRange</code>  <code>dataclass</code>","text":"<p>Location range within one script.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@dataclass\nclass LocationRange:\n    \"\"\"\n    Location range within one script.\n    \"\"\"\n\n    script_id: runtime.ScriptId\n\n    start: ScriptPosition\n\n    end: ScriptPosition\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"scriptId\"] = self.script_id.to_json()\n        json[\"start\"] = self.start.to_json()\n        json[\"end\"] = self.end.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LocationRange:\n        return cls(\n            script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n            start=ScriptPosition.from_json(json[\"start\"]),\n            end=ScriptPosition.from_json(json[\"end\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.LocationRange.end","title":"<code>end: ScriptPosition</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.LocationRange.script_id","title":"<code>script_id: runtime.ScriptId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.LocationRange.start","title":"<code>start: ScriptPosition</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.LocationRange.__init__","title":"<code>__init__(script_id, start, end)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.LocationRange.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LocationRange:\n    return cls(\n        script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n        start=ScriptPosition.from_json(json[\"start\"]),\n        end=ScriptPosition.from_json(json[\"end\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.LocationRange.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"scriptId\"] = self.script_id.to_json()\n    json[\"start\"] = self.start.to_json()\n    json[\"end\"] = self.end.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Paused","title":"<code>Paused</code>  <code>dataclass</code>","text":"<p>Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@event_class(\"Debugger.paused\")\n@dataclass\nclass Paused:\n    \"\"\"\n    Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n    \"\"\"\n\n    #: Call stack the virtual machine stopped on.\n    call_frames: typing.List[CallFrame]\n    #: Pause reason.\n    reason: str\n    #: Object containing break-specific auxiliary properties.\n    data: typing.Optional[dict]\n    #: Hit breakpoints IDs\n    hit_breakpoints: typing.Optional[typing.List[str]]\n    #: Async stack trace, if any.\n    async_stack_trace: typing.Optional[runtime.StackTrace]\n    #: Async stack trace, if any.\n    async_stack_trace_id: typing.Optional[runtime.StackTraceId]\n    #: Never present, will be removed.\n    async_call_stack_trace_id: typing.Optional[runtime.StackTraceId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Paused:\n        return cls(\n            call_frames=[CallFrame.from_json(i) for i in json[\"callFrames\"]],\n            reason=str(json[\"reason\"]),\n            data=dict(json[\"data\"]) if json.get(\"data\", None) is not None else None,\n            hit_breakpoints=(\n                [str(i) for i in json[\"hitBreakpoints\"]]\n                if json.get(\"hitBreakpoints\", None) is not None\n                else None\n            ),\n            async_stack_trace=(\n                runtime.StackTrace.from_json(json[\"asyncStackTrace\"])\n                if json.get(\"asyncStackTrace\", None) is not None\n                else None\n            ),\n            async_stack_trace_id=(\n                runtime.StackTraceId.from_json(json[\"asyncStackTraceId\"])\n                if json.get(\"asyncStackTraceId\", None) is not None\n                else None\n            ),\n            async_call_stack_trace_id=(\n                runtime.StackTraceId.from_json(json[\"asyncCallStackTraceId\"])\n                if json.get(\"asyncCallStackTraceId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Paused.async_call_stack_trace_id","title":"<code>async_call_stack_trace_id: typing.Optional[runtime.StackTraceId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Paused.async_stack_trace","title":"<code>async_stack_trace: typing.Optional[runtime.StackTrace]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Paused.async_stack_trace_id","title":"<code>async_stack_trace_id: typing.Optional[runtime.StackTraceId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Paused.call_frames","title":"<code>call_frames: typing.List[CallFrame]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Paused.data","title":"<code>data: typing.Optional[dict]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Paused.hit_breakpoints","title":"<code>hit_breakpoints: typing.Optional[typing.List[str]]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Paused.reason","title":"<code>reason: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Paused.__init__","title":"<code>__init__(call_frames, reason, data, hit_breakpoints, async_stack_trace, async_stack_trace_id, async_call_stack_trace_id)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Paused.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Paused:\n    return cls(\n        call_frames=[CallFrame.from_json(i) for i in json[\"callFrames\"]],\n        reason=str(json[\"reason\"]),\n        data=dict(json[\"data\"]) if json.get(\"data\", None) is not None else None,\n        hit_breakpoints=(\n            [str(i) for i in json[\"hitBreakpoints\"]]\n            if json.get(\"hitBreakpoints\", None) is not None\n            else None\n        ),\n        async_stack_trace=(\n            runtime.StackTrace.from_json(json[\"asyncStackTrace\"])\n            if json.get(\"asyncStackTrace\", None) is not None\n            else None\n        ),\n        async_stack_trace_id=(\n            runtime.StackTraceId.from_json(json[\"asyncStackTraceId\"])\n            if json.get(\"asyncStackTraceId\", None) is not None\n            else None\n        ),\n        async_call_stack_trace_id=(\n            runtime.StackTraceId.from_json(json[\"asyncCallStackTraceId\"])\n            if json.get(\"asyncCallStackTraceId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Resumed","title":"<code>Resumed</code>  <code>dataclass</code>","text":"<p>Fired when the virtual machine resumed execution.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@event_class(\"Debugger.resumed\")\n@dataclass\nclass Resumed:\n    \"\"\"\n    Fired when the virtual machine resumed execution.\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Resumed:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Resumed.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Resumed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Resumed:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Scope","title":"<code>Scope</code>  <code>dataclass</code>","text":"<p>Scope description.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@dataclass\nclass Scope:\n    \"\"\"\n    Scope description.\n    \"\"\"\n\n    #: Scope type.\n    type_: str\n\n    #: Object representing the scope. For ``global`` and ``with`` scopes it represents the actual\n    #: object; for the rest of the scopes, it is artificial transient object enumerating scope\n    #: variables as its properties.\n    object_: runtime.RemoteObject\n\n    name: typing.Optional[str] = None\n\n    #: Location in the source code where scope starts\n    start_location: typing.Optional[Location] = None\n\n    #: Location in the source code where scope ends\n    end_location: typing.Optional[Location] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        json[\"object\"] = self.object_.to_json()\n        if self.name is not None:\n            json[\"name\"] = self.name\n        if self.start_location is not None:\n            json[\"startLocation\"] = self.start_location.to_json()\n        if self.end_location is not None:\n            json[\"endLocation\"] = self.end_location.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Scope:\n        return cls(\n            type_=str(json[\"type\"]),\n            object_=runtime.RemoteObject.from_json(json[\"object\"]),\n            name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n            start_location=(\n                Location.from_json(json[\"startLocation\"])\n                if json.get(\"startLocation\", None) is not None\n                else None\n            ),\n            end_location=(\n                Location.from_json(json[\"endLocation\"])\n                if json.get(\"endLocation\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Scope.end_location","title":"<code>end_location: typing.Optional[Location] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Scope.name","title":"<code>name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Scope.object_","title":"<code>object_: runtime.RemoteObject</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Scope.start_location","title":"<code>start_location: typing.Optional[Location] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Scope.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Scope.__init__","title":"<code>__init__(type_, object_, name=None, start_location=None, end_location=None)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Scope.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Scope:\n    return cls(\n        type_=str(json[\"type\"]),\n        object_=runtime.RemoteObject.from_json(json[\"object\"]),\n        name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n        start_location=(\n            Location.from_json(json[\"startLocation\"])\n            if json.get(\"startLocation\", None) is not None\n            else None\n        ),\n        end_location=(\n            Location.from_json(json[\"endLocation\"])\n            if json.get(\"endLocation\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.Scope.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    json[\"object\"] = self.object_.to_json()\n    if self.name is not None:\n        json[\"name\"] = self.name\n    if self.start_location is not None:\n        json[\"startLocation\"] = self.start_location.to_json()\n    if self.end_location is not None:\n        json[\"endLocation\"] = self.end_location.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse","title":"<code>ScriptFailedToParse</code>  <code>dataclass</code>","text":"<p>Fired when virtual machine fails to parse the script.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@event_class(\"Debugger.scriptFailedToParse\")\n@dataclass\nclass ScriptFailedToParse:\n    \"\"\"\n    Fired when virtual machine fails to parse the script.\n    \"\"\"\n\n    #: Identifier of the script parsed.\n    script_id: runtime.ScriptId\n    #: URL or name of the script parsed (if any).\n    url: str\n    #: Line offset of the script within the resource with given URL (for script tags).\n    start_line: int\n    #: Column offset of the script within the resource with given URL.\n    start_column: int\n    #: Last line of the script.\n    end_line: int\n    #: Length of the last line of the script.\n    end_column: int\n    #: Specifies script creation context.\n    execution_context_id: runtime.ExecutionContextId\n    #: Content hash of the script, SHA-256.\n    hash_: str\n    #: Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'``'isolated'``'worker', frameId: string}\n    execution_context_aux_data: typing.Optional[dict]\n    #: URL of source map associated with script (if any).\n    source_map_url: typing.Optional[str]\n    #: True, if this script has sourceURL.\n    has_source_url: typing.Optional[bool]\n    #: True, if this script is ES6 module.\n    is_module: typing.Optional[bool]\n    #: This script length.\n    length: typing.Optional[int]\n    #: JavaScript top stack frame of where the script parsed event was triggered if available.\n    stack_trace: typing.Optional[runtime.StackTrace]\n    #: If the scriptLanguage is WebAssembly, the code section offset in the module.\n    code_offset: typing.Optional[int]\n    #: The language of the script.\n    script_language: typing.Optional[ScriptLanguage]\n    #: The name the embedder supplied for this script.\n    embedder_name: typing.Optional[str]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScriptFailedToParse:\n        return cls(\n            script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n            url=str(json[\"url\"]),\n            start_line=int(json[\"startLine\"]),\n            start_column=int(json[\"startColumn\"]),\n            end_line=int(json[\"endLine\"]),\n            end_column=int(json[\"endColumn\"]),\n            execution_context_id=runtime.ExecutionContextId.from_json(\n                json[\"executionContextId\"]\n            ),\n            hash_=str(json[\"hash\"]),\n            execution_context_aux_data=(\n                dict(json[\"executionContextAuxData\"])\n                if json.get(\"executionContextAuxData\", None) is not None\n                else None\n            ),\n            source_map_url=(\n                str(json[\"sourceMapURL\"])\n                if json.get(\"sourceMapURL\", None) is not None\n                else None\n            ),\n            has_source_url=(\n                bool(json[\"hasSourceURL\"])\n                if json.get(\"hasSourceURL\", None) is not None\n                else None\n            ),\n            is_module=(\n                bool(json[\"isModule\"])\n                if json.get(\"isModule\", None) is not None\n                else None\n            ),\n            length=(\n                int(json[\"length\"]) if json.get(\"length\", None) is not None else None\n            ),\n            stack_trace=(\n                runtime.StackTrace.from_json(json[\"stackTrace\"])\n                if json.get(\"stackTrace\", None) is not None\n                else None\n            ),\n            code_offset=(\n                int(json[\"codeOffset\"])\n                if json.get(\"codeOffset\", None) is not None\n                else None\n            ),\n            script_language=(\n                ScriptLanguage.from_json(json[\"scriptLanguage\"])\n                if json.get(\"scriptLanguage\", None) is not None\n                else None\n            ),\n            embedder_name=(\n                str(json[\"embedderName\"])\n                if json.get(\"embedderName\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.code_offset","title":"<code>code_offset: typing.Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.embedder_name","title":"<code>embedder_name: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.end_column","title":"<code>end_column: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.end_line","title":"<code>end_line: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.execution_context_aux_data","title":"<code>execution_context_aux_data: typing.Optional[dict]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.execution_context_id","title":"<code>execution_context_id: runtime.ExecutionContextId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.has_source_url","title":"<code>has_source_url: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.hash_","title":"<code>hash_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.is_module","title":"<code>is_module: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.length","title":"<code>length: typing.Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.script_id","title":"<code>script_id: runtime.ScriptId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.script_language","title":"<code>script_language: typing.Optional[ScriptLanguage]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.source_map_url","title":"<code>source_map_url: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.stack_trace","title":"<code>stack_trace: typing.Optional[runtime.StackTrace]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.start_column","title":"<code>start_column: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.start_line","title":"<code>start_line: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.__init__","title":"<code>__init__(script_id, url, start_line, start_column, end_line, end_column, execution_context_id, hash_, execution_context_aux_data, source_map_url, has_source_url, is_module, length, stack_trace, code_offset, script_language, embedder_name)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptFailedToParse.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScriptFailedToParse:\n    return cls(\n        script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n        url=str(json[\"url\"]),\n        start_line=int(json[\"startLine\"]),\n        start_column=int(json[\"startColumn\"]),\n        end_line=int(json[\"endLine\"]),\n        end_column=int(json[\"endColumn\"]),\n        execution_context_id=runtime.ExecutionContextId.from_json(\n            json[\"executionContextId\"]\n        ),\n        hash_=str(json[\"hash\"]),\n        execution_context_aux_data=(\n            dict(json[\"executionContextAuxData\"])\n            if json.get(\"executionContextAuxData\", None) is not None\n            else None\n        ),\n        source_map_url=(\n            str(json[\"sourceMapURL\"])\n            if json.get(\"sourceMapURL\", None) is not None\n            else None\n        ),\n        has_source_url=(\n            bool(json[\"hasSourceURL\"])\n            if json.get(\"hasSourceURL\", None) is not None\n            else None\n        ),\n        is_module=(\n            bool(json[\"isModule\"])\n            if json.get(\"isModule\", None) is not None\n            else None\n        ),\n        length=(\n            int(json[\"length\"]) if json.get(\"length\", None) is not None else None\n        ),\n        stack_trace=(\n            runtime.StackTrace.from_json(json[\"stackTrace\"])\n            if json.get(\"stackTrace\", None) is not None\n            else None\n        ),\n        code_offset=(\n            int(json[\"codeOffset\"])\n            if json.get(\"codeOffset\", None) is not None\n            else None\n        ),\n        script_language=(\n            ScriptLanguage.from_json(json[\"scriptLanguage\"])\n            if json.get(\"scriptLanguage\", None) is not None\n            else None\n        ),\n        embedder_name=(\n            str(json[\"embedderName\"])\n            if json.get(\"embedderName\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptLanguage","title":"<code>ScriptLanguage</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of possible script languages.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>class ScriptLanguage(enum.Enum):\n    \"\"\"\n    Enum of possible script languages.\n    \"\"\"\n\n    JAVA_SCRIPT = \"JavaScript\"\n    WEB_ASSEMBLY = \"WebAssembly\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ScriptLanguage:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptLanguage.JAVA_SCRIPT","title":"<code>JAVA_SCRIPT = 'JavaScript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptLanguage.WEB_ASSEMBLY","title":"<code>WEB_ASSEMBLY = 'WebAssembly'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptLanguage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ScriptLanguage:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptLanguage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed","title":"<code>ScriptParsed</code>  <code>dataclass</code>","text":"<p>Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@event_class(\"Debugger.scriptParsed\")\n@dataclass\nclass ScriptParsed:\n    \"\"\"\n    Fired when virtual machine parses script. This event is also fired for all known and uncollected\n    scripts upon enabling debugger.\n    \"\"\"\n\n    #: Identifier of the script parsed.\n    script_id: runtime.ScriptId\n    #: URL or name of the script parsed (if any).\n    url: str\n    #: Line offset of the script within the resource with given URL (for script tags).\n    start_line: int\n    #: Column offset of the script within the resource with given URL.\n    start_column: int\n    #: Last line of the script.\n    end_line: int\n    #: Length of the last line of the script.\n    end_column: int\n    #: Specifies script creation context.\n    execution_context_id: runtime.ExecutionContextId\n    #: Content hash of the script, SHA-256.\n    hash_: str\n    #: Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'``'isolated'``'worker', frameId: string}\n    execution_context_aux_data: typing.Optional[dict]\n    #: True, if this script is generated as a result of the live edit operation.\n    is_live_edit: typing.Optional[bool]\n    #: URL of source map associated with script (if any).\n    source_map_url: typing.Optional[str]\n    #: True, if this script has sourceURL.\n    has_source_url: typing.Optional[bool]\n    #: True, if this script is ES6 module.\n    is_module: typing.Optional[bool]\n    #: This script length.\n    length: typing.Optional[int]\n    #: JavaScript top stack frame of where the script parsed event was triggered if available.\n    stack_trace: typing.Optional[runtime.StackTrace]\n    #: If the scriptLanguage is WebAssembly, the code section offset in the module.\n    code_offset: typing.Optional[int]\n    #: The language of the script.\n    script_language: typing.Optional[ScriptLanguage]\n    #: If the scriptLanguage is WebASsembly, the source of debug symbols for the module.\n    debug_symbols: typing.Optional[DebugSymbols]\n    #: The name the embedder supplied for this script.\n    embedder_name: typing.Optional[str]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScriptParsed:\n        return cls(\n            script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n            url=str(json[\"url\"]),\n            start_line=int(json[\"startLine\"]),\n            start_column=int(json[\"startColumn\"]),\n            end_line=int(json[\"endLine\"]),\n            end_column=int(json[\"endColumn\"]),\n            execution_context_id=runtime.ExecutionContextId.from_json(\n                json[\"executionContextId\"]\n            ),\n            hash_=str(json[\"hash\"]),\n            execution_context_aux_data=(\n                dict(json[\"executionContextAuxData\"])\n                if json.get(\"executionContextAuxData\", None) is not None\n                else None\n            ),\n            is_live_edit=(\n                bool(json[\"isLiveEdit\"])\n                if json.get(\"isLiveEdit\", None) is not None\n                else None\n            ),\n            source_map_url=(\n                str(json[\"sourceMapURL\"])\n                if json.get(\"sourceMapURL\", None) is not None\n                else None\n            ),\n            has_source_url=(\n                bool(json[\"hasSourceURL\"])\n                if json.get(\"hasSourceURL\", None) is not None\n                else None\n            ),\n            is_module=(\n                bool(json[\"isModule\"])\n                if json.get(\"isModule\", None) is not None\n                else None\n            ),\n            length=(\n                int(json[\"length\"]) if json.get(\"length\", None) is not None else None\n            ),\n            stack_trace=(\n                runtime.StackTrace.from_json(json[\"stackTrace\"])\n                if json.get(\"stackTrace\", None) is not None\n                else None\n            ),\n            code_offset=(\n                int(json[\"codeOffset\"])\n                if json.get(\"codeOffset\", None) is not None\n                else None\n            ),\n            script_language=(\n                ScriptLanguage.from_json(json[\"scriptLanguage\"])\n                if json.get(\"scriptLanguage\", None) is not None\n                else None\n            ),\n            debug_symbols=(\n                DebugSymbols.from_json(json[\"debugSymbols\"])\n                if json.get(\"debugSymbols\", None) is not None\n                else None\n            ),\n            embedder_name=(\n                str(json[\"embedderName\"])\n                if json.get(\"embedderName\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.code_offset","title":"<code>code_offset: typing.Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.debug_symbols","title":"<code>debug_symbols: typing.Optional[DebugSymbols]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.embedder_name","title":"<code>embedder_name: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.end_column","title":"<code>end_column: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.end_line","title":"<code>end_line: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.execution_context_aux_data","title":"<code>execution_context_aux_data: typing.Optional[dict]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.execution_context_id","title":"<code>execution_context_id: runtime.ExecutionContextId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.has_source_url","title":"<code>has_source_url: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.hash_","title":"<code>hash_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.is_live_edit","title":"<code>is_live_edit: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.is_module","title":"<code>is_module: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.length","title":"<code>length: typing.Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.script_id","title":"<code>script_id: runtime.ScriptId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.script_language","title":"<code>script_language: typing.Optional[ScriptLanguage]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.source_map_url","title":"<code>source_map_url: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.stack_trace","title":"<code>stack_trace: typing.Optional[runtime.StackTrace]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.start_column","title":"<code>start_column: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.start_line","title":"<code>start_line: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.__init__","title":"<code>__init__(script_id, url, start_line, start_column, end_line, end_column, execution_context_id, hash_, execution_context_aux_data, is_live_edit, source_map_url, has_source_url, is_module, length, stack_trace, code_offset, script_language, debug_symbols, embedder_name)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptParsed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScriptParsed:\n    return cls(\n        script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n        url=str(json[\"url\"]),\n        start_line=int(json[\"startLine\"]),\n        start_column=int(json[\"startColumn\"]),\n        end_line=int(json[\"endLine\"]),\n        end_column=int(json[\"endColumn\"]),\n        execution_context_id=runtime.ExecutionContextId.from_json(\n            json[\"executionContextId\"]\n        ),\n        hash_=str(json[\"hash\"]),\n        execution_context_aux_data=(\n            dict(json[\"executionContextAuxData\"])\n            if json.get(\"executionContextAuxData\", None) is not None\n            else None\n        ),\n        is_live_edit=(\n            bool(json[\"isLiveEdit\"])\n            if json.get(\"isLiveEdit\", None) is not None\n            else None\n        ),\n        source_map_url=(\n            str(json[\"sourceMapURL\"])\n            if json.get(\"sourceMapURL\", None) is not None\n            else None\n        ),\n        has_source_url=(\n            bool(json[\"hasSourceURL\"])\n            if json.get(\"hasSourceURL\", None) is not None\n            else None\n        ),\n        is_module=(\n            bool(json[\"isModule\"])\n            if json.get(\"isModule\", None) is not None\n            else None\n        ),\n        length=(\n            int(json[\"length\"]) if json.get(\"length\", None) is not None else None\n        ),\n        stack_trace=(\n            runtime.StackTrace.from_json(json[\"stackTrace\"])\n            if json.get(\"stackTrace\", None) is not None\n            else None\n        ),\n        code_offset=(\n            int(json[\"codeOffset\"])\n            if json.get(\"codeOffset\", None) is not None\n            else None\n        ),\n        script_language=(\n            ScriptLanguage.from_json(json[\"scriptLanguage\"])\n            if json.get(\"scriptLanguage\", None) is not None\n            else None\n        ),\n        debug_symbols=(\n            DebugSymbols.from_json(json[\"debugSymbols\"])\n            if json.get(\"debugSymbols\", None) is not None\n            else None\n        ),\n        embedder_name=(\n            str(json[\"embedderName\"])\n            if json.get(\"embedderName\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptPosition","title":"<code>ScriptPosition</code>  <code>dataclass</code>","text":"<p>Location in the source code.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@dataclass\nclass ScriptPosition:\n    \"\"\"\n    Location in the source code.\n    \"\"\"\n\n    line_number: int\n\n    column_number: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"lineNumber\"] = self.line_number\n        json[\"columnNumber\"] = self.column_number\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScriptPosition:\n        return cls(\n            line_number=int(json[\"lineNumber\"]),\n            column_number=int(json[\"columnNumber\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptPosition.column_number","title":"<code>column_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptPosition.line_number","title":"<code>line_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptPosition.__init__","title":"<code>__init__(line_number, column_number)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptPosition.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScriptPosition:\n    return cls(\n        line_number=int(json[\"lineNumber\"]),\n        column_number=int(json[\"columnNumber\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.ScriptPosition.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"lineNumber\"] = self.line_number\n    json[\"columnNumber\"] = self.column_number\n    return json\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.SearchMatch","title":"<code>SearchMatch</code>  <code>dataclass</code>","text":"<p>Search match for resource.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@dataclass\nclass SearchMatch:\n    \"\"\"\n    Search match for resource.\n    \"\"\"\n\n    #: Line number in resource content.\n    line_number: float\n\n    #: Line with match content.\n    line_content: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"lineNumber\"] = self.line_number\n        json[\"lineContent\"] = self.line_content\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SearchMatch:\n        return cls(\n            line_number=float(json[\"lineNumber\"]),\n            line_content=str(json[\"lineContent\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.SearchMatch.line_content","title":"<code>line_content: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.SearchMatch.line_number","title":"<code>line_number: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.SearchMatch.__init__","title":"<code>__init__(line_number, line_content)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.SearchMatch.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SearchMatch:\n    return cls(\n        line_number=float(json[\"lineNumber\"]),\n        line_content=str(json[\"lineContent\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.SearchMatch.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"lineNumber\"] = self.line_number\n    json[\"lineContent\"] = self.line_content\n    return json\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.WasmDisassemblyChunk","title":"<code>WasmDisassemblyChunk</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@dataclass\nclass WasmDisassemblyChunk:\n    #: The next chunk of disassembled lines.\n    lines: typing.List[str]\n\n    #: The bytecode offsets describing the start of each line.\n    bytecode_offsets: typing.List[int]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"lines\"] = [i for i in self.lines]\n        json[\"bytecodeOffsets\"] = [i for i in self.bytecode_offsets]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WasmDisassemblyChunk:\n        return cls(\n            lines=[str(i) for i in json[\"lines\"]],\n            bytecode_offsets=[int(i) for i in json[\"bytecodeOffsets\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.WasmDisassemblyChunk.bytecode_offsets","title":"<code>bytecode_offsets: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.WasmDisassemblyChunk.lines","title":"<code>lines: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.WasmDisassemblyChunk.__init__","title":"<code>__init__(lines, bytecode_offsets)</code>","text":""},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.WasmDisassemblyChunk.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WasmDisassemblyChunk:\n    return cls(\n        lines=[str(i) for i in json[\"lines\"]],\n        bytecode_offsets=[int(i) for i in json[\"bytecodeOffsets\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.WasmDisassemblyChunk.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"lines\"] = [i for i in self.lines]\n    json[\"bytecodeOffsets\"] = [i for i in self.bytecode_offsets]\n    return json\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.continue_to_location","title":"<code>continue_to_location(location, target_call_frames=None)</code>","text":"<p>Continues execution until specific location is reached.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Location</code> <p>Location to continue to.</p> required <code>target_call_frames</code> <code>Optional[str]</code> <p>(Optional)</p> <code>None</code> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def continue_to_location(\n    location: Location, target_call_frames: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Continues execution until specific location is reached.\n\n    :param location: Location to continue to.\n    :param target_call_frames: *(Optional)*\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"location\"] = location.to_json()\n    if target_call_frames is not None:\n        params[\"targetCallFrames\"] = target_call_frames\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.continueToLocation\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.disable","title":"<code>disable()</code>","text":"<p>Disables debugger for given page.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables debugger for given page.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.disassemble_wasm_module","title":"<code>disassemble_wasm_module(script_id)</code>","text":"<p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>script_id</code> <code>ScriptId</code> <p>Id of the script to disassemble</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[Optional[str], int, List[int], WasmDisassemblyChunk]]</code> <p>A tuple with the following items:  0. streamId - (Optional) For large modules, return a stream from which additional chunks of disassembly can be read successively. 1. totalNumberOfLines - The total number of lines in the disassembly text. 2. functionBodyOffsets - The offsets of all function bodies, in the format [start1, end1, start2, end2, ...] where all ends are exclusive. 3. chunk - The first chunk of disassembly.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def disassemble_wasm_module(\n    script_id: runtime.ScriptId,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[typing.Optional[str], int, typing.List[int], WasmDisassemblyChunk],\n]:\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :param script_id: Id of the script to disassemble\n    :returns: A tuple with the following items:\n\n        0. **streamId** - *(Optional)* For large modules, return a stream from which additional chunks of disassembly can be read successively.\n        1. **totalNumberOfLines** - The total number of lines in the disassembly text.\n        2. **functionBodyOffsets** - The offsets of all function bodies, in the format [start1, end1, start2, end2, ...] where all ends are exclusive.\n        3. **chunk** - The first chunk of disassembly.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scriptId\"] = script_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.disassembleWasmModule\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        str(json[\"streamId\"]) if json.get(\"streamId\", None) is not None else None,\n        int(json[\"totalNumberOfLines\"]),\n        [int(i) for i in json[\"functionBodyOffsets\"]],\n        WasmDisassemblyChunk.from_json(json[\"chunk\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.enable","title":"<code>enable(max_scripts_cache_size=None)</code>","text":"<p>Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.</p> <p>Parameters:</p> Name Type Description Default <code>max_scripts_cache_size</code> <code>Optional[float]</code> <p>(EXPERIMENTAL) (Optional) The maximum size in bytes of collected scripts (not referenced by other heap objects) the debugger can hold. Puts no limit if parameter is omitted.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, UniqueDebuggerId]</code> <p>Unique identifier of the debugger.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def enable(\n    max_scripts_cache_size: typing.Optional[float] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.UniqueDebuggerId]:\n    \"\"\"\n    Enables debugger for the given page. Clients should not assume that the debugging has been\n    enabled until the result for this command is received.\n\n    :param max_scripts_cache_size: **(EXPERIMENTAL)** *(Optional)* The maximum size in bytes of collected scripts (not referenced by other heap objects) the debugger can hold. Puts no limit if parameter is omitted.\n    :returns: Unique identifier of the debugger.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if max_scripts_cache_size is not None:\n        params[\"maxScriptsCacheSize\"] = max_scripts_cache_size\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.enable\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return runtime.UniqueDebuggerId.from_json(json[\"debuggerId\"])\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.evaluate_on_call_frame","title":"<code>evaluate_on_call_frame(call_frame_id, expression, object_group=None, include_command_line_api=None, silent=None, return_by_value=None, generate_preview=None, throw_on_side_effect=None, timeout=None)</code>","text":"<p>Evaluates expression on a given call frame.</p> <p>Parameters:</p> Name Type Description Default <code>call_frame_id</code> <code>CallFrameId</code> <p>Call frame identifier to evaluate on.</p> required <code>expression</code> <code>str</code> <p>Expression to evaluate.</p> required <code>object_group</code> <code>Optional[str]</code> <p>(Optional) String object group name to put result into (allows rapid releasing resulting object handles using ```releaseObjectGroup````).</p> <code>None</code> <code>include_command_line_api</code> <code>Optional[bool]</code> <p>(Optional) Specifies whether command line API should be available to the evaluated expression, defaults to false.</p> <code>None</code> <code>silent</code> <code>Optional[bool]</code> <p>(Optional) In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>`setPauseOnException</code> state.</p> <code>None</code> <code>return_by_value</code> <code>Optional[bool]</code> <p>(Optional) Whether the result is expected to be a JSON object that should be sent by value.</p> <code>None</code> <code>generate_preview</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether preview should be generated for the result.</p> <code>None</code> <code>throw_on_side_effect</code> <code>Optional[bool]</code> <p>(Optional) Whether to throw an exception if side effect cannot be ruled out during evaluation.</p> <code>None</code> <code>timeout</code> <code>Optional[TimeDelta]</code> <p>(EXPERIMENTAL) (Optional) Terminate execution after timing out (number of milliseconds).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[RemoteObject, Optional[ExceptionDetails]]]</code> <p>A tuple with the following items:  0. result - Object wrapper for the evaluation result. 1. exceptionDetails - (Optional) Exception details.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def evaluate_on_call_frame(\n    call_frame_id: CallFrameId,\n    expression: str,\n    object_group: typing.Optional[str] = None,\n    include_command_line_api: typing.Optional[bool] = None,\n    silent: typing.Optional[bool] = None,\n    return_by_value: typing.Optional[bool] = None,\n    generate_preview: typing.Optional[bool] = None,\n    throw_on_side_effect: typing.Optional[bool] = None,\n    timeout: typing.Optional[runtime.TimeDelta] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[runtime.RemoteObject, typing.Optional[runtime.ExceptionDetails]],\n]:\n    \"\"\"\n    Evaluates expression on a given call frame.\n\n    :param call_frame_id: Call frame identifier to evaluate on.\n    :param expression: Expression to evaluate.\n    :param object_group: *(Optional)* String object group name to put result into (allows rapid releasing resulting object handles using ```releaseObjectGroup````).\n    :param include_command_line_api: *(Optional)* Specifies whether command line API should be available to the evaluated expression, defaults to false.\n    :param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ````setPauseOnException``` state.\n    :param return_by_value: *(Optional)* Whether the result is expected to be a JSON object that should be sent by value.\n    :param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the result.\n    :param throw_on_side_effect: *(Optional)* Whether to throw an exception if side effect cannot be ruled out during evaluation.\n    :param timeout: **(EXPERIMENTAL)** *(Optional)* Terminate execution after timing out (number of milliseconds).\n    :returns: A tuple with the following items:\n\n        0. **result** - Object wrapper for the evaluation result.\n        1. **exceptionDetails** - *(Optional)* Exception details.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"callFrameId\"] = call_frame_id.to_json()\n    params[\"expression\"] = expression\n    if object_group is not None:\n        params[\"objectGroup\"] = object_group\n    if include_command_line_api is not None:\n        params[\"includeCommandLineAPI\"] = include_command_line_api\n    if silent is not None:\n        params[\"silent\"] = silent\n    if return_by_value is not None:\n        params[\"returnByValue\"] = return_by_value\n    if generate_preview is not None:\n        params[\"generatePreview\"] = generate_preview\n    if throw_on_side_effect is not None:\n        params[\"throwOnSideEffect\"] = throw_on_side_effect\n    if timeout is not None:\n        params[\"timeout\"] = timeout.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.evaluateOnCallFrame\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        runtime.RemoteObject.from_json(json[\"result\"]),\n        (\n            runtime.ExceptionDetails.from_json(json[\"exceptionDetails\"])\n            if json.get(\"exceptionDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.get_possible_breakpoints","title":"<code>get_possible_breakpoints(start, end=None, restrict_to_function=None)</code>","text":"<p>Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>Location</code> <p>Start of range to search possible breakpoint locations in.</p> required <code>end</code> <code>Optional[Location]</code> <p>(Optional) End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.</p> <code>None</code> <code>restrict_to_function</code> <code>Optional[bool]</code> <p>(Optional) Only consider locations which are in the same (non-nested) function as start.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[BreakLocation]]</code> <p>List of the possible breakpoint locations.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def get_possible_breakpoints(\n    start: Location,\n    end: typing.Optional[Location] = None,\n    restrict_to_function: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[BreakLocation]]:\n    \"\"\"\n    Returns possible locations for breakpoint. scriptId in start and end range locations should be\n    the same.\n\n    :param start: Start of range to search possible breakpoint locations in.\n    :param end: *(Optional)* End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.\n    :param restrict_to_function: *(Optional)* Only consider locations which are in the same (non-nested) function as start.\n    :returns: List of the possible breakpoint locations.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"start\"] = start.to_json()\n    if end is not None:\n        params[\"end\"] = end.to_json()\n    if restrict_to_function is not None:\n        params[\"restrictToFunction\"] = restrict_to_function\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.getPossibleBreakpoints\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [BreakLocation.from_json(i) for i in json[\"locations\"]]\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.get_script_source","title":"<code>get_script_source(script_id)</code>","text":"<p>Returns source for the script with given id.</p> <p>Parameters:</p> Name Type Description Default <code>script_id</code> <code>ScriptId</code> <p>Id of the script to get source for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[str, Optional[str]]]</code> <p>A tuple with the following items:  0. scriptSource - Script source (empty in case of Wasm bytecode). 1. bytecode - (Optional) Wasm bytecode. (Encoded as a base64 string when passed over JSON)</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def get_script_source(\n    script_id: runtime.ScriptId,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, typing.Optional[str]]\n]:\n    \"\"\"\n    Returns source for the script with given id.\n\n    :param script_id: Id of the script to get source for.\n    :returns: A tuple with the following items:\n\n        0. **scriptSource** - Script source (empty in case of Wasm bytecode).\n        1. **bytecode** - *(Optional)* Wasm bytecode. (Encoded as a base64 string when passed over JSON)\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scriptId\"] = script_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.getScriptSource\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        str(json[\"scriptSource\"]),\n        str(json[\"bytecode\"]) if json.get(\"bytecode\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.get_stack_trace","title":"<code>get_stack_trace(stack_trace_id)</code>","text":"<p>Returns stack trace with given <code>stackTraceId</code>.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>stack_trace_id</code> <code>StackTraceId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, StackTrace]</code> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def get_stack_trace(\n    stack_trace_id: runtime.StackTraceId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.StackTrace]:\n    \"\"\"\n    Returns stack trace with given ``stackTraceId``.\n\n    **EXPERIMENTAL**\n\n    :param stack_trace_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"stackTraceId\"] = stack_trace_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.getStackTrace\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return runtime.StackTrace.from_json(json[\"stackTrace\"])\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.get_wasm_bytecode","title":"<code>get_wasm_bytecode(script_id)</code>","text":"<p>This command is deprecated. Use getScriptSource instead.</p> <p>.. deprecated:: 1.3</p> <p>Parameters:</p> Name Type Description Default <code>script_id</code> <code>ScriptId</code> <p>Id of the Wasm script to get source for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>Script source. (Encoded as a base64 string when passed over JSON)</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef get_wasm_bytecode(\n    script_id: runtime.ScriptId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    This command is deprecated. Use getScriptSource instead.\n\n    .. deprecated:: 1.3\n\n    :param script_id: Id of the Wasm script to get source for.\n    :returns: Script source. (Encoded as a base64 string when passed over JSON)\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scriptId\"] = script_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.getWasmBytecode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"bytecode\"])\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.next_wasm_disassembly_chunk","title":"<code>next_wasm_disassembly_chunk(stream_id)</code>","text":"<p>Disassemble the next chunk of lines for the module corresponding to the stream. If disassembly is complete, this API will invalidate the streamId and return an empty chunk. Any subsequent calls for the now invalid stream will return errors.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>stream_id</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, WasmDisassemblyChunk]</code> <p>The next chunk of disassembly.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def next_wasm_disassembly_chunk(\n    stream_id: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, WasmDisassemblyChunk]:\n    \"\"\"\n    Disassemble the next chunk of lines for the module corresponding to the\n    stream. If disassembly is complete, this API will invalidate the streamId\n    and return an empty chunk. Any subsequent calls for the now invalid stream\n    will return errors.\n\n    **EXPERIMENTAL**\n\n    :param stream_id:\n    :returns: The next chunk of disassembly.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"streamId\"] = stream_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.nextWasmDisassemblyChunk\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return WasmDisassemblyChunk.from_json(json[\"chunk\"])\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.pause","title":"<code>pause()</code>","text":"<p>Stops on the next JavaScript statement.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def pause() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Stops on the next JavaScript statement.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.pause\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.pause_on_async_call","title":"<code>pause_on_async_call(parent_stack_trace_id)</code>","text":"<p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>parent_stack_trace_id</code> <code>StackTraceId</code> <p>Debugger will pause when async call with given stack trace is started.</p> required Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef pause_on_async_call(\n    parent_stack_trace_id: runtime.StackTraceId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param parent_stack_trace_id: Debugger will pause when async call with given stack trace is started.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"parentStackTraceId\"] = parent_stack_trace_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.pauseOnAsyncCall\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.remove_breakpoint","title":"<code>remove_breakpoint(breakpoint_id)</code>","text":"<p>Removes JavaScript breakpoint.</p> <p>Parameters:</p> Name Type Description Default <code>breakpoint_id</code> <code>BreakpointId</code> required Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def remove_breakpoint(\n    breakpoint_id: BreakpointId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes JavaScript breakpoint.\n\n    :param breakpoint_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"breakpointId\"] = breakpoint_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.removeBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.restart_frame","title":"<code>restart_frame(call_frame_id, mode=None)</code>","text":"<p>Restarts particular call frame from the beginning. The old, deprecated behavior of <code>restartFrame</code> is to stay paused and allow further CDP commands after a restart was scheduled. This can cause problems with restarting, so we now continue execution immediatly after it has been scheduled until we reach the beginning of the restarted frame.</p> <p>To stay back-wards compatible, <code>restartFrame</code> now expects a <code>mode</code> parameter to be present. If the <code>mode</code> parameter is missing, <code>restartFrame</code> errors out.</p> <p>The various return values are deprecated and <code>callFrames</code> is always empty. Use the call frames from the <code>Debugger#paused</code> events instead, that fires once V8 pauses at the beginning of the restarted function.</p> <p>Parameters:</p> Name Type Description Default <code>call_frame_id</code> <code>CallFrameId</code> <p>Call frame identifier to evaluate on.</p> required <code>mode</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) The <code>mode```` parameter must be present and set to 'StepInto', otherwise ````restartFrame</code> will error out.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[List[CallFrame], Optional[StackTrace], Optional[StackTraceId]]]</code> <p>A tuple with the following items:  0. callFrames - New stack trace. 1. asyncStackTrace - (Optional) Async stack trace, if any. 2. asyncStackTraceId - (Optional) Async stack trace, if any.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def restart_frame(\n    call_frame_id: CallFrameId, mode: typing.Optional[str] = None\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[\n        typing.List[CallFrame],\n        typing.Optional[runtime.StackTrace],\n        typing.Optional[runtime.StackTraceId],\n    ],\n]:\n    \"\"\"\n    Restarts particular call frame from the beginning. The old, deprecated\n    behavior of ``restartFrame`` is to stay paused and allow further CDP commands\n    after a restart was scheduled. This can cause problems with restarting, so\n    we now continue execution immediatly after it has been scheduled until we\n    reach the beginning of the restarted frame.\n\n    To stay back-wards compatible, ``restartFrame`` now expects a ``mode``\n    parameter to be present. If the ``mode`` parameter is missing, ``restartFrame``\n    errors out.\n\n    The various return values are deprecated and ``callFrames`` is always empty.\n    Use the call frames from the ``Debugger#paused`` events instead, that fires\n    once V8 pauses at the beginning of the restarted function.\n\n    :param call_frame_id: Call frame identifier to evaluate on.\n    :param mode: **(EXPERIMENTAL)** *(Optional)* The ```mode```` parameter must be present and set to 'StepInto', otherwise ````restartFrame``` will error out.\n    :returns: A tuple with the following items:\n\n        0. **callFrames** - New stack trace.\n        1. **asyncStackTrace** - *(Optional)* Async stack trace, if any.\n        2. **asyncStackTraceId** - *(Optional)* Async stack trace, if any.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"callFrameId\"] = call_frame_id.to_json()\n    if mode is not None:\n        params[\"mode\"] = mode\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.restartFrame\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        [CallFrame.from_json(i) for i in json[\"callFrames\"]],\n        (\n            runtime.StackTrace.from_json(json[\"asyncStackTrace\"])\n            if json.get(\"asyncStackTrace\", None) is not None\n            else None\n        ),\n        (\n            runtime.StackTraceId.from_json(json[\"asyncStackTraceId\"])\n            if json.get(\"asyncStackTraceId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.resume","title":"<code>resume(terminate_on_resume=None)</code>","text":"<p>Resumes JavaScript execution.</p> <p>Parameters:</p> Name Type Description Default <code>terminate_on_resume</code> <code>Optional[bool]</code> <p>(Optional) Set to true to terminate execution upon resuming execution. In contrast to Runtime.terminateExecution, this will allows to execute further JavaScript (i.e. via evaluation) until execution of the paused code is actually resumed, at which point termination is triggered. If execution is currently not paused, this parameter has no effect.</p> <code>None</code> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def resume(\n    terminate_on_resume: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Resumes JavaScript execution.\n\n    :param terminate_on_resume: *(Optional)* Set to true to terminate execution upon resuming execution. In contrast to Runtime.terminateExecution, this will allows to execute further JavaScript (i.e. via evaluation) until execution of the paused code is actually resumed, at which point termination is triggered. If execution is currently not paused, this parameter has no effect.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if terminate_on_resume is not None:\n        params[\"terminateOnResume\"] = terminate_on_resume\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.resume\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.search_in_content","title":"<code>search_in_content(script_id, query, case_sensitive=None, is_regex=None)</code>","text":"<p>Searches for given string in script content.</p> <p>Parameters:</p> Name Type Description Default <code>script_id</code> <code>ScriptId</code> <p>Id of the script to search in.</p> required <code>query</code> <code>str</code> <p>String to search for.</p> required <code>case_sensitive</code> <code>Optional[bool]</code> <p>(Optional) If true, search is case sensitive.</p> <code>None</code> <code>is_regex</code> <code>Optional[bool]</code> <p>(Optional) If true, treats string parameter as regex.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[SearchMatch]]</code> <p>List of search matches.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def search_in_content(\n    script_id: runtime.ScriptId,\n    query: str,\n    case_sensitive: typing.Optional[bool] = None,\n    is_regex: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[SearchMatch]]:\n    \"\"\"\n    Searches for given string in script content.\n\n    :param script_id: Id of the script to search in.\n    :param query: String to search for.\n    :param case_sensitive: *(Optional)* If true, search is case sensitive.\n    :param is_regex: *(Optional)* If true, treats string parameter as regex.\n    :returns: List of search matches.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scriptId\"] = script_id.to_json()\n    params[\"query\"] = query\n    if case_sensitive is not None:\n        params[\"caseSensitive\"] = case_sensitive\n    if is_regex is not None:\n        params[\"isRegex\"] = is_regex\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.searchInContent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [SearchMatch.from_json(i) for i in json[\"result\"]]\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_async_call_stack_depth","title":"<code>set_async_call_stack_depth(max_depth)</code>","text":"<p>Enables or disables async call stacks tracking.</p> <p>Parameters:</p> Name Type Description Default <code>max_depth</code> <code>int</code> <p>Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default).</p> required Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_async_call_stack_depth(\n    max_depth: int,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables or disables async call stacks tracking.\n\n    :param max_depth: Maximum depth of async call stacks. Setting to ```0``` will effectively disable collecting async call stacks (default).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"maxDepth\"] = max_depth\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setAsyncCallStackDepth\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_blackbox_patterns","title":"<code>set_blackbox_patterns(patterns)</code>","text":"<p>Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>patterns</code> <code>List[str]</code> <p>Array of regexps that will be used to check script url for blackbox state.</p> required Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_blackbox_patterns(\n    patterns: typing.List[str],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in\n    scripts with url matching one of the patterns. VM will try to leave blackboxed script by\n    performing 'step in' several times, finally resorting to 'step out' if unsuccessful.\n\n    **EXPERIMENTAL**\n\n    :param patterns: Array of regexps that will be used to check script url for blackbox state.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"patterns\"] = [i for i in patterns]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setBlackboxPatterns\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_blackboxed_ranges","title":"<code>set_blackboxed_ranges(script_id, positions)</code>","text":"<p>Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>script_id</code> <code>ScriptId</code> <p>Id of the script.</p> required <code>positions</code> <code>List[ScriptPosition]</code> required Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_blackboxed_ranges(\n    script_id: runtime.ScriptId, positions: typing.List[ScriptPosition]\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted\n    scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.\n    Positions array contains positions where blackbox state is changed. First interval isn't\n    blackboxed. Array should be sorted.\n\n    **EXPERIMENTAL**\n\n    :param script_id: Id of the script.\n    :param positions:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scriptId\"] = script_id.to_json()\n    params[\"positions\"] = [i.to_json() for i in positions]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setBlackboxedRanges\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_breakpoint","title":"<code>set_breakpoint(location, condition=None)</code>","text":"<p>Sets JavaScript breakpoint at a given location.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Location</code> <p>Location to set breakpoint in.</p> required <code>condition</code> <code>Optional[str]</code> <p>(Optional) Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[BreakpointId, Location]]</code> <p>A tuple with the following items:  0. breakpointId - Id of the created breakpoint for further reference. 1. actualLocation - Location this breakpoint resolved into.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_breakpoint(\n    location: Location, condition: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[BreakpointId, Location]]:\n    \"\"\"\n    Sets JavaScript breakpoint at a given location.\n\n    :param location: Location to set breakpoint in.\n    :param condition: *(Optional)* Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\n    :returns: A tuple with the following items:\n\n        0. **breakpointId** - Id of the created breakpoint for further reference.\n        1. **actualLocation** - Location this breakpoint resolved into.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"location\"] = location.to_json()\n    if condition is not None:\n        params[\"condition\"] = condition\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        BreakpointId.from_json(json[\"breakpointId\"]),\n        Location.from_json(json[\"actualLocation\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_breakpoint_by_url","title":"<code>set_breakpoint_by_url(line_number, url=None, url_regex=None, script_hash=None, column_number=None, condition=None)</code>","text":"<p>Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.</p> <p>Parameters:</p> Name Type Description Default <code>line_number</code> <code>int</code> <p>Line number to set breakpoint at.</p> required <code>url</code> <code>Optional[str]</code> <p>(Optional) URL of the resources to set breakpoint on.</p> <code>None</code> <code>url_regex</code> <code>Optional[str]</code> <p>(Optional) Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url```` or ````urlRegex</code> must be specified.</p> <code>None</code> <code>script_hash</code> <code>Optional[str]</code> <p>(Optional) Script hash of the resources to set breakpoint on.</p> <code>None</code> <code>column_number</code> <code>Optional[int]</code> <p>(Optional) Offset in the line to set breakpoint at.</p> <code>None</code> <code>condition</code> <code>Optional[str]</code> <p>(Optional) Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[BreakpointId, List[Location]]]</code> <p>A tuple with the following items:  0. breakpointId - Id of the created breakpoint for further reference. 1. locations - List of the locations this breakpoint resolved into upon addition.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_breakpoint_by_url(\n    line_number: int,\n    url: typing.Optional[str] = None,\n    url_regex: typing.Optional[str] = None,\n    script_hash: typing.Optional[str] = None,\n    column_number: typing.Optional[int] = None,\n    condition: typing.Optional[str] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[BreakpointId, typing.List[Location]]\n]:\n    \"\"\"\n    Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this\n    command is issued, all existing parsed scripts will have breakpoints resolved and returned in\n    ``locations`` property. Further matching script parsing will result in subsequent\n    ``breakpointResolved`` events issued. This logical breakpoint will survive page reloads.\n\n    :param line_number: Line number to set breakpoint at.\n    :param url: *(Optional)* URL of the resources to set breakpoint on.\n    :param url_regex: *(Optional)* Regex pattern for the URLs of the resources to set breakpoints on. Either ```url```` or ````urlRegex``` must be specified.\n    :param script_hash: *(Optional)* Script hash of the resources to set breakpoint on.\n    :param column_number: *(Optional)* Offset in the line to set breakpoint at.\n    :param condition: *(Optional)* Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\n    :returns: A tuple with the following items:\n\n        0. **breakpointId** - Id of the created breakpoint for further reference.\n        1. **locations** - List of the locations this breakpoint resolved into upon addition.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"lineNumber\"] = line_number\n    if url is not None:\n        params[\"url\"] = url\n    if url_regex is not None:\n        params[\"urlRegex\"] = url_regex\n    if script_hash is not None:\n        params[\"scriptHash\"] = script_hash\n    if column_number is not None:\n        params[\"columnNumber\"] = column_number\n    if condition is not None:\n        params[\"condition\"] = condition\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setBreakpointByUrl\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        BreakpointId.from_json(json[\"breakpointId\"]),\n        [Location.from_json(i) for i in json[\"locations\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_breakpoint_on_function_call","title":"<code>set_breakpoint_on_function_call(object_id, condition=None)</code>","text":"<p>Sets JavaScript breakpoint before each call to the given function. If another function was created from the same source as a given one, calling it will also trigger the breakpoint.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>object_id</code> <code>RemoteObjectId</code> <p>Function object id.</p> required <code>condition</code> <code>Optional[str]</code> <p>(Optional) Expression to use as a breakpoint condition. When specified, debugger will stop on the breakpoint if this expression evaluates to true.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, BreakpointId]</code> <p>Id of the created breakpoint for further reference.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_breakpoint_on_function_call(\n    object_id: runtime.RemoteObjectId, condition: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, BreakpointId]:\n    \"\"\"\n    Sets JavaScript breakpoint before each call to the given function.\n    If another function was created from the same source as a given one,\n    calling it will also trigger the breakpoint.\n\n    **EXPERIMENTAL**\n\n    :param object_id: Function object id.\n    :param condition: *(Optional)* Expression to use as a breakpoint condition. When specified, debugger will stop on the breakpoint if this expression evaluates to true.\n    :returns: Id of the created breakpoint for further reference.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"objectId\"] = object_id.to_json()\n    if condition is not None:\n        params[\"condition\"] = condition\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setBreakpointOnFunctionCall\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return BreakpointId.from_json(json[\"breakpointId\"])\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_breakpoints_active","title":"<code>set_breakpoints_active(active)</code>","text":"<p>Activates / deactivates all breakpoints on the page.</p> <p>Parameters:</p> Name Type Description Default <code>active</code> <code>bool</code> <p>New value for breakpoints active state.</p> required Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_breakpoints_active(\n    active: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Activates / deactivates all breakpoints on the page.\n\n    :param active: New value for breakpoints active state.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"active\"] = active\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setBreakpointsActive\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_instrumentation_breakpoint","title":"<code>set_instrumentation_breakpoint(instrumentation)</code>","text":"<p>Sets instrumentation breakpoint.</p> <p>Parameters:</p> Name Type Description Default <code>instrumentation</code> <code>str</code> <p>Instrumentation name.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, BreakpointId]</code> <p>Id of the created breakpoint for further reference.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_instrumentation_breakpoint(\n    instrumentation: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, BreakpointId]:\n    \"\"\"\n    Sets instrumentation breakpoint.\n\n    :param instrumentation: Instrumentation name.\n    :returns: Id of the created breakpoint for further reference.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"instrumentation\"] = instrumentation\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setInstrumentationBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return BreakpointId.from_json(json[\"breakpointId\"])\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_pause_on_exceptions","title":"<code>set_pause_on_exceptions(state)</code>","text":"<p>Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions, or caught exceptions, no exceptions. Initial pause on exceptions state is <code>none</code>.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>str</code> <p>Pause on exceptions mode.</p> required Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_pause_on_exceptions(\n    state: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions,\n    or caught exceptions, no exceptions. Initial pause on exceptions state is ``none``.\n\n    :param state: Pause on exceptions mode.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"state\"] = state\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setPauseOnExceptions\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_return_value","title":"<code>set_return_value(new_value)</code>","text":"<p>Changes return value in top frame. Available only at return break position.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>new_value</code> <code>CallArgument</code> <p>New return value.</p> required Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_return_value(\n    new_value: runtime.CallArgument,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Changes return value in top frame. Available only at return break position.\n\n    **EXPERIMENTAL**\n\n    :param new_value: New return value.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"newValue\"] = new_value.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setReturnValue\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_script_source","title":"<code>set_script_source(script_id, script_source, dry_run=None, allow_top_frame_editing=None)</code>","text":"<p>Edits JavaScript source live.</p> <p>In general, functions that are currently on the stack can not be edited with a single exception: If the edited function is the top-most stack frame and that is the only activation of that function on the stack. In this case the live edit will be successful and a <code>Debugger.restartFrame</code> for the top-most function is automatically triggered.</p> <p>Parameters:</p> Name Type Description Default <code>script_id</code> <code>ScriptId</code> <p>Id of the script to edit.</p> required <code>script_source</code> <code>str</code> <p>New content of the script.</p> required <code>dry_run</code> <code>Optional[bool]</code> <p>(Optional) If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.</p> <code>None</code> <code>allow_top_frame_editing</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) If true, then ```scriptSource```` is allowed to change the function on top of the stack as long as the top-most stack frame is the only activation of that function.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[Optional[List[CallFrame]], Optional[bool], Optional[StackTrace], Optional[StackTraceId], str, Optional[ExceptionDetails]]]</code> <p>A tuple with the following items:  0. callFrames - (Optional) New stack trace in case editing has happened while VM was stopped. 1. stackChanged - (Optional) Whether current call stack  was modified after applying the changes. 2. asyncStackTrace - (Optional) Async stack trace, if any. 3. asyncStackTraceId - (Optional) Async stack trace, if any. 4. status - Whether the operation was successful or not. Only <code>Ok</code> denotes a successful live edit while the other enum variants denote why the live edit failed. 5. exceptionDetails - (Optional) Exception details if any. Only present when <code>status</code> is <code>` CompileError</code>.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_script_source(\n    script_id: runtime.ScriptId,\n    script_source: str,\n    dry_run: typing.Optional[bool] = None,\n    allow_top_frame_editing: typing.Optional[bool] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[\n        typing.Optional[typing.List[CallFrame]],\n        typing.Optional[bool],\n        typing.Optional[runtime.StackTrace],\n        typing.Optional[runtime.StackTraceId],\n        str,\n        typing.Optional[runtime.ExceptionDetails],\n    ],\n]:\n    \"\"\"\n    Edits JavaScript source live.\n\n    In general, functions that are currently on the stack can not be edited with\n    a single exception: If the edited function is the top-most stack frame and\n    that is the only activation of that function on the stack. In this case\n    the live edit will be successful and a ``Debugger.restartFrame`` for the\n    top-most function is automatically triggered.\n\n    :param script_id: Id of the script to edit.\n    :param script_source: New content of the script.\n    :param dry_run: *(Optional)* If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.\n    :param allow_top_frame_editing: **(EXPERIMENTAL)** *(Optional)* If true, then ```scriptSource```` is allowed to change the function on top of the stack as long as the top-most stack frame is the only activation of that function.\n    :returns: A tuple with the following items:\n\n        0. **callFrames** - *(Optional)* New stack trace in case editing has happened while VM was stopped.\n        1. **stackChanged** - *(Optional)* Whether current call stack  was modified after applying the changes.\n        2. **asyncStackTrace** - *(Optional)* Async stack trace, if any.\n        3. **asyncStackTraceId** - *(Optional)* Async stack trace, if any.\n        4. **status** - Whether the operation was successful or not. Only `` Ok`` denotes a successful live edit while the other enum variants denote why the live edit failed.\n        5. **exceptionDetails** - *(Optional)* Exception details if any. Only present when `` status`` is `` CompileError`.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scriptId\"] = script_id.to_json()\n    params[\"scriptSource\"] = script_source\n    if dry_run is not None:\n        params[\"dryRun\"] = dry_run\n    if allow_top_frame_editing is not None:\n        params[\"allowTopFrameEditing\"] = allow_top_frame_editing\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setScriptSource\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        (\n            [CallFrame.from_json(i) for i in json[\"callFrames\"]]\n            if json.get(\"callFrames\", None) is not None\n            else None\n        ),\n        (\n            bool(json[\"stackChanged\"])\n            if json.get(\"stackChanged\", None) is not None\n            else None\n        ),\n        (\n            runtime.StackTrace.from_json(json[\"asyncStackTrace\"])\n            if json.get(\"asyncStackTrace\", None) is not None\n            else None\n        ),\n        (\n            runtime.StackTraceId.from_json(json[\"asyncStackTraceId\"])\n            if json.get(\"asyncStackTraceId\", None) is not None\n            else None\n        ),\n        str(json[\"status\"]),\n        (\n            runtime.ExceptionDetails.from_json(json[\"exceptionDetails\"])\n            if json.get(\"exceptionDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_skip_all_pauses","title":"<code>set_skip_all_pauses(skip)</code>","text":"<p>Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).</p> <p>Parameters:</p> Name Type Description Default <code>skip</code> <code>bool</code> <p>New value for skip pauses state.</p> required Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_skip_all_pauses(skip: bool) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).\n\n    :param skip: New value for skip pauses state.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"skip\"] = skip\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setSkipAllPauses\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.set_variable_value","title":"<code>set_variable_value(scope_number, variable_name, new_value, call_frame_id)</code>","text":"<p>Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.</p> <p>Parameters:</p> Name Type Description Default <code>scope_number</code> <code>int</code> <p>0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.</p> required <code>variable_name</code> <code>str</code> <p>Variable name.</p> required <code>new_value</code> <code>CallArgument</code> <p>New variable value.</p> required <code>call_frame_id</code> <code>CallFrameId</code> <p>Id of callframe that holds variable.</p> required Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def set_variable_value(\n    scope_number: int,\n    variable_name: str,\n    new_value: runtime.CallArgument,\n    call_frame_id: CallFrameId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Changes value of variable in a callframe. Object-based scopes are not supported and must be\n    mutated manually.\n\n    :param scope_number: 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.\n    :param variable_name: Variable name.\n    :param new_value: New variable value.\n    :param call_frame_id: Id of callframe that holds variable.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scopeNumber\"] = scope_number\n    params[\"variableName\"] = variable_name\n    params[\"newValue\"] = new_value.to_json()\n    params[\"callFrameId\"] = call_frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.setVariableValue\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.step_into","title":"<code>step_into(break_on_async_call=None, skip_list=None)</code>","text":"<p>Steps into the function call.</p> <p>Parameters:</p> Name Type Description Default <code>break_on_async_call</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Debugger will pause on the execution of the first async task which was scheduled before next pause.</p> <code>None</code> <code>skip_list</code> <code>Optional[List[LocationRange]]</code> <p>(EXPERIMENTAL) (Optional) The skipList specifies location ranges that should be skipped on step into.</p> <code>None</code> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def step_into(\n    break_on_async_call: typing.Optional[bool] = None,\n    skip_list: typing.Optional[typing.List[LocationRange]] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Steps into the function call.\n\n    :param break_on_async_call: **(EXPERIMENTAL)** *(Optional)* Debugger will pause on the execution of the first async task which was scheduled before next pause.\n    :param skip_list: **(EXPERIMENTAL)** *(Optional)* The skipList specifies location ranges that should be skipped on step into.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if break_on_async_call is not None:\n        params[\"breakOnAsyncCall\"] = break_on_async_call\n    if skip_list is not None:\n        params[\"skipList\"] = [i.to_json() for i in skip_list]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.stepInto\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.step_out","title":"<code>step_out()</code>","text":"<p>Steps out of the function call.</p> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def step_out() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Steps out of the function call.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.stepOut\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/debugger/#zendriver.cdp.debugger.step_over","title":"<code>step_over(skip_list=None)</code>","text":"<p>Steps over the statement.</p> <p>Parameters:</p> Name Type Description Default <code>skip_list</code> <code>Optional[List[LocationRange]]</code> <p>(EXPERIMENTAL) (Optional) The skipList specifies location ranges that should be skipped on step over.</p> <code>None</code> Source code in <code>zendriver/cdp/debugger.py</code> <pre><code>def step_over(\n    skip_list: typing.Optional[typing.List[LocationRange]] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Steps over the statement.\n\n    :param skip_list: **(EXPERIMENTAL)** *(Optional)* The skipList specifies location ranges that should be skipped on step over.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if skip_list is not None:\n        params[\"skipList\"] = [i.to_json() for i in skip_list]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Debugger.stepOver\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/device_access/","title":"device_access","text":""},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.DeviceId","title":"<code>DeviceId</code>","text":"<p>               Bases: <code>str</code></p> <p>A device id.</p> Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>class DeviceId(str):\n    \"\"\"\n    A device id.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; DeviceId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"DeviceId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.DeviceId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>def __repr__(self):\n    return \"DeviceId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.DeviceId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; DeviceId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.DeviceId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.DeviceRequestPrompted","title":"<code>DeviceRequestPrompted</code>  <code>dataclass</code>","text":"<p>A device request opened a user prompt to select a device. Respond with the selectPrompt or cancelPrompt command.</p> Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>@event_class(\"DeviceAccess.deviceRequestPrompted\")\n@dataclass\nclass DeviceRequestPrompted:\n    \"\"\"\n    A device request opened a user prompt to select a device. Respond with the\n    selectPrompt or cancelPrompt command.\n    \"\"\"\n\n    id_: RequestId\n    devices: typing.List[PromptDevice]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DeviceRequestPrompted:\n        return cls(\n            id_=RequestId.from_json(json[\"id\"]),\n            devices=[PromptDevice.from_json(i) for i in json[\"devices\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.DeviceRequestPrompted.devices","title":"<code>devices: typing.List[PromptDevice]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.DeviceRequestPrompted.id_","title":"<code>id_: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.DeviceRequestPrompted.__init__","title":"<code>__init__(id_, devices)</code>","text":""},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.DeviceRequestPrompted.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DeviceRequestPrompted:\n    return cls(\n        id_=RequestId.from_json(json[\"id\"]),\n        devices=[PromptDevice.from_json(i) for i in json[\"devices\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.PromptDevice","title":"<code>PromptDevice</code>  <code>dataclass</code>","text":"<p>Device information displayed in a user prompt to select a device.</p> Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>@dataclass\nclass PromptDevice:\n    \"\"\"\n    Device information displayed in a user prompt to select a device.\n    \"\"\"\n\n    id_: DeviceId\n\n    #: Display name as it appears in a device request user prompt.\n    name: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"id\"] = self.id_.to_json()\n        json[\"name\"] = self.name\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PromptDevice:\n        return cls(\n            id_=DeviceId.from_json(json[\"id\"]),\n            name=str(json[\"name\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.PromptDevice.id_","title":"<code>id_: DeviceId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.PromptDevice.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.PromptDevice.__init__","title":"<code>__init__(id_, name)</code>","text":""},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.PromptDevice.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PromptDevice:\n    return cls(\n        id_=DeviceId.from_json(json[\"id\"]),\n        name=str(json[\"name\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.PromptDevice.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"id\"] = self.id_.to_json()\n    json[\"name\"] = self.name\n    return json\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.RequestId","title":"<code>RequestId</code>","text":"<p>               Bases: <code>str</code></p> <p>Device request id.</p> Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>class RequestId(str):\n    \"\"\"\n    Device request id.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; RequestId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"RequestId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.RequestId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>def __repr__(self):\n    return \"RequestId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.RequestId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; RequestId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.RequestId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.cancel_prompt","title":"<code>cancel_prompt(id_)</code>","text":"<p>Cancel a prompt in response to a DeviceAccess.deviceRequestPrompted event.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>RequestId</code> required Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>def cancel_prompt(id_: RequestId) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Cancel a prompt in response to a DeviceAccess.deviceRequestPrompted event.\n\n    :param id_:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"id\"] = id_.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DeviceAccess.cancelPrompt\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.disable","title":"<code>disable()</code>","text":"<p>Disable events in this domain.</p> Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disable events in this domain.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DeviceAccess.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.enable","title":"<code>enable()</code>","text":"<p>Enable events in this domain.</p> Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enable events in this domain.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DeviceAccess.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/device_access/#zendriver.cdp.device_access.select_prompt","title":"<code>select_prompt(id_, device_id)</code>","text":"<p>Select a device in response to a DeviceAccess.deviceRequestPrompted event.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>RequestId</code> required <code>device_id</code> <code>DeviceId</code> required Source code in <code>zendriver/cdp/device_access.py</code> <pre><code>def select_prompt(\n    id_: RequestId, device_id: DeviceId\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Select a device in response to a DeviceAccess.deviceRequestPrompted event.\n\n    :param id_:\n    :param device_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"id\"] = id_.to_json()\n    params[\"deviceId\"] = device_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DeviceAccess.selectPrompt\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/device_orientation/","title":"device_orientation","text":""},{"location":"reference/cdp/device_orientation/#zendriver.cdp.device_orientation.clear_device_orientation_override","title":"<code>clear_device_orientation_override()</code>","text":"<p>Clears the overridden Device Orientation.</p> Source code in <code>zendriver/cdp/device_orientation.py</code> <pre><code>def clear_device_orientation_override() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, None]\n):\n    \"\"\"\n    Clears the overridden Device Orientation.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DeviceOrientation.clearDeviceOrientationOverride\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/device_orientation/#zendriver.cdp.device_orientation.set_device_orientation_override","title":"<code>set_device_orientation_override(alpha, beta, gamma)</code>","text":"<p>Overrides the Device Orientation.</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>Mock alpha</p> required <code>beta</code> <code>float</code> <p>Mock beta</p> required <code>gamma</code> <code>float</code> <p>Mock gamma</p> required Source code in <code>zendriver/cdp/device_orientation.py</code> <pre><code>def set_device_orientation_override(\n    alpha: float, beta: float, gamma: float\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides the Device Orientation.\n\n    :param alpha: Mock alpha\n    :param beta: Mock beta\n    :param gamma: Mock gamma\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"alpha\"] = alpha\n    params[\"beta\"] = beta\n    params[\"gamma\"] = gamma\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DeviceOrientation.setDeviceOrientationOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/","title":"dom","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeModified","title":"<code>AttributeModified</code>  <code>dataclass</code>","text":"<p>Fired when <code>Element</code>'s attribute is modified.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.attributeModified\")\n@dataclass\nclass AttributeModified:\n    \"\"\"\n    Fired when ``Element``'s attribute is modified.\n    \"\"\"\n\n    #: Id of the node that has changed.\n    node_id: NodeId\n    #: Attribute name.\n    name: str\n    #: Attribute value.\n    value: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributeModified:\n        return cls(\n            node_id=NodeId.from_json(json[\"nodeId\"]),\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeModified.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeModified.node_id","title":"<code>node_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeModified.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeModified.__init__","title":"<code>__init__(node_id, name, value)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeModified.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributeModified:\n    return cls(\n        node_id=NodeId.from_json(json[\"nodeId\"]),\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeRemoved","title":"<code>AttributeRemoved</code>  <code>dataclass</code>","text":"<p>Fired when <code>Element</code>'s attribute is removed.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.attributeRemoved\")\n@dataclass\nclass AttributeRemoved:\n    \"\"\"\n    Fired when ``Element``'s attribute is removed.\n    \"\"\"\n\n    #: Id of the node that has changed.\n    node_id: NodeId\n    #: A ttribute name.\n    name: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributeRemoved:\n        return cls(node_id=NodeId.from_json(json[\"nodeId\"]), name=str(json[\"name\"]))\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeRemoved.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeRemoved.node_id","title":"<code>node_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeRemoved.__init__","title":"<code>__init__(node_id, name)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.AttributeRemoved.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributeRemoved:\n    return cls(node_id=NodeId.from_json(json[\"nodeId\"]), name=str(json[\"name\"]))\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNode","title":"<code>BackendNode</code>  <code>dataclass</code>","text":"<p>Backend node with a friendly name.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@dataclass\nclass BackendNode:\n    \"\"\"\n    Backend node with a friendly name.\n    \"\"\"\n\n    #: ``Node``'s nodeType.\n    node_type: int\n\n    #: ``Node``'s nodeName.\n    node_name: str\n\n    backend_node_id: BackendNodeId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"nodeType\"] = self.node_type\n        json[\"nodeName\"] = self.node_name\n        json[\"backendNodeId\"] = self.backend_node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BackendNode:\n        return cls(\n            node_type=int(json[\"nodeType\"]),\n            node_name=str(json[\"nodeName\"]),\n            backend_node_id=BackendNodeId.from_json(json[\"backendNodeId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNode.backend_node_id","title":"<code>backend_node_id: BackendNodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNode.node_name","title":"<code>node_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNode.node_type","title":"<code>node_type: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNode.__init__","title":"<code>__init__(node_type, node_name, backend_node_id)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BackendNode:\n    return cls(\n        node_type=int(json[\"nodeType\"]),\n        node_name=str(json[\"nodeName\"]),\n        backend_node_id=BackendNodeId.from_json(json[\"backendNodeId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"nodeType\"] = self.node_type\n    json[\"nodeName\"] = self.node_name\n    json[\"backendNodeId\"] = self.backend_node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNodeId","title":"<code>BackendNodeId</code>","text":"<p>               Bases: <code>int</code></p> <p>Unique DOM node identifier used to reference a node that may not have been pushed to the front-end.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>class BackendNodeId(int):\n    \"\"\"\n    Unique DOM node identifier used to reference a node that may not have been pushed to the\n    front-end.\n    \"\"\"\n\n    def to_json(self) -&gt; int:\n        return self\n\n    @classmethod\n    def from_json(cls, json: int) -&gt; BackendNodeId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"BackendNodeId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNodeId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def __repr__(self):\n    return \"BackendNodeId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNodeId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: int) -&gt; BackendNodeId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BackendNodeId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; int:\n    return self\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel","title":"<code>BoxModel</code>  <code>dataclass</code>","text":"<p>Box model.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@dataclass\nclass BoxModel:\n    \"\"\"\n    Box model.\n    \"\"\"\n\n    #: Content box\n    content: Quad\n\n    #: Padding box\n    padding: Quad\n\n    #: Border box\n    border: Quad\n\n    #: Margin box\n    margin: Quad\n\n    #: Node width\n    width: int\n\n    #: Node height\n    height: int\n\n    #: Shape outside coordinates\n    shape_outside: typing.Optional[ShapeOutsideInfo] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"content\"] = self.content.to_json()\n        json[\"padding\"] = self.padding.to_json()\n        json[\"border\"] = self.border.to_json()\n        json[\"margin\"] = self.margin.to_json()\n        json[\"width\"] = self.width\n        json[\"height\"] = self.height\n        if self.shape_outside is not None:\n            json[\"shapeOutside\"] = self.shape_outside.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BoxModel:\n        return cls(\n            content=Quad.from_json(json[\"content\"]),\n            padding=Quad.from_json(json[\"padding\"]),\n            border=Quad.from_json(json[\"border\"]),\n            margin=Quad.from_json(json[\"margin\"]),\n            width=int(json[\"width\"]),\n            height=int(json[\"height\"]),\n            shape_outside=(\n                ShapeOutsideInfo.from_json(json[\"shapeOutside\"])\n                if json.get(\"shapeOutside\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel.border","title":"<code>border: Quad</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel.content","title":"<code>content: Quad</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel.height","title":"<code>height: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel.margin","title":"<code>margin: Quad</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel.padding","title":"<code>padding: Quad</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel.shape_outside","title":"<code>shape_outside: typing.Optional[ShapeOutsideInfo] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel.width","title":"<code>width: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel.__init__","title":"<code>__init__(content, padding, border, margin, width, height, shape_outside=None)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BoxModel:\n    return cls(\n        content=Quad.from_json(json[\"content\"]),\n        padding=Quad.from_json(json[\"padding\"]),\n        border=Quad.from_json(json[\"border\"]),\n        margin=Quad.from_json(json[\"margin\"]),\n        width=int(json[\"width\"]),\n        height=int(json[\"height\"]),\n        shape_outside=(\n            ShapeOutsideInfo.from_json(json[\"shapeOutside\"])\n            if json.get(\"shapeOutside\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.BoxModel.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"content\"] = self.content.to_json()\n    json[\"padding\"] = self.padding.to_json()\n    json[\"border\"] = self.border.to_json()\n    json[\"margin\"] = self.margin.to_json()\n    json[\"width\"] = self.width\n    json[\"height\"] = self.height\n    if self.shape_outside is not None:\n        json[\"shapeOutside\"] = self.shape_outside.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CSSComputedStyleProperty","title":"<code>CSSComputedStyleProperty</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@dataclass\nclass CSSComputedStyleProperty:\n    #: Computed style property name.\n    name: str\n\n    #: Computed style property value.\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CSSComputedStyleProperty:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CSSComputedStyleProperty.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CSSComputedStyleProperty.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CSSComputedStyleProperty.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CSSComputedStyleProperty.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CSSComputedStyleProperty:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CSSComputedStyleProperty.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CharacterDataModified","title":"<code>CharacterDataModified</code>  <code>dataclass</code>","text":"<p>Mirrors <code>DOMCharacterDataModified</code> event.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.characterDataModified\")\n@dataclass\nclass CharacterDataModified:\n    \"\"\"\n    Mirrors ``DOMCharacterDataModified`` event.\n    \"\"\"\n\n    #: Id of the node that has changed.\n    node_id: NodeId\n    #: New text value.\n    character_data: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CharacterDataModified:\n        return cls(\n            node_id=NodeId.from_json(json[\"nodeId\"]),\n            character_data=str(json[\"characterData\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CharacterDataModified.character_data","title":"<code>character_data: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CharacterDataModified.node_id","title":"<code>node_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CharacterDataModified.__init__","title":"<code>__init__(node_id, character_data)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CharacterDataModified.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CharacterDataModified:\n    return cls(\n        node_id=NodeId.from_json(json[\"nodeId\"]),\n        character_data=str(json[\"characterData\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeCountUpdated","title":"<code>ChildNodeCountUpdated</code>  <code>dataclass</code>","text":"<p>Fired when <code>Container</code>'s child node count has changed.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.childNodeCountUpdated\")\n@dataclass\nclass ChildNodeCountUpdated:\n    \"\"\"\n    Fired when ``Container``'s child node count has changed.\n    \"\"\"\n\n    #: Id of the node that has changed.\n    node_id: NodeId\n    #: New node count.\n    child_node_count: int\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ChildNodeCountUpdated:\n        return cls(\n            node_id=NodeId.from_json(json[\"nodeId\"]),\n            child_node_count=int(json[\"childNodeCount\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeCountUpdated.child_node_count","title":"<code>child_node_count: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeCountUpdated.node_id","title":"<code>node_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeCountUpdated.__init__","title":"<code>__init__(node_id, child_node_count)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeCountUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ChildNodeCountUpdated:\n    return cls(\n        node_id=NodeId.from_json(json[\"nodeId\"]),\n        child_node_count=int(json[\"childNodeCount\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeInserted","title":"<code>ChildNodeInserted</code>  <code>dataclass</code>","text":"<p>Mirrors <code>DOMNodeInserted</code> event.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.childNodeInserted\")\n@dataclass\nclass ChildNodeInserted:\n    \"\"\"\n    Mirrors ``DOMNodeInserted`` event.\n    \"\"\"\n\n    #: Id of the node that has changed.\n    parent_node_id: NodeId\n    #: Id of the previous sibling.\n    previous_node_id: NodeId\n    #: Inserted node data.\n    node: Node\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ChildNodeInserted:\n        return cls(\n            parent_node_id=NodeId.from_json(json[\"parentNodeId\"]),\n            previous_node_id=NodeId.from_json(json[\"previousNodeId\"]),\n            node=Node.from_json(json[\"node\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeInserted.node","title":"<code>node: Node</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeInserted.parent_node_id","title":"<code>parent_node_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeInserted.previous_node_id","title":"<code>previous_node_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeInserted.__init__","title":"<code>__init__(parent_node_id, previous_node_id, node)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeInserted.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ChildNodeInserted:\n    return cls(\n        parent_node_id=NodeId.from_json(json[\"parentNodeId\"]),\n        previous_node_id=NodeId.from_json(json[\"previousNodeId\"]),\n        node=Node.from_json(json[\"node\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeRemoved","title":"<code>ChildNodeRemoved</code>  <code>dataclass</code>","text":"<p>Mirrors <code>DOMNodeRemoved</code> event.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.childNodeRemoved\")\n@dataclass\nclass ChildNodeRemoved:\n    \"\"\"\n    Mirrors ``DOMNodeRemoved`` event.\n    \"\"\"\n\n    #: Parent id.\n    parent_node_id: NodeId\n    #: Id of the node that has been removed.\n    node_id: NodeId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ChildNodeRemoved:\n        return cls(\n            parent_node_id=NodeId.from_json(json[\"parentNodeId\"]),\n            node_id=NodeId.from_json(json[\"nodeId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeRemoved.node_id","title":"<code>node_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeRemoved.parent_node_id","title":"<code>parent_node_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeRemoved.__init__","title":"<code>__init__(parent_node_id, node_id)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ChildNodeRemoved.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ChildNodeRemoved:\n    return cls(\n        parent_node_id=NodeId.from_json(json[\"parentNodeId\"]),\n        node_id=NodeId.from_json(json[\"nodeId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CompatibilityMode","title":"<code>CompatibilityMode</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Document compatibility mode.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>class CompatibilityMode(enum.Enum):\n    \"\"\"\n    Document compatibility mode.\n    \"\"\"\n\n    QUIRKS_MODE = \"QuirksMode\"\n    LIMITED_QUIRKS_MODE = \"LimitedQuirksMode\"\n    NO_QUIRKS_MODE = \"NoQuirksMode\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CompatibilityMode:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CompatibilityMode.LIMITED_QUIRKS_MODE","title":"<code>LIMITED_QUIRKS_MODE = 'LimitedQuirksMode'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CompatibilityMode.NO_QUIRKS_MODE","title":"<code>NO_QUIRKS_MODE = 'NoQuirksMode'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CompatibilityMode.QUIRKS_MODE","title":"<code>QUIRKS_MODE = 'QuirksMode'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CompatibilityMode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CompatibilityMode:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.CompatibilityMode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.DistributedNodesUpdated","title":"<code>DistributedNodesUpdated</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Called when distribution is changed.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.distributedNodesUpdated\")\n@dataclass\nclass DistributedNodesUpdated:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Called when distribution is changed.\n    \"\"\"\n\n    #: Insertion point where distributed nodes were updated.\n    insertion_point_id: NodeId\n    #: Distributed nodes for given insertion point.\n    distributed_nodes: typing.List[BackendNode]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DistributedNodesUpdated:\n        return cls(\n            insertion_point_id=NodeId.from_json(json[\"insertionPointId\"]),\n            distributed_nodes=[\n                BackendNode.from_json(i) for i in json[\"distributedNodes\"]\n            ],\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.DistributedNodesUpdated.distributed_nodes","title":"<code>distributed_nodes: typing.List[BackendNode]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.DistributedNodesUpdated.insertion_point_id","title":"<code>insertion_point_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.DistributedNodesUpdated.__init__","title":"<code>__init__(insertion_point_id, distributed_nodes)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.DistributedNodesUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DistributedNodesUpdated:\n    return cls(\n        insertion_point_id=NodeId.from_json(json[\"insertionPointId\"]),\n        distributed_nodes=[\n            BackendNode.from_json(i) for i in json[\"distributedNodes\"]\n        ],\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.DocumentUpdated","title":"<code>DocumentUpdated</code>  <code>dataclass</code>","text":"<p>Fired when <code>Document</code> has been totally updated. Node ids are no longer valid.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.documentUpdated\")\n@dataclass\nclass DocumentUpdated:\n    \"\"\"\n    Fired when ``Document`` has been totally updated. Node ids are no longer valid.\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DocumentUpdated:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.DocumentUpdated.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.DocumentUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DocumentUpdated:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.InlineStyleInvalidated","title":"<code>InlineStyleInvalidated</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when <code>Element</code>'s inline style is modified via a CSS property modification.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.inlineStyleInvalidated\")\n@dataclass\nclass InlineStyleInvalidated:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when ``Element``'s inline style is modified via a CSS property modification.\n    \"\"\"\n\n    #: Ids of the nodes for which the inline styles have been invalidated.\n    node_ids: typing.List[NodeId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InlineStyleInvalidated:\n        return cls(node_ids=[NodeId.from_json(i) for i in json[\"nodeIds\"]])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.InlineStyleInvalidated.node_ids","title":"<code>node_ids: typing.List[NodeId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.InlineStyleInvalidated.__init__","title":"<code>__init__(node_ids)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.InlineStyleInvalidated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InlineStyleInvalidated:\n    return cls(node_ids=[NodeId.from_json(i) for i in json[\"nodeIds\"]])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.LogicalAxes","title":"<code>LogicalAxes</code>","text":"<p>               Bases: <code>Enum</code></p> <p>ContainerSelector logical axes</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>class LogicalAxes(enum.Enum):\n    \"\"\"\n    ContainerSelector logical axes\n    \"\"\"\n\n    INLINE = \"Inline\"\n    BLOCK = \"Block\"\n    BOTH = \"Both\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; LogicalAxes:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.LogicalAxes.BLOCK","title":"<code>BLOCK = 'Block'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.LogicalAxes.BOTH","title":"<code>BOTH = 'Both'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.LogicalAxes.INLINE","title":"<code>INLINE = 'Inline'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.LogicalAxes.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; LogicalAxes:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.LogicalAxes.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node","title":"<code>Node</code>  <code>dataclass</code>","text":"<p>DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@dataclass\nclass Node:\n    \"\"\"\n    DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.\n    DOMNode is a base node mirror type.\n    \"\"\"\n\n    #: Node identifier that is passed into the rest of the DOM messages as the ``nodeId``. Backend\n    #: will only push node with given ``id`` once. It is aware of all requested nodes and will only\n    #: fire DOM events for nodes known to the client.\n    node_id: NodeId\n\n    #: The BackendNodeId for this node.\n    backend_node_id: BackendNodeId\n\n    #: ``Node``'s nodeType.\n    node_type: int\n\n    #: ``Node``'s nodeName.\n    node_name: str\n\n    #: ``Node``'s localName.\n    local_name: str\n\n    #: ``Node``'s nodeValue.\n    node_value: str\n\n    #: The id of the parent node if any.\n    parent_id: typing.Optional[NodeId] = None\n\n    #: Child count for ``Container`` nodes.\n    child_node_count: typing.Optional[int] = None\n\n    #: Child nodes of this node when requested with children.\n    children: typing.Optional[typing.List[Node]] = None\n\n    #: Attributes of the ``Element`` node in the form of flat array ``[name1, value1, name2, value2]``.\n    attributes: typing.Optional[typing.List[str]] = None\n\n    #: Document URL that ``Document`` or ``FrameOwner`` node points to.\n    document_url: typing.Optional[str] = None\n\n    #: Base URL that ``Document`` or ``FrameOwner`` node uses for URL completion.\n    base_url: typing.Optional[str] = None\n\n    #: ``DocumentType``'s publicId.\n    public_id: typing.Optional[str] = None\n\n    #: ``DocumentType``'s systemId.\n    system_id: typing.Optional[str] = None\n\n    #: ``DocumentType``'s internalSubset.\n    internal_subset: typing.Optional[str] = None\n\n    #: ``Document``'s XML version in case of XML documents.\n    xml_version: typing.Optional[str] = None\n\n    #: ``Attr``'s name.\n    name: typing.Optional[str] = None\n\n    #: ``Attr``'s value.\n    value: typing.Optional[str] = None\n\n    #: Pseudo element type for this node.\n    pseudo_type: typing.Optional[PseudoType] = None\n\n    #: Pseudo element identifier for this node. Only present if there is a\n    #: valid pseudoType.\n    pseudo_identifier: typing.Optional[str] = None\n\n    #: Shadow root type.\n    shadow_root_type: typing.Optional[ShadowRootType] = None\n\n    #: Frame ID for frame owner elements.\n    frame_id: typing.Optional[page.FrameId] = None\n\n    #: Content document for frame owner elements.\n    content_document: typing.Optional[Node] = None\n\n    #: Shadow root list for given element host.\n    shadow_roots: typing.Optional[typing.List[Node]] = None\n\n    #: Content document fragment for template elements.\n    template_content: typing.Optional[Node] = None\n\n    #: Pseudo elements associated with this node.\n    pseudo_elements: typing.Optional[typing.List[Node]] = None\n\n    #: Deprecated, as the HTML Imports API has been removed (crbug.com/937746).\n    #: This property used to return the imported document for the HTMLImport links.\n    #: The property is always undefined now.\n    imported_document: typing.Optional[Node] = None\n\n    #: Distributed nodes for given insertion point.\n    distributed_nodes: typing.Optional[typing.List[BackendNode]] = None\n\n    #: Whether the node is SVG.\n    is_svg: typing.Optional[bool] = None\n\n    compatibility_mode: typing.Optional[CompatibilityMode] = None\n\n    assigned_slot: typing.Optional[BackendNode] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"nodeId\"] = self.node_id.to_json()\n        json[\"backendNodeId\"] = self.backend_node_id.to_json()\n        json[\"nodeType\"] = self.node_type\n        json[\"nodeName\"] = self.node_name\n        json[\"localName\"] = self.local_name\n        json[\"nodeValue\"] = self.node_value\n        if self.parent_id is not None:\n            json[\"parentId\"] = self.parent_id.to_json()\n        if self.child_node_count is not None:\n            json[\"childNodeCount\"] = self.child_node_count\n        if self.children is not None:\n            json[\"children\"] = [i.to_json() for i in self.children]\n        if self.attributes is not None:\n            json[\"attributes\"] = [i for i in self.attributes]\n        if self.document_url is not None:\n            json[\"documentURL\"] = self.document_url\n        if self.base_url is not None:\n            json[\"baseURL\"] = self.base_url\n        if self.public_id is not None:\n            json[\"publicId\"] = self.public_id\n        if self.system_id is not None:\n            json[\"systemId\"] = self.system_id\n        if self.internal_subset is not None:\n            json[\"internalSubset\"] = self.internal_subset\n        if self.xml_version is not None:\n            json[\"xmlVersion\"] = self.xml_version\n        if self.name is not None:\n            json[\"name\"] = self.name\n        if self.value is not None:\n            json[\"value\"] = self.value\n        if self.pseudo_type is not None:\n            json[\"pseudoType\"] = self.pseudo_type.to_json()\n        if self.pseudo_identifier is not None:\n            json[\"pseudoIdentifier\"] = self.pseudo_identifier\n        if self.shadow_root_type is not None:\n            json[\"shadowRootType\"] = self.shadow_root_type.to_json()\n        if self.frame_id is not None:\n            json[\"frameId\"] = self.frame_id.to_json()\n        if self.content_document is not None:\n            json[\"contentDocument\"] = self.content_document.to_json()\n        if self.shadow_roots is not None:\n            json[\"shadowRoots\"] = [i.to_json() for i in self.shadow_roots]\n        if self.template_content is not None:\n            json[\"templateContent\"] = self.template_content.to_json()\n        if self.pseudo_elements is not None:\n            json[\"pseudoElements\"] = [i.to_json() for i in self.pseudo_elements]\n        if self.imported_document is not None:\n            json[\"importedDocument\"] = self.imported_document.to_json()\n        if self.distributed_nodes is not None:\n            json[\"distributedNodes\"] = [i.to_json() for i in self.distributed_nodes]\n        if self.is_svg is not None:\n            json[\"isSVG\"] = self.is_svg\n        if self.compatibility_mode is not None:\n            json[\"compatibilityMode\"] = self.compatibility_mode.to_json()\n        if self.assigned_slot is not None:\n            json[\"assignedSlot\"] = self.assigned_slot.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Node:\n        return cls(\n            node_id=NodeId.from_json(json[\"nodeId\"]),\n            backend_node_id=BackendNodeId.from_json(json[\"backendNodeId\"]),\n            node_type=int(json[\"nodeType\"]),\n            node_name=str(json[\"nodeName\"]),\n            local_name=str(json[\"localName\"]),\n            node_value=str(json[\"nodeValue\"]),\n            parent_id=(\n                NodeId.from_json(json[\"parentId\"])\n                if json.get(\"parentId\", None) is not None\n                else None\n            ),\n            child_node_count=(\n                int(json[\"childNodeCount\"])\n                if json.get(\"childNodeCount\", None) is not None\n                else None\n            ),\n            children=(\n                [Node.from_json(i) for i in json[\"children\"]]\n                if json.get(\"children\", None) is not None\n                else None\n            ),\n            attributes=(\n                [str(i) for i in json[\"attributes\"]]\n                if json.get(\"attributes\", None) is not None\n                else None\n            ),\n            document_url=(\n                str(json[\"documentURL\"])\n                if json.get(\"documentURL\", None) is not None\n                else None\n            ),\n            base_url=(\n                str(json[\"baseURL\"]) if json.get(\"baseURL\", None) is not None else None\n            ),\n            public_id=(\n                str(json[\"publicId\"])\n                if json.get(\"publicId\", None) is not None\n                else None\n            ),\n            system_id=(\n                str(json[\"systemId\"])\n                if json.get(\"systemId\", None) is not None\n                else None\n            ),\n            internal_subset=(\n                str(json[\"internalSubset\"])\n                if json.get(\"internalSubset\", None) is not None\n                else None\n            ),\n            xml_version=(\n                str(json[\"xmlVersion\"])\n                if json.get(\"xmlVersion\", None) is not None\n                else None\n            ),\n            name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n            value=str(json[\"value\"]) if json.get(\"value\", None) is not None else None,\n            pseudo_type=(\n                PseudoType.from_json(json[\"pseudoType\"])\n                if json.get(\"pseudoType\", None) is not None\n                else None\n            ),\n            pseudo_identifier=(\n                str(json[\"pseudoIdentifier\"])\n                if json.get(\"pseudoIdentifier\", None) is not None\n                else None\n            ),\n            shadow_root_type=(\n                ShadowRootType.from_json(json[\"shadowRootType\"])\n                if json.get(\"shadowRootType\", None) is not None\n                else None\n            ),\n            frame_id=(\n                page.FrameId.from_json(json[\"frameId\"])\n                if json.get(\"frameId\", None) is not None\n                else None\n            ),\n            content_document=(\n                Node.from_json(json[\"contentDocument\"])\n                if json.get(\"contentDocument\", None) is not None\n                else None\n            ),\n            shadow_roots=(\n                [Node.from_json(i) for i in json[\"shadowRoots\"]]\n                if json.get(\"shadowRoots\", None) is not None\n                else None\n            ),\n            template_content=(\n                Node.from_json(json[\"templateContent\"])\n                if json.get(\"templateContent\", None) is not None\n                else None\n            ),\n            pseudo_elements=(\n                [Node.from_json(i) for i in json[\"pseudoElements\"]]\n                if json.get(\"pseudoElements\", None) is not None\n                else None\n            ),\n            imported_document=(\n                Node.from_json(json[\"importedDocument\"])\n                if json.get(\"importedDocument\", None) is not None\n                else None\n            ),\n            distributed_nodes=(\n                [BackendNode.from_json(i) for i in json[\"distributedNodes\"]]\n                if json.get(\"distributedNodes\", None) is not None\n                else None\n            ),\n            is_svg=bool(json[\"isSVG\"]) if json.get(\"isSVG\", None) is not None else None,\n            compatibility_mode=(\n                CompatibilityMode.from_json(json[\"compatibilityMode\"])\n                if json.get(\"compatibilityMode\", None) is not None\n                else None\n            ),\n            assigned_slot=(\n                BackendNode.from_json(json[\"assignedSlot\"])\n                if json.get(\"assignedSlot\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.assigned_slot","title":"<code>assigned_slot: typing.Optional[BackendNode] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.attributes","title":"<code>attributes: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.backend_node_id","title":"<code>backend_node_id: BackendNodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.base_url","title":"<code>base_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.child_node_count","title":"<code>child_node_count: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.children","title":"<code>children: typing.Optional[typing.List[Node]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.compatibility_mode","title":"<code>compatibility_mode: typing.Optional[CompatibilityMode] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.content_document","title":"<code>content_document: typing.Optional[Node] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.distributed_nodes","title":"<code>distributed_nodes: typing.Optional[typing.List[BackendNode]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.document_url","title":"<code>document_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.frame_id","title":"<code>frame_id: typing.Optional[page.FrameId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.imported_document","title":"<code>imported_document: typing.Optional[Node] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.internal_subset","title":"<code>internal_subset: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.is_svg","title":"<code>is_svg: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.local_name","title":"<code>local_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.name","title":"<code>name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.node_id","title":"<code>node_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.node_name","title":"<code>node_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.node_type","title":"<code>node_type: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.node_value","title":"<code>node_value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.parent_id","title":"<code>parent_id: typing.Optional[NodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.pseudo_elements","title":"<code>pseudo_elements: typing.Optional[typing.List[Node]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.pseudo_identifier","title":"<code>pseudo_identifier: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.pseudo_type","title":"<code>pseudo_type: typing.Optional[PseudoType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.public_id","title":"<code>public_id: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.shadow_root_type","title":"<code>shadow_root_type: typing.Optional[ShadowRootType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.shadow_roots","title":"<code>shadow_roots: typing.Optional[typing.List[Node]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.system_id","title":"<code>system_id: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.template_content","title":"<code>template_content: typing.Optional[Node] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.value","title":"<code>value: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.xml_version","title":"<code>xml_version: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.__init__","title":"<code>__init__(node_id, backend_node_id, node_type, node_name, local_name, node_value, parent_id=None, child_node_count=None, children=None, attributes=None, document_url=None, base_url=None, public_id=None, system_id=None, internal_subset=None, xml_version=None, name=None, value=None, pseudo_type=None, pseudo_identifier=None, shadow_root_type=None, frame_id=None, content_document=None, shadow_roots=None, template_content=None, pseudo_elements=None, imported_document=None, distributed_nodes=None, is_svg=None, compatibility_mode=None, assigned_slot=None)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Node:\n    return cls(\n        node_id=NodeId.from_json(json[\"nodeId\"]),\n        backend_node_id=BackendNodeId.from_json(json[\"backendNodeId\"]),\n        node_type=int(json[\"nodeType\"]),\n        node_name=str(json[\"nodeName\"]),\n        local_name=str(json[\"localName\"]),\n        node_value=str(json[\"nodeValue\"]),\n        parent_id=(\n            NodeId.from_json(json[\"parentId\"])\n            if json.get(\"parentId\", None) is not None\n            else None\n        ),\n        child_node_count=(\n            int(json[\"childNodeCount\"])\n            if json.get(\"childNodeCount\", None) is not None\n            else None\n        ),\n        children=(\n            [Node.from_json(i) for i in json[\"children\"]]\n            if json.get(\"children\", None) is not None\n            else None\n        ),\n        attributes=(\n            [str(i) for i in json[\"attributes\"]]\n            if json.get(\"attributes\", None) is not None\n            else None\n        ),\n        document_url=(\n            str(json[\"documentURL\"])\n            if json.get(\"documentURL\", None) is not None\n            else None\n        ),\n        base_url=(\n            str(json[\"baseURL\"]) if json.get(\"baseURL\", None) is not None else None\n        ),\n        public_id=(\n            str(json[\"publicId\"])\n            if json.get(\"publicId\", None) is not None\n            else None\n        ),\n        system_id=(\n            str(json[\"systemId\"])\n            if json.get(\"systemId\", None) is not None\n            else None\n        ),\n        internal_subset=(\n            str(json[\"internalSubset\"])\n            if json.get(\"internalSubset\", None) is not None\n            else None\n        ),\n        xml_version=(\n            str(json[\"xmlVersion\"])\n            if json.get(\"xmlVersion\", None) is not None\n            else None\n        ),\n        name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n        value=str(json[\"value\"]) if json.get(\"value\", None) is not None else None,\n        pseudo_type=(\n            PseudoType.from_json(json[\"pseudoType\"])\n            if json.get(\"pseudoType\", None) is not None\n            else None\n        ),\n        pseudo_identifier=(\n            str(json[\"pseudoIdentifier\"])\n            if json.get(\"pseudoIdentifier\", None) is not None\n            else None\n        ),\n        shadow_root_type=(\n            ShadowRootType.from_json(json[\"shadowRootType\"])\n            if json.get(\"shadowRootType\", None) is not None\n            else None\n        ),\n        frame_id=(\n            page.FrameId.from_json(json[\"frameId\"])\n            if json.get(\"frameId\", None) is not None\n            else None\n        ),\n        content_document=(\n            Node.from_json(json[\"contentDocument\"])\n            if json.get(\"contentDocument\", None) is not None\n            else None\n        ),\n        shadow_roots=(\n            [Node.from_json(i) for i in json[\"shadowRoots\"]]\n            if json.get(\"shadowRoots\", None) is not None\n            else None\n        ),\n        template_content=(\n            Node.from_json(json[\"templateContent\"])\n            if json.get(\"templateContent\", None) is not None\n            else None\n        ),\n        pseudo_elements=(\n            [Node.from_json(i) for i in json[\"pseudoElements\"]]\n            if json.get(\"pseudoElements\", None) is not None\n            else None\n        ),\n        imported_document=(\n            Node.from_json(json[\"importedDocument\"])\n            if json.get(\"importedDocument\", None) is not None\n            else None\n        ),\n        distributed_nodes=(\n            [BackendNode.from_json(i) for i in json[\"distributedNodes\"]]\n            if json.get(\"distributedNodes\", None) is not None\n            else None\n        ),\n        is_svg=bool(json[\"isSVG\"]) if json.get(\"isSVG\", None) is not None else None,\n        compatibility_mode=(\n            CompatibilityMode.from_json(json[\"compatibilityMode\"])\n            if json.get(\"compatibilityMode\", None) is not None\n            else None\n        ),\n        assigned_slot=(\n            BackendNode.from_json(json[\"assignedSlot\"])\n            if json.get(\"assignedSlot\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Node.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"nodeId\"] = self.node_id.to_json()\n    json[\"backendNodeId\"] = self.backend_node_id.to_json()\n    json[\"nodeType\"] = self.node_type\n    json[\"nodeName\"] = self.node_name\n    json[\"localName\"] = self.local_name\n    json[\"nodeValue\"] = self.node_value\n    if self.parent_id is not None:\n        json[\"parentId\"] = self.parent_id.to_json()\n    if self.child_node_count is not None:\n        json[\"childNodeCount\"] = self.child_node_count\n    if self.children is not None:\n        json[\"children\"] = [i.to_json() for i in self.children]\n    if self.attributes is not None:\n        json[\"attributes\"] = [i for i in self.attributes]\n    if self.document_url is not None:\n        json[\"documentURL\"] = self.document_url\n    if self.base_url is not None:\n        json[\"baseURL\"] = self.base_url\n    if self.public_id is not None:\n        json[\"publicId\"] = self.public_id\n    if self.system_id is not None:\n        json[\"systemId\"] = self.system_id\n    if self.internal_subset is not None:\n        json[\"internalSubset\"] = self.internal_subset\n    if self.xml_version is not None:\n        json[\"xmlVersion\"] = self.xml_version\n    if self.name is not None:\n        json[\"name\"] = self.name\n    if self.value is not None:\n        json[\"value\"] = self.value\n    if self.pseudo_type is not None:\n        json[\"pseudoType\"] = self.pseudo_type.to_json()\n    if self.pseudo_identifier is not None:\n        json[\"pseudoIdentifier\"] = self.pseudo_identifier\n    if self.shadow_root_type is not None:\n        json[\"shadowRootType\"] = self.shadow_root_type.to_json()\n    if self.frame_id is not None:\n        json[\"frameId\"] = self.frame_id.to_json()\n    if self.content_document is not None:\n        json[\"contentDocument\"] = self.content_document.to_json()\n    if self.shadow_roots is not None:\n        json[\"shadowRoots\"] = [i.to_json() for i in self.shadow_roots]\n    if self.template_content is not None:\n        json[\"templateContent\"] = self.template_content.to_json()\n    if self.pseudo_elements is not None:\n        json[\"pseudoElements\"] = [i.to_json() for i in self.pseudo_elements]\n    if self.imported_document is not None:\n        json[\"importedDocument\"] = self.imported_document.to_json()\n    if self.distributed_nodes is not None:\n        json[\"distributedNodes\"] = [i.to_json() for i in self.distributed_nodes]\n    if self.is_svg is not None:\n        json[\"isSVG\"] = self.is_svg\n    if self.compatibility_mode is not None:\n        json[\"compatibilityMode\"] = self.compatibility_mode.to_json()\n    if self.assigned_slot is not None:\n        json[\"assignedSlot\"] = self.assigned_slot.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.NodeId","title":"<code>NodeId</code>","text":"<p>               Bases: <code>int</code></p> <p>Unique DOM node identifier.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>class NodeId(int):\n    \"\"\"\n    Unique DOM node identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; int:\n        return self\n\n    @classmethod\n    def from_json(cls, json: int) -&gt; NodeId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"NodeId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.NodeId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def __repr__(self):\n    return \"NodeId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.NodeId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: int) -&gt; NodeId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.NodeId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; int:\n    return self\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PhysicalAxes","title":"<code>PhysicalAxes</code>","text":"<p>               Bases: <code>Enum</code></p> <p>ContainerSelector physical axes</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>class PhysicalAxes(enum.Enum):\n    \"\"\"\n    ContainerSelector physical axes\n    \"\"\"\n\n    HORIZONTAL = \"Horizontal\"\n    VERTICAL = \"Vertical\"\n    BOTH = \"Both\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PhysicalAxes:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PhysicalAxes.BOTH","title":"<code>BOTH = 'Both'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PhysicalAxes.HORIZONTAL","title":"<code>HORIZONTAL = 'Horizontal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PhysicalAxes.VERTICAL","title":"<code>VERTICAL = 'Vertical'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PhysicalAxes.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PhysicalAxes:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PhysicalAxes.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoElementAdded","title":"<code>PseudoElementAdded</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Called when a pseudo element is added to an element.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.pseudoElementAdded\")\n@dataclass\nclass PseudoElementAdded:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Called when a pseudo element is added to an element.\n    \"\"\"\n\n    #: Pseudo element's parent element id.\n    parent_id: NodeId\n    #: The added pseudo element.\n    pseudo_element: Node\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PseudoElementAdded:\n        return cls(\n            parent_id=NodeId.from_json(json[\"parentId\"]),\n            pseudo_element=Node.from_json(json[\"pseudoElement\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoElementAdded.parent_id","title":"<code>parent_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoElementAdded.pseudo_element","title":"<code>pseudo_element: Node</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoElementAdded.__init__","title":"<code>__init__(parent_id, pseudo_element)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoElementAdded.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PseudoElementAdded:\n    return cls(\n        parent_id=NodeId.from_json(json[\"parentId\"]),\n        pseudo_element=Node.from_json(json[\"pseudoElement\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoElementRemoved","title":"<code>PseudoElementRemoved</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Called when a pseudo element is removed from an element.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.pseudoElementRemoved\")\n@dataclass\nclass PseudoElementRemoved:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Called when a pseudo element is removed from an element.\n    \"\"\"\n\n    #: Pseudo element's parent element id.\n    parent_id: NodeId\n    #: The removed pseudo element id.\n    pseudo_element_id: NodeId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PseudoElementRemoved:\n        return cls(\n            parent_id=NodeId.from_json(json[\"parentId\"]),\n            pseudo_element_id=NodeId.from_json(json[\"pseudoElementId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoElementRemoved.parent_id","title":"<code>parent_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoElementRemoved.pseudo_element_id","title":"<code>pseudo_element_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoElementRemoved.__init__","title":"<code>__init__(parent_id, pseudo_element_id)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoElementRemoved.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PseudoElementRemoved:\n    return cls(\n        parent_id=NodeId.from_json(json[\"parentId\"]),\n        pseudo_element_id=NodeId.from_json(json[\"pseudoElementId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType","title":"<code>PseudoType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Pseudo element type.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>class PseudoType(enum.Enum):\n    \"\"\"\n    Pseudo element type.\n    \"\"\"\n\n    FIRST_LINE = \"first-line\"\n    FIRST_LETTER = \"first-letter\"\n    BEFORE = \"before\"\n    AFTER = \"after\"\n    MARKER = \"marker\"\n    BACKDROP = \"backdrop\"\n    SELECTION = \"selection\"\n    SEARCH_TEXT = \"search-text\"\n    TARGET_TEXT = \"target-text\"\n    SPELLING_ERROR = \"spelling-error\"\n    GRAMMAR_ERROR = \"grammar-error\"\n    HIGHLIGHT = \"highlight\"\n    FIRST_LINE_INHERITED = \"first-line-inherited\"\n    SCROLL_MARKER = \"scroll-marker\"\n    SCROLL_MARKER_GROUP = \"scroll-marker-group\"\n    SCROLLBAR = \"scrollbar\"\n    SCROLLBAR_THUMB = \"scrollbar-thumb\"\n    SCROLLBAR_BUTTON = \"scrollbar-button\"\n    SCROLLBAR_TRACK = \"scrollbar-track\"\n    SCROLLBAR_TRACK_PIECE = \"scrollbar-track-piece\"\n    SCROLLBAR_CORNER = \"scrollbar-corner\"\n    RESIZER = \"resizer\"\n    INPUT_LIST_BUTTON = \"input-list-button\"\n    VIEW_TRANSITION = \"view-transition\"\n    VIEW_TRANSITION_GROUP = \"view-transition-group\"\n    VIEW_TRANSITION_IMAGE_PAIR = \"view-transition-image-pair\"\n    VIEW_TRANSITION_OLD = \"view-transition-old\"\n    VIEW_TRANSITION_NEW = \"view-transition-new\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PseudoType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.AFTER","title":"<code>AFTER = 'after'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.BACKDROP","title":"<code>BACKDROP = 'backdrop'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.BEFORE","title":"<code>BEFORE = 'before'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.FIRST_LETTER","title":"<code>FIRST_LETTER = 'first-letter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.FIRST_LINE","title":"<code>FIRST_LINE = 'first-line'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.FIRST_LINE_INHERITED","title":"<code>FIRST_LINE_INHERITED = 'first-line-inherited'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.GRAMMAR_ERROR","title":"<code>GRAMMAR_ERROR = 'grammar-error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.HIGHLIGHT","title":"<code>HIGHLIGHT = 'highlight'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.INPUT_LIST_BUTTON","title":"<code>INPUT_LIST_BUTTON = 'input-list-button'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.MARKER","title":"<code>MARKER = 'marker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.RESIZER","title":"<code>RESIZER = 'resizer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SCROLLBAR","title":"<code>SCROLLBAR = 'scrollbar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SCROLLBAR_BUTTON","title":"<code>SCROLLBAR_BUTTON = 'scrollbar-button'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SCROLLBAR_CORNER","title":"<code>SCROLLBAR_CORNER = 'scrollbar-corner'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SCROLLBAR_THUMB","title":"<code>SCROLLBAR_THUMB = 'scrollbar-thumb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SCROLLBAR_TRACK","title":"<code>SCROLLBAR_TRACK = 'scrollbar-track'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SCROLLBAR_TRACK_PIECE","title":"<code>SCROLLBAR_TRACK_PIECE = 'scrollbar-track-piece'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SCROLL_MARKER","title":"<code>SCROLL_MARKER = 'scroll-marker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SCROLL_MARKER_GROUP","title":"<code>SCROLL_MARKER_GROUP = 'scroll-marker-group'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SEARCH_TEXT","title":"<code>SEARCH_TEXT = 'search-text'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SELECTION","title":"<code>SELECTION = 'selection'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.SPELLING_ERROR","title":"<code>SPELLING_ERROR = 'spelling-error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.TARGET_TEXT","title":"<code>TARGET_TEXT = 'target-text'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.VIEW_TRANSITION","title":"<code>VIEW_TRANSITION = 'view-transition'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.VIEW_TRANSITION_GROUP","title":"<code>VIEW_TRANSITION_GROUP = 'view-transition-group'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.VIEW_TRANSITION_IMAGE_PAIR","title":"<code>VIEW_TRANSITION_IMAGE_PAIR = 'view-transition-image-pair'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.VIEW_TRANSITION_NEW","title":"<code>VIEW_TRANSITION_NEW = 'view-transition-new'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.VIEW_TRANSITION_OLD","title":"<code>VIEW_TRANSITION_OLD = 'view-transition-old'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PseudoType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.PseudoType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Quad","title":"<code>Quad</code>","text":"<p>               Bases: <code>list</code></p> <p>An array of quad vertices, x immediately followed by y for each point, points clock-wise.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>class Quad(list):\n    \"\"\"\n    An array of quad vertices, x immediately followed by y for each point, points clock-wise.\n    \"\"\"\n\n    def to_json(self) -&gt; typing.List[float]:\n        return self\n\n    @classmethod\n    def from_json(cls, json: typing.List[float]) -&gt; Quad:\n        return cls(json)\n\n    def __repr__(self):\n        return \"Quad({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Quad.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def __repr__(self):\n    return \"Quad({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Quad.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: typing.List[float]) -&gt; Quad:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Quad.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; typing.List[float]:\n    return self\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.RGBA","title":"<code>RGBA</code>  <code>dataclass</code>","text":"<p>A structure holding an RGBA color.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@dataclass\nclass RGBA:\n    \"\"\"\n    A structure holding an RGBA color.\n    \"\"\"\n\n    #: The red component, in the [0-255] range.\n    r: int\n\n    #: The green component, in the [0-255] range.\n    g: int\n\n    #: The blue component, in the [0-255] range.\n    b: int\n\n    #: The alpha component, in the [0-1] range (default: 1).\n    a: typing.Optional[float] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"r\"] = self.r\n        json[\"g\"] = self.g\n        json[\"b\"] = self.b\n        if self.a is not None:\n            json[\"a\"] = self.a\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RGBA:\n        return cls(\n            r=int(json[\"r\"]),\n            g=int(json[\"g\"]),\n            b=int(json[\"b\"]),\n            a=float(json[\"a\"]) if json.get(\"a\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.RGBA.a","title":"<code>a: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.RGBA.b","title":"<code>b: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.RGBA.g","title":"<code>g: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.RGBA.r","title":"<code>r: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.RGBA.__init__","title":"<code>__init__(r, g, b, a=None)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.RGBA.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RGBA:\n    return cls(\n        r=int(json[\"r\"]),\n        g=int(json[\"g\"]),\n        b=int(json[\"b\"]),\n        a=float(json[\"a\"]) if json.get(\"a\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.RGBA.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"r\"] = self.r\n    json[\"g\"] = self.g\n    json[\"b\"] = self.b\n    if self.a is not None:\n        json[\"a\"] = self.a\n    return json\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Rect","title":"<code>Rect</code>  <code>dataclass</code>","text":"<p>Rectangle.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@dataclass\nclass Rect:\n    \"\"\"\n    Rectangle.\n    \"\"\"\n\n    #: X coordinate\n    x: float\n\n    #: Y coordinate\n    y: float\n\n    #: Rectangle width\n    width: float\n\n    #: Rectangle height\n    height: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"x\"] = self.x\n        json[\"y\"] = self.y\n        json[\"width\"] = self.width\n        json[\"height\"] = self.height\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Rect:\n        return cls(\n            x=float(json[\"x\"]),\n            y=float(json[\"y\"]),\n            width=float(json[\"width\"]),\n            height=float(json[\"height\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Rect.height","title":"<code>height: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Rect.width","title":"<code>width: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Rect.x","title":"<code>x: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Rect.y","title":"<code>y: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Rect.__init__","title":"<code>__init__(x, y, width, height)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Rect.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Rect:\n    return cls(\n        x=float(json[\"x\"]),\n        y=float(json[\"y\"]),\n        width=float(json[\"width\"]),\n        height=float(json[\"height\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.Rect.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"x\"] = self.x\n    json[\"y\"] = self.y\n    json[\"width\"] = self.width\n    json[\"height\"] = self.height\n    return json\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ScrollOrientation","title":"<code>ScrollOrientation</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Physical scroll orientation</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>class ScrollOrientation(enum.Enum):\n    \"\"\"\n    Physical scroll orientation\n    \"\"\"\n\n    HORIZONTAL = \"horizontal\"\n    VERTICAL = \"vertical\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ScrollOrientation:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ScrollOrientation.HORIZONTAL","title":"<code>HORIZONTAL = 'horizontal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ScrollOrientation.VERTICAL","title":"<code>VERTICAL = 'vertical'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ScrollOrientation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ScrollOrientation:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ScrollOrientation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.SetChildNodes","title":"<code>SetChildNodes</code>  <code>dataclass</code>","text":"<p>Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.setChildNodes\")\n@dataclass\nclass SetChildNodes:\n    \"\"\"\n    Fired when backend wants to provide client with the missing DOM structure. This happens upon\n    most of the calls requesting node ids.\n    \"\"\"\n\n    #: Parent node id to populate with children.\n    parent_id: NodeId\n    #: Child nodes array.\n    nodes: typing.List[Node]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SetChildNodes:\n        return cls(\n            parent_id=NodeId.from_json(json[\"parentId\"]),\n            nodes=[Node.from_json(i) for i in json[\"nodes\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.SetChildNodes.nodes","title":"<code>nodes: typing.List[Node]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.SetChildNodes.parent_id","title":"<code>parent_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.SetChildNodes.__init__","title":"<code>__init__(parent_id, nodes)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.SetChildNodes.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SetChildNodes:\n    return cls(\n        parent_id=NodeId.from_json(json[\"parentId\"]),\n        nodes=[Node.from_json(i) for i in json[\"nodes\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootPopped","title":"<code>ShadowRootPopped</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Called when shadow root is popped from the element.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.shadowRootPopped\")\n@dataclass\nclass ShadowRootPopped:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Called when shadow root is popped from the element.\n    \"\"\"\n\n    #: Host element id.\n    host_id: NodeId\n    #: Shadow root id.\n    root_id: NodeId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ShadowRootPopped:\n        return cls(\n            host_id=NodeId.from_json(json[\"hostId\"]),\n            root_id=NodeId.from_json(json[\"rootId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootPopped.host_id","title":"<code>host_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootPopped.root_id","title":"<code>root_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootPopped.__init__","title":"<code>__init__(host_id, root_id)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootPopped.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ShadowRootPopped:\n    return cls(\n        host_id=NodeId.from_json(json[\"hostId\"]),\n        root_id=NodeId.from_json(json[\"rootId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootPushed","title":"<code>ShadowRootPushed</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Called when shadow root is pushed into the element.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.shadowRootPushed\")\n@dataclass\nclass ShadowRootPushed:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Called when shadow root is pushed into the element.\n    \"\"\"\n\n    #: Host element id.\n    host_id: NodeId\n    #: Shadow root.\n    root: Node\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ShadowRootPushed:\n        return cls(\n            host_id=NodeId.from_json(json[\"hostId\"]), root=Node.from_json(json[\"root\"])\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootPushed.host_id","title":"<code>host_id: NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootPushed.root","title":"<code>root: Node</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootPushed.__init__","title":"<code>__init__(host_id, root)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootPushed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ShadowRootPushed:\n    return cls(\n        host_id=NodeId.from_json(json[\"hostId\"]), root=Node.from_json(json[\"root\"])\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootType","title":"<code>ShadowRootType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Shadow root type.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>class ShadowRootType(enum.Enum):\n    \"\"\"\n    Shadow root type.\n    \"\"\"\n\n    USER_AGENT = \"user-agent\"\n    OPEN_ = \"open\"\n    CLOSED = \"closed\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ShadowRootType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootType.CLOSED","title":"<code>CLOSED = 'closed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootType.OPEN_","title":"<code>OPEN_ = 'open'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootType.USER_AGENT","title":"<code>USER_AGENT = 'user-agent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ShadowRootType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShadowRootType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShapeOutsideInfo","title":"<code>ShapeOutsideInfo</code>  <code>dataclass</code>","text":"<p>CSS Shape Outside details.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@dataclass\nclass ShapeOutsideInfo:\n    \"\"\"\n    CSS Shape Outside details.\n    \"\"\"\n\n    #: Shape bounds\n    bounds: Quad\n\n    #: Shape coordinate details\n    shape: typing.List[typing.Any]\n\n    #: Margin shape bounds\n    margin_shape: typing.List[typing.Any]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"bounds\"] = self.bounds.to_json()\n        json[\"shape\"] = [i for i in self.shape]\n        json[\"marginShape\"] = [i for i in self.margin_shape]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ShapeOutsideInfo:\n        return cls(\n            bounds=Quad.from_json(json[\"bounds\"]),\n            shape=[i for i in json[\"shape\"]],\n            margin_shape=[i for i in json[\"marginShape\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShapeOutsideInfo.bounds","title":"<code>bounds: Quad</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShapeOutsideInfo.margin_shape","title":"<code>margin_shape: typing.List[typing.Any]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShapeOutsideInfo.shape","title":"<code>shape: typing.List[typing.Any]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShapeOutsideInfo.__init__","title":"<code>__init__(bounds, shape, margin_shape)</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShapeOutsideInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ShapeOutsideInfo:\n    return cls(\n        bounds=Quad.from_json(json[\"bounds\"]),\n        shape=[i for i in json[\"shape\"]],\n        margin_shape=[i for i in json[\"marginShape\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.ShapeOutsideInfo.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"bounds\"] = self.bounds.to_json()\n    json[\"shape\"] = [i for i in self.shape]\n    json[\"marginShape\"] = [i for i in self.margin_shape]\n    return json\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.TopLayerElementsUpdated","title":"<code>TopLayerElementsUpdated</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Called when top layer elements are changed.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@event_class(\"DOM.topLayerElementsUpdated\")\n@dataclass\nclass TopLayerElementsUpdated:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Called when top layer elements are changed.\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TopLayerElementsUpdated:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.TopLayerElementsUpdated.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/dom/#zendriver.cdp.dom.TopLayerElementsUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TopLayerElementsUpdated:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.collect_class_names_from_subtree","title":"<code>collect_class_names_from_subtree(node_id)</code>","text":"<p>Collects class names for the node with given id and all of it's child nodes.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to collect class names.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[str]]</code> <p>Class name list.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def collect_class_names_from_subtree(\n    node_id: NodeId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]:\n    \"\"\"\n    Collects class names for the node with given id and all of it's child nodes.\n\n    **EXPERIMENTAL**\n\n    :param node_id: Id of the node to collect class names.\n    :returns: Class name list.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.collectClassNamesFromSubtree\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [str(i) for i in json[\"classNames\"]]\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.copy_to","title":"<code>copy_to(node_id, target_node_id, insert_before_node_id=None)</code>","text":"<p>Creates a deep copy of the specified node and places it into the target container before the given anchor.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to copy.</p> required <code>target_node_id</code> <code>NodeId</code> <p>Id of the element to drop the copy into.</p> required <code>insert_before_node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Drop the copy before this node (if absent, the copy becomes the last child of <code>targetNodeId</code>).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, NodeId]</code> <p>Id of the node clone.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def copy_to(\n    node_id: NodeId,\n    target_node_id: NodeId,\n    insert_before_node_id: typing.Optional[NodeId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]:\n    \"\"\"\n    Creates a deep copy of the specified node and places it into the target container before the\n    given anchor.\n\n    **EXPERIMENTAL**\n\n    :param node_id: Id of the node to copy.\n    :param target_node_id: Id of the element to drop the copy into.\n    :param insert_before_node_id: *(Optional)* Drop the copy before this node (if absent, the copy becomes the last child of ```targetNodeId```).\n    :returns: Id of the node clone.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"targetNodeId\"] = target_node_id.to_json()\n    if insert_before_node_id is not None:\n        params[\"insertBeforeNodeId\"] = insert_before_node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.copyTo\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return NodeId.from_json(json[\"nodeId\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.describe_node","title":"<code>describe_node(node_id=None, backend_node_id=None, object_id=None, depth=None, pierce=None)</code>","text":"<p>Describes node given its id, does not require domain to be enabled. Does not start tracking any objects, can be used for automation.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node wrapper.</p> <code>None</code> <code>depth</code> <code>Optional[int]</code> <p>(Optional) The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.</p> <code>None</code> <code>pierce</code> <code>Optional[bool]</code> <p>(Optional) Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Node]</code> <p>Node description.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def describe_node(\n    node_id: typing.Optional[NodeId] = None,\n    backend_node_id: typing.Optional[BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n    depth: typing.Optional[int] = None,\n    pierce: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, Node]:\n    \"\"\"\n    Describes node given its id, does not require domain to be enabled. Does not start tracking any\n    objects, can be used for automation.\n\n    :param node_id: *(Optional)* Identifier of the node.\n    :param backend_node_id: *(Optional)* Identifier of the backend node.\n    :param object_id: *(Optional)* JavaScript object id of the node wrapper.\n    :param depth: *(Optional)* The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.\n    :param pierce: *(Optional)* Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).\n    :returns: Node description.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    if depth is not None:\n        params[\"depth\"] = depth\n    if pierce is not None:\n        params[\"pierce\"] = pierce\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.describeNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return Node.from_json(json[\"node\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.disable","title":"<code>disable()</code>","text":"<p>Disables DOM agent for the given page.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables DOM agent for the given page.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.discard_search_results","title":"<code>discard_search_results(search_id)</code>","text":"<p>Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>search_id</code> <code>str</code> <p>Unique search session identifier.</p> required Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def discard_search_results(\n    search_id: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Discards search results from the session with the given id. ``getSearchResults`` should no longer\n    be called for that search.\n\n    **EXPERIMENTAL**\n\n    :param search_id: Unique search session identifier.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"searchId\"] = search_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.discardSearchResults\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.enable","title":"<code>enable(include_whitespace=None)</code>","text":"<p>Enables DOM agent for the given page.</p> <p>Parameters:</p> Name Type Description Default <code>include_whitespace</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) Whether to include whitespaces in the children array of returned Nodes.</p> <code>None</code> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def enable(\n    include_whitespace: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables DOM agent for the given page.\n\n    :param include_whitespace: **(EXPERIMENTAL)** *(Optional)* Whether to include whitespaces in the children array of returned Nodes.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if include_whitespace is not None:\n        params[\"includeWhitespace\"] = include_whitespace\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.enable\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.focus","title":"<code>focus(node_id=None, backend_node_id=None, object_id=None)</code>","text":"<p>Focuses the given element.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node wrapper.</p> <code>None</code> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def focus(\n    node_id: typing.Optional[NodeId] = None,\n    backend_node_id: typing.Optional[BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Focuses the given element.\n\n    :param node_id: *(Optional)* Identifier of the node.\n    :param backend_node_id: *(Optional)* Identifier of the backend node.\n    :param object_id: *(Optional)* JavaScript object id of the node wrapper.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.focus\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_anchor_element","title":"<code>get_anchor_element(node_id, anchor_specifier=None)</code>","text":"<p>Returns the target anchor element of the given anchor query according to https://www.w3.org/TR/css-anchor-position-1/#target.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the positioned element from which to find the anchor.</p> required <code>anchor_specifier</code> <code>Optional[str]</code> <p>(Optional) An optional anchor specifier, as defined in https://www.w3.org/TR/css-anchor-position-1/#anchor-specifier. If not provided, it will return the implicit anchor element for the given positioned element.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, NodeId]</code> <p>The anchor element of the given anchor query.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_anchor_element(\n    node_id: NodeId, anchor_specifier: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]:\n    \"\"\"\n    Returns the target anchor element of the given anchor query according to\n    https://www.w3.org/TR/css-anchor-position-1/#target.\n\n    **EXPERIMENTAL**\n\n    :param node_id: Id of the positioned element from which to find the anchor.\n    :param anchor_specifier: *(Optional)* An optional anchor specifier, as defined in https://www.w3.org/TR/css-anchor-position-1/#anchor-specifier. If not provided, it will return the implicit anchor element for the given positioned element.\n    :returns: The anchor element of the given anchor query.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    if anchor_specifier is not None:\n        params[\"anchorSpecifier\"] = anchor_specifier\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getAnchorElement\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return NodeId.from_json(json[\"nodeId\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_attributes","title":"<code>get_attributes(node_id)</code>","text":"<p>Returns attributes for the specified node.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to retrieve attributes for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[str]]</code> <p>An interleaved array of node attribute names and values.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_attributes(\n    node_id: NodeId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]:\n    \"\"\"\n    Returns attributes for the specified node.\n\n    :param node_id: Id of the node to retrieve attributes for.\n    :returns: An interleaved array of node attribute names and values.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getAttributes\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [str(i) for i in json[\"attributes\"]]\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_box_model","title":"<code>get_box_model(node_id=None, backend_node_id=None, object_id=None)</code>","text":"<p>Returns boxes for the given node.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node wrapper.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, BoxModel]</code> <p>Box model for the node.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_box_model(\n    node_id: typing.Optional[NodeId] = None,\n    backend_node_id: typing.Optional[BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, BoxModel]:\n    \"\"\"\n    Returns boxes for the given node.\n\n    :param node_id: *(Optional)* Identifier of the node.\n    :param backend_node_id: *(Optional)* Identifier of the backend node.\n    :param object_id: *(Optional)* JavaScript object id of the node wrapper.\n    :returns: Box model for the node.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getBoxModel\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return BoxModel.from_json(json[\"model\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_container_for_node","title":"<code>get_container_for_node(node_id, container_name=None, physical_axes=None, logical_axes=None)</code>","text":"<p>Returns the query container of the given node based on container query conditions: containerName, physical, and logical axes. If no axes are provided, the style container is returned, which is the direct parent or the closest element with a matching container-name.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> required <code>container_name</code> <code>Optional[str]</code> <p>(Optional)</p> <code>None</code> <code>physical_axes</code> <code>Optional[PhysicalAxes]</code> <p>(Optional)</p> <code>None</code> <code>logical_axes</code> <code>Optional[LogicalAxes]</code> <p>(Optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Optional[NodeId]]</code> <p>(Optional) The container node for the given node, or null if not found.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_container_for_node(\n    node_id: NodeId,\n    container_name: typing.Optional[str] = None,\n    physical_axes: typing.Optional[PhysicalAxes] = None,\n    logical_axes: typing.Optional[LogicalAxes] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Optional[NodeId]]:\n    \"\"\"\n    Returns the query container of the given node based on container query\n    conditions: containerName, physical, and logical axes. If no axes are\n    provided, the style container is returned, which is the direct parent or the\n    closest element with a matching container-name.\n\n    **EXPERIMENTAL**\n\n    :param node_id:\n    :param container_name: *(Optional)*\n    :param physical_axes: *(Optional)*\n    :param logical_axes: *(Optional)*\n    :returns: *(Optional)* The container node for the given node, or null if not found.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    if container_name is not None:\n        params[\"containerName\"] = container_name\n    if physical_axes is not None:\n        params[\"physicalAxes\"] = physical_axes.to_json()\n    if logical_axes is not None:\n        params[\"logicalAxes\"] = logical_axes.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getContainerForNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        NodeId.from_json(json[\"nodeId\"])\n        if json.get(\"nodeId\", None) is not None\n        else None\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_content_quads","title":"<code>get_content_quads(node_id=None, backend_node_id=None, object_id=None)</code>","text":"<p>Returns quads that describe node position on the page. This method might return multiple quads for inline nodes.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node wrapper.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Quad]]</code> <p>Quads that describe node layout relative to viewport.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_content_quads(\n    node_id: typing.Optional[NodeId] = None,\n    backend_node_id: typing.Optional[BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Quad]]:\n    \"\"\"\n    Returns quads that describe node position on the page. This method\n    might return multiple quads for inline nodes.\n\n    **EXPERIMENTAL**\n\n    :param node_id: *(Optional)* Identifier of the node.\n    :param backend_node_id: *(Optional)* Identifier of the backend node.\n    :param object_id: *(Optional)* JavaScript object id of the node wrapper.\n    :returns: Quads that describe node layout relative to viewport.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getContentQuads\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [Quad.from_json(i) for i in json[\"quads\"]]\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_document","title":"<code>get_document(depth=None, pierce=None)</code>","text":"<p>Returns the root DOM node (and optionally the subtree) to the caller. Implicitly enables the DOM domain events for the current target.</p> <p>Parameters:</p> Name Type Description Default <code>depth</code> <code>Optional[int]</code> <p>(Optional) The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.</p> <code>None</code> <code>pierce</code> <code>Optional[bool]</code> <p>(Optional) Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Node]</code> <p>Resulting node.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_document(\n    depth: typing.Optional[int] = None, pierce: typing.Optional[bool] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, Node]:\n    \"\"\"\n    Returns the root DOM node (and optionally the subtree) to the caller.\n    Implicitly enables the DOM domain events for the current target.\n\n    :param depth: *(Optional)* The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.\n    :param pierce: *(Optional)* Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).\n    :returns: Resulting node.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if depth is not None:\n        params[\"depth\"] = depth\n    if pierce is not None:\n        params[\"pierce\"] = pierce\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getDocument\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return Node.from_json(json[\"root\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_element_by_relation","title":"<code>get_element_by_relation(node_id, relation)</code>","text":"<p>Returns the NodeId of the matched element according to certain relations.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node from which to query the relation.</p> required <code>relation</code> <code>str</code> <p>Type of relation to get.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, NodeId]</code> <p>NodeId of the element matching the queried relation.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_element_by_relation(\n    node_id: NodeId, relation: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]:\n    \"\"\"\n    Returns the NodeId of the matched element according to certain relations.\n\n    **EXPERIMENTAL**\n\n    :param node_id: Id of the node from which to query the relation.\n    :param relation: Type of relation to get.\n    :returns: NodeId of the element matching the queried relation.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"relation\"] = relation\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getElementByRelation\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return NodeId.from_json(json[\"nodeId\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_file_info","title":"<code>get_file_info(object_id)</code>","text":"<p>Returns file information for the given File wrapper.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>object_id</code> <code>RemoteObjectId</code> <p>JavaScript object id of the node wrapper.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_file_info(\n    object_id: runtime.RemoteObjectId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Returns file information for the given\n    File wrapper.\n\n    **EXPERIMENTAL**\n\n    :param object_id: JavaScript object id of the node wrapper.\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getFileInfo\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"path\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_flattened_document","title":"<code>get_flattened_document(depth=None, pierce=None)</code>","text":"<p>Returns the root DOM node (and optionally the subtree) to the caller. Deprecated, as it is not designed to work well with the rest of the DOM agent. Use DOMSnapshot.captureSnapshot instead.</p> <p>.. deprecated:: 1.3</p> <p>Parameters:</p> Name Type Description Default <code>depth</code> <code>Optional[int]</code> <p>(Optional) The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.</p> <code>None</code> <code>pierce</code> <code>Optional[bool]</code> <p>(Optional) Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Node]]</code> <p>Resulting node.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef get_flattened_document(\n    depth: typing.Optional[int] = None, pierce: typing.Optional[bool] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Node]]:\n    \"\"\"\n    Returns the root DOM node (and optionally the subtree) to the caller.\n    Deprecated, as it is not designed to work well with the rest of the DOM agent.\n    Use DOMSnapshot.captureSnapshot instead.\n\n    .. deprecated:: 1.3\n\n    :param depth: *(Optional)* The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.\n    :param pierce: *(Optional)* Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).\n    :returns: Resulting node.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if depth is not None:\n        params[\"depth\"] = depth\n    if pierce is not None:\n        params[\"pierce\"] = pierce\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getFlattenedDocument\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [Node.from_json(i) for i in json[\"nodes\"]]\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_frame_owner","title":"<code>get_frame_owner(frame_id)</code>","text":"<p>Returns iframe node that owns iframe with the given domain.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[BackendNodeId, Optional[NodeId]]]</code> <p>A tuple with the following items:  0. backendNodeId - Resulting node. 1. nodeId - (Optional) Id of the node at given coordinates, only when enabled and requested document.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_frame_owner(\n    frame_id: page.FrameId,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[BackendNodeId, typing.Optional[NodeId]]\n]:\n    \"\"\"\n    Returns iframe node that owns iframe with the given domain.\n\n    **EXPERIMENTAL**\n\n    :param frame_id:\n    :returns: A tuple with the following items:\n\n        0. **backendNodeId** - Resulting node.\n        1. **nodeId** - *(Optional)* Id of the node at given coordinates, only when enabled and requested document.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getFrameOwner\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        BackendNodeId.from_json(json[\"backendNodeId\"]),\n        (\n            NodeId.from_json(json[\"nodeId\"])\n            if json.get(\"nodeId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_node_for_location","title":"<code>get_node_for_location(x, y, include_user_agent_shadow_dom=None, ignore_pointer_events_none=None)</code>","text":"<p>Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is either returned or not.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X coordinate.</p> required <code>y</code> <code>int</code> <p>Y coordinate.</p> required <code>include_user_agent_shadow_dom</code> <code>Optional[bool]</code> <p>(Optional) False to skip to the nearest non-UA shadow root ancestor (default: false).</p> <code>None</code> <code>ignore_pointer_events_none</code> <code>Optional[bool]</code> <p>(Optional) Whether to ignore pointer-events: none on elements and hit test them.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[BackendNodeId, FrameId, Optional[NodeId]]]</code> <p>A tuple with the following items:  0. backendNodeId - Resulting node. 1. frameId - Frame this node belongs to. 2. nodeId - (Optional) Id of the node at given coordinates, only when enabled and requested document.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_node_for_location(\n    x: int,\n    y: int,\n    include_user_agent_shadow_dom: typing.Optional[bool] = None,\n    ignore_pointer_events_none: typing.Optional[bool] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[BackendNodeId, page.FrameId, typing.Optional[NodeId]],\n]:\n    \"\"\"\n    Returns node id at given location. Depending on whether DOM domain is enabled, nodeId is\n    either returned or not.\n\n    :param x: X coordinate.\n    :param y: Y coordinate.\n    :param include_user_agent_shadow_dom: *(Optional)* False to skip to the nearest non-UA shadow root ancestor (default: false).\n    :param ignore_pointer_events_none: *(Optional)* Whether to ignore pointer-events: none on elements and hit test them.\n    :returns: A tuple with the following items:\n\n        0. **backendNodeId** - Resulting node.\n        1. **frameId** - Frame this node belongs to.\n        2. **nodeId** - *(Optional)* Id of the node at given coordinates, only when enabled and requested document.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"x\"] = x\n    params[\"y\"] = y\n    if include_user_agent_shadow_dom is not None:\n        params[\"includeUserAgentShadowDOM\"] = include_user_agent_shadow_dom\n    if ignore_pointer_events_none is not None:\n        params[\"ignorePointerEventsNone\"] = ignore_pointer_events_none\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getNodeForLocation\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        BackendNodeId.from_json(json[\"backendNodeId\"]),\n        page.FrameId.from_json(json[\"frameId\"]),\n        (\n            NodeId.from_json(json[\"nodeId\"])\n            if json.get(\"nodeId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_node_stack_traces","title":"<code>get_node_stack_traces(node_id)</code>","text":"<p>Gets stack traces associated with a Node. As of now, only provides stack trace for Node creation.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to get stack traces for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Optional[StackTrace]]</code> <p>(Optional) Creation stack trace, if available.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_node_stack_traces(\n    node_id: NodeId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Optional[runtime.StackTrace]]:\n    \"\"\"\n    Gets stack traces associated with a Node. As of now, only provides stack trace for Node creation.\n\n    **EXPERIMENTAL**\n\n    :param node_id: Id of the node to get stack traces for.\n    :returns: *(Optional)* Creation stack trace, if available.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getNodeStackTraces\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        runtime.StackTrace.from_json(json[\"creation\"])\n        if json.get(\"creation\", None) is not None\n        else None\n    )\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_nodes_for_subtree_by_style","title":"<code>get_nodes_for_subtree_by_style(node_id, computed_styles, pierce=None)</code>","text":"<p>Finds nodes with a given computed style in a subtree.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Node ID pointing to the root of a subtree.</p> required <code>computed_styles</code> <code>List[CSSComputedStyleProperty]</code> <p>The style to filter nodes by (includes nodes if any of properties matches).</p> required <code>pierce</code> <code>Optional[bool]</code> <p>(Optional) Whether or not iframes and shadow roots in the same target should be traversed when returning the results (default is false).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[NodeId]]</code> <p>Resulting nodes.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_nodes_for_subtree_by_style(\n    node_id: NodeId,\n    computed_styles: typing.List[CSSComputedStyleProperty],\n    pierce: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]:\n    \"\"\"\n    Finds nodes with a given computed style in a subtree.\n\n    **EXPERIMENTAL**\n\n    :param node_id: Node ID pointing to the root of a subtree.\n    :param computed_styles: The style to filter nodes by (includes nodes if any of properties matches).\n    :param pierce: *(Optional)* Whether or not iframes and shadow roots in the same target should be traversed when returning the results (default is false).\n    :returns: Resulting nodes.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"computedStyles\"] = [i.to_json() for i in computed_styles]\n    if pierce is not None:\n        params[\"pierce\"] = pierce\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getNodesForSubtreeByStyle\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [NodeId.from_json(i) for i in json[\"nodeIds\"]]\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_outer_html","title":"<code>get_outer_html(node_id=None, backend_node_id=None, object_id=None)</code>","text":"<p>Returns node's HTML markup.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node wrapper.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>Outer HTML markup.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_outer_html(\n    node_id: typing.Optional[NodeId] = None,\n    backend_node_id: typing.Optional[BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Returns node's HTML markup.\n\n    :param node_id: *(Optional)* Identifier of the node.\n    :param backend_node_id: *(Optional)* Identifier of the backend node.\n    :param object_id: *(Optional)* JavaScript object id of the node wrapper.\n    :returns: Outer HTML markup.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getOuterHTML\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"outerHTML\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_querying_descendants_for_container","title":"<code>get_querying_descendants_for_container(node_id)</code>","text":"<p>Returns the descendants of a container query container that have container queries against this container.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the container node to find querying descendants from.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[NodeId]]</code> <p>Descendant nodes with container queries against the given container.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_querying_descendants_for_container(\n    node_id: NodeId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]:\n    \"\"\"\n    Returns the descendants of a container query container that have\n    container queries against this container.\n\n    **EXPERIMENTAL**\n\n    :param node_id: Id of the container node to find querying descendants from.\n    :returns: Descendant nodes with container queries against the given container.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getQueryingDescendantsForContainer\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [NodeId.from_json(i) for i in json[\"nodeIds\"]]\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_relayout_boundary","title":"<code>get_relayout_boundary(node_id)</code>","text":"<p>Returns the id of the nearest ancestor that is a relayout boundary.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, NodeId]</code> <p>Relayout boundary node id for the given node.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_relayout_boundary(\n    node_id: NodeId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]:\n    \"\"\"\n    Returns the id of the nearest ancestor that is a relayout boundary.\n\n    **EXPERIMENTAL**\n\n    :param node_id: Id of the node.\n    :returns: Relayout boundary node id for the given node.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getRelayoutBoundary\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return NodeId.from_json(json[\"nodeId\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_search_results","title":"<code>get_search_results(search_id, from_index, to_index)</code>","text":"<p>Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the search with the given identifier.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>search_id</code> <code>str</code> <p>Unique search session identifier.</p> required <code>from_index</code> <code>int</code> <p>Start index of the search result to be returned.</p> required <code>to_index</code> <code>int</code> <p>End index of the search result to be returned.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[NodeId]]</code> <p>Ids of the search result nodes.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_search_results(\n    search_id: str, from_index: int, to_index: int\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]:\n    \"\"\"\n    Returns search results from given ``fromIndex`` to given ``toIndex`` from the search with the given\n    identifier.\n\n    **EXPERIMENTAL**\n\n    :param search_id: Unique search session identifier.\n    :param from_index: Start index of the search result to be returned.\n    :param to_index: End index of the search result to be returned.\n    :returns: Ids of the search result nodes.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"searchId\"] = search_id\n    params[\"fromIndex\"] = from_index\n    params[\"toIndex\"] = to_index\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getSearchResults\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [NodeId.from_json(i) for i in json[\"nodeIds\"]]\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.get_top_layer_elements","title":"<code>get_top_layer_elements()</code>","text":"<p>Returns NodeIds of current top layer elements. Top layer is rendered closest to the user within a viewport, therefore its elements always appear on top of all other content.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[NodeId]]</code> <p>NodeIds of top layer elements</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def get_top_layer_elements() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]\n):\n    \"\"\"\n    Returns NodeIds of current top layer elements.\n    Top layer is rendered closest to the user within a viewport, therefore its elements always\n    appear on top of all other content.\n\n    **EXPERIMENTAL**\n\n    :returns: NodeIds of top layer elements\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.getTopLayerElements\",\n    }\n    json = yield cmd_dict\n    return [NodeId.from_json(i) for i in json[\"nodeIds\"]]\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.hide_highlight","title":"<code>hide_highlight()</code>","text":"<p>Hides any highlight.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def hide_highlight() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Hides any highlight.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.hideHighlight\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.highlight_node","title":"<code>highlight_node()</code>","text":"<p>Highlights DOM node.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def highlight_node() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Highlights DOM node.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.highlightNode\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.highlight_rect","title":"<code>highlight_rect()</code>","text":"<p>Highlights given rectangle.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def highlight_rect() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Highlights given rectangle.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.highlightRect\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.mark_undoable_state","title":"<code>mark_undoable_state()</code>","text":"<p>Marks last undoable state.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def mark_undoable_state() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Marks last undoable state.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.markUndoableState\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.move_to","title":"<code>move_to(node_id, target_node_id, insert_before_node_id=None)</code>","text":"<p>Moves node into the new container, places it before the given anchor.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to move.</p> required <code>target_node_id</code> <code>NodeId</code> <p>Id of the element to drop the moved node into.</p> required <code>insert_before_node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Drop node before this one (if absent, the moved node becomes the last child of <code>targetNodeId</code>).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, NodeId]</code> <p>New id of the moved node.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def move_to(\n    node_id: NodeId,\n    target_node_id: NodeId,\n    insert_before_node_id: typing.Optional[NodeId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]:\n    \"\"\"\n    Moves node into the new container, places it before the given anchor.\n\n    :param node_id: Id of the node to move.\n    :param target_node_id: Id of the element to drop the moved node into.\n    :param insert_before_node_id: *(Optional)* Drop node before this one (if absent, the moved node becomes the last child of ```targetNodeId```).\n    :returns: New id of the moved node.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"targetNodeId\"] = target_node_id.to_json()\n    if insert_before_node_id is not None:\n        params[\"insertBeforeNodeId\"] = insert_before_node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.moveTo\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return NodeId.from_json(json[\"nodeId\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.perform_search","title":"<code>perform_search(query, include_user_agent_shadow_dom=None)</code>","text":"<p>Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Plain text or query selector or XPath search query.</p> required <code>include_user_agent_shadow_dom</code> <code>Optional[bool]</code> <p>(Optional) True to search in user agent shadow DOM.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[str, int]]</code> <p>A tuple with the following items:  0. searchId - Unique search session identifier. 1. resultCount - Number of search results.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def perform_search(\n    query: str, include_user_agent_shadow_dom: typing.Optional[bool] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, int]]:\n    \"\"\"\n    Searches for a given string in the DOM tree. Use ``getSearchResults`` to access search results or\n    ``cancelSearch`` to end this search session.\n\n    **EXPERIMENTAL**\n\n    :param query: Plain text or query selector or XPath search query.\n    :param include_user_agent_shadow_dom: *(Optional)* True to search in user agent shadow DOM.\n    :returns: A tuple with the following items:\n\n        0. **searchId** - Unique search session identifier.\n        1. **resultCount** - Number of search results.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"query\"] = query\n    if include_user_agent_shadow_dom is not None:\n        params[\"includeUserAgentShadowDOM\"] = include_user_agent_shadow_dom\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.performSearch\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (str(json[\"searchId\"]), int(json[\"resultCount\"]))\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.push_node_by_path_to_frontend","title":"<code>push_node_by_path_to_frontend(path)</code>","text":"<p>Requests that the node is sent to the caller given its path. // FIXME, use XPath</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to node in the proprietary format.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, NodeId]</code> <p>Id of the node for given path.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def push_node_by_path_to_frontend(\n    path: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]:\n    \"\"\"\n    Requests that the node is sent to the caller given its path. // FIXME, use XPath\n\n    **EXPERIMENTAL**\n\n    :param path: Path to node in the proprietary format.\n    :returns: Id of the node for given path.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"path\"] = path\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.pushNodeByPathToFrontend\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return NodeId.from_json(json[\"nodeId\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.push_nodes_by_backend_ids_to_frontend","title":"<code>push_nodes_by_backend_ids_to_frontend(backend_node_ids)</code>","text":"<p>Requests that a batch of nodes is sent to the caller given their backend node ids.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>backend_node_ids</code> <code>List[BackendNodeId]</code> <p>The array of backend node ids.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[NodeId]]</code> <p>The array of ids of pushed nodes that correspond to the backend ids specified in backendNodeIds.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def push_nodes_by_backend_ids_to_frontend(\n    backend_node_ids: typing.List[BackendNodeId],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]:\n    \"\"\"\n    Requests that a batch of nodes is sent to the caller given their backend node ids.\n\n    **EXPERIMENTAL**\n\n    :param backend_node_ids: The array of backend node ids.\n    :returns: The array of ids of pushed nodes that correspond to the backend ids specified in backendNodeIds.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"backendNodeIds\"] = [i.to_json() for i in backend_node_ids]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.pushNodesByBackendIdsToFrontend\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [NodeId.from_json(i) for i in json[\"nodeIds\"]]\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.query_selector","title":"<code>query_selector(node_id, selector)</code>","text":"<p>Executes <code>querySelector</code> on a given node.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to query upon.</p> required <code>selector</code> <code>str</code> <p>Selector string.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, NodeId]</code> <p>Query selector result.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def query_selector(\n    node_id: NodeId, selector: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]:\n    \"\"\"\n    Executes ``querySelector`` on a given node.\n\n    :param node_id: Id of the node to query upon.\n    :param selector: Selector string.\n    :returns: Query selector result.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"selector\"] = selector\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.querySelector\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return NodeId.from_json(json[\"nodeId\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.query_selector_all","title":"<code>query_selector_all(node_id, selector)</code>","text":"<p>Executes <code>querySelectorAll</code> on a given node.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to query upon.</p> required <code>selector</code> <code>str</code> <p>Selector string.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[NodeId]]</code> <p>Query selector result.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def query_selector_all(\n    node_id: NodeId, selector: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[NodeId]]:\n    \"\"\"\n    Executes ``querySelectorAll`` on a given node.\n\n    :param node_id: Id of the node to query upon.\n    :param selector: Selector string.\n    :returns: Query selector result.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"selector\"] = selector\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.querySelectorAll\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [NodeId.from_json(i) for i in json[\"nodeIds\"]]\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.redo","title":"<code>redo()</code>","text":"<p>Re-does the last undone action.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def redo() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Re-does the last undone action.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.redo\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.remove_attribute","title":"<code>remove_attribute(node_id, name)</code>","text":"<p>Removes attribute with given name from an element with given id.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the element to remove attribute from.</p> required <code>name</code> <code>str</code> <p>Name of the attribute to remove.</p> required Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def remove_attribute(\n    node_id: NodeId, name: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes attribute with given name from an element with given id.\n\n    :param node_id: Id of the element to remove attribute from.\n    :param name: Name of the attribute to remove.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"name\"] = name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.removeAttribute\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.remove_node","title":"<code>remove_node(node_id)</code>","text":"<p>Removes node with given id.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to remove.</p> required Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def remove_node(node_id: NodeId) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes node with given id.\n\n    :param node_id: Id of the node to remove.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.removeNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.request_child_nodes","title":"<code>request_child_nodes(node_id, depth=None, pierce=None)</code>","text":"<p>Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to get children for.</p> required <code>depth</code> <code>Optional[int]</code> <p>(Optional) The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.</p> <code>None</code> <code>pierce</code> <code>Optional[bool]</code> <p>(Optional) Whether or not iframes and shadow roots should be traversed when returning the sub-tree (default is false).</p> <code>None</code> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def request_child_nodes(\n    node_id: NodeId,\n    depth: typing.Optional[int] = None,\n    pierce: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Requests that children of the node with given id are returned to the caller in form of\n    ``setChildNodes`` events where not only immediate children are retrieved, but all children down to\n    the specified depth.\n\n    :param node_id: Id of the node to get children for.\n    :param depth: *(Optional)* The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.\n    :param pierce: *(Optional)* Whether or not iframes and shadow roots should be traversed when returning the sub-tree (default is false).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    if depth is not None:\n        params[\"depth\"] = depth\n    if pierce is not None:\n        params[\"pierce\"] = pierce\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.requestChildNodes\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.request_node","title":"<code>request_node(object_id)</code>","text":"<p>Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications.</p> <p>Parameters:</p> Name Type Description Default <code>object_id</code> <code>RemoteObjectId</code> <p>JavaScript object id to convert into node.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, NodeId]</code> <p>Node id for given object.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def request_node(\n    object_id: runtime.RemoteObjectId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]:\n    \"\"\"\n    Requests that the node is sent to the caller given the JavaScript node object reference. All\n    nodes that form the path from the node to the root are also sent to the client as a series of\n    ``setChildNodes`` notifications.\n\n    :param object_id: JavaScript object id to convert into node.\n    :returns: Node id for given object.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.requestNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return NodeId.from_json(json[\"nodeId\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.resolve_node","title":"<code>resolve_node(node_id=None, backend_node_id=None, object_group=None, execution_context_id=None)</code>","text":"<p>Resolves the JavaScript node object for a given NodeId or BackendNodeId.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Id of the node to resolve.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Backend identifier of the node to resolve.</p> <code>None</code> <code>object_group</code> <code>Optional[str]</code> <p>(Optional) Symbolic group name that can be used to release multiple objects.</p> <code>None</code> <code>execution_context_id</code> <code>Optional[ExecutionContextId]</code> <p>(Optional) Execution context in which to resolve the node.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, RemoteObject]</code> <p>JavaScript object wrapper for given node.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def resolve_node(\n    node_id: typing.Optional[NodeId] = None,\n    backend_node_id: typing.Optional[BackendNodeId] = None,\n    object_group: typing.Optional[str] = None,\n    execution_context_id: typing.Optional[runtime.ExecutionContextId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.RemoteObject]:\n    \"\"\"\n    Resolves the JavaScript node object for a given NodeId or BackendNodeId.\n\n    :param node_id: *(Optional)* Id of the node to resolve.\n    :param backend_node_id: *(Optional)* Backend identifier of the node to resolve.\n    :param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects.\n    :param execution_context_id: *(Optional)* Execution context in which to resolve the node.\n    :returns: JavaScript object wrapper for given node.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_group is not None:\n        params[\"objectGroup\"] = object_group\n    if execution_context_id is not None:\n        params[\"executionContextId\"] = execution_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.resolveNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return runtime.RemoteObject.from_json(json[\"object\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.scroll_into_view_if_needed","title":"<code>scroll_into_view_if_needed(node_id=None, backend_node_id=None, object_id=None, rect=None)</code>","text":"<p>Scrolls the specified rect of the given node into view if not already visible. Note: exactly one between nodeId, backendNodeId and objectId should be passed to identify the node.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node wrapper.</p> <code>None</code> <code>rect</code> <code>Optional[Rect]</code> <p>(Optional) The rect to be scrolled into view, relative to the node's border box, in CSS pixels. When omitted, center of the node will be used, similar to Element.scrollIntoView.</p> <code>None</code> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def scroll_into_view_if_needed(\n    node_id: typing.Optional[NodeId] = None,\n    backend_node_id: typing.Optional[BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n    rect: typing.Optional[Rect] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Scrolls the specified rect of the given node into view if not already visible.\n    Note: exactly one between nodeId, backendNodeId and objectId should be passed\n    to identify the node.\n\n    :param node_id: *(Optional)* Identifier of the node.\n    :param backend_node_id: *(Optional)* Identifier of the backend node.\n    :param object_id: *(Optional)* JavaScript object id of the node wrapper.\n    :param rect: *(Optional)* The rect to be scrolled into view, relative to the node's border box, in CSS pixels. When omitted, center of the node will be used, similar to Element.scrollIntoView.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    if rect is not None:\n        params[\"rect\"] = rect.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.scrollIntoViewIfNeeded\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.set_attribute_value","title":"<code>set_attribute_value(node_id, name, value)</code>","text":"<p>Sets attribute for an element with given id.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the element to set attribute for.</p> required <code>name</code> <code>str</code> <p>Attribute name.</p> required <code>value</code> <code>str</code> <p>Attribute value.</p> required Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def set_attribute_value(\n    node_id: NodeId, name: str, value: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets attribute for an element with given id.\n\n    :param node_id: Id of the element to set attribute for.\n    :param name: Attribute name.\n    :param value: Attribute value.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"name\"] = name\n    params[\"value\"] = value\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.setAttributeValue\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.set_attributes_as_text","title":"<code>set_attributes_as_text(node_id, text, name=None)</code>","text":"<p>Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the element to set attributes for.</p> required <code>text</code> <code>str</code> <p>Text with a number of attributes. Will parse this text using HTML parser.</p> required <code>name</code> <code>Optional[str]</code> <p>(Optional) Attribute name to replace with new attributes derived from text in case text parsed successfully.</p> <code>None</code> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def set_attributes_as_text(\n    node_id: NodeId, text: str, name: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets attributes on element with given id. This method is useful when user edits some existing\n    attribute value and types in several attribute name/value pairs.\n\n    :param node_id: Id of the element to set attributes for.\n    :param text: Text with a number of attributes. Will parse this text using HTML parser.\n    :param name: *(Optional)* Attribute name to replace with new attributes derived from text in case text parsed successfully.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"text\"] = text\n    if name is not None:\n        params[\"name\"] = name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.setAttributesAsText\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.set_file_input_files","title":"<code>set_file_input_files(files, node_id=None, backend_node_id=None, object_id=None)</code>","text":"<p>Sets files for the given file input element.</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>List[str]</code> <p>Array of file paths to set.</p> required <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node wrapper.</p> <code>None</code> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def set_file_input_files(\n    files: typing.List[str],\n    node_id: typing.Optional[NodeId] = None,\n    backend_node_id: typing.Optional[BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets files for the given file input element.\n\n    :param files: Array of file paths to set.\n    :param node_id: *(Optional)* Identifier of the node.\n    :param backend_node_id: *(Optional)* Identifier of the backend node.\n    :param object_id: *(Optional)* JavaScript object id of the node wrapper.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"files\"] = [i for i in files]\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.setFileInputFiles\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.set_inspected_node","title":"<code>set_inspected_node(node_id)</code>","text":"<p>Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>DOM node id to be accessible by means of $x command line API.</p> required Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def set_inspected_node(\n    node_id: NodeId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables console to refer to the node with given id via $x (see Command Line API for more details\n    $x functions).\n\n    **EXPERIMENTAL**\n\n    :param node_id: DOM node id to be accessible by means of $x command line API.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.setInspectedNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.set_node_name","title":"<code>set_node_name(node_id, name)</code>","text":"<p>Sets node name for a node with given id.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to set name for.</p> required <code>name</code> <code>str</code> <p>New node's name.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, NodeId]</code> <p>New node's id.</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def set_node_name(\n    node_id: NodeId, name: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, NodeId]:\n    \"\"\"\n    Sets node name for a node with given id.\n\n    :param node_id: Id of the node to set name for.\n    :param name: New node's name.\n    :returns: New node's id.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"name\"] = name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.setNodeName\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return NodeId.from_json(json[\"nodeId\"])\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.set_node_stack_traces_enabled","title":"<code>set_node_stack_traces_enabled(enable)</code>","text":"<p>Sets if stack traces should be captured for Nodes. See <code>Node.getNodeStackTraces</code>. Default is disabled.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enable</code> <code>bool</code> <p>Enable or disable.</p> required Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def set_node_stack_traces_enabled(\n    enable: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets if stack traces should be captured for Nodes. See ``Node.getNodeStackTraces``. Default is disabled.\n\n    **EXPERIMENTAL**\n\n    :param enable: Enable or disable.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enable\"] = enable\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.setNodeStackTracesEnabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.set_node_value","title":"<code>set_node_value(node_id, value)</code>","text":"<p>Sets node value for a node with given id.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to set value for.</p> required <code>value</code> <code>str</code> <p>New node's value.</p> required Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def set_node_value(\n    node_id: NodeId, value: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets node value for a node with given id.\n\n    :param node_id: Id of the node to set value for.\n    :param value: New node's value.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"value\"] = value\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.setNodeValue\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.set_outer_html","title":"<code>set_outer_html(node_id, outer_html)</code>","text":"<p>Sets node HTML markup, returns new node id.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to set markup for.</p> required <code>outer_html</code> <code>str</code> <p>Outer HTML markup to set.</p> required Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def set_outer_html(\n    node_id: NodeId, outer_html: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets node HTML markup, returns new node id.\n\n    :param node_id: Id of the node to set markup for.\n    :param outer_html: Outer HTML markup to set.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"outerHTML\"] = outer_html\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.setOuterHTML\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom/#zendriver.cdp.dom.undo","title":"<code>undo()</code>","text":"<p>Undoes the last performed action.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/dom.py</code> <pre><code>def undo() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Undoes the last performed action.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOM.undo\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_debugger/","title":"dom_debugger","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.CSPViolationType","title":"<code>CSPViolationType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>CSP Violation type.</p> Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>class CSPViolationType(enum.Enum):\n    \"\"\"\n    CSP Violation type.\n    \"\"\"\n\n    TRUSTEDTYPE_SINK_VIOLATION = \"trustedtype-sink-violation\"\n    TRUSTEDTYPE_POLICY_VIOLATION = \"trustedtype-policy-violation\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CSPViolationType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.CSPViolationType.TRUSTEDTYPE_POLICY_VIOLATION","title":"<code>TRUSTEDTYPE_POLICY_VIOLATION = 'trustedtype-policy-violation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.CSPViolationType.TRUSTEDTYPE_SINK_VIOLATION","title":"<code>TRUSTEDTYPE_SINK_VIOLATION = 'trustedtype-sink-violation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.CSPViolationType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CSPViolationType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.CSPViolationType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.DOMBreakpointType","title":"<code>DOMBreakpointType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>DOM breakpoint type.</p> Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>class DOMBreakpointType(enum.Enum):\n    \"\"\"\n    DOM breakpoint type.\n    \"\"\"\n\n    SUBTREE_MODIFIED = \"subtree-modified\"\n    ATTRIBUTE_MODIFIED = \"attribute-modified\"\n    NODE_REMOVED = \"node-removed\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; DOMBreakpointType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.DOMBreakpointType.ATTRIBUTE_MODIFIED","title":"<code>ATTRIBUTE_MODIFIED = 'attribute-modified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.DOMBreakpointType.NODE_REMOVED","title":"<code>NODE_REMOVED = 'node-removed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.DOMBreakpointType.SUBTREE_MODIFIED","title":"<code>SUBTREE_MODIFIED = 'subtree-modified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.DOMBreakpointType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; DOMBreakpointType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.DOMBreakpointType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener","title":"<code>EventListener</code>  <code>dataclass</code>","text":"<p>Object event listener.</p> Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>@dataclass\nclass EventListener:\n    \"\"\"\n    Object event listener.\n    \"\"\"\n\n    #: ``EventListener``'s type.\n    type_: str\n\n    #: ``EventListener``'s useCapture.\n    use_capture: bool\n\n    #: ``EventListener``'s passive flag.\n    passive: bool\n\n    #: ``EventListener``'s once flag.\n    once: bool\n\n    #: Script id of the handler code.\n    script_id: runtime.ScriptId\n\n    #: Line number in the script (0-based).\n    line_number: int\n\n    #: Column number in the script (0-based).\n    column_number: int\n\n    #: Event handler function value.\n    handler: typing.Optional[runtime.RemoteObject] = None\n\n    #: Event original handler function value.\n    original_handler: typing.Optional[runtime.RemoteObject] = None\n\n    #: Node the listener is added to (if any).\n    backend_node_id: typing.Optional[dom.BackendNodeId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        json[\"useCapture\"] = self.use_capture\n        json[\"passive\"] = self.passive\n        json[\"once\"] = self.once\n        json[\"scriptId\"] = self.script_id.to_json()\n        json[\"lineNumber\"] = self.line_number\n        json[\"columnNumber\"] = self.column_number\n        if self.handler is not None:\n            json[\"handler\"] = self.handler.to_json()\n        if self.original_handler is not None:\n            json[\"originalHandler\"] = self.original_handler.to_json()\n        if self.backend_node_id is not None:\n            json[\"backendNodeId\"] = self.backend_node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; EventListener:\n        return cls(\n            type_=str(json[\"type\"]),\n            use_capture=bool(json[\"useCapture\"]),\n            passive=bool(json[\"passive\"]),\n            once=bool(json[\"once\"]),\n            script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n            line_number=int(json[\"lineNumber\"]),\n            column_number=int(json[\"columnNumber\"]),\n            handler=(\n                runtime.RemoteObject.from_json(json[\"handler\"])\n                if json.get(\"handler\", None) is not None\n                else None\n            ),\n            original_handler=(\n                runtime.RemoteObject.from_json(json[\"originalHandler\"])\n                if json.get(\"originalHandler\", None) is not None\n                else None\n            ),\n            backend_node_id=(\n                dom.BackendNodeId.from_json(json[\"backendNodeId\"])\n                if json.get(\"backendNodeId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.backend_node_id","title":"<code>backend_node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.column_number","title":"<code>column_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.handler","title":"<code>handler: typing.Optional[runtime.RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.line_number","title":"<code>line_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.once","title":"<code>once: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.original_handler","title":"<code>original_handler: typing.Optional[runtime.RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.passive","title":"<code>passive: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.script_id","title":"<code>script_id: runtime.ScriptId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.use_capture","title":"<code>use_capture: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.__init__","title":"<code>__init__(type_, use_capture, passive, once, script_id, line_number, column_number, handler=None, original_handler=None, backend_node_id=None)</code>","text":""},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; EventListener:\n    return cls(\n        type_=str(json[\"type\"]),\n        use_capture=bool(json[\"useCapture\"]),\n        passive=bool(json[\"passive\"]),\n        once=bool(json[\"once\"]),\n        script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n        line_number=int(json[\"lineNumber\"]),\n        column_number=int(json[\"columnNumber\"]),\n        handler=(\n            runtime.RemoteObject.from_json(json[\"handler\"])\n            if json.get(\"handler\", None) is not None\n            else None\n        ),\n        original_handler=(\n            runtime.RemoteObject.from_json(json[\"originalHandler\"])\n            if json.get(\"originalHandler\", None) is not None\n            else None\n        ),\n        backend_node_id=(\n            dom.BackendNodeId.from_json(json[\"backendNodeId\"])\n            if json.get(\"backendNodeId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.EventListener.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    json[\"useCapture\"] = self.use_capture\n    json[\"passive\"] = self.passive\n    json[\"once\"] = self.once\n    json[\"scriptId\"] = self.script_id.to_json()\n    json[\"lineNumber\"] = self.line_number\n    json[\"columnNumber\"] = self.column_number\n    if self.handler is not None:\n        json[\"handler\"] = self.handler.to_json()\n    if self.original_handler is not None:\n        json[\"originalHandler\"] = self.original_handler.to_json()\n    if self.backend_node_id is not None:\n        json[\"backendNodeId\"] = self.backend_node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.get_event_listeners","title":"<code>get_event_listeners(object_id, depth=None, pierce=None)</code>","text":"<p>Returns event listeners of the given object.</p> <p>Parameters:</p> Name Type Description Default <code>object_id</code> <code>RemoteObjectId</code> <p>Identifier of the object to return listeners for.</p> required <code>depth</code> <code>Optional[int]</code> <p>(Optional) The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.</p> <code>None</code> <code>pierce</code> <code>Optional[bool]</code> <p>(Optional) Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false). Reports listeners for all contexts if pierce is enabled.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[EventListener]]</code> <p>Array of relevant listeners.</p> Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def get_event_listeners(\n    object_id: runtime.RemoteObjectId,\n    depth: typing.Optional[int] = None,\n    pierce: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[EventListener]]:\n    \"\"\"\n    Returns event listeners of the given object.\n\n    :param object_id: Identifier of the object to return listeners for.\n    :param depth: *(Optional)* The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.\n    :param pierce: *(Optional)* Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false). Reports listeners for all contexts if pierce is enabled.\n    :returns: Array of relevant listeners.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"objectId\"] = object_id.to_json()\n    if depth is not None:\n        params[\"depth\"] = depth\n    if pierce is not None:\n        params[\"pierce\"] = pierce\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMDebugger.getEventListeners\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [EventListener.from_json(i) for i in json[\"listeners\"]]\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.remove_dom_breakpoint","title":"<code>remove_dom_breakpoint(node_id, type_)</code>","text":"<p>Removes DOM breakpoint that was set using <code>setDOMBreakpoint</code>.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Identifier of the node to remove breakpoint from.</p> required <code>type_</code> <code>DOMBreakpointType</code> <p>Type of the breakpoint to remove.</p> required Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def remove_dom_breakpoint(\n    node_id: dom.NodeId, type_: DOMBreakpointType\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes DOM breakpoint that was set using ``setDOMBreakpoint``.\n\n    :param node_id: Identifier of the node to remove breakpoint from.\n    :param type_: Type of the breakpoint to remove.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"type\"] = type_.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMDebugger.removeDOMBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.remove_event_listener_breakpoint","title":"<code>remove_event_listener_breakpoint(event_name, target_name=None)</code>","text":"<p>Removes breakpoint on particular DOM event.</p> <p>Parameters:</p> Name Type Description Default <code>event_name</code> <code>str</code> <p>Event name.</p> required <code>target_name</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) EventTarget interface name.</p> <code>None</code> Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def remove_event_listener_breakpoint(\n    event_name: str, target_name: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes breakpoint on particular DOM event.\n\n    :param event_name: Event name.\n    :param target_name: **(EXPERIMENTAL)** *(Optional)* EventTarget interface name.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"eventName\"] = event_name\n    if target_name is not None:\n        params[\"targetName\"] = target_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMDebugger.removeEventListenerBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.remove_instrumentation_breakpoint","title":"<code>remove_instrumentation_breakpoint(event_name)</code>","text":"<p>Removes breakpoint on particular native event.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>event_name</code> <code>str</code> <p>Instrumentation name to stop on.</p> required Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef remove_instrumentation_breakpoint(\n    event_name: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes breakpoint on particular native event.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param event_name: Instrumentation name to stop on.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"eventName\"] = event_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMDebugger.removeInstrumentationBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.remove_xhr_breakpoint","title":"<code>remove_xhr_breakpoint(url)</code>","text":"<p>Removes breakpoint from XMLHttpRequest.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Resource URL substring.</p> required Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def remove_xhr_breakpoint(url: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes breakpoint from XMLHttpRequest.\n\n    :param url: Resource URL substring.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"url\"] = url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMDebugger.removeXHRBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.set_break_on_csp_violation","title":"<code>set_break_on_csp_violation(violation_types)</code>","text":"<p>Sets breakpoint on particular CSP violations.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>violation_types</code> <code>List[CSPViolationType]</code> <p>CSP Violations to stop upon.</p> required Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def set_break_on_csp_violation(\n    violation_types: typing.List[CSPViolationType],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets breakpoint on particular CSP violations.\n\n    **EXPERIMENTAL**\n\n    :param violation_types: CSP Violations to stop upon.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"violationTypes\"] = [i.to_json() for i in violation_types]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMDebugger.setBreakOnCSPViolation\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.set_dom_breakpoint","title":"<code>set_dom_breakpoint(node_id, type_)</code>","text":"<p>Sets breakpoint on particular operation with DOM.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Identifier of the node to set breakpoint on.</p> required <code>type_</code> <code>DOMBreakpointType</code> <p>Type of the operation to stop upon.</p> required Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def set_dom_breakpoint(\n    node_id: dom.NodeId, type_: DOMBreakpointType\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets breakpoint on particular operation with DOM.\n\n    :param node_id: Identifier of the node to set breakpoint on.\n    :param type_: Type of the operation to stop upon.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    params[\"type\"] = type_.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMDebugger.setDOMBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.set_event_listener_breakpoint","title":"<code>set_event_listener_breakpoint(event_name, target_name=None)</code>","text":"<p>Sets breakpoint on particular DOM event.</p> <p>Parameters:</p> Name Type Description Default <code>event_name</code> <code>str</code> <p>DOM Event name to stop on (any DOM event will do).</p> required <code>target_name</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) EventTarget interface name to stop on. If equal to <code>\"*\"</code> or not provided, will stop on any EventTarget.</p> <code>None</code> Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def set_event_listener_breakpoint(\n    event_name: str, target_name: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets breakpoint on particular DOM event.\n\n    :param event_name: DOM Event name to stop on (any DOM event will do).\n    :param target_name: **(EXPERIMENTAL)** *(Optional)* EventTarget interface name to stop on. If equal to ```\"*\"``` or not provided, will stop on any EventTarget.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"eventName\"] = event_name\n    if target_name is not None:\n        params[\"targetName\"] = target_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMDebugger.setEventListenerBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.set_instrumentation_breakpoint","title":"<code>set_instrumentation_breakpoint(event_name)</code>","text":"<p>Sets breakpoint on particular native event.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>event_name</code> <code>str</code> <p>Instrumentation name to stop on.</p> required Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_instrumentation_breakpoint(\n    event_name: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets breakpoint on particular native event.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param event_name: Instrumentation name to stop on.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"eventName\"] = event_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMDebugger.setInstrumentationBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_debugger/#zendriver.cdp.dom_debugger.set_xhr_breakpoint","title":"<code>set_xhr_breakpoint(url)</code>","text":"<p>Sets breakpoint on XMLHttpRequest.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Resource URL substring. All XHRs having this substring in the URL will get stopped upon.</p> required Source code in <code>zendriver/cdp/dom_debugger.py</code> <pre><code>def set_xhr_breakpoint(url: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets breakpoint on XMLHttpRequest.\n\n    :param url: Resource URL substring. All XHRs having this substring in the URL will get stopped upon.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"url\"] = url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMDebugger.setXHRBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/","title":"dom_snapshot","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.ArrayOfStrings","title":"<code>ArrayOfStrings</code>","text":"<p>               Bases: <code>list</code></p> <p>Index of the string in the strings table.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>class ArrayOfStrings(list):\n    \"\"\"\n    Index of the string in the strings table.\n    \"\"\"\n\n    def to_json(self) -&gt; typing.List[StringIndex]:\n        return self\n\n    @classmethod\n    def from_json(cls, json: typing.List[StringIndex]) -&gt; ArrayOfStrings:\n        return cls(json)\n\n    def __repr__(self):\n        return \"ArrayOfStrings({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.ArrayOfStrings.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def __repr__(self):\n    return \"ArrayOfStrings({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.ArrayOfStrings.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: typing.List[StringIndex]) -&gt; ArrayOfStrings:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.ArrayOfStrings.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; typing.List[StringIndex]:\n    return self\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.ComputedStyle","title":"<code>ComputedStyle</code>  <code>dataclass</code>","text":"<p>A subset of the full ComputedStyle as defined by the request whitelist.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass ComputedStyle:\n    \"\"\"\n    A subset of the full ComputedStyle as defined by the request whitelist.\n    \"\"\"\n\n    #: Name/value pairs of computed style properties.\n    properties: typing.List[NameValue]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"properties\"] = [i.to_json() for i in self.properties]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ComputedStyle:\n        return cls(\n            properties=[NameValue.from_json(i) for i in json[\"properties\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.ComputedStyle.properties","title":"<code>properties: typing.List[NameValue]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.ComputedStyle.__init__","title":"<code>__init__(properties)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.ComputedStyle.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ComputedStyle:\n    return cls(\n        properties=[NameValue.from_json(i) for i in json[\"properties\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.ComputedStyle.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"properties\"] = [i.to_json() for i in self.properties]\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode","title":"<code>DOMNode</code>  <code>dataclass</code>","text":"<p>A Node in the DOM tree.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass DOMNode:\n    \"\"\"\n    A Node in the DOM tree.\n    \"\"\"\n\n    #: ``Node``'s nodeType.\n    node_type: int\n\n    #: ``Node``'s nodeName.\n    node_name: str\n\n    #: ``Node``'s nodeValue.\n    node_value: str\n\n    #: ``Node``'s id, corresponds to DOM.Node.backendNodeId.\n    backend_node_id: dom.BackendNodeId\n\n    #: Only set for textarea elements, contains the text value.\n    text_value: typing.Optional[str] = None\n\n    #: Only set for input elements, contains the input's associated text value.\n    input_value: typing.Optional[str] = None\n\n    #: Only set for radio and checkbox input elements, indicates if the element has been checked\n    input_checked: typing.Optional[bool] = None\n\n    #: Only set for option elements, indicates if the element has been selected\n    option_selected: typing.Optional[bool] = None\n\n    #: The indexes of the node's child nodes in the ``domNodes`` array returned by ``getSnapshot``, if\n    #: any.\n    child_node_indexes: typing.Optional[typing.List[int]] = None\n\n    #: Attributes of an ``Element`` node.\n    attributes: typing.Optional[typing.List[NameValue]] = None\n\n    #: Indexes of pseudo elements associated with this node in the ``domNodes`` array returned by\n    #: ``getSnapshot``, if any.\n    pseudo_element_indexes: typing.Optional[typing.List[int]] = None\n\n    #: The index of the node's related layout tree node in the ``layoutTreeNodes`` array returned by\n    #: ``getSnapshot``, if any.\n    layout_node_index: typing.Optional[int] = None\n\n    #: Document URL that ``Document`` or ``FrameOwner`` node points to.\n    document_url: typing.Optional[str] = None\n\n    #: Base URL that ``Document`` or ``FrameOwner`` node uses for URL completion.\n    base_url: typing.Optional[str] = None\n\n    #: Only set for documents, contains the document's content language.\n    content_language: typing.Optional[str] = None\n\n    #: Only set for documents, contains the document's character set encoding.\n    document_encoding: typing.Optional[str] = None\n\n    #: ``DocumentType`` node's publicId.\n    public_id: typing.Optional[str] = None\n\n    #: ``DocumentType`` node's systemId.\n    system_id: typing.Optional[str] = None\n\n    #: Frame ID for frame owner elements and also for the document node.\n    frame_id: typing.Optional[page.FrameId] = None\n\n    #: The index of a frame owner element's content document in the ``domNodes`` array returned by\n    #: ``getSnapshot``, if any.\n    content_document_index: typing.Optional[int] = None\n\n    #: Type of a pseudo element node.\n    pseudo_type: typing.Optional[dom.PseudoType] = None\n\n    #: Shadow root type.\n    shadow_root_type: typing.Optional[dom.ShadowRootType] = None\n\n    #: Whether this DOM node responds to mouse clicks. This includes nodes that have had click\n    #: event listeners attached via JavaScript as well as anchor tags that naturally navigate when\n    #: clicked.\n    is_clickable: typing.Optional[bool] = None\n\n    #: Details of the node's event listeners, if any.\n    event_listeners: typing.Optional[typing.List[dom_debugger.EventListener]] = None\n\n    #: The selected url for nodes with a srcset attribute.\n    current_source_url: typing.Optional[str] = None\n\n    #: The url of the script (if any) that generates this node.\n    origin_url: typing.Optional[str] = None\n\n    #: Scroll offsets, set when this node is a Document.\n    scroll_offset_x: typing.Optional[float] = None\n\n    scroll_offset_y: typing.Optional[float] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"nodeType\"] = self.node_type\n        json[\"nodeName\"] = self.node_name\n        json[\"nodeValue\"] = self.node_value\n        json[\"backendNodeId\"] = self.backend_node_id.to_json()\n        if self.text_value is not None:\n            json[\"textValue\"] = self.text_value\n        if self.input_value is not None:\n            json[\"inputValue\"] = self.input_value\n        if self.input_checked is not None:\n            json[\"inputChecked\"] = self.input_checked\n        if self.option_selected is not None:\n            json[\"optionSelected\"] = self.option_selected\n        if self.child_node_indexes is not None:\n            json[\"childNodeIndexes\"] = [i for i in self.child_node_indexes]\n        if self.attributes is not None:\n            json[\"attributes\"] = [i.to_json() for i in self.attributes]\n        if self.pseudo_element_indexes is not None:\n            json[\"pseudoElementIndexes\"] = [i for i in self.pseudo_element_indexes]\n        if self.layout_node_index is not None:\n            json[\"layoutNodeIndex\"] = self.layout_node_index\n        if self.document_url is not None:\n            json[\"documentURL\"] = self.document_url\n        if self.base_url is not None:\n            json[\"baseURL\"] = self.base_url\n        if self.content_language is not None:\n            json[\"contentLanguage\"] = self.content_language\n        if self.document_encoding is not None:\n            json[\"documentEncoding\"] = self.document_encoding\n        if self.public_id is not None:\n            json[\"publicId\"] = self.public_id\n        if self.system_id is not None:\n            json[\"systemId\"] = self.system_id\n        if self.frame_id is not None:\n            json[\"frameId\"] = self.frame_id.to_json()\n        if self.content_document_index is not None:\n            json[\"contentDocumentIndex\"] = self.content_document_index\n        if self.pseudo_type is not None:\n            json[\"pseudoType\"] = self.pseudo_type.to_json()\n        if self.shadow_root_type is not None:\n            json[\"shadowRootType\"] = self.shadow_root_type.to_json()\n        if self.is_clickable is not None:\n            json[\"isClickable\"] = self.is_clickable\n        if self.event_listeners is not None:\n            json[\"eventListeners\"] = [i.to_json() for i in self.event_listeners]\n        if self.current_source_url is not None:\n            json[\"currentSourceURL\"] = self.current_source_url\n        if self.origin_url is not None:\n            json[\"originURL\"] = self.origin_url\n        if self.scroll_offset_x is not None:\n            json[\"scrollOffsetX\"] = self.scroll_offset_x\n        if self.scroll_offset_y is not None:\n            json[\"scrollOffsetY\"] = self.scroll_offset_y\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DOMNode:\n        return cls(\n            node_type=int(json[\"nodeType\"]),\n            node_name=str(json[\"nodeName\"]),\n            node_value=str(json[\"nodeValue\"]),\n            backend_node_id=dom.BackendNodeId.from_json(json[\"backendNodeId\"]),\n            text_value=(\n                str(json[\"textValue\"])\n                if json.get(\"textValue\", None) is not None\n                else None\n            ),\n            input_value=(\n                str(json[\"inputValue\"])\n                if json.get(\"inputValue\", None) is not None\n                else None\n            ),\n            input_checked=(\n                bool(json[\"inputChecked\"])\n                if json.get(\"inputChecked\", None) is not None\n                else None\n            ),\n            option_selected=(\n                bool(json[\"optionSelected\"])\n                if json.get(\"optionSelected\", None) is not None\n                else None\n            ),\n            child_node_indexes=(\n                [int(i) for i in json[\"childNodeIndexes\"]]\n                if json.get(\"childNodeIndexes\", None) is not None\n                else None\n            ),\n            attributes=(\n                [NameValue.from_json(i) for i in json[\"attributes\"]]\n                if json.get(\"attributes\", None) is not None\n                else None\n            ),\n            pseudo_element_indexes=(\n                [int(i) for i in json[\"pseudoElementIndexes\"]]\n                if json.get(\"pseudoElementIndexes\", None) is not None\n                else None\n            ),\n            layout_node_index=(\n                int(json[\"layoutNodeIndex\"])\n                if json.get(\"layoutNodeIndex\", None) is not None\n                else None\n            ),\n            document_url=(\n                str(json[\"documentURL\"])\n                if json.get(\"documentURL\", None) is not None\n                else None\n            ),\n            base_url=(\n                str(json[\"baseURL\"]) if json.get(\"baseURL\", None) is not None else None\n            ),\n            content_language=(\n                str(json[\"contentLanguage\"])\n                if json.get(\"contentLanguage\", None) is not None\n                else None\n            ),\n            document_encoding=(\n                str(json[\"documentEncoding\"])\n                if json.get(\"documentEncoding\", None) is not None\n                else None\n            ),\n            public_id=(\n                str(json[\"publicId\"])\n                if json.get(\"publicId\", None) is not None\n                else None\n            ),\n            system_id=(\n                str(json[\"systemId\"])\n                if json.get(\"systemId\", None) is not None\n                else None\n            ),\n            frame_id=(\n                page.FrameId.from_json(json[\"frameId\"])\n                if json.get(\"frameId\", None) is not None\n                else None\n            ),\n            content_document_index=(\n                int(json[\"contentDocumentIndex\"])\n                if json.get(\"contentDocumentIndex\", None) is not None\n                else None\n            ),\n            pseudo_type=(\n                dom.PseudoType.from_json(json[\"pseudoType\"])\n                if json.get(\"pseudoType\", None) is not None\n                else None\n            ),\n            shadow_root_type=(\n                dom.ShadowRootType.from_json(json[\"shadowRootType\"])\n                if json.get(\"shadowRootType\", None) is not None\n                else None\n            ),\n            is_clickable=(\n                bool(json[\"isClickable\"])\n                if json.get(\"isClickable\", None) is not None\n                else None\n            ),\n            event_listeners=(\n                [\n                    dom_debugger.EventListener.from_json(i)\n                    for i in json[\"eventListeners\"]\n                ]\n                if json.get(\"eventListeners\", None) is not None\n                else None\n            ),\n            current_source_url=(\n                str(json[\"currentSourceURL\"])\n                if json.get(\"currentSourceURL\", None) is not None\n                else None\n            ),\n            origin_url=(\n                str(json[\"originURL\"])\n                if json.get(\"originURL\", None) is not None\n                else None\n            ),\n            scroll_offset_x=(\n                float(json[\"scrollOffsetX\"])\n                if json.get(\"scrollOffsetX\", None) is not None\n                else None\n            ),\n            scroll_offset_y=(\n                float(json[\"scrollOffsetY\"])\n                if json.get(\"scrollOffsetY\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.attributes","title":"<code>attributes: typing.Optional[typing.List[NameValue]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.backend_node_id","title":"<code>backend_node_id: dom.BackendNodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.base_url","title":"<code>base_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.child_node_indexes","title":"<code>child_node_indexes: typing.Optional[typing.List[int]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.content_document_index","title":"<code>content_document_index: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.content_language","title":"<code>content_language: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.current_source_url","title":"<code>current_source_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.document_encoding","title":"<code>document_encoding: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.document_url","title":"<code>document_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.event_listeners","title":"<code>event_listeners: typing.Optional[typing.List[dom_debugger.EventListener]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.frame_id","title":"<code>frame_id: typing.Optional[page.FrameId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.input_checked","title":"<code>input_checked: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.input_value","title":"<code>input_value: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.is_clickable","title":"<code>is_clickable: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.layout_node_index","title":"<code>layout_node_index: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.node_name","title":"<code>node_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.node_type","title":"<code>node_type: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.node_value","title":"<code>node_value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.option_selected","title":"<code>option_selected: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.origin_url","title":"<code>origin_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.pseudo_element_indexes","title":"<code>pseudo_element_indexes: typing.Optional[typing.List[int]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.pseudo_type","title":"<code>pseudo_type: typing.Optional[dom.PseudoType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.public_id","title":"<code>public_id: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.scroll_offset_x","title":"<code>scroll_offset_x: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.scroll_offset_y","title":"<code>scroll_offset_y: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.shadow_root_type","title":"<code>shadow_root_type: typing.Optional[dom.ShadowRootType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.system_id","title":"<code>system_id: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.text_value","title":"<code>text_value: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.__init__","title":"<code>__init__(node_type, node_name, node_value, backend_node_id, text_value=None, input_value=None, input_checked=None, option_selected=None, child_node_indexes=None, attributes=None, pseudo_element_indexes=None, layout_node_index=None, document_url=None, base_url=None, content_language=None, document_encoding=None, public_id=None, system_id=None, frame_id=None, content_document_index=None, pseudo_type=None, shadow_root_type=None, is_clickable=None, event_listeners=None, current_source_url=None, origin_url=None, scroll_offset_x=None, scroll_offset_y=None)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DOMNode:\n    return cls(\n        node_type=int(json[\"nodeType\"]),\n        node_name=str(json[\"nodeName\"]),\n        node_value=str(json[\"nodeValue\"]),\n        backend_node_id=dom.BackendNodeId.from_json(json[\"backendNodeId\"]),\n        text_value=(\n            str(json[\"textValue\"])\n            if json.get(\"textValue\", None) is not None\n            else None\n        ),\n        input_value=(\n            str(json[\"inputValue\"])\n            if json.get(\"inputValue\", None) is not None\n            else None\n        ),\n        input_checked=(\n            bool(json[\"inputChecked\"])\n            if json.get(\"inputChecked\", None) is not None\n            else None\n        ),\n        option_selected=(\n            bool(json[\"optionSelected\"])\n            if json.get(\"optionSelected\", None) is not None\n            else None\n        ),\n        child_node_indexes=(\n            [int(i) for i in json[\"childNodeIndexes\"]]\n            if json.get(\"childNodeIndexes\", None) is not None\n            else None\n        ),\n        attributes=(\n            [NameValue.from_json(i) for i in json[\"attributes\"]]\n            if json.get(\"attributes\", None) is not None\n            else None\n        ),\n        pseudo_element_indexes=(\n            [int(i) for i in json[\"pseudoElementIndexes\"]]\n            if json.get(\"pseudoElementIndexes\", None) is not None\n            else None\n        ),\n        layout_node_index=(\n            int(json[\"layoutNodeIndex\"])\n            if json.get(\"layoutNodeIndex\", None) is not None\n            else None\n        ),\n        document_url=(\n            str(json[\"documentURL\"])\n            if json.get(\"documentURL\", None) is not None\n            else None\n        ),\n        base_url=(\n            str(json[\"baseURL\"]) if json.get(\"baseURL\", None) is not None else None\n        ),\n        content_language=(\n            str(json[\"contentLanguage\"])\n            if json.get(\"contentLanguage\", None) is not None\n            else None\n        ),\n        document_encoding=(\n            str(json[\"documentEncoding\"])\n            if json.get(\"documentEncoding\", None) is not None\n            else None\n        ),\n        public_id=(\n            str(json[\"publicId\"])\n            if json.get(\"publicId\", None) is not None\n            else None\n        ),\n        system_id=(\n            str(json[\"systemId\"])\n            if json.get(\"systemId\", None) is not None\n            else None\n        ),\n        frame_id=(\n            page.FrameId.from_json(json[\"frameId\"])\n            if json.get(\"frameId\", None) is not None\n            else None\n        ),\n        content_document_index=(\n            int(json[\"contentDocumentIndex\"])\n            if json.get(\"contentDocumentIndex\", None) is not None\n            else None\n        ),\n        pseudo_type=(\n            dom.PseudoType.from_json(json[\"pseudoType\"])\n            if json.get(\"pseudoType\", None) is not None\n            else None\n        ),\n        shadow_root_type=(\n            dom.ShadowRootType.from_json(json[\"shadowRootType\"])\n            if json.get(\"shadowRootType\", None) is not None\n            else None\n        ),\n        is_clickable=(\n            bool(json[\"isClickable\"])\n            if json.get(\"isClickable\", None) is not None\n            else None\n        ),\n        event_listeners=(\n            [\n                dom_debugger.EventListener.from_json(i)\n                for i in json[\"eventListeners\"]\n            ]\n            if json.get(\"eventListeners\", None) is not None\n            else None\n        ),\n        current_source_url=(\n            str(json[\"currentSourceURL\"])\n            if json.get(\"currentSourceURL\", None) is not None\n            else None\n        ),\n        origin_url=(\n            str(json[\"originURL\"])\n            if json.get(\"originURL\", None) is not None\n            else None\n        ),\n        scroll_offset_x=(\n            float(json[\"scrollOffsetX\"])\n            if json.get(\"scrollOffsetX\", None) is not None\n            else None\n        ),\n        scroll_offset_y=(\n            float(json[\"scrollOffsetY\"])\n            if json.get(\"scrollOffsetY\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DOMNode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"nodeType\"] = self.node_type\n    json[\"nodeName\"] = self.node_name\n    json[\"nodeValue\"] = self.node_value\n    json[\"backendNodeId\"] = self.backend_node_id.to_json()\n    if self.text_value is not None:\n        json[\"textValue\"] = self.text_value\n    if self.input_value is not None:\n        json[\"inputValue\"] = self.input_value\n    if self.input_checked is not None:\n        json[\"inputChecked\"] = self.input_checked\n    if self.option_selected is not None:\n        json[\"optionSelected\"] = self.option_selected\n    if self.child_node_indexes is not None:\n        json[\"childNodeIndexes\"] = [i for i in self.child_node_indexes]\n    if self.attributes is not None:\n        json[\"attributes\"] = [i.to_json() for i in self.attributes]\n    if self.pseudo_element_indexes is not None:\n        json[\"pseudoElementIndexes\"] = [i for i in self.pseudo_element_indexes]\n    if self.layout_node_index is not None:\n        json[\"layoutNodeIndex\"] = self.layout_node_index\n    if self.document_url is not None:\n        json[\"documentURL\"] = self.document_url\n    if self.base_url is not None:\n        json[\"baseURL\"] = self.base_url\n    if self.content_language is not None:\n        json[\"contentLanguage\"] = self.content_language\n    if self.document_encoding is not None:\n        json[\"documentEncoding\"] = self.document_encoding\n    if self.public_id is not None:\n        json[\"publicId\"] = self.public_id\n    if self.system_id is not None:\n        json[\"systemId\"] = self.system_id\n    if self.frame_id is not None:\n        json[\"frameId\"] = self.frame_id.to_json()\n    if self.content_document_index is not None:\n        json[\"contentDocumentIndex\"] = self.content_document_index\n    if self.pseudo_type is not None:\n        json[\"pseudoType\"] = self.pseudo_type.to_json()\n    if self.shadow_root_type is not None:\n        json[\"shadowRootType\"] = self.shadow_root_type.to_json()\n    if self.is_clickable is not None:\n        json[\"isClickable\"] = self.is_clickable\n    if self.event_listeners is not None:\n        json[\"eventListeners\"] = [i.to_json() for i in self.event_listeners]\n    if self.current_source_url is not None:\n        json[\"currentSourceURL\"] = self.current_source_url\n    if self.origin_url is not None:\n        json[\"originURL\"] = self.origin_url\n    if self.scroll_offset_x is not None:\n        json[\"scrollOffsetX\"] = self.scroll_offset_x\n    if self.scroll_offset_y is not None:\n        json[\"scrollOffsetY\"] = self.scroll_offset_y\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot","title":"<code>DocumentSnapshot</code>  <code>dataclass</code>","text":"<p>Document snapshot.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass DocumentSnapshot:\n    \"\"\"\n    Document snapshot.\n    \"\"\"\n\n    #: Document URL that ``Document`` or ``FrameOwner`` node points to.\n    document_url: StringIndex\n\n    #: Document title.\n    title: StringIndex\n\n    #: Base URL that ``Document`` or ``FrameOwner`` node uses for URL completion.\n    base_url: StringIndex\n\n    #: Contains the document's content language.\n    content_language: StringIndex\n\n    #: Contains the document's character set encoding.\n    encoding_name: StringIndex\n\n    #: ``DocumentType`` node's publicId.\n    public_id: StringIndex\n\n    #: ``DocumentType`` node's systemId.\n    system_id: StringIndex\n\n    #: Frame ID for frame owner elements and also for the document node.\n    frame_id: StringIndex\n\n    #: A table with dom nodes.\n    nodes: NodeTreeSnapshot\n\n    #: The nodes in the layout tree.\n    layout: LayoutTreeSnapshot\n\n    #: The post-layout inline text nodes.\n    text_boxes: TextBoxSnapshot\n\n    #: Horizontal scroll offset.\n    scroll_offset_x: typing.Optional[float] = None\n\n    #: Vertical scroll offset.\n    scroll_offset_y: typing.Optional[float] = None\n\n    #: Document content width.\n    content_width: typing.Optional[float] = None\n\n    #: Document content height.\n    content_height: typing.Optional[float] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"documentURL\"] = self.document_url.to_json()\n        json[\"title\"] = self.title.to_json()\n        json[\"baseURL\"] = self.base_url.to_json()\n        json[\"contentLanguage\"] = self.content_language.to_json()\n        json[\"encodingName\"] = self.encoding_name.to_json()\n        json[\"publicId\"] = self.public_id.to_json()\n        json[\"systemId\"] = self.system_id.to_json()\n        json[\"frameId\"] = self.frame_id.to_json()\n        json[\"nodes\"] = self.nodes.to_json()\n        json[\"layout\"] = self.layout.to_json()\n        json[\"textBoxes\"] = self.text_boxes.to_json()\n        if self.scroll_offset_x is not None:\n            json[\"scrollOffsetX\"] = self.scroll_offset_x\n        if self.scroll_offset_y is not None:\n            json[\"scrollOffsetY\"] = self.scroll_offset_y\n        if self.content_width is not None:\n            json[\"contentWidth\"] = self.content_width\n        if self.content_height is not None:\n            json[\"contentHeight\"] = self.content_height\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DocumentSnapshot:\n        return cls(\n            document_url=StringIndex.from_json(json[\"documentURL\"]),\n            title=StringIndex.from_json(json[\"title\"]),\n            base_url=StringIndex.from_json(json[\"baseURL\"]),\n            content_language=StringIndex.from_json(json[\"contentLanguage\"]),\n            encoding_name=StringIndex.from_json(json[\"encodingName\"]),\n            public_id=StringIndex.from_json(json[\"publicId\"]),\n            system_id=StringIndex.from_json(json[\"systemId\"]),\n            frame_id=StringIndex.from_json(json[\"frameId\"]),\n            nodes=NodeTreeSnapshot.from_json(json[\"nodes\"]),\n            layout=LayoutTreeSnapshot.from_json(json[\"layout\"]),\n            text_boxes=TextBoxSnapshot.from_json(json[\"textBoxes\"]),\n            scroll_offset_x=(\n                float(json[\"scrollOffsetX\"])\n                if json.get(\"scrollOffsetX\", None) is not None\n                else None\n            ),\n            scroll_offset_y=(\n                float(json[\"scrollOffsetY\"])\n                if json.get(\"scrollOffsetY\", None) is not None\n                else None\n            ),\n            content_width=(\n                float(json[\"contentWidth\"])\n                if json.get(\"contentWidth\", None) is not None\n                else None\n            ),\n            content_height=(\n                float(json[\"contentHeight\"])\n                if json.get(\"contentHeight\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.base_url","title":"<code>base_url: StringIndex</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.content_height","title":"<code>content_height: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.content_language","title":"<code>content_language: StringIndex</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.content_width","title":"<code>content_width: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.document_url","title":"<code>document_url: StringIndex</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.encoding_name","title":"<code>encoding_name: StringIndex</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.frame_id","title":"<code>frame_id: StringIndex</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.layout","title":"<code>layout: LayoutTreeSnapshot</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.nodes","title":"<code>nodes: NodeTreeSnapshot</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.public_id","title":"<code>public_id: StringIndex</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.scroll_offset_x","title":"<code>scroll_offset_x: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.scroll_offset_y","title":"<code>scroll_offset_y: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.system_id","title":"<code>system_id: StringIndex</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.text_boxes","title":"<code>text_boxes: TextBoxSnapshot</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.title","title":"<code>title: StringIndex</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.__init__","title":"<code>__init__(document_url, title, base_url, content_language, encoding_name, public_id, system_id, frame_id, nodes, layout, text_boxes, scroll_offset_x=None, scroll_offset_y=None, content_width=None, content_height=None)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DocumentSnapshot:\n    return cls(\n        document_url=StringIndex.from_json(json[\"documentURL\"]),\n        title=StringIndex.from_json(json[\"title\"]),\n        base_url=StringIndex.from_json(json[\"baseURL\"]),\n        content_language=StringIndex.from_json(json[\"contentLanguage\"]),\n        encoding_name=StringIndex.from_json(json[\"encodingName\"]),\n        public_id=StringIndex.from_json(json[\"publicId\"]),\n        system_id=StringIndex.from_json(json[\"systemId\"]),\n        frame_id=StringIndex.from_json(json[\"frameId\"]),\n        nodes=NodeTreeSnapshot.from_json(json[\"nodes\"]),\n        layout=LayoutTreeSnapshot.from_json(json[\"layout\"]),\n        text_boxes=TextBoxSnapshot.from_json(json[\"textBoxes\"]),\n        scroll_offset_x=(\n            float(json[\"scrollOffsetX\"])\n            if json.get(\"scrollOffsetX\", None) is not None\n            else None\n        ),\n        scroll_offset_y=(\n            float(json[\"scrollOffsetY\"])\n            if json.get(\"scrollOffsetY\", None) is not None\n            else None\n        ),\n        content_width=(\n            float(json[\"contentWidth\"])\n            if json.get(\"contentWidth\", None) is not None\n            else None\n        ),\n        content_height=(\n            float(json[\"contentHeight\"])\n            if json.get(\"contentHeight\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.DocumentSnapshot.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"documentURL\"] = self.document_url.to_json()\n    json[\"title\"] = self.title.to_json()\n    json[\"baseURL\"] = self.base_url.to_json()\n    json[\"contentLanguage\"] = self.content_language.to_json()\n    json[\"encodingName\"] = self.encoding_name.to_json()\n    json[\"publicId\"] = self.public_id.to_json()\n    json[\"systemId\"] = self.system_id.to_json()\n    json[\"frameId\"] = self.frame_id.to_json()\n    json[\"nodes\"] = self.nodes.to_json()\n    json[\"layout\"] = self.layout.to_json()\n    json[\"textBoxes\"] = self.text_boxes.to_json()\n    if self.scroll_offset_x is not None:\n        json[\"scrollOffsetX\"] = self.scroll_offset_x\n    if self.scroll_offset_y is not None:\n        json[\"scrollOffsetY\"] = self.scroll_offset_y\n    if self.content_width is not None:\n        json[\"contentWidth\"] = self.content_width\n    if self.content_height is not None:\n        json[\"contentHeight\"] = self.content_height\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.InlineTextBox","title":"<code>InlineTextBox</code>  <code>dataclass</code>","text":"<p>Details of post layout rendered text positions. The exact layout should not be regarded as stable and may change between versions.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass InlineTextBox:\n    \"\"\"\n    Details of post layout rendered text positions. The exact layout should not be regarded as\n    stable and may change between versions.\n    \"\"\"\n\n    #: The bounding box in document coordinates. Note that scroll offset of the document is ignored.\n    bounding_box: dom.Rect\n\n    #: The starting index in characters, for this post layout textbox substring. Characters that\n    #: would be represented as a surrogate pair in UTF-16 have length 2.\n    start_character_index: int\n\n    #: The number of characters in this post layout textbox substring. Characters that would be\n    #: represented as a surrogate pair in UTF-16 have length 2.\n    num_characters: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"boundingBox\"] = self.bounding_box.to_json()\n        json[\"startCharacterIndex\"] = self.start_character_index\n        json[\"numCharacters\"] = self.num_characters\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InlineTextBox:\n        return cls(\n            bounding_box=dom.Rect.from_json(json[\"boundingBox\"]),\n            start_character_index=int(json[\"startCharacterIndex\"]),\n            num_characters=int(json[\"numCharacters\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.InlineTextBox.bounding_box","title":"<code>bounding_box: dom.Rect</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.InlineTextBox.num_characters","title":"<code>num_characters: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.InlineTextBox.start_character_index","title":"<code>start_character_index: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.InlineTextBox.__init__","title":"<code>__init__(bounding_box, start_character_index, num_characters)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.InlineTextBox.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InlineTextBox:\n    return cls(\n        bounding_box=dom.Rect.from_json(json[\"boundingBox\"]),\n        start_character_index=int(json[\"startCharacterIndex\"]),\n        num_characters=int(json[\"numCharacters\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.InlineTextBox.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"boundingBox\"] = self.bounding_box.to_json()\n    json[\"startCharacterIndex\"] = self.start_character_index\n    json[\"numCharacters\"] = self.num_characters\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode","title":"<code>LayoutTreeNode</code>  <code>dataclass</code>","text":"<p>Details of an element in the DOM tree with a LayoutObject.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass LayoutTreeNode:\n    \"\"\"\n    Details of an element in the DOM tree with a LayoutObject.\n    \"\"\"\n\n    #: The index of the related DOM node in the ``domNodes`` array returned by ``getSnapshot``.\n    dom_node_index: int\n\n    #: The bounding box in document coordinates. Note that scroll offset of the document is ignored.\n    bounding_box: dom.Rect\n\n    #: Contents of the LayoutText, if any.\n    layout_text: typing.Optional[str] = None\n\n    #: The post-layout inline text nodes, if any.\n    inline_text_nodes: typing.Optional[typing.List[InlineTextBox]] = None\n\n    #: Index into the ``computedStyles`` array returned by ``getSnapshot``.\n    style_index: typing.Optional[int] = None\n\n    #: Global paint order index, which is determined by the stacking order of the nodes. Nodes\n    #: that are painted together will have the same index. Only provided if includePaintOrder in\n    #: getSnapshot was true.\n    paint_order: typing.Optional[int] = None\n\n    #: Set to true to indicate the element begins a new stacking context.\n    is_stacking_context: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"domNodeIndex\"] = self.dom_node_index\n        json[\"boundingBox\"] = self.bounding_box.to_json()\n        if self.layout_text is not None:\n            json[\"layoutText\"] = self.layout_text\n        if self.inline_text_nodes is not None:\n            json[\"inlineTextNodes\"] = [i.to_json() for i in self.inline_text_nodes]\n        if self.style_index is not None:\n            json[\"styleIndex\"] = self.style_index\n        if self.paint_order is not None:\n            json[\"paintOrder\"] = self.paint_order\n        if self.is_stacking_context is not None:\n            json[\"isStackingContext\"] = self.is_stacking_context\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LayoutTreeNode:\n        return cls(\n            dom_node_index=int(json[\"domNodeIndex\"]),\n            bounding_box=dom.Rect.from_json(json[\"boundingBox\"]),\n            layout_text=(\n                str(json[\"layoutText\"])\n                if json.get(\"layoutText\", None) is not None\n                else None\n            ),\n            inline_text_nodes=(\n                [InlineTextBox.from_json(i) for i in json[\"inlineTextNodes\"]]\n                if json.get(\"inlineTextNodes\", None) is not None\n                else None\n            ),\n            style_index=(\n                int(json[\"styleIndex\"])\n                if json.get(\"styleIndex\", None) is not None\n                else None\n            ),\n            paint_order=(\n                int(json[\"paintOrder\"])\n                if json.get(\"paintOrder\", None) is not None\n                else None\n            ),\n            is_stacking_context=(\n                bool(json[\"isStackingContext\"])\n                if json.get(\"isStackingContext\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode.bounding_box","title":"<code>bounding_box: dom.Rect</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode.dom_node_index","title":"<code>dom_node_index: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode.inline_text_nodes","title":"<code>inline_text_nodes: typing.Optional[typing.List[InlineTextBox]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode.is_stacking_context","title":"<code>is_stacking_context: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode.layout_text","title":"<code>layout_text: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode.paint_order","title":"<code>paint_order: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode.style_index","title":"<code>style_index: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode.__init__","title":"<code>__init__(dom_node_index, bounding_box, layout_text=None, inline_text_nodes=None, style_index=None, paint_order=None, is_stacking_context=None)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LayoutTreeNode:\n    return cls(\n        dom_node_index=int(json[\"domNodeIndex\"]),\n        bounding_box=dom.Rect.from_json(json[\"boundingBox\"]),\n        layout_text=(\n            str(json[\"layoutText\"])\n            if json.get(\"layoutText\", None) is not None\n            else None\n        ),\n        inline_text_nodes=(\n            [InlineTextBox.from_json(i) for i in json[\"inlineTextNodes\"]]\n            if json.get(\"inlineTextNodes\", None) is not None\n            else None\n        ),\n        style_index=(\n            int(json[\"styleIndex\"])\n            if json.get(\"styleIndex\", None) is not None\n            else None\n        ),\n        paint_order=(\n            int(json[\"paintOrder\"])\n            if json.get(\"paintOrder\", None) is not None\n            else None\n        ),\n        is_stacking_context=(\n            bool(json[\"isStackingContext\"])\n            if json.get(\"isStackingContext\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeNode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"domNodeIndex\"] = self.dom_node_index\n    json[\"boundingBox\"] = self.bounding_box.to_json()\n    if self.layout_text is not None:\n        json[\"layoutText\"] = self.layout_text\n    if self.inline_text_nodes is not None:\n        json[\"inlineTextNodes\"] = [i.to_json() for i in self.inline_text_nodes]\n    if self.style_index is not None:\n        json[\"styleIndex\"] = self.style_index\n    if self.paint_order is not None:\n        json[\"paintOrder\"] = self.paint_order\n    if self.is_stacking_context is not None:\n        json[\"isStackingContext\"] = self.is_stacking_context\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot","title":"<code>LayoutTreeSnapshot</code>  <code>dataclass</code>","text":"<p>Table of details of an element in the DOM tree with a LayoutObject.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass LayoutTreeSnapshot:\n    \"\"\"\n    Table of details of an element in the DOM tree with a LayoutObject.\n    \"\"\"\n\n    #: Index of the corresponding node in the ``NodeTreeSnapshot`` array returned by ``captureSnapshot``.\n    node_index: typing.List[int]\n\n    #: Array of indexes specifying computed style strings, filtered according to the ``computedStyles`` parameter passed to ``captureSnapshot``.\n    styles: typing.List[ArrayOfStrings]\n\n    #: The absolute position bounding box.\n    bounds: typing.List[Rectangle]\n\n    #: Contents of the LayoutText, if any.\n    text: typing.List[StringIndex]\n\n    #: Stacking context information.\n    stacking_contexts: RareBooleanData\n\n    #: Global paint order index, which is determined by the stacking order of the nodes. Nodes\n    #: that are painted together will have the same index. Only provided if includePaintOrder in\n    #: captureSnapshot was true.\n    paint_orders: typing.Optional[typing.List[int]] = None\n\n    #: The offset rect of nodes. Only available when includeDOMRects is set to true\n    offset_rects: typing.Optional[typing.List[Rectangle]] = None\n\n    #: The scroll rect of nodes. Only available when includeDOMRects is set to true\n    scroll_rects: typing.Optional[typing.List[Rectangle]] = None\n\n    #: The client rect of nodes. Only available when includeDOMRects is set to true\n    client_rects: typing.Optional[typing.List[Rectangle]] = None\n\n    #: The list of background colors that are blended with colors of overlapping elements.\n    blended_background_colors: typing.Optional[typing.List[StringIndex]] = None\n\n    #: The list of computed text opacities.\n    text_color_opacities: typing.Optional[typing.List[float]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"nodeIndex\"] = [i for i in self.node_index]\n        json[\"styles\"] = [i.to_json() for i in self.styles]\n        json[\"bounds\"] = [i.to_json() for i in self.bounds]\n        json[\"text\"] = [i.to_json() for i in self.text]\n        json[\"stackingContexts\"] = self.stacking_contexts.to_json()\n        if self.paint_orders is not None:\n            json[\"paintOrders\"] = [i for i in self.paint_orders]\n        if self.offset_rects is not None:\n            json[\"offsetRects\"] = [i.to_json() for i in self.offset_rects]\n        if self.scroll_rects is not None:\n            json[\"scrollRects\"] = [i.to_json() for i in self.scroll_rects]\n        if self.client_rects is not None:\n            json[\"clientRects\"] = [i.to_json() for i in self.client_rects]\n        if self.blended_background_colors is not None:\n            json[\"blendedBackgroundColors\"] = [\n                i.to_json() for i in self.blended_background_colors\n            ]\n        if self.text_color_opacities is not None:\n            json[\"textColorOpacities\"] = [i for i in self.text_color_opacities]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LayoutTreeSnapshot:\n        return cls(\n            node_index=[int(i) for i in json[\"nodeIndex\"]],\n            styles=[ArrayOfStrings.from_json(i) for i in json[\"styles\"]],\n            bounds=[Rectangle.from_json(i) for i in json[\"bounds\"]],\n            text=[StringIndex.from_json(i) for i in json[\"text\"]],\n            stacking_contexts=RareBooleanData.from_json(json[\"stackingContexts\"]),\n            paint_orders=(\n                [int(i) for i in json[\"paintOrders\"]]\n                if json.get(\"paintOrders\", None) is not None\n                else None\n            ),\n            offset_rects=(\n                [Rectangle.from_json(i) for i in json[\"offsetRects\"]]\n                if json.get(\"offsetRects\", None) is not None\n                else None\n            ),\n            scroll_rects=(\n                [Rectangle.from_json(i) for i in json[\"scrollRects\"]]\n                if json.get(\"scrollRects\", None) is not None\n                else None\n            ),\n            client_rects=(\n                [Rectangle.from_json(i) for i in json[\"clientRects\"]]\n                if json.get(\"clientRects\", None) is not None\n                else None\n            ),\n            blended_background_colors=(\n                [StringIndex.from_json(i) for i in json[\"blendedBackgroundColors\"]]\n                if json.get(\"blendedBackgroundColors\", None) is not None\n                else None\n            ),\n            text_color_opacities=(\n                [float(i) for i in json[\"textColorOpacities\"]]\n                if json.get(\"textColorOpacities\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.blended_background_colors","title":"<code>blended_background_colors: typing.Optional[typing.List[StringIndex]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.bounds","title":"<code>bounds: typing.List[Rectangle]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.client_rects","title":"<code>client_rects: typing.Optional[typing.List[Rectangle]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.node_index","title":"<code>node_index: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.offset_rects","title":"<code>offset_rects: typing.Optional[typing.List[Rectangle]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.paint_orders","title":"<code>paint_orders: typing.Optional[typing.List[int]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.scroll_rects","title":"<code>scroll_rects: typing.Optional[typing.List[Rectangle]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.stacking_contexts","title":"<code>stacking_contexts: RareBooleanData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.styles","title":"<code>styles: typing.List[ArrayOfStrings]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.text","title":"<code>text: typing.List[StringIndex]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.text_color_opacities","title":"<code>text_color_opacities: typing.Optional[typing.List[float]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.__init__","title":"<code>__init__(node_index, styles, bounds, text, stacking_contexts, paint_orders=None, offset_rects=None, scroll_rects=None, client_rects=None, blended_background_colors=None, text_color_opacities=None)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LayoutTreeSnapshot:\n    return cls(\n        node_index=[int(i) for i in json[\"nodeIndex\"]],\n        styles=[ArrayOfStrings.from_json(i) for i in json[\"styles\"]],\n        bounds=[Rectangle.from_json(i) for i in json[\"bounds\"]],\n        text=[StringIndex.from_json(i) for i in json[\"text\"]],\n        stacking_contexts=RareBooleanData.from_json(json[\"stackingContexts\"]),\n        paint_orders=(\n            [int(i) for i in json[\"paintOrders\"]]\n            if json.get(\"paintOrders\", None) is not None\n            else None\n        ),\n        offset_rects=(\n            [Rectangle.from_json(i) for i in json[\"offsetRects\"]]\n            if json.get(\"offsetRects\", None) is not None\n            else None\n        ),\n        scroll_rects=(\n            [Rectangle.from_json(i) for i in json[\"scrollRects\"]]\n            if json.get(\"scrollRects\", None) is not None\n            else None\n        ),\n        client_rects=(\n            [Rectangle.from_json(i) for i in json[\"clientRects\"]]\n            if json.get(\"clientRects\", None) is not None\n            else None\n        ),\n        blended_background_colors=(\n            [StringIndex.from_json(i) for i in json[\"blendedBackgroundColors\"]]\n            if json.get(\"blendedBackgroundColors\", None) is not None\n            else None\n        ),\n        text_color_opacities=(\n            [float(i) for i in json[\"textColorOpacities\"]]\n            if json.get(\"textColorOpacities\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.LayoutTreeSnapshot.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"nodeIndex\"] = [i for i in self.node_index]\n    json[\"styles\"] = [i.to_json() for i in self.styles]\n    json[\"bounds\"] = [i.to_json() for i in self.bounds]\n    json[\"text\"] = [i.to_json() for i in self.text]\n    json[\"stackingContexts\"] = self.stacking_contexts.to_json()\n    if self.paint_orders is not None:\n        json[\"paintOrders\"] = [i for i in self.paint_orders]\n    if self.offset_rects is not None:\n        json[\"offsetRects\"] = [i.to_json() for i in self.offset_rects]\n    if self.scroll_rects is not None:\n        json[\"scrollRects\"] = [i.to_json() for i in self.scroll_rects]\n    if self.client_rects is not None:\n        json[\"clientRects\"] = [i.to_json() for i in self.client_rects]\n    if self.blended_background_colors is not None:\n        json[\"blendedBackgroundColors\"] = [\n            i.to_json() for i in self.blended_background_colors\n        ]\n    if self.text_color_opacities is not None:\n        json[\"textColorOpacities\"] = [i for i in self.text_color_opacities]\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NameValue","title":"<code>NameValue</code>  <code>dataclass</code>","text":"<p>A name/value pair.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass NameValue:\n    \"\"\"\n    A name/value pair.\n    \"\"\"\n\n    #: Attribute/property name.\n    name: str\n\n    #: Attribute/property value.\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NameValue:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NameValue.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NameValue.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NameValue.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NameValue.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NameValue:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NameValue.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot","title":"<code>NodeTreeSnapshot</code>  <code>dataclass</code>","text":"<p>Table containing nodes.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass NodeTreeSnapshot:\n    \"\"\"\n    Table containing nodes.\n    \"\"\"\n\n    #: Parent node index.\n    parent_index: typing.Optional[typing.List[int]] = None\n\n    #: ``Node``'s nodeType.\n    node_type: typing.Optional[typing.List[int]] = None\n\n    #: Type of the shadow root the ``Node`` is in. String values are equal to the ``ShadowRootType`` enum.\n    shadow_root_type: typing.Optional[RareStringData] = None\n\n    #: ``Node``'s nodeName.\n    node_name: typing.Optional[typing.List[StringIndex]] = None\n\n    #: ``Node``'s nodeValue.\n    node_value: typing.Optional[typing.List[StringIndex]] = None\n\n    #: ``Node``'s id, corresponds to DOM.Node.backendNodeId.\n    backend_node_id: typing.Optional[typing.List[dom.BackendNodeId]] = None\n\n    #: Attributes of an ``Element`` node. Flatten name, value pairs.\n    attributes: typing.Optional[typing.List[ArrayOfStrings]] = None\n\n    #: Only set for textarea elements, contains the text value.\n    text_value: typing.Optional[RareStringData] = None\n\n    #: Only set for input elements, contains the input's associated text value.\n    input_value: typing.Optional[RareStringData] = None\n\n    #: Only set for radio and checkbox input elements, indicates if the element has been checked\n    input_checked: typing.Optional[RareBooleanData] = None\n\n    #: Only set for option elements, indicates if the element has been selected\n    option_selected: typing.Optional[RareBooleanData] = None\n\n    #: The index of the document in the list of the snapshot documents.\n    content_document_index: typing.Optional[RareIntegerData] = None\n\n    #: Type of a pseudo element node.\n    pseudo_type: typing.Optional[RareStringData] = None\n\n    #: Pseudo element identifier for this node. Only present if there is a\n    #: valid pseudoType.\n    pseudo_identifier: typing.Optional[RareStringData] = None\n\n    #: Whether this DOM node responds to mouse clicks. This includes nodes that have had click\n    #: event listeners attached via JavaScript as well as anchor tags that naturally navigate when\n    #: clicked.\n    is_clickable: typing.Optional[RareBooleanData] = None\n\n    #: The selected url for nodes with a srcset attribute.\n    current_source_url: typing.Optional[RareStringData] = None\n\n    #: The url of the script (if any) that generates this node.\n    origin_url: typing.Optional[RareStringData] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.parent_index is not None:\n            json[\"parentIndex\"] = [i for i in self.parent_index]\n        if self.node_type is not None:\n            json[\"nodeType\"] = [i for i in self.node_type]\n        if self.shadow_root_type is not None:\n            json[\"shadowRootType\"] = self.shadow_root_type.to_json()\n        if self.node_name is not None:\n            json[\"nodeName\"] = [i.to_json() for i in self.node_name]\n        if self.node_value is not None:\n            json[\"nodeValue\"] = [i.to_json() for i in self.node_value]\n        if self.backend_node_id is not None:\n            json[\"backendNodeId\"] = [i.to_json() for i in self.backend_node_id]\n        if self.attributes is not None:\n            json[\"attributes\"] = [i.to_json() for i in self.attributes]\n        if self.text_value is not None:\n            json[\"textValue\"] = self.text_value.to_json()\n        if self.input_value is not None:\n            json[\"inputValue\"] = self.input_value.to_json()\n        if self.input_checked is not None:\n            json[\"inputChecked\"] = self.input_checked.to_json()\n        if self.option_selected is not None:\n            json[\"optionSelected\"] = self.option_selected.to_json()\n        if self.content_document_index is not None:\n            json[\"contentDocumentIndex\"] = self.content_document_index.to_json()\n        if self.pseudo_type is not None:\n            json[\"pseudoType\"] = self.pseudo_type.to_json()\n        if self.pseudo_identifier is not None:\n            json[\"pseudoIdentifier\"] = self.pseudo_identifier.to_json()\n        if self.is_clickable is not None:\n            json[\"isClickable\"] = self.is_clickable.to_json()\n        if self.current_source_url is not None:\n            json[\"currentSourceURL\"] = self.current_source_url.to_json()\n        if self.origin_url is not None:\n            json[\"originURL\"] = self.origin_url.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NodeTreeSnapshot:\n        return cls(\n            parent_index=(\n                [int(i) for i in json[\"parentIndex\"]]\n                if json.get(\"parentIndex\", None) is not None\n                else None\n            ),\n            node_type=(\n                [int(i) for i in json[\"nodeType\"]]\n                if json.get(\"nodeType\", None) is not None\n                else None\n            ),\n            shadow_root_type=(\n                RareStringData.from_json(json[\"shadowRootType\"])\n                if json.get(\"shadowRootType\", None) is not None\n                else None\n            ),\n            node_name=(\n                [StringIndex.from_json(i) for i in json[\"nodeName\"]]\n                if json.get(\"nodeName\", None) is not None\n                else None\n            ),\n            node_value=(\n                [StringIndex.from_json(i) for i in json[\"nodeValue\"]]\n                if json.get(\"nodeValue\", None) is not None\n                else None\n            ),\n            backend_node_id=(\n                [dom.BackendNodeId.from_json(i) for i in json[\"backendNodeId\"]]\n                if json.get(\"backendNodeId\", None) is not None\n                else None\n            ),\n            attributes=(\n                [ArrayOfStrings.from_json(i) for i in json[\"attributes\"]]\n                if json.get(\"attributes\", None) is not None\n                else None\n            ),\n            text_value=(\n                RareStringData.from_json(json[\"textValue\"])\n                if json.get(\"textValue\", None) is not None\n                else None\n            ),\n            input_value=(\n                RareStringData.from_json(json[\"inputValue\"])\n                if json.get(\"inputValue\", None) is not None\n                else None\n            ),\n            input_checked=(\n                RareBooleanData.from_json(json[\"inputChecked\"])\n                if json.get(\"inputChecked\", None) is not None\n                else None\n            ),\n            option_selected=(\n                RareBooleanData.from_json(json[\"optionSelected\"])\n                if json.get(\"optionSelected\", None) is not None\n                else None\n            ),\n            content_document_index=(\n                RareIntegerData.from_json(json[\"contentDocumentIndex\"])\n                if json.get(\"contentDocumentIndex\", None) is not None\n                else None\n            ),\n            pseudo_type=(\n                RareStringData.from_json(json[\"pseudoType\"])\n                if json.get(\"pseudoType\", None) is not None\n                else None\n            ),\n            pseudo_identifier=(\n                RareStringData.from_json(json[\"pseudoIdentifier\"])\n                if json.get(\"pseudoIdentifier\", None) is not None\n                else None\n            ),\n            is_clickable=(\n                RareBooleanData.from_json(json[\"isClickable\"])\n                if json.get(\"isClickable\", None) is not None\n                else None\n            ),\n            current_source_url=(\n                RareStringData.from_json(json[\"currentSourceURL\"])\n                if json.get(\"currentSourceURL\", None) is not None\n                else None\n            ),\n            origin_url=(\n                RareStringData.from_json(json[\"originURL\"])\n                if json.get(\"originURL\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.attributes","title":"<code>attributes: typing.Optional[typing.List[ArrayOfStrings]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.backend_node_id","title":"<code>backend_node_id: typing.Optional[typing.List[dom.BackendNodeId]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.content_document_index","title":"<code>content_document_index: typing.Optional[RareIntegerData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.current_source_url","title":"<code>current_source_url: typing.Optional[RareStringData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.input_checked","title":"<code>input_checked: typing.Optional[RareBooleanData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.input_value","title":"<code>input_value: typing.Optional[RareStringData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.is_clickable","title":"<code>is_clickable: typing.Optional[RareBooleanData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.node_name","title":"<code>node_name: typing.Optional[typing.List[StringIndex]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.node_type","title":"<code>node_type: typing.Optional[typing.List[int]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.node_value","title":"<code>node_value: typing.Optional[typing.List[StringIndex]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.option_selected","title":"<code>option_selected: typing.Optional[RareBooleanData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.origin_url","title":"<code>origin_url: typing.Optional[RareStringData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.parent_index","title":"<code>parent_index: typing.Optional[typing.List[int]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.pseudo_identifier","title":"<code>pseudo_identifier: typing.Optional[RareStringData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.pseudo_type","title":"<code>pseudo_type: typing.Optional[RareStringData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.shadow_root_type","title":"<code>shadow_root_type: typing.Optional[RareStringData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.text_value","title":"<code>text_value: typing.Optional[RareStringData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.__init__","title":"<code>__init__(parent_index=None, node_type=None, shadow_root_type=None, node_name=None, node_value=None, backend_node_id=None, attributes=None, text_value=None, input_value=None, input_checked=None, option_selected=None, content_document_index=None, pseudo_type=None, pseudo_identifier=None, is_clickable=None, current_source_url=None, origin_url=None)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NodeTreeSnapshot:\n    return cls(\n        parent_index=(\n            [int(i) for i in json[\"parentIndex\"]]\n            if json.get(\"parentIndex\", None) is not None\n            else None\n        ),\n        node_type=(\n            [int(i) for i in json[\"nodeType\"]]\n            if json.get(\"nodeType\", None) is not None\n            else None\n        ),\n        shadow_root_type=(\n            RareStringData.from_json(json[\"shadowRootType\"])\n            if json.get(\"shadowRootType\", None) is not None\n            else None\n        ),\n        node_name=(\n            [StringIndex.from_json(i) for i in json[\"nodeName\"]]\n            if json.get(\"nodeName\", None) is not None\n            else None\n        ),\n        node_value=(\n            [StringIndex.from_json(i) for i in json[\"nodeValue\"]]\n            if json.get(\"nodeValue\", None) is not None\n            else None\n        ),\n        backend_node_id=(\n            [dom.BackendNodeId.from_json(i) for i in json[\"backendNodeId\"]]\n            if json.get(\"backendNodeId\", None) is not None\n            else None\n        ),\n        attributes=(\n            [ArrayOfStrings.from_json(i) for i in json[\"attributes\"]]\n            if json.get(\"attributes\", None) is not None\n            else None\n        ),\n        text_value=(\n            RareStringData.from_json(json[\"textValue\"])\n            if json.get(\"textValue\", None) is not None\n            else None\n        ),\n        input_value=(\n            RareStringData.from_json(json[\"inputValue\"])\n            if json.get(\"inputValue\", None) is not None\n            else None\n        ),\n        input_checked=(\n            RareBooleanData.from_json(json[\"inputChecked\"])\n            if json.get(\"inputChecked\", None) is not None\n            else None\n        ),\n        option_selected=(\n            RareBooleanData.from_json(json[\"optionSelected\"])\n            if json.get(\"optionSelected\", None) is not None\n            else None\n        ),\n        content_document_index=(\n            RareIntegerData.from_json(json[\"contentDocumentIndex\"])\n            if json.get(\"contentDocumentIndex\", None) is not None\n            else None\n        ),\n        pseudo_type=(\n            RareStringData.from_json(json[\"pseudoType\"])\n            if json.get(\"pseudoType\", None) is not None\n            else None\n        ),\n        pseudo_identifier=(\n            RareStringData.from_json(json[\"pseudoIdentifier\"])\n            if json.get(\"pseudoIdentifier\", None) is not None\n            else None\n        ),\n        is_clickable=(\n            RareBooleanData.from_json(json[\"isClickable\"])\n            if json.get(\"isClickable\", None) is not None\n            else None\n        ),\n        current_source_url=(\n            RareStringData.from_json(json[\"currentSourceURL\"])\n            if json.get(\"currentSourceURL\", None) is not None\n            else None\n        ),\n        origin_url=(\n            RareStringData.from_json(json[\"originURL\"])\n            if json.get(\"originURL\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.NodeTreeSnapshot.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.parent_index is not None:\n        json[\"parentIndex\"] = [i for i in self.parent_index]\n    if self.node_type is not None:\n        json[\"nodeType\"] = [i for i in self.node_type]\n    if self.shadow_root_type is not None:\n        json[\"shadowRootType\"] = self.shadow_root_type.to_json()\n    if self.node_name is not None:\n        json[\"nodeName\"] = [i.to_json() for i in self.node_name]\n    if self.node_value is not None:\n        json[\"nodeValue\"] = [i.to_json() for i in self.node_value]\n    if self.backend_node_id is not None:\n        json[\"backendNodeId\"] = [i.to_json() for i in self.backend_node_id]\n    if self.attributes is not None:\n        json[\"attributes\"] = [i.to_json() for i in self.attributes]\n    if self.text_value is not None:\n        json[\"textValue\"] = self.text_value.to_json()\n    if self.input_value is not None:\n        json[\"inputValue\"] = self.input_value.to_json()\n    if self.input_checked is not None:\n        json[\"inputChecked\"] = self.input_checked.to_json()\n    if self.option_selected is not None:\n        json[\"optionSelected\"] = self.option_selected.to_json()\n    if self.content_document_index is not None:\n        json[\"contentDocumentIndex\"] = self.content_document_index.to_json()\n    if self.pseudo_type is not None:\n        json[\"pseudoType\"] = self.pseudo_type.to_json()\n    if self.pseudo_identifier is not None:\n        json[\"pseudoIdentifier\"] = self.pseudo_identifier.to_json()\n    if self.is_clickable is not None:\n        json[\"isClickable\"] = self.is_clickable.to_json()\n    if self.current_source_url is not None:\n        json[\"currentSourceURL\"] = self.current_source_url.to_json()\n    if self.origin_url is not None:\n        json[\"originURL\"] = self.origin_url.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareBooleanData","title":"<code>RareBooleanData</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass RareBooleanData:\n    index: typing.List[int]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"index\"] = [i for i in self.index]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RareBooleanData:\n        return cls(\n            index=[int(i) for i in json[\"index\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareBooleanData.index","title":"<code>index: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareBooleanData.__init__","title":"<code>__init__(index)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareBooleanData.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RareBooleanData:\n    return cls(\n        index=[int(i) for i in json[\"index\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareBooleanData.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"index\"] = [i for i in self.index]\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareIntegerData","title":"<code>RareIntegerData</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass RareIntegerData:\n    index: typing.List[int]\n\n    value: typing.List[int]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"index\"] = [i for i in self.index]\n        json[\"value\"] = [i for i in self.value]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RareIntegerData:\n        return cls(\n            index=[int(i) for i in json[\"index\"]],\n            value=[int(i) for i in json[\"value\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareIntegerData.index","title":"<code>index: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareIntegerData.value","title":"<code>value: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareIntegerData.__init__","title":"<code>__init__(index, value)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareIntegerData.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RareIntegerData:\n    return cls(\n        index=[int(i) for i in json[\"index\"]],\n        value=[int(i) for i in json[\"value\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareIntegerData.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"index\"] = [i for i in self.index]\n    json[\"value\"] = [i for i in self.value]\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareStringData","title":"<code>RareStringData</code>  <code>dataclass</code>","text":"<p>Data that is only present on rare nodes.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass RareStringData:\n    \"\"\"\n    Data that is only present on rare nodes.\n    \"\"\"\n\n    index: typing.List[int]\n\n    value: typing.List[StringIndex]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"index\"] = [i for i in self.index]\n        json[\"value\"] = [i.to_json() for i in self.value]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RareStringData:\n        return cls(\n            index=[int(i) for i in json[\"index\"]],\n            value=[StringIndex.from_json(i) for i in json[\"value\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareStringData.index","title":"<code>index: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareStringData.value","title":"<code>value: typing.List[StringIndex]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareStringData.__init__","title":"<code>__init__(index, value)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareStringData.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RareStringData:\n    return cls(\n        index=[int(i) for i in json[\"index\"]],\n        value=[StringIndex.from_json(i) for i in json[\"value\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.RareStringData.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"index\"] = [i for i in self.index]\n    json[\"value\"] = [i.to_json() for i in self.value]\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.Rectangle","title":"<code>Rectangle</code>","text":"<p>               Bases: <code>list</code></p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>class Rectangle(list):\n    def to_json(self) -&gt; typing.List[float]:\n        return self\n\n    @classmethod\n    def from_json(cls, json: typing.List[float]) -&gt; Rectangle:\n        return cls(json)\n\n    def __repr__(self):\n        return \"Rectangle({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.Rectangle.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def __repr__(self):\n    return \"Rectangle({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.Rectangle.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: typing.List[float]) -&gt; Rectangle:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.Rectangle.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; typing.List[float]:\n    return self\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.StringIndex","title":"<code>StringIndex</code>","text":"<p>               Bases: <code>int</code></p> <p>Index of the string in the strings table.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>class StringIndex(int):\n    \"\"\"\n    Index of the string in the strings table.\n    \"\"\"\n\n    def to_json(self) -&gt; int:\n        return self\n\n    @classmethod\n    def from_json(cls, json: int) -&gt; StringIndex:\n        return cls(json)\n\n    def __repr__(self):\n        return \"StringIndex({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.StringIndex.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def __repr__(self):\n    return \"StringIndex({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.StringIndex.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: int) -&gt; StringIndex:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.StringIndex.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; int:\n    return self\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.TextBoxSnapshot","title":"<code>TextBoxSnapshot</code>  <code>dataclass</code>","text":"<p>Table of details of the post layout rendered text positions. The exact layout should not be regarded as stable and may change between versions.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@dataclass\nclass TextBoxSnapshot:\n    \"\"\"\n    Table of details of the post layout rendered text positions. The exact layout should not be regarded as\n    stable and may change between versions.\n    \"\"\"\n\n    #: Index of the layout tree node that owns this box collection.\n    layout_index: typing.List[int]\n\n    #: The absolute position bounding box.\n    bounds: typing.List[Rectangle]\n\n    #: The starting index in characters, for this post layout textbox substring. Characters that\n    #: would be represented as a surrogate pair in UTF-16 have length 2.\n    start: typing.List[int]\n\n    #: The number of characters in this post layout textbox substring. Characters that would be\n    #: represented as a surrogate pair in UTF-16 have length 2.\n    length: typing.List[int]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"layoutIndex\"] = [i for i in self.layout_index]\n        json[\"bounds\"] = [i.to_json() for i in self.bounds]\n        json[\"start\"] = [i for i in self.start]\n        json[\"length\"] = [i for i in self.length]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TextBoxSnapshot:\n        return cls(\n            layout_index=[int(i) for i in json[\"layoutIndex\"]],\n            bounds=[Rectangle.from_json(i) for i in json[\"bounds\"]],\n            start=[int(i) for i in json[\"start\"]],\n            length=[int(i) for i in json[\"length\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.TextBoxSnapshot.bounds","title":"<code>bounds: typing.List[Rectangle]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.TextBoxSnapshot.layout_index","title":"<code>layout_index: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.TextBoxSnapshot.length","title":"<code>length: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.TextBoxSnapshot.start","title":"<code>start: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.TextBoxSnapshot.__init__","title":"<code>__init__(layout_index, bounds, start, length)</code>","text":""},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.TextBoxSnapshot.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TextBoxSnapshot:\n    return cls(\n        layout_index=[int(i) for i in json[\"layoutIndex\"]],\n        bounds=[Rectangle.from_json(i) for i in json[\"bounds\"]],\n        start=[int(i) for i in json[\"start\"]],\n        length=[int(i) for i in json[\"length\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.TextBoxSnapshot.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"layoutIndex\"] = [i for i in self.layout_index]\n    json[\"bounds\"] = [i.to_json() for i in self.bounds]\n    json[\"start\"] = [i for i in self.start]\n    json[\"length\"] = [i for i in self.length]\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.capture_snapshot","title":"<code>capture_snapshot(computed_styles, include_paint_order=None, include_dom_rects=None, include_blended_background_colors=None, include_text_color_opacities=None)</code>","text":"<p>Returns a document snapshot, including the full DOM tree of the root node (including iframes, template contents, and imported documents) in a flattened array, as well as layout and white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is flattened.</p> <p>Parameters:</p> Name Type Description Default <code>computed_styles</code> <code>List[str]</code> <p>Whitelist of computed styles to return.</p> required <code>include_paint_order</code> <code>Optional[bool]</code> <p>(Optional) Whether to include layout object paint orders into the snapshot.</p> <code>None</code> <code>include_dom_rects</code> <code>Optional[bool]</code> <p>(Optional) Whether to include DOM rectangles (offsetRects, clientRects, scrollRects) into the snapshot</p> <code>None</code> <code>include_blended_background_colors</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether to include blended background colors in the snapshot (default: false). Blended background color is achieved by blending background colors of all elements that overlap with the current element.</p> <code>None</code> <code>include_text_color_opacities</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether to include text color opacity in the snapshot (default: false). An element might have the opacity property set that affects the text color of the element. The final text color opacity is computed based on the opacity of all overlapping elements.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[List[DocumentSnapshot], List[str]]]</code> <p>A tuple with the following items:  0. documents - The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document. 1. strings - Shared string table that all string properties refer to with indexes.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def capture_snapshot(\n    computed_styles: typing.List[str],\n    include_paint_order: typing.Optional[bool] = None,\n    include_dom_rects: typing.Optional[bool] = None,\n    include_blended_background_colors: typing.Optional[bool] = None,\n    include_text_color_opacities: typing.Optional[bool] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[typing.List[DocumentSnapshot], typing.List[str]],\n]:\n    \"\"\"\n    Returns a document snapshot, including the full DOM tree of the root node (including iframes,\n    template contents, and imported documents) in a flattened array, as well as layout and\n    white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is\n    flattened.\n\n    :param computed_styles: Whitelist of computed styles to return.\n    :param include_paint_order: *(Optional)* Whether to include layout object paint orders into the snapshot.\n    :param include_dom_rects: *(Optional)* Whether to include DOM rectangles (offsetRects, clientRects, scrollRects) into the snapshot\n    :param include_blended_background_colors: **(EXPERIMENTAL)** *(Optional)* Whether to include blended background colors in the snapshot (default: false). Blended background color is achieved by blending background colors of all elements that overlap with the current element.\n    :param include_text_color_opacities: **(EXPERIMENTAL)** *(Optional)* Whether to include text color opacity in the snapshot (default: false). An element might have the opacity property set that affects the text color of the element. The final text color opacity is computed based on the opacity of all overlapping elements.\n    :returns: A tuple with the following items:\n\n        0. **documents** - The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.\n        1. **strings** - Shared string table that all string properties refer to with indexes.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"computedStyles\"] = [i for i in computed_styles]\n    if include_paint_order is not None:\n        params[\"includePaintOrder\"] = include_paint_order\n    if include_dom_rects is not None:\n        params[\"includeDOMRects\"] = include_dom_rects\n    if include_blended_background_colors is not None:\n        params[\"includeBlendedBackgroundColors\"] = include_blended_background_colors\n    if include_text_color_opacities is not None:\n        params[\"includeTextColorOpacities\"] = include_text_color_opacities\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMSnapshot.captureSnapshot\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        [DocumentSnapshot.from_json(i) for i in json[\"documents\"]],\n        [str(i) for i in json[\"strings\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.disable","title":"<code>disable()</code>","text":"<p>Disables DOM snapshot agent for the given page.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables DOM snapshot agent for the given page.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMSnapshot.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.enable","title":"<code>enable()</code>","text":"<p>Enables DOM snapshot agent for the given page.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables DOM snapshot agent for the given page.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMSnapshot.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_snapshot/#zendriver.cdp.dom_snapshot.get_snapshot","title":"<code>get_snapshot(computed_style_whitelist, include_event_listeners=None, include_paint_order=None, include_user_agent_shadow_tree=None)</code>","text":"<p>Returns a document snapshot, including the full DOM tree of the root node (including iframes, template contents, and imported documents) in a flattened array, as well as layout and white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is flattened.</p> <p>.. deprecated:: 1.3</p> <p>Parameters:</p> Name Type Description Default <code>computed_style_whitelist</code> <code>List[str]</code> <p>Whitelist of computed styles to return.</p> required <code>include_event_listeners</code> <code>Optional[bool]</code> <p>(Optional) Whether or not to retrieve details of DOM listeners (default false).</p> <code>None</code> <code>include_paint_order</code> <code>Optional[bool]</code> <p>(Optional) Whether to determine and include the paint order index of LayoutTreeNodes (default false).</p> <code>None</code> <code>include_user_agent_shadow_tree</code> <code>Optional[bool]</code> <p>(Optional) Whether to include UA shadow tree in the snapshot (default false).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[List[DOMNode], List[LayoutTreeNode], List[ComputedStyle]]]</code> <p>A tuple with the following items:  0. domNodes - The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document. 1. layoutTreeNodes - The nodes in the layout tree. 2. computedStyles - Whitelisted ComputedStyle properties for each node in the layout tree.</p> Source code in <code>zendriver/cdp/dom_snapshot.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef get_snapshot(\n    computed_style_whitelist: typing.List[str],\n    include_event_listeners: typing.Optional[bool] = None,\n    include_paint_order: typing.Optional[bool] = None,\n    include_user_agent_shadow_tree: typing.Optional[bool] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[\n        typing.List[DOMNode], typing.List[LayoutTreeNode], typing.List[ComputedStyle]\n    ],\n]:\n    \"\"\"\n    Returns a document snapshot, including the full DOM tree of the root node (including iframes,\n    template contents, and imported documents) in a flattened array, as well as layout and\n    white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is\n    flattened.\n\n    .. deprecated:: 1.3\n\n    :param computed_style_whitelist: Whitelist of computed styles to return.\n    :param include_event_listeners: *(Optional)* Whether or not to retrieve details of DOM listeners (default false).\n    :param include_paint_order: *(Optional)* Whether to determine and include the paint order index of LayoutTreeNodes (default false).\n    :param include_user_agent_shadow_tree: *(Optional)* Whether to include UA shadow tree in the snapshot (default false).\n    :returns: A tuple with the following items:\n\n        0. **domNodes** - The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.\n        1. **layoutTreeNodes** - The nodes in the layout tree.\n        2. **computedStyles** - Whitelisted ComputedStyle properties for each node in the layout tree.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"computedStyleWhitelist\"] = [i for i in computed_style_whitelist]\n    if include_event_listeners is not None:\n        params[\"includeEventListeners\"] = include_event_listeners\n    if include_paint_order is not None:\n        params[\"includePaintOrder\"] = include_paint_order\n    if include_user_agent_shadow_tree is not None:\n        params[\"includeUserAgentShadowTree\"] = include_user_agent_shadow_tree\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMSnapshot.getSnapshot\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        [DOMNode.from_json(i) for i in json[\"domNodes\"]],\n        [LayoutTreeNode.from_json(i) for i in json[\"layoutTreeNodes\"]],\n        [ComputedStyle.from_json(i) for i in json[\"computedStyles\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/dom_storage/","title":"dom_storage","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemAdded","title":"<code>DomStorageItemAdded</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@event_class(\"DOMStorage.domStorageItemAdded\")\n@dataclass\nclass DomStorageItemAdded:\n    storage_id: StorageId\n    key: str\n    new_value: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DomStorageItemAdded:\n        return cls(\n            storage_id=StorageId.from_json(json[\"storageId\"]),\n            key=str(json[\"key\"]),\n            new_value=str(json[\"newValue\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemAdded.key","title":"<code>key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemAdded.new_value","title":"<code>new_value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemAdded.storage_id","title":"<code>storage_id: StorageId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemAdded.__init__","title":"<code>__init__(storage_id, key, new_value)</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemAdded.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DomStorageItemAdded:\n    return cls(\n        storage_id=StorageId.from_json(json[\"storageId\"]),\n        key=str(json[\"key\"]),\n        new_value=str(json[\"newValue\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemRemoved","title":"<code>DomStorageItemRemoved</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@event_class(\"DOMStorage.domStorageItemRemoved\")\n@dataclass\nclass DomStorageItemRemoved:\n    storage_id: StorageId\n    key: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DomStorageItemRemoved:\n        return cls(\n            storage_id=StorageId.from_json(json[\"storageId\"]), key=str(json[\"key\"])\n        )\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemRemoved.key","title":"<code>key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemRemoved.storage_id","title":"<code>storage_id: StorageId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemRemoved.__init__","title":"<code>__init__(storage_id, key)</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemRemoved.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DomStorageItemRemoved:\n    return cls(\n        storage_id=StorageId.from_json(json[\"storageId\"]), key=str(json[\"key\"])\n    )\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemUpdated","title":"<code>DomStorageItemUpdated</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@event_class(\"DOMStorage.domStorageItemUpdated\")\n@dataclass\nclass DomStorageItemUpdated:\n    storage_id: StorageId\n    key: str\n    old_value: str\n    new_value: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DomStorageItemUpdated:\n        return cls(\n            storage_id=StorageId.from_json(json[\"storageId\"]),\n            key=str(json[\"key\"]),\n            old_value=str(json[\"oldValue\"]),\n            new_value=str(json[\"newValue\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemUpdated.key","title":"<code>key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemUpdated.new_value","title":"<code>new_value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemUpdated.old_value","title":"<code>old_value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemUpdated.storage_id","title":"<code>storage_id: StorageId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemUpdated.__init__","title":"<code>__init__(storage_id, key, old_value, new_value)</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DomStorageItemUpdated:\n    return cls(\n        storage_id=StorageId.from_json(json[\"storageId\"]),\n        key=str(json[\"key\"]),\n        old_value=str(json[\"oldValue\"]),\n        new_value=str(json[\"newValue\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemsCleared","title":"<code>DomStorageItemsCleared</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@event_class(\"DOMStorage.domStorageItemsCleared\")\n@dataclass\nclass DomStorageItemsCleared:\n    storage_id: StorageId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DomStorageItemsCleared:\n        return cls(storage_id=StorageId.from_json(json[\"storageId\"]))\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemsCleared.storage_id","title":"<code>storage_id: StorageId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemsCleared.__init__","title":"<code>__init__(storage_id)</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.DomStorageItemsCleared.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DomStorageItemsCleared:\n    return cls(storage_id=StorageId.from_json(json[\"storageId\"]))\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.Item","title":"<code>Item</code>","text":"<p>               Bases: <code>list</code></p> <p>DOM Storage item.</p> Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>class Item(list):\n    \"\"\"\n    DOM Storage item.\n    \"\"\"\n\n    def to_json(self) -&gt; typing.List[str]:\n        return self\n\n    @classmethod\n    def from_json(cls, json: typing.List[str]) -&gt; Item:\n        return cls(json)\n\n    def __repr__(self):\n        return \"Item({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.Item.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def __repr__(self):\n    return \"Item({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.Item.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: typing.List[str]) -&gt; Item:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.Item.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def to_json(self) -&gt; typing.List[str]:\n    return self\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.SerializedStorageKey","title":"<code>SerializedStorageKey</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>class SerializedStorageKey(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SerializedStorageKey:\n        return cls(json)\n\n    def __repr__(self):\n        return \"SerializedStorageKey({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.SerializedStorageKey.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def __repr__(self):\n    return \"SerializedStorageKey({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.SerializedStorageKey.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SerializedStorageKey:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.SerializedStorageKey.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.StorageId","title":"<code>StorageId</code>  <code>dataclass</code>","text":"<p>DOM Storage identifier.</p> Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@dataclass\nclass StorageId:\n    \"\"\"\n    DOM Storage identifier.\n    \"\"\"\n\n    #: Whether the storage is local storage (not session storage).\n    is_local_storage: bool\n\n    #: Security origin for the storage.\n    security_origin: typing.Optional[str] = None\n\n    #: Represents a key by which DOM Storage keys its CachedStorageAreas\n    storage_key: typing.Optional[SerializedStorageKey] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"isLocalStorage\"] = self.is_local_storage\n        if self.security_origin is not None:\n            json[\"securityOrigin\"] = self.security_origin\n        if self.storage_key is not None:\n            json[\"storageKey\"] = self.storage_key.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StorageId:\n        return cls(\n            is_local_storage=bool(json[\"isLocalStorage\"]),\n            security_origin=(\n                str(json[\"securityOrigin\"])\n                if json.get(\"securityOrigin\", None) is not None\n                else None\n            ),\n            storage_key=(\n                SerializedStorageKey.from_json(json[\"storageKey\"])\n                if json.get(\"storageKey\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.StorageId.is_local_storage","title":"<code>is_local_storage: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.StorageId.security_origin","title":"<code>security_origin: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.StorageId.storage_key","title":"<code>storage_key: typing.Optional[SerializedStorageKey] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.StorageId.__init__","title":"<code>__init__(is_local_storage, security_origin=None, storage_key=None)</code>","text":""},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.StorageId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StorageId:\n    return cls(\n        is_local_storage=bool(json[\"isLocalStorage\"]),\n        security_origin=(\n            str(json[\"securityOrigin\"])\n            if json.get(\"securityOrigin\", None) is not None\n            else None\n        ),\n        storage_key=(\n            SerializedStorageKey.from_json(json[\"storageKey\"])\n            if json.get(\"storageKey\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.StorageId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"isLocalStorage\"] = self.is_local_storage\n    if self.security_origin is not None:\n        json[\"securityOrigin\"] = self.security_origin\n    if self.storage_key is not None:\n        json[\"storageKey\"] = self.storage_key.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.clear","title":"<code>clear(storage_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>storage_id</code> <code>StorageId</code> required Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def clear(storage_id: StorageId) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param storage_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"storageId\"] = storage_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMStorage.clear\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.disable","title":"<code>disable()</code>","text":"<p>Disables storage tracking, prevents storage events from being sent to the client.</p> Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables storage tracking, prevents storage events from being sent to the client.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMStorage.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.enable","title":"<code>enable()</code>","text":"<p>Enables storage tracking, storage events will now be delivered to the client.</p> Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables storage tracking, storage events will now be delivered to the client.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMStorage.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.get_dom_storage_items","title":"<code>get_dom_storage_items(storage_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>storage_id</code> <code>StorageId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Item]]</code> Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def get_dom_storage_items(\n    storage_id: StorageId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Item]]:\n    \"\"\"\n    :param storage_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"storageId\"] = storage_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMStorage.getDOMStorageItems\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [Item.from_json(i) for i in json[\"entries\"]]\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.remove_dom_storage_item","title":"<code>remove_dom_storage_item(storage_id, key)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>storage_id</code> <code>StorageId</code> required <code>key</code> <code>str</code> required Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def remove_dom_storage_item(\n    storage_id: StorageId, key: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param storage_id:\n    :param key:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"storageId\"] = storage_id.to_json()\n    params[\"key\"] = key\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMStorage.removeDOMStorageItem\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/dom_storage/#zendriver.cdp.dom_storage.set_dom_storage_item","title":"<code>set_dom_storage_item(storage_id, key, value)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>storage_id</code> <code>StorageId</code> required <code>key</code> <code>str</code> required <code>value</code> <code>str</code> required Source code in <code>zendriver/cdp/dom_storage.py</code> <pre><code>def set_dom_storage_item(\n    storage_id: StorageId, key: str, value: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param storage_id:\n    :param key:\n    :param value:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"storageId\"] = storage_id.to_json()\n    params[\"key\"] = key\n    params[\"value\"] = value\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"DOMStorage.setDOMStorageItem\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/","title":"emulation","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DevicePosture","title":"<code>DevicePosture</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass DevicePosture:\n    #: Current posture of the device\n    type_: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DevicePosture:\n        return cls(\n            type_=str(json[\"type\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DevicePosture.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DevicePosture.__init__","title":"<code>__init__(type_)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DevicePosture.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DevicePosture:\n    return cls(\n        type_=str(json[\"type\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DevicePosture.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisabledImageType","title":"<code>DisabledImageType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of image types that can be disabled.</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>class DisabledImageType(enum.Enum):\n    \"\"\"\n    Enum of image types that can be disabled.\n    \"\"\"\n\n    AVIF = \"avif\"\n    WEBP = \"webp\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; DisabledImageType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisabledImageType.AVIF","title":"<code>AVIF = 'avif'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisabledImageType.WEBP","title":"<code>WEBP = 'webp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisabledImageType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; DisabledImageType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisabledImageType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisplayFeature","title":"<code>DisplayFeature</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass DisplayFeature:\n    #: Orientation of a display feature in relation to screen\n    orientation: str\n\n    #: The offset from the screen origin in either the x (for vertical\n    #: orientation) or y (for horizontal orientation) direction.\n    offset: int\n\n    #: A display feature may mask content such that it is not physically\n    #: displayed - this length along with the offset describes this area.\n    #: A display feature that only splits content will have a 0 mask_length.\n    mask_length: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"orientation\"] = self.orientation\n        json[\"offset\"] = self.offset\n        json[\"maskLength\"] = self.mask_length\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DisplayFeature:\n        return cls(\n            orientation=str(json[\"orientation\"]),\n            offset=int(json[\"offset\"]),\n            mask_length=int(json[\"maskLength\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisplayFeature.mask_length","title":"<code>mask_length: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisplayFeature.offset","title":"<code>offset: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisplayFeature.orientation","title":"<code>orientation: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisplayFeature.__init__","title":"<code>__init__(orientation, offset, mask_length)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisplayFeature.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DisplayFeature:\n    return cls(\n        orientation=str(json[\"orientation\"]),\n        offset=int(json[\"offset\"]),\n        mask_length=int(json[\"maskLength\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.DisplayFeature.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"orientation\"] = self.orientation\n    json[\"offset\"] = self.offset\n    json[\"maskLength\"] = self.mask_length\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.MediaFeature","title":"<code>MediaFeature</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass MediaFeature:\n    name: str\n\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; MediaFeature:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.MediaFeature.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.MediaFeature.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.MediaFeature.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.MediaFeature.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; MediaFeature:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.MediaFeature.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.ScreenOrientation","title":"<code>ScreenOrientation</code>  <code>dataclass</code>","text":"<p>Screen orientation.</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass ScreenOrientation:\n    \"\"\"\n    Screen orientation.\n    \"\"\"\n\n    #: Orientation type.\n    type_: str\n\n    #: Orientation angle.\n    angle: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        json[\"angle\"] = self.angle\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScreenOrientation:\n        return cls(\n            type_=str(json[\"type\"]),\n            angle=int(json[\"angle\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.ScreenOrientation.angle","title":"<code>angle: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.ScreenOrientation.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.ScreenOrientation.__init__","title":"<code>__init__(type_, angle)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.ScreenOrientation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScreenOrientation:\n    return cls(\n        type_=str(json[\"type\"]),\n        angle=int(json[\"angle\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.ScreenOrientation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    json[\"angle\"] = self.angle\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorMetadata","title":"<code>SensorMetadata</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass SensorMetadata:\n    available: typing.Optional[bool] = None\n\n    minimum_frequency: typing.Optional[float] = None\n\n    maximum_frequency: typing.Optional[float] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.available is not None:\n            json[\"available\"] = self.available\n        if self.minimum_frequency is not None:\n            json[\"minimumFrequency\"] = self.minimum_frequency\n        if self.maximum_frequency is not None:\n            json[\"maximumFrequency\"] = self.maximum_frequency\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SensorMetadata:\n        return cls(\n            available=(\n                bool(json[\"available\"])\n                if json.get(\"available\", None) is not None\n                else None\n            ),\n            minimum_frequency=(\n                float(json[\"minimumFrequency\"])\n                if json.get(\"minimumFrequency\", None) is not None\n                else None\n            ),\n            maximum_frequency=(\n                float(json[\"maximumFrequency\"])\n                if json.get(\"maximumFrequency\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorMetadata.available","title":"<code>available: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorMetadata.maximum_frequency","title":"<code>maximum_frequency: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorMetadata.minimum_frequency","title":"<code>minimum_frequency: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorMetadata.__init__","title":"<code>__init__(available=None, minimum_frequency=None, maximum_frequency=None)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorMetadata.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SensorMetadata:\n    return cls(\n        available=(\n            bool(json[\"available\"])\n            if json.get(\"available\", None) is not None\n            else None\n        ),\n        minimum_frequency=(\n            float(json[\"minimumFrequency\"])\n            if json.get(\"minimumFrequency\", None) is not None\n            else None\n        ),\n        maximum_frequency=(\n            float(json[\"maximumFrequency\"])\n            if json.get(\"maximumFrequency\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorMetadata.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.available is not None:\n        json[\"available\"] = self.available\n    if self.minimum_frequency is not None:\n        json[\"minimumFrequency\"] = self.minimum_frequency\n    if self.maximum_frequency is not None:\n        json[\"maximumFrequency\"] = self.maximum_frequency\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReading","title":"<code>SensorReading</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass SensorReading:\n    single: typing.Optional[SensorReadingSingle] = None\n\n    xyz: typing.Optional[SensorReadingXYZ] = None\n\n    quaternion: typing.Optional[SensorReadingQuaternion] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.single is not None:\n            json[\"single\"] = self.single.to_json()\n        if self.xyz is not None:\n            json[\"xyz\"] = self.xyz.to_json()\n        if self.quaternion is not None:\n            json[\"quaternion\"] = self.quaternion.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SensorReading:\n        return cls(\n            single=(\n                SensorReadingSingle.from_json(json[\"single\"])\n                if json.get(\"single\", None) is not None\n                else None\n            ),\n            xyz=(\n                SensorReadingXYZ.from_json(json[\"xyz\"])\n                if json.get(\"xyz\", None) is not None\n                else None\n            ),\n            quaternion=(\n                SensorReadingQuaternion.from_json(json[\"quaternion\"])\n                if json.get(\"quaternion\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReading.quaternion","title":"<code>quaternion: typing.Optional[SensorReadingQuaternion] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReading.single","title":"<code>single: typing.Optional[SensorReadingSingle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReading.xyz","title":"<code>xyz: typing.Optional[SensorReadingXYZ] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReading.__init__","title":"<code>__init__(single=None, xyz=None, quaternion=None)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReading.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SensorReading:\n    return cls(\n        single=(\n            SensorReadingSingle.from_json(json[\"single\"])\n            if json.get(\"single\", None) is not None\n            else None\n        ),\n        xyz=(\n            SensorReadingXYZ.from_json(json[\"xyz\"])\n            if json.get(\"xyz\", None) is not None\n            else None\n        ),\n        quaternion=(\n            SensorReadingQuaternion.from_json(json[\"quaternion\"])\n            if json.get(\"quaternion\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReading.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.single is not None:\n        json[\"single\"] = self.single.to_json()\n    if self.xyz is not None:\n        json[\"xyz\"] = self.xyz.to_json()\n    if self.quaternion is not None:\n        json[\"quaternion\"] = self.quaternion.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingQuaternion","title":"<code>SensorReadingQuaternion</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass SensorReadingQuaternion:\n    x: float\n\n    y: float\n\n    z: float\n\n    w: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"x\"] = self.x\n        json[\"y\"] = self.y\n        json[\"z\"] = self.z\n        json[\"w\"] = self.w\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SensorReadingQuaternion:\n        return cls(\n            x=float(json[\"x\"]),\n            y=float(json[\"y\"]),\n            z=float(json[\"z\"]),\n            w=float(json[\"w\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingQuaternion.w","title":"<code>w: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingQuaternion.x","title":"<code>x: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingQuaternion.y","title":"<code>y: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingQuaternion.z","title":"<code>z: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingQuaternion.__init__","title":"<code>__init__(x, y, z, w)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingQuaternion.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SensorReadingQuaternion:\n    return cls(\n        x=float(json[\"x\"]),\n        y=float(json[\"y\"]),\n        z=float(json[\"z\"]),\n        w=float(json[\"w\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingQuaternion.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"x\"] = self.x\n    json[\"y\"] = self.y\n    json[\"z\"] = self.z\n    json[\"w\"] = self.w\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingSingle","title":"<code>SensorReadingSingle</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass SensorReadingSingle:\n    value: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SensorReadingSingle:\n        return cls(\n            value=float(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingSingle.value","title":"<code>value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingSingle.__init__","title":"<code>__init__(value)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingSingle.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SensorReadingSingle:\n    return cls(\n        value=float(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingSingle.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingXYZ","title":"<code>SensorReadingXYZ</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass SensorReadingXYZ:\n    x: float\n\n    y: float\n\n    z: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"x\"] = self.x\n        json[\"y\"] = self.y\n        json[\"z\"] = self.z\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SensorReadingXYZ:\n        return cls(\n            x=float(json[\"x\"]),\n            y=float(json[\"y\"]),\n            z=float(json[\"z\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingXYZ.x","title":"<code>x: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingXYZ.y","title":"<code>y: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingXYZ.z","title":"<code>z: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingXYZ.__init__","title":"<code>__init__(x, y, z)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingXYZ.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SensorReadingXYZ:\n    return cls(\n        x=float(json[\"x\"]),\n        y=float(json[\"y\"]),\n        z=float(json[\"z\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorReadingXYZ.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"x\"] = self.x\n    json[\"y\"] = self.y\n    json[\"z\"] = self.z\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType","title":"<code>SensorType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Used to specify sensor types to emulate. See https://w3c.github.io/sensors/#automation for more information.</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>class SensorType(enum.Enum):\n    \"\"\"\n    Used to specify sensor types to emulate.\n    See https://w3c.github.io/sensors/#automation for more information.\n    \"\"\"\n\n    ABSOLUTE_ORIENTATION = \"absolute-orientation\"\n    ACCELEROMETER = \"accelerometer\"\n    AMBIENT_LIGHT = \"ambient-light\"\n    GRAVITY = \"gravity\"\n    GYROSCOPE = \"gyroscope\"\n    LINEAR_ACCELERATION = \"linear-acceleration\"\n    MAGNETOMETER = \"magnetometer\"\n    PROXIMITY = \"proximity\"\n    RELATIVE_ORIENTATION = \"relative-orientation\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SensorType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.ABSOLUTE_ORIENTATION","title":"<code>ABSOLUTE_ORIENTATION = 'absolute-orientation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.ACCELEROMETER","title":"<code>ACCELEROMETER = 'accelerometer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.AMBIENT_LIGHT","title":"<code>AMBIENT_LIGHT = 'ambient-light'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.GRAVITY","title":"<code>GRAVITY = 'gravity'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.GYROSCOPE","title":"<code>GYROSCOPE = 'gyroscope'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.LINEAR_ACCELERATION","title":"<code>LINEAR_ACCELERATION = 'linear-acceleration'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.MAGNETOMETER","title":"<code>MAGNETOMETER = 'magnetometer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.PROXIMITY","title":"<code>PROXIMITY = 'proximity'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.RELATIVE_ORIENTATION","title":"<code>RELATIVE_ORIENTATION = 'relative-orientation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SensorType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.SensorType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentBrandVersion","title":"<code>UserAgentBrandVersion</code>  <code>dataclass</code>","text":"<p>Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass UserAgentBrandVersion:\n    \"\"\"\n    Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints\n    \"\"\"\n\n    brand: str\n\n    version: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"brand\"] = self.brand\n        json[\"version\"] = self.version\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; UserAgentBrandVersion:\n        return cls(\n            brand=str(json[\"brand\"]),\n            version=str(json[\"version\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentBrandVersion.brand","title":"<code>brand: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentBrandVersion.version","title":"<code>version: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentBrandVersion.__init__","title":"<code>__init__(brand, version)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentBrandVersion.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; UserAgentBrandVersion:\n    return cls(\n        brand=str(json[\"brand\"]),\n        version=str(json[\"version\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentBrandVersion.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"brand\"] = self.brand\n    json[\"version\"] = self.version\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata","title":"<code>UserAgentMetadata</code>  <code>dataclass</code>","text":"<p>Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints Missing optional values will be filled in by the target with what it would normally use.</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@dataclass\nclass UserAgentMetadata:\n    \"\"\"\n    Used to specify User Agent Client Hints to emulate. See https://wicg.github.io/ua-client-hints\n    Missing optional values will be filled in by the target with what it would normally use.\n    \"\"\"\n\n    platform: str\n\n    platform_version: str\n\n    architecture: str\n\n    model: str\n\n    mobile: bool\n\n    #: Brands appearing in Sec-CH-UA.\n    brands: typing.Optional[typing.List[UserAgentBrandVersion]] = None\n\n    #: Brands appearing in Sec-CH-UA-Full-Version-List.\n    full_version_list: typing.Optional[typing.List[UserAgentBrandVersion]] = None\n\n    full_version: typing.Optional[str] = None\n\n    bitness: typing.Optional[str] = None\n\n    wow64: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"platform\"] = self.platform\n        json[\"platformVersion\"] = self.platform_version\n        json[\"architecture\"] = self.architecture\n        json[\"model\"] = self.model\n        json[\"mobile\"] = self.mobile\n        if self.brands is not None:\n            json[\"brands\"] = [i.to_json() for i in self.brands]\n        if self.full_version_list is not None:\n            json[\"fullVersionList\"] = [i.to_json() for i in self.full_version_list]\n        if self.full_version is not None:\n            json[\"fullVersion\"] = self.full_version\n        if self.bitness is not None:\n            json[\"bitness\"] = self.bitness\n        if self.wow64 is not None:\n            json[\"wow64\"] = self.wow64\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; UserAgentMetadata:\n        return cls(\n            platform=str(json[\"platform\"]),\n            platform_version=str(json[\"platformVersion\"]),\n            architecture=str(json[\"architecture\"]),\n            model=str(json[\"model\"]),\n            mobile=bool(json[\"mobile\"]),\n            brands=(\n                [UserAgentBrandVersion.from_json(i) for i in json[\"brands\"]]\n                if json.get(\"brands\", None) is not None\n                else None\n            ),\n            full_version_list=(\n                [UserAgentBrandVersion.from_json(i) for i in json[\"fullVersionList\"]]\n                if json.get(\"fullVersionList\", None) is not None\n                else None\n            ),\n            full_version=(\n                str(json[\"fullVersion\"])\n                if json.get(\"fullVersion\", None) is not None\n                else None\n            ),\n            bitness=(\n                str(json[\"bitness\"]) if json.get(\"bitness\", None) is not None else None\n            ),\n            wow64=bool(json[\"wow64\"]) if json.get(\"wow64\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.architecture","title":"<code>architecture: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.bitness","title":"<code>bitness: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.brands","title":"<code>brands: typing.Optional[typing.List[UserAgentBrandVersion]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.full_version","title":"<code>full_version: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.full_version_list","title":"<code>full_version_list: typing.Optional[typing.List[UserAgentBrandVersion]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.mobile","title":"<code>mobile: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.model","title":"<code>model: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.platform","title":"<code>platform: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.platform_version","title":"<code>platform_version: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.wow64","title":"<code>wow64: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.__init__","title":"<code>__init__(platform, platform_version, architecture, model, mobile, brands=None, full_version_list=None, full_version=None, bitness=None, wow64=None)</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; UserAgentMetadata:\n    return cls(\n        platform=str(json[\"platform\"]),\n        platform_version=str(json[\"platformVersion\"]),\n        architecture=str(json[\"architecture\"]),\n        model=str(json[\"model\"]),\n        mobile=bool(json[\"mobile\"]),\n        brands=(\n            [UserAgentBrandVersion.from_json(i) for i in json[\"brands\"]]\n            if json.get(\"brands\", None) is not None\n            else None\n        ),\n        full_version_list=(\n            [UserAgentBrandVersion.from_json(i) for i in json[\"fullVersionList\"]]\n            if json.get(\"fullVersionList\", None) is not None\n            else None\n        ),\n        full_version=(\n            str(json[\"fullVersion\"])\n            if json.get(\"fullVersion\", None) is not None\n            else None\n        ),\n        bitness=(\n            str(json[\"bitness\"]) if json.get(\"bitness\", None) is not None else None\n        ),\n        wow64=bool(json[\"wow64\"]) if json.get(\"wow64\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.UserAgentMetadata.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"platform\"] = self.platform\n    json[\"platformVersion\"] = self.platform_version\n    json[\"architecture\"] = self.architecture\n    json[\"model\"] = self.model\n    json[\"mobile\"] = self.mobile\n    if self.brands is not None:\n        json[\"brands\"] = [i.to_json() for i in self.brands]\n    if self.full_version_list is not None:\n        json[\"fullVersionList\"] = [i.to_json() for i in self.full_version_list]\n    if self.full_version is not None:\n        json[\"fullVersion\"] = self.full_version\n    if self.bitness is not None:\n        json[\"bitness\"] = self.bitness\n    if self.wow64 is not None:\n        json[\"wow64\"] = self.wow64\n    return json\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.VirtualTimeBudgetExpired","title":"<code>VirtualTimeBudgetExpired</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Notification sent after the virtual time budget for the current VirtualTimePolicy has run out.</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@event_class(\"Emulation.virtualTimeBudgetExpired\")\n@dataclass\nclass VirtualTimeBudgetExpired:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Notification sent after the virtual time budget for the current VirtualTimePolicy has run out.\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; VirtualTimeBudgetExpired:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.VirtualTimeBudgetExpired.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.VirtualTimeBudgetExpired.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; VirtualTimeBudgetExpired:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.VirtualTimePolicy","title":"<code>VirtualTimePolicy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to allow the next delayed task (if any) to run; pause: The virtual time base may not advance; pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending resource fetches.</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>class VirtualTimePolicy(enum.Enum):\n    \"\"\"\n    advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to\n    allow the next delayed task (if any) to run; pause: The virtual time base may not advance;\n    pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending\n    resource fetches.\n    \"\"\"\n\n    ADVANCE = \"advance\"\n    PAUSE = \"pause\"\n    PAUSE_IF_NETWORK_FETCHES_PENDING = \"pauseIfNetworkFetchesPending\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; VirtualTimePolicy:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.VirtualTimePolicy.ADVANCE","title":"<code>ADVANCE = 'advance'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.VirtualTimePolicy.PAUSE","title":"<code>PAUSE = 'pause'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.VirtualTimePolicy.PAUSE_IF_NETWORK_FETCHES_PENDING","title":"<code>PAUSE_IF_NETWORK_FETCHES_PENDING = 'pauseIfNetworkFetchesPending'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.VirtualTimePolicy.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; VirtualTimePolicy:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.VirtualTimePolicy.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.can_emulate","title":"<code>can_emulate()</code>","text":"<p>Tells whether emulation is supported.</p> <p>.. deprecated:: 1.3</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, bool]</code> <p>True if emulation is supported.</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef can_emulate() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]:\n    \"\"\"\n    Tells whether emulation is supported.\n\n    .. deprecated:: 1.3\n\n    :returns: True if emulation is supported.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.canEmulate\",\n    }\n    json = yield cmd_dict\n    return bool(json[\"result\"])\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.clear_device_metrics_override","title":"<code>clear_device_metrics_override()</code>","text":"<p>Clears the overridden device metrics.</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def clear_device_metrics_override() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears the overridden device metrics.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.clearDeviceMetricsOverride\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.clear_device_posture_override","title":"<code>clear_device_posture_override()</code>","text":"<p>Clears a device posture override set with either setDeviceMetricsOverride() or setDevicePostureOverride() and starts using posture information from the platform again. Does nothing if no override is set.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def clear_device_posture_override() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears a device posture override set with either setDeviceMetricsOverride()\n    or setDevicePostureOverride() and starts using posture information from the\n    platform again.\n    Does nothing if no override is set.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.clearDevicePostureOverride\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.clear_geolocation_override","title":"<code>clear_geolocation_override()</code>","text":"<p>Clears the overridden Geolocation Position and Error.</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def clear_geolocation_override() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears the overridden Geolocation Position and Error.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.clearGeolocationOverride\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.clear_idle_override","title":"<code>clear_idle_override()</code>","text":"<p>Clears Idle state overrides.</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def clear_idle_override() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears Idle state overrides.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.clearIdleOverride\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.get_overridden_sensor_information","title":"<code>get_overridden_sensor_information(type_)</code>","text":"<p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>SensorType</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, float]</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def get_overridden_sensor_information(\n    type_: SensorType,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, float]:\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :param type_:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"type\"] = type_.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.getOverriddenSensorInformation\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return float(json[\"requestedSamplingFrequency\"])\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.reset_page_scale_factor","title":"<code>reset_page_scale_factor()</code>","text":"<p>Requests that page scale factor is reset to initial values.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def reset_page_scale_factor() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Requests that page scale factor is reset to initial values.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.resetPageScaleFactor\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_auto_dark_mode_override","title":"<code>set_auto_dark_mode_override(enabled=None)</code>","text":"<p>Automatically render all web contents using a dark theme.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>Optional[bool]</code> <p>(Optional) Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.</p> <code>None</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_auto_dark_mode_override(\n    enabled: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Automatically render all web contents using a dark theme.\n\n    **EXPERIMENTAL**\n\n    :param enabled: *(Optional)* Whether to enable or disable automatic dark mode. If not specified, any existing override will be cleared.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if enabled is not None:\n        params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setAutoDarkModeOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_automation_override","title":"<code>set_automation_override(enabled)</code>","text":"<p>Allows overriding the automation flag.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether the override should be enabled.</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_automation_override(\n    enabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Allows overriding the automation flag.\n\n    **EXPERIMENTAL**\n\n    :param enabled: Whether the override should be enabled.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setAutomationOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_cpu_throttling_rate","title":"<code>set_cpu_throttling_rate(rate)</code>","text":"<p>Enables CPU throttling to emulate slow CPUs.</p> <p>Parameters:</p> Name Type Description Default <code>rate</code> <code>float</code> <p>Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_cpu_throttling_rate(\n    rate: float,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables CPU throttling to emulate slow CPUs.\n\n    :param rate: Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"rate\"] = rate\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setCPUThrottlingRate\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_default_background_color_override","title":"<code>set_default_background_color_override(color=None)</code>","text":"<p>Sets or clears an override of the default background color of the frame. This override is used if the content does not specify one.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>Optional[RGBA]</code> <p>(Optional) RGBA of the default background color. If not specified, any existing override will be cleared.</p> <code>None</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_default_background_color_override(\n    color: typing.Optional[dom.RGBA] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets or clears an override of the default background color of the frame. This override is used\n    if the content does not specify one.\n\n    :param color: *(Optional)* RGBA of the default background color. If not specified, any existing override will be cleared.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if color is not None:\n        params[\"color\"] = color.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setDefaultBackgroundColorOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_device_metrics_override","title":"<code>set_device_metrics_override(width, height, device_scale_factor, mobile, scale=None, screen_width=None, screen_height=None, position_x=None, position_y=None, dont_set_visible_size=None, screen_orientation=None, viewport=None, display_feature=None, device_posture=None)</code>","text":"<p>Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and \"device-width\"/\"device-height\"-related CSS media query results).</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.</p> required <code>height</code> <code>int</code> <p>Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.</p> required <code>device_scale_factor</code> <code>float</code> <p>Overriding device scale factor value. 0 disables the override.</p> required <code>mobile</code> <code>bool</code> <p>Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.</p> required <code>scale</code> <code>Optional[float]</code> <p>(EXPERIMENTAL) (Optional) Scale to apply to resulting view image.</p> <code>None</code> <code>screen_width</code> <code>Optional[int]</code> <p>(EXPERIMENTAL) (Optional) Overriding screen width value in pixels (minimum 0, maximum 10000000).</p> <code>None</code> <code>screen_height</code> <code>Optional[int]</code> <p>(EXPERIMENTAL) (Optional) Overriding screen height value in pixels (minimum 0, maximum 10000000).</p> <code>None</code> <code>position_x</code> <code>Optional[int]</code> <p>(EXPERIMENTAL) (Optional) Overriding view X position on screen in pixels (minimum 0, maximum 10000000).</p> <code>None</code> <code>position_y</code> <code>Optional[int]</code> <p>(EXPERIMENTAL) (Optional) Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).</p> <code>None</code> <code>dont_set_visible_size</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Do not set visible view size, rely upon explicit setVisibleSize call.</p> <code>None</code> <code>screen_orientation</code> <code>Optional[ScreenOrientation]</code> <p>(Optional) Screen orientation override.</p> <code>None</code> <code>viewport</code> <code>Optional[Viewport]</code> <p>(EXPERIMENTAL) (Optional) If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.</p> <code>None</code> <code>display_feature</code> <code>Optional[DisplayFeature]</code> <p>(EXPERIMENTAL) (Optional) If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off.</p> <code>None</code> <code>device_posture</code> <code>Optional[DevicePosture]</code> <p>(DEPRECATED) (EXPERIMENTAL) (Optional) If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.</p> <code>None</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_device_metrics_override(\n    width: int,\n    height: int,\n    device_scale_factor: float,\n    mobile: bool,\n    scale: typing.Optional[float] = None,\n    screen_width: typing.Optional[int] = None,\n    screen_height: typing.Optional[int] = None,\n    position_x: typing.Optional[int] = None,\n    position_y: typing.Optional[int] = None,\n    dont_set_visible_size: typing.Optional[bool] = None,\n    screen_orientation: typing.Optional[ScreenOrientation] = None,\n    viewport: typing.Optional[page.Viewport] = None,\n    display_feature: typing.Optional[DisplayFeature] = None,\n    device_posture: typing.Optional[DevicePosture] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,\n    window.innerWidth, window.innerHeight, and \"device-width\"/\"device-height\"-related CSS media\n    query results).\n\n    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.\n    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.\n    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.\n    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.\n    :param scale: **(EXPERIMENTAL)** *(Optional)* Scale to apply to resulting view image.\n    :param screen_width: **(EXPERIMENTAL)** *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).\n    :param screen_height: **(EXPERIMENTAL)** *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).\n    :param position_x: **(EXPERIMENTAL)** *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).\n    :param position_y: **(EXPERIMENTAL)** *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).\n    :param dont_set_visible_size: **(EXPERIMENTAL)** *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.\n    :param screen_orientation: *(Optional)* Screen orientation override.\n    :param viewport: **(EXPERIMENTAL)** *(Optional)* If set, the visible area of the page will be overridden to this viewport. This viewport change is not observed by the page, e.g. viewport-relative elements do not change positions.\n    :param display_feature: **(EXPERIMENTAL)** *(Optional)* If set, the display feature of a multi-segment screen. If not set, multi-segment support is turned-off.\n    :param device_posture: **(DEPRECATED)** **(EXPERIMENTAL)** *(Optional)* If set, the posture of a foldable device. If not set the posture is set to continuous. Deprecated, use Emulation.setDevicePostureOverride.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"width\"] = width\n    params[\"height\"] = height\n    params[\"deviceScaleFactor\"] = device_scale_factor\n    params[\"mobile\"] = mobile\n    if scale is not None:\n        params[\"scale\"] = scale\n    if screen_width is not None:\n        params[\"screenWidth\"] = screen_width\n    if screen_height is not None:\n        params[\"screenHeight\"] = screen_height\n    if position_x is not None:\n        params[\"positionX\"] = position_x\n    if position_y is not None:\n        params[\"positionY\"] = position_y\n    if dont_set_visible_size is not None:\n        params[\"dontSetVisibleSize\"] = dont_set_visible_size\n    if screen_orientation is not None:\n        params[\"screenOrientation\"] = screen_orientation.to_json()\n    if viewport is not None:\n        params[\"viewport\"] = viewport.to_json()\n    if display_feature is not None:\n        params[\"displayFeature\"] = display_feature.to_json()\n    if device_posture is not None:\n        params[\"devicePosture\"] = device_posture.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setDeviceMetricsOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_device_posture_override","title":"<code>set_device_posture_override(posture)</code>","text":"<p>Start reporting the given posture value to the Device Posture API. This override can also be set in setDeviceMetricsOverride().</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>posture</code> <code>DevicePosture</code> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_device_posture_override(\n    posture: DevicePosture,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Start reporting the given posture value to the Device Posture API.\n    This override can also be set in setDeviceMetricsOverride().\n\n    **EXPERIMENTAL**\n\n    :param posture:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"posture\"] = posture.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setDevicePostureOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_disabled_image_types","title":"<code>set_disabled_image_types(image_types)</code>","text":"<p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>image_types</code> <code>List[DisabledImageType]</code> <p>Image types to disable.</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_disabled_image_types(\n    image_types: typing.List[DisabledImageType],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :param image_types: Image types to disable.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"imageTypes\"] = [i.to_json() for i in image_types]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setDisabledImageTypes\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_document_cookie_disabled","title":"<code>set_document_cookie_disabled(disabled)</code>","text":"<p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>disabled</code> <code>bool</code> <p>Whether document.coookie API should be disabled.</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_document_cookie_disabled(\n    disabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :param disabled: Whether document.coookie API should be disabled.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"disabled\"] = disabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setDocumentCookieDisabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_emit_touch_events_for_mouse","title":"<code>set_emit_touch_events_for_mouse(enabled, configuration=None)</code>","text":"<p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether touch emulation based on mouse input should be enabled.</p> required <code>configuration</code> <code>Optional[str]</code> <p>(Optional) Touch/gesture events configuration. Default: current platform.</p> <code>None</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_emit_touch_events_for_mouse(\n    enabled: bool, configuration: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :param enabled: Whether touch emulation based on mouse input should be enabled.\n    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    if configuration is not None:\n        params[\"configuration\"] = configuration\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setEmitTouchEventsForMouse\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_emulated_media","title":"<code>set_emulated_media(media=None, features=None)</code>","text":"<p>Emulates the given media type or media feature for CSS media queries.</p> <p>Parameters:</p> Name Type Description Default <code>media</code> <code>Optional[str]</code> <p>(Optional) Media type to emulate. Empty string disables the override.</p> <code>None</code> <code>features</code> <code>Optional[List[MediaFeature]]</code> <p>(Optional) Media features to emulate.</p> <code>None</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_emulated_media(\n    media: typing.Optional[str] = None,\n    features: typing.Optional[typing.List[MediaFeature]] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Emulates the given media type or media feature for CSS media queries.\n\n    :param media: *(Optional)* Media type to emulate. Empty string disables the override.\n    :param features: *(Optional)* Media features to emulate.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if media is not None:\n        params[\"media\"] = media\n    if features is not None:\n        params[\"features\"] = [i.to_json() for i in features]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setEmulatedMedia\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_emulated_vision_deficiency","title":"<code>set_emulated_vision_deficiency(type_)</code>","text":"<p>Emulates the given vision deficiency.</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>str</code> <p>Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_emulated_vision_deficiency(\n    type_: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Emulates the given vision deficiency.\n\n    :param type_: Vision deficiency to emulate. Order: best-effort emulations come first, followed by any physiologically accurate emulations for medically recognized color vision deficiencies.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"type\"] = type_\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setEmulatedVisionDeficiency\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_focus_emulation_enabled","title":"<code>set_focus_emulation_enabled(enabled)</code>","text":"<p>Enables or disables simulating a focused and active page.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable to disable focus emulation.</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_focus_emulation_enabled(\n    enabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables or disables simulating a focused and active page.\n\n    **EXPERIMENTAL**\n\n    :param enabled: Whether to enable to disable focus emulation.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setFocusEmulationEnabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_geolocation_override","title":"<code>set_geolocation_override(latitude=None, longitude=None, accuracy=None)</code>","text":"<p>Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.</p> <p>Parameters:</p> Name Type Description Default <code>latitude</code> <code>Optional[float]</code> <p>(Optional) Mock latitude</p> <code>None</code> <code>longitude</code> <code>Optional[float]</code> <p>(Optional) Mock longitude</p> <code>None</code> <code>accuracy</code> <code>Optional[float]</code> <p>(Optional) Mock accuracy</p> <code>None</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_geolocation_override(\n    latitude: typing.Optional[float] = None,\n    longitude: typing.Optional[float] = None,\n    accuracy: typing.Optional[float] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position\n    unavailable.\n\n    :param latitude: *(Optional)* Mock latitude\n    :param longitude: *(Optional)* Mock longitude\n    :param accuracy: *(Optional)* Mock accuracy\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if latitude is not None:\n        params[\"latitude\"] = latitude\n    if longitude is not None:\n        params[\"longitude\"] = longitude\n    if accuracy is not None:\n        params[\"accuracy\"] = accuracy\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setGeolocationOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_hardware_concurrency_override","title":"<code>set_hardware_concurrency_override(hardware_concurrency)</code>","text":"<p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>hardware_concurrency</code> <code>int</code> <p>Hardware concurrency to report</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_hardware_concurrency_override(\n    hardware_concurrency: int,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :param hardware_concurrency: Hardware concurrency to report\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"hardwareConcurrency\"] = hardware_concurrency\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setHardwareConcurrencyOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_idle_override","title":"<code>set_idle_override(is_user_active, is_screen_unlocked)</code>","text":"<p>Overrides the Idle state.</p> <p>Parameters:</p> Name Type Description Default <code>is_user_active</code> <code>bool</code> <p>Mock isUserActive</p> required <code>is_screen_unlocked</code> <code>bool</code> <p>Mock isScreenUnlocked</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_idle_override(\n    is_user_active: bool, is_screen_unlocked: bool\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides the Idle state.\n\n    :param is_user_active: Mock isUserActive\n    :param is_screen_unlocked: Mock isScreenUnlocked\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"isUserActive\"] = is_user_active\n    params[\"isScreenUnlocked\"] = is_screen_unlocked\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setIdleOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_locale_override","title":"<code>set_locale_override(locale=None)</code>","text":"<p>Overrides default host system locale with the specified one.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>locale</code> <code>Optional[str]</code> <p>(Optional) ICU style C locale (e.g. \"en_US\"). If not specified or empty, disables the override and restores default host system locale.</p> <code>None</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_locale_override(\n    locale: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides default host system locale with the specified one.\n\n    **EXPERIMENTAL**\n\n    :param locale: *(Optional)* ICU style C locale (e.g. \"en_US\"). If not specified or empty, disables the override and restores default host system locale.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if locale is not None:\n        params[\"locale\"] = locale\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setLocaleOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_navigator_overrides","title":"<code>set_navigator_overrides(platform)</code>","text":"<p>Overrides value returned by the javascript navigator object.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>platform</code> <code>str</code> <p>The platform navigator.platform should return.</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_navigator_overrides(\n    platform: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides value returned by the javascript navigator object.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param platform: The platform navigator.platform should return.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"platform\"] = platform\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setNavigatorOverrides\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_page_scale_factor","title":"<code>set_page_scale_factor(page_scale_factor)</code>","text":"<p>Sets a specified page scale factor.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>page_scale_factor</code> <code>float</code> <p>Page scale factor.</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_page_scale_factor(\n    page_scale_factor: float,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets a specified page scale factor.\n\n    **EXPERIMENTAL**\n\n    :param page_scale_factor: Page scale factor.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"pageScaleFactor\"] = page_scale_factor\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setPageScaleFactor\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_script_execution_disabled","title":"<code>set_script_execution_disabled(value)</code>","text":"<p>Switches script execution in the page.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>Whether script execution should be disabled in the page.</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_script_execution_disabled(\n    value: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Switches script execution in the page.\n\n    :param value: Whether script execution should be disabled in the page.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"value\"] = value\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setScriptExecutionDisabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_scrollbars_hidden","title":"<code>set_scrollbars_hidden(hidden)</code>","text":"<p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>hidden</code> <code>bool</code> <p>Whether scrollbars should be always hidden.</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_scrollbars_hidden(\n    hidden: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :param hidden: Whether scrollbars should be always hidden.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"hidden\"] = hidden\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setScrollbarsHidden\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_sensor_override_enabled","title":"<code>set_sensor_override_enabled(enabled, type_, metadata=None)</code>","text":"<p>Overrides a platform sensor of a given type. If <code>enabled</code> is true, calls to Sensor.start() will use a virtual sensor as backend rather than fetching data from a real hardware sensor. Otherwise, existing virtual sensor-backend Sensor objects will fire an error event and new calls to Sensor.start() will attempt to use a real sensor instead.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> required <code>type_</code> <code>SensorType</code> required <code>metadata</code> <code>Optional[SensorMetadata]</code> <p>(Optional)</p> <code>None</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_sensor_override_enabled(\n    enabled: bool, type_: SensorType, metadata: typing.Optional[SensorMetadata] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides a platform sensor of a given type. If ``enabled`` is true, calls to\n    Sensor.start() will use a virtual sensor as backend rather than fetching\n    data from a real hardware sensor. Otherwise, existing virtual\n    sensor-backend Sensor objects will fire an error event and new calls to\n    Sensor.start() will attempt to use a real sensor instead.\n\n    **EXPERIMENTAL**\n\n    :param enabled:\n    :param type_:\n    :param metadata: *(Optional)*\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    params[\"type\"] = type_.to_json()\n    if metadata is not None:\n        params[\"metadata\"] = metadata.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setSensorOverrideEnabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_sensor_override_readings","title":"<code>set_sensor_override_readings(type_, reading)</code>","text":"<p>Updates the sensor readings reported by a sensor type previously overridden by setSensorOverrideEnabled.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>SensorType</code> required <code>reading</code> <code>SensorReading</code> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_sensor_override_readings(\n    type_: SensorType, reading: SensorReading\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Updates the sensor readings reported by a sensor type previously overridden\n    by setSensorOverrideEnabled.\n\n    **EXPERIMENTAL**\n\n    :param type_:\n    :param reading:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"type\"] = type_.to_json()\n    params[\"reading\"] = reading.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setSensorOverrideReadings\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_timezone_override","title":"<code>set_timezone_override(timezone_id)</code>","text":"<p>Overrides default host system timezone with the specified one.</p> <p>Parameters:</p> Name Type Description Default <code>timezone_id</code> <code>str</code> <p>The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_timezone_override(\n    timezone_id: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides default host system timezone with the specified one.\n\n    :param timezone_id: The timezone identifier. List of supported timezones: https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt If empty, disables the override and restores default host system timezone.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"timezoneId\"] = timezone_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setTimezoneOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_touch_emulation_enabled","title":"<code>set_touch_emulation_enabled(enabled, max_touch_points=None)</code>","text":"<p>Enables touch on platforms which do not support them.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether the touch event emulation should be enabled.</p> required <code>max_touch_points</code> <code>Optional[int]</code> <p>(Optional) Maximum touch points supported. Defaults to one.</p> <code>None</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_touch_emulation_enabled(\n    enabled: bool, max_touch_points: typing.Optional[int] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables touch on platforms which do not support them.\n\n    :param enabled: Whether the touch event emulation should be enabled.\n    :param max_touch_points: *(Optional)* Maximum touch points supported. Defaults to one.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    if max_touch_points is not None:\n        params[\"maxTouchPoints\"] = max_touch_points\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setTouchEmulationEnabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_user_agent_override","title":"<code>set_user_agent_override(user_agent, accept_language=None, platform=None, user_agent_metadata=None)</code>","text":"<p>Allows overriding user agent with the given string. <code>userAgentMetadata</code> must be set for Client Hint headers to be sent.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>User agent to use.</p> required <code>accept_language</code> <code>Optional[str]</code> <p>(Optional) Browser language to emulate.</p> <code>None</code> <code>platform</code> <code>Optional[str]</code> <p>(Optional) The platform navigator.platform should return.</p> <code>None</code> <code>user_agent_metadata</code> <code>Optional[UserAgentMetadata]</code> <p>(EXPERIMENTAL) (Optional) To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData</p> <code>None</code> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_user_agent_override(\n    user_agent: str,\n    accept_language: typing.Optional[str] = None,\n    platform: typing.Optional[str] = None,\n    user_agent_metadata: typing.Optional[UserAgentMetadata] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Allows overriding user agent with the given string.\n    ``userAgentMetadata`` must be set for Client Hint headers to be sent.\n\n    :param user_agent: User agent to use.\n    :param accept_language: *(Optional)* Browser language to emulate.\n    :param platform: *(Optional)* The platform navigator.platform should return.\n    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"userAgent\"] = user_agent\n    if accept_language is not None:\n        params[\"acceptLanguage\"] = accept_language\n    if platform is not None:\n        params[\"platform\"] = platform\n    if user_agent_metadata is not None:\n        params[\"userAgentMetadata\"] = user_agent_metadata.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setUserAgentOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_virtual_time_policy","title":"<code>set_virtual_time_policy(policy, budget=None, max_virtual_time_task_starvation_count=None, initial_virtual_time=None)</code>","text":"<p>Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets the current virtual time policy.  Note this supersedes any previous time budget.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>VirtualTimePolicy</code> required <code>budget</code> <code>Optional[float]</code> <p>(Optional) If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.</p> <code>None</code> <code>max_virtual_time_task_starvation_count</code> <code>Optional[int]</code> <p>(Optional) If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.</p> <code>None</code> <code>initial_virtual_time</code> <code>Optional[TimeSinceEpoch]</code> <p>(Optional) If set, base::Time::Now will be overridden to initially return this value.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, float]</code> <p>Absolute timestamp at which virtual time was first enabled (up time in milliseconds).</p> Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>def set_virtual_time_policy(\n    policy: VirtualTimePolicy,\n    budget: typing.Optional[float] = None,\n    max_virtual_time_task_starvation_count: typing.Optional[int] = None,\n    initial_virtual_time: typing.Optional[network.TimeSinceEpoch] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, float]:\n    \"\"\"\n    Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets\n    the current virtual time policy.  Note this supersedes any previous time budget.\n\n    **EXPERIMENTAL**\n\n    :param policy:\n    :param budget: *(Optional)* If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.\n    :param max_virtual_time_task_starvation_count: *(Optional)* If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.\n    :param initial_virtual_time: *(Optional)* If set, base::Time::Now will be overridden to initially return this value.\n    :returns: Absolute timestamp at which virtual time was first enabled (up time in milliseconds).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"policy\"] = policy.to_json()\n    if budget is not None:\n        params[\"budget\"] = budget\n    if max_virtual_time_task_starvation_count is not None:\n        params[\"maxVirtualTimeTaskStarvationCount\"] = (\n            max_virtual_time_task_starvation_count\n        )\n    if initial_virtual_time is not None:\n        params[\"initialVirtualTime\"] = initial_virtual_time.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setVirtualTimePolicy\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return float(json[\"virtualTimeTicksBase\"])\n</code></pre>"},{"location":"reference/cdp/emulation/#zendriver.cdp.emulation.set_visible_size","title":"<code>set_visible_size(width, height)</code>","text":"<p>Resizes the frame/viewport of the page. Note that this does not affect the frame's container (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported on Android.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Frame width (DIP).</p> required <code>height</code> <code>int</code> <p>Frame height (DIP).</p> required Source code in <code>zendriver/cdp/emulation.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_visible_size(\n    width: int, height: int\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Resizes the frame/viewport of the page. Note that this does not affect the frame's container\n    (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported\n    on Android.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param width: Frame width (DIP).\n    :param height: Frame height (DIP).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"width\"] = width\n    params[\"height\"] = height\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Emulation.setVisibleSize\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/event_breakpoints/","title":"event_breakpoints","text":""},{"location":"reference/cdp/event_breakpoints/#zendriver.cdp.event_breakpoints.disable","title":"<code>disable()</code>","text":"<p>Removes all breakpoints</p> Source code in <code>zendriver/cdp/event_breakpoints.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes all breakpoints\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"EventBreakpoints.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/event_breakpoints/#zendriver.cdp.event_breakpoints.remove_instrumentation_breakpoint","title":"<code>remove_instrumentation_breakpoint(event_name)</code>","text":"<p>Removes breakpoint on particular native event.</p> <p>Parameters:</p> Name Type Description Default <code>event_name</code> <code>str</code> <p>Instrumentation name to stop on.</p> required Source code in <code>zendriver/cdp/event_breakpoints.py</code> <pre><code>def remove_instrumentation_breakpoint(\n    event_name: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes breakpoint on particular native event.\n\n    :param event_name: Instrumentation name to stop on.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"eventName\"] = event_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"EventBreakpoints.removeInstrumentationBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/event_breakpoints/#zendriver.cdp.event_breakpoints.set_instrumentation_breakpoint","title":"<code>set_instrumentation_breakpoint(event_name)</code>","text":"<p>Sets breakpoint on particular native event.</p> <p>Parameters:</p> Name Type Description Default <code>event_name</code> <code>str</code> <p>Instrumentation name to stop on.</p> required Source code in <code>zendriver/cdp/event_breakpoints.py</code> <pre><code>def set_instrumentation_breakpoint(\n    event_name: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets breakpoint on particular native event.\n\n    :param event_name: Instrumentation name to stop on.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"eventName\"] = event_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"EventBreakpoints.setInstrumentationBreakpoint\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/extensions/","title":"extensions","text":""},{"location":"reference/cdp/extensions/#zendriver.cdp.extensions.load_unpacked","title":"<code>load_unpacked(path)</code>","text":"<p>Installs an unpacked extension from the filesystem similar to --load-extension CLI flags. Returns extension ID once the extension has been installed.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Absolute file path.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>Extension id.</p> Source code in <code>zendriver/cdp/extensions.py</code> <pre><code>def load_unpacked(path: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Installs an unpacked extension from the filesystem similar to\n    --load-extension CLI flags. Returns extension ID once the extension\n    has been installed.\n\n    :param path: Absolute file path.\n    :returns: Extension id.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"path\"] = path\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Extensions.loadUnpacked\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"id\"])\n</code></pre>"},{"location":"reference/cdp/fed_cm/","title":"fed_cm","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account","title":"<code>Account</code>  <code>dataclass</code>","text":"<p>Corresponds to IdentityRequestAccount</p> Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>@dataclass\nclass Account:\n    \"\"\"\n    Corresponds to IdentityRequestAccount\n    \"\"\"\n\n    account_id: str\n\n    email: str\n\n    name: str\n\n    given_name: str\n\n    picture_url: str\n\n    idp_config_url: str\n\n    idp_login_url: str\n\n    login_state: LoginState\n\n    #: These two are only set if the loginState is signUp\n    terms_of_service_url: typing.Optional[str] = None\n\n    privacy_policy_url: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"accountId\"] = self.account_id\n        json[\"email\"] = self.email\n        json[\"name\"] = self.name\n        json[\"givenName\"] = self.given_name\n        json[\"pictureUrl\"] = self.picture_url\n        json[\"idpConfigUrl\"] = self.idp_config_url\n        json[\"idpLoginUrl\"] = self.idp_login_url\n        json[\"loginState\"] = self.login_state.to_json()\n        if self.terms_of_service_url is not None:\n            json[\"termsOfServiceUrl\"] = self.terms_of_service_url\n        if self.privacy_policy_url is not None:\n            json[\"privacyPolicyUrl\"] = self.privacy_policy_url\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Account:\n        return cls(\n            account_id=str(json[\"accountId\"]),\n            email=str(json[\"email\"]),\n            name=str(json[\"name\"]),\n            given_name=str(json[\"givenName\"]),\n            picture_url=str(json[\"pictureUrl\"]),\n            idp_config_url=str(json[\"idpConfigUrl\"]),\n            idp_login_url=str(json[\"idpLoginUrl\"]),\n            login_state=LoginState.from_json(json[\"loginState\"]),\n            terms_of_service_url=(\n                str(json[\"termsOfServiceUrl\"])\n                if json.get(\"termsOfServiceUrl\", None) is not None\n                else None\n            ),\n            privacy_policy_url=(\n                str(json[\"privacyPolicyUrl\"])\n                if json.get(\"privacyPolicyUrl\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.account_id","title":"<code>account_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.email","title":"<code>email: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.given_name","title":"<code>given_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.idp_config_url","title":"<code>idp_config_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.idp_login_url","title":"<code>idp_login_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.login_state","title":"<code>login_state: LoginState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.picture_url","title":"<code>picture_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.privacy_policy_url","title":"<code>privacy_policy_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.terms_of_service_url","title":"<code>terms_of_service_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.__init__","title":"<code>__init__(account_id, email, name, given_name, picture_url, idp_config_url, idp_login_url, login_state, terms_of_service_url=None, privacy_policy_url=None)</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Account:\n    return cls(\n        account_id=str(json[\"accountId\"]),\n        email=str(json[\"email\"]),\n        name=str(json[\"name\"]),\n        given_name=str(json[\"givenName\"]),\n        picture_url=str(json[\"pictureUrl\"]),\n        idp_config_url=str(json[\"idpConfigUrl\"]),\n        idp_login_url=str(json[\"idpLoginUrl\"]),\n        login_state=LoginState.from_json(json[\"loginState\"]),\n        terms_of_service_url=(\n            str(json[\"termsOfServiceUrl\"])\n            if json.get(\"termsOfServiceUrl\", None) is not None\n            else None\n        ),\n        privacy_policy_url=(\n            str(json[\"privacyPolicyUrl\"])\n            if json.get(\"privacyPolicyUrl\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.Account.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"accountId\"] = self.account_id\n    json[\"email\"] = self.email\n    json[\"name\"] = self.name\n    json[\"givenName\"] = self.given_name\n    json[\"pictureUrl\"] = self.picture_url\n    json[\"idpConfigUrl\"] = self.idp_config_url\n    json[\"idpLoginUrl\"] = self.idp_login_url\n    json[\"loginState\"] = self.login_state.to_json()\n    if self.terms_of_service_url is not None:\n        json[\"termsOfServiceUrl\"] = self.terms_of_service_url\n    if self.privacy_policy_url is not None:\n        json[\"privacyPolicyUrl\"] = self.privacy_policy_url\n    return json\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.AccountUrlType","title":"<code>AccountUrlType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The URLs that each account has</p> Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>class AccountUrlType(enum.Enum):\n    \"\"\"\n    The URLs that each account has\n    \"\"\"\n\n    TERMS_OF_SERVICE = \"TermsOfService\"\n    PRIVACY_POLICY = \"PrivacyPolicy\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AccountUrlType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.AccountUrlType.PRIVACY_POLICY","title":"<code>PRIVACY_POLICY = 'PrivacyPolicy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.AccountUrlType.TERMS_OF_SERVICE","title":"<code>TERMS_OF_SERVICE = 'TermsOfService'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.AccountUrlType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AccountUrlType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.AccountUrlType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogButton","title":"<code>DialogButton</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The buttons on the FedCM dialog.</p> Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>class DialogButton(enum.Enum):\n    \"\"\"\n    The buttons on the FedCM dialog.\n    \"\"\"\n\n    CONFIRM_IDP_LOGIN_CONTINUE = \"ConfirmIdpLoginContinue\"\n    ERROR_GOT_IT = \"ErrorGotIt\"\n    ERROR_MORE_DETAILS = \"ErrorMoreDetails\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; DialogButton:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogButton.CONFIRM_IDP_LOGIN_CONTINUE","title":"<code>CONFIRM_IDP_LOGIN_CONTINUE = 'ConfirmIdpLoginContinue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogButton.ERROR_GOT_IT","title":"<code>ERROR_GOT_IT = 'ErrorGotIt'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogButton.ERROR_MORE_DETAILS","title":"<code>ERROR_MORE_DETAILS = 'ErrorMoreDetails'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogButton.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; DialogButton:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogButton.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogClosed","title":"<code>DialogClosed</code>  <code>dataclass</code>","text":"<p>Triggered when a dialog is closed, either by user action, JS abort, or a command below.</p> Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>@event_class(\"FedCm.dialogClosed\")\n@dataclass\nclass DialogClosed:\n    \"\"\"\n    Triggered when a dialog is closed, either by user action, JS abort,\n    or a command below.\n    \"\"\"\n\n    dialog_id: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DialogClosed:\n        return cls(dialog_id=str(json[\"dialogId\"]))\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogClosed.dialog_id","title":"<code>dialog_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogClosed.__init__","title":"<code>__init__(dialog_id)</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogClosed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DialogClosed:\n    return cls(dialog_id=str(json[\"dialogId\"]))\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogShown","title":"<code>DialogShown</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>@event_class(\"FedCm.dialogShown\")\n@dataclass\nclass DialogShown:\n    dialog_id: str\n    dialog_type: DialogType\n    accounts: typing.List[Account]\n    #: These exist primarily so that the caller can verify the\n    #: RP context was used appropriately.\n    title: str\n    subtitle: typing.Optional[str]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DialogShown:\n        return cls(\n            dialog_id=str(json[\"dialogId\"]),\n            dialog_type=DialogType.from_json(json[\"dialogType\"]),\n            accounts=[Account.from_json(i) for i in json[\"accounts\"]],\n            title=str(json[\"title\"]),\n            subtitle=(\n                str(json[\"subtitle\"])\n                if json.get(\"subtitle\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogShown.accounts","title":"<code>accounts: typing.List[Account]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogShown.dialog_id","title":"<code>dialog_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogShown.dialog_type","title":"<code>dialog_type: DialogType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogShown.subtitle","title":"<code>subtitle: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogShown.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogShown.__init__","title":"<code>__init__(dialog_id, dialog_type, accounts, title, subtitle)</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogShown.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DialogShown:\n    return cls(\n        dialog_id=str(json[\"dialogId\"]),\n        dialog_type=DialogType.from_json(json[\"dialogType\"]),\n        accounts=[Account.from_json(i) for i in json[\"accounts\"]],\n        title=str(json[\"title\"]),\n        subtitle=(\n            str(json[\"subtitle\"])\n            if json.get(\"subtitle\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogType","title":"<code>DialogType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The types of FedCM dialogs.</p> Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>class DialogType(enum.Enum):\n    \"\"\"\n    The types of FedCM dialogs.\n    \"\"\"\n\n    ACCOUNT_CHOOSER = \"AccountChooser\"\n    AUTO_REAUTHN = \"AutoReauthn\"\n    CONFIRM_IDP_LOGIN = \"ConfirmIdpLogin\"\n    ERROR = \"Error\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; DialogType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogType.ACCOUNT_CHOOSER","title":"<code>ACCOUNT_CHOOSER = 'AccountChooser'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogType.AUTO_REAUTHN","title":"<code>AUTO_REAUTHN = 'AutoReauthn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogType.CONFIRM_IDP_LOGIN","title":"<code>CONFIRM_IDP_LOGIN = 'ConfirmIdpLogin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogType.ERROR","title":"<code>ERROR = 'Error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; DialogType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.DialogType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.LoginState","title":"<code>LoginState</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Whether this is a sign-up or sign-in action for this account, i.e. whether this account has ever been used to sign in to this RP before.</p> Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>class LoginState(enum.Enum):\n    \"\"\"\n    Whether this is a sign-up or sign-in action for this account, i.e.\n    whether this account has ever been used to sign in to this RP before.\n    \"\"\"\n\n    SIGN_IN = \"SignIn\"\n    SIGN_UP = \"SignUp\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; LoginState:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.LoginState.SIGN_IN","title":"<code>SIGN_IN = 'SignIn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.LoginState.SIGN_UP","title":"<code>SIGN_UP = 'SignUp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.LoginState.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; LoginState:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.LoginState.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.click_dialog_button","title":"<code>click_dialog_button(dialog_id, dialog_button)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>dialog_id</code> <code>str</code> required <code>dialog_button</code> <code>DialogButton</code> required Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def click_dialog_button(\n    dialog_id: str, dialog_button: DialogButton\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param dialog_id:\n    :param dialog_button:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"dialogId\"] = dialog_id\n    params[\"dialogButton\"] = dialog_button.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"FedCm.clickDialogButton\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.disable","title":"<code>disable()</code>","text":"Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"FedCm.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.dismiss_dialog","title":"<code>dismiss_dialog(dialog_id, trigger_cooldown=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>dialog_id</code> <code>str</code> required <code>trigger_cooldown</code> <code>Optional[bool]</code> <p>(Optional)</p> <code>None</code> Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def dismiss_dialog(\n    dialog_id: str, trigger_cooldown: typing.Optional[bool] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param dialog_id:\n    :param trigger_cooldown: *(Optional)*\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"dialogId\"] = dialog_id\n    if trigger_cooldown is not None:\n        params[\"triggerCooldown\"] = trigger_cooldown\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"FedCm.dismissDialog\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.enable","title":"<code>enable(disable_rejection_delay=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>disable_rejection_delay</code> <code>Optional[bool]</code> <p>(Optional) Allows callers to disable the promise rejection delay that would normally happen, if this is unimportant to what's being tested. (step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)</p> <code>None</code> Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def enable(\n    disable_rejection_delay: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param disable_rejection_delay: *(Optional)* Allows callers to disable the promise rejection delay that would normally happen, if this is unimportant to what's being tested. (step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if disable_rejection_delay is not None:\n        params[\"disableRejectionDelay\"] = disable_rejection_delay\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"FedCm.enable\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.open_url","title":"<code>open_url(dialog_id, account_index, account_url_type)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>dialog_id</code> <code>str</code> required <code>account_index</code> <code>int</code> required <code>account_url_type</code> <code>AccountUrlType</code> required Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def open_url(\n    dialog_id: str, account_index: int, account_url_type: AccountUrlType\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param dialog_id:\n    :param account_index:\n    :param account_url_type:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"dialogId\"] = dialog_id\n    params[\"accountIndex\"] = account_index\n    params[\"accountUrlType\"] = account_url_type.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"FedCm.openUrl\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.reset_cooldown","title":"<code>reset_cooldown()</code>","text":"<p>Resets the cooldown time, if any, to allow the next FedCM call to show a dialog even if one was recently dismissed by the user.</p> Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def reset_cooldown() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Resets the cooldown time, if any, to allow the next FedCM call to show\n    a dialog even if one was recently dismissed by the user.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"FedCm.resetCooldown\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fed_cm/#zendriver.cdp.fed_cm.select_account","title":"<code>select_account(dialog_id, account_index)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>dialog_id</code> <code>str</code> required <code>account_index</code> <code>int</code> required Source code in <code>zendriver/cdp/fed_cm.py</code> <pre><code>def select_account(\n    dialog_id: str, account_index: int\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param dialog_id:\n    :param account_index:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"dialogId\"] = dialog_id\n    params[\"accountIndex\"] = account_index\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"FedCm.selectAccount\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fetch/","title":"fetch","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallenge","title":"<code>AuthChallenge</code>  <code>dataclass</code>","text":"<p>Authorization challenge for HTTP status code 401 or 407.</p> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@dataclass\nclass AuthChallenge:\n    \"\"\"\n    Authorization challenge for HTTP status code 401 or 407.\n    \"\"\"\n\n    #: Origin of the challenger.\n    origin: str\n\n    #: The authentication scheme used, such as basic or digest\n    scheme: str\n\n    #: The realm of the challenge. May be empty.\n    realm: str\n\n    #: Source of the authentication challenge.\n    source: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"origin\"] = self.origin\n        json[\"scheme\"] = self.scheme\n        json[\"realm\"] = self.realm\n        if self.source is not None:\n            json[\"source\"] = self.source\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AuthChallenge:\n        return cls(\n            origin=str(json[\"origin\"]),\n            scheme=str(json[\"scheme\"]),\n            realm=str(json[\"realm\"]),\n            source=(\n                str(json[\"source\"]) if json.get(\"source\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallenge.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallenge.realm","title":"<code>realm: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallenge.scheme","title":"<code>scheme: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallenge.source","title":"<code>source: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallenge.__init__","title":"<code>__init__(origin, scheme, realm, source=None)</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallenge.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AuthChallenge:\n    return cls(\n        origin=str(json[\"origin\"]),\n        scheme=str(json[\"scheme\"]),\n        realm=str(json[\"realm\"]),\n        source=(\n            str(json[\"source\"]) if json.get(\"source\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallenge.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"origin\"] = self.origin\n    json[\"scheme\"] = self.scheme\n    json[\"realm\"] = self.realm\n    if self.source is not None:\n        json[\"source\"] = self.source\n    return json\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallengeResponse","title":"<code>AuthChallengeResponse</code>  <code>dataclass</code>","text":"<p>Response to an AuthChallenge.</p> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@dataclass\nclass AuthChallengeResponse:\n    \"\"\"\n    Response to an AuthChallenge.\n    \"\"\"\n\n    #: The decision on what to do in response to the authorization challenge.  Default means\n    #: deferring to the default behavior of the net stack, which will likely either the Cancel\n    #: authentication or display a popup dialog box.\n    response: str\n\n    #: The username to provide, possibly empty. Should only be set if response is\n    #: ProvideCredentials.\n    username: typing.Optional[str] = None\n\n    #: The password to provide, possibly empty. Should only be set if response is\n    #: ProvideCredentials.\n    password: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"response\"] = self.response\n        if self.username is not None:\n            json[\"username\"] = self.username\n        if self.password is not None:\n            json[\"password\"] = self.password\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AuthChallengeResponse:\n        return cls(\n            response=str(json[\"response\"]),\n            username=(\n                str(json[\"username\"])\n                if json.get(\"username\", None) is not None\n                else None\n            ),\n            password=(\n                str(json[\"password\"])\n                if json.get(\"password\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallengeResponse.password","title":"<code>password: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallengeResponse.response","title":"<code>response: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallengeResponse.username","title":"<code>username: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallengeResponse.__init__","title":"<code>__init__(response, username=None, password=None)</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallengeResponse.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AuthChallengeResponse:\n    return cls(\n        response=str(json[\"response\"]),\n        username=(\n            str(json[\"username\"])\n            if json.get(\"username\", None) is not None\n            else None\n        ),\n        password=(\n            str(json[\"password\"])\n            if json.get(\"password\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthChallengeResponse.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"response\"] = self.response\n    if self.username is not None:\n        json[\"username\"] = self.username\n    if self.password is not None:\n        json[\"password\"] = self.password\n    return json\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthRequired","title":"<code>AuthRequired</code>  <code>dataclass</code>","text":"<p>Issued when the domain is enabled with handleAuthRequests set to true. The request is paused until client responds with continueWithAuth.</p> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@event_class(\"Fetch.authRequired\")\n@dataclass\nclass AuthRequired:\n    \"\"\"\n    Issued when the domain is enabled with handleAuthRequests set to true.\n    The request is paused until client responds with continueWithAuth.\n    \"\"\"\n\n    #: Each request the page makes will have a unique id.\n    request_id: RequestId\n    #: The details of the request.\n    request: network.Request\n    #: The id of the frame that initiated the request.\n    frame_id: page.FrameId\n    #: How the requested resource will be used.\n    resource_type: network.ResourceType\n    #: Details of the Authorization Challenge encountered.\n    #: If this is set, client should respond with continueRequest that\n    #: contains AuthChallengeResponse.\n    auth_challenge: AuthChallenge\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AuthRequired:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            request=network.Request.from_json(json[\"request\"]),\n            frame_id=page.FrameId.from_json(json[\"frameId\"]),\n            resource_type=network.ResourceType.from_json(json[\"resourceType\"]),\n            auth_challenge=AuthChallenge.from_json(json[\"authChallenge\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthRequired.auth_challenge","title":"<code>auth_challenge: AuthChallenge</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthRequired.frame_id","title":"<code>frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthRequired.request","title":"<code>request: network.Request</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthRequired.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthRequired.resource_type","title":"<code>resource_type: network.ResourceType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthRequired.__init__","title":"<code>__init__(request_id, request, frame_id, resource_type, auth_challenge)</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.AuthRequired.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AuthRequired:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        request=network.Request.from_json(json[\"request\"]),\n        frame_id=page.FrameId.from_json(json[\"frameId\"]),\n        resource_type=network.ResourceType.from_json(json[\"resourceType\"]),\n        auth_challenge=AuthChallenge.from_json(json[\"authChallenge\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.HeaderEntry","title":"<code>HeaderEntry</code>  <code>dataclass</code>","text":"<p>Response HTTP header entry</p> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@dataclass\nclass HeaderEntry:\n    \"\"\"\n    Response HTTP header entry\n    \"\"\"\n\n    name: str\n\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; HeaderEntry:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.HeaderEntry.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.HeaderEntry.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.HeaderEntry.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.HeaderEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; HeaderEntry:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.HeaderEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestId","title":"<code>RequestId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique request identifier.</p> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>class RequestId(str):\n    \"\"\"\n    Unique request identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; RequestId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"RequestId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def __repr__(self):\n    return \"RequestId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; RequestId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPattern","title":"<code>RequestPattern</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@dataclass\nclass RequestPattern:\n    #: Wildcards (``'*'`` -&gt; zero or more, ``'?'`` -&gt; exactly one) are allowed. Escape character is\n    #: backslash. Omitting is equivalent to ``\"*\"``.\n    url_pattern: typing.Optional[str] = None\n\n    #: If set, only requests for matching resource types will be intercepted.\n    resource_type: typing.Optional[network.ResourceType] = None\n\n    #: Stage at which to begin intercepting requests. Default is Request.\n    request_stage: typing.Optional[RequestStage] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.url_pattern is not None:\n            json[\"urlPattern\"] = self.url_pattern\n        if self.resource_type is not None:\n            json[\"resourceType\"] = self.resource_type.to_json()\n        if self.request_stage is not None:\n            json[\"requestStage\"] = self.request_stage.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RequestPattern:\n        return cls(\n            url_pattern=(\n                str(json[\"urlPattern\"])\n                if json.get(\"urlPattern\", None) is not None\n                else None\n            ),\n            resource_type=(\n                network.ResourceType.from_json(json[\"resourceType\"])\n                if json.get(\"resourceType\", None) is not None\n                else None\n            ),\n            request_stage=(\n                RequestStage.from_json(json[\"requestStage\"])\n                if json.get(\"requestStage\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPattern.request_stage","title":"<code>request_stage: typing.Optional[RequestStage] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPattern.resource_type","title":"<code>resource_type: typing.Optional[network.ResourceType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPattern.url_pattern","title":"<code>url_pattern: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPattern.__init__","title":"<code>__init__(url_pattern=None, resource_type=None, request_stage=None)</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPattern.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RequestPattern:\n    return cls(\n        url_pattern=(\n            str(json[\"urlPattern\"])\n            if json.get(\"urlPattern\", None) is not None\n            else None\n        ),\n        resource_type=(\n            network.ResourceType.from_json(json[\"resourceType\"])\n            if json.get(\"resourceType\", None) is not None\n            else None\n        ),\n        request_stage=(\n            RequestStage.from_json(json[\"requestStage\"])\n            if json.get(\"requestStage\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPattern.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.url_pattern is not None:\n        json[\"urlPattern\"] = self.url_pattern\n    if self.resource_type is not None:\n        json[\"resourceType\"] = self.resource_type.to_json()\n    if self.request_stage is not None:\n        json[\"requestStage\"] = self.request_stage.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused","title":"<code>RequestPaused</code>  <code>dataclass</code>","text":"<p>Issued when the domain is enabled and the request URL matches the specified filter. The request is paused until the client responds with one of continueRequest, failRequest or fulfillRequest. The stage of the request can be determined by presence of responseErrorReason and responseStatusCode -- the request is at the response stage if either of these fields is present and in the request stage otherwise. Redirect responses and subsequent requests are reported similarly to regular responses and requests. Redirect responses may be distinguished by the value of <code>responseStatusCode</code> (which is one of 301, 302, 303, 307, 308) along with presence of the <code>location</code> header. Requests resulting from a redirect will have <code>redirectedRequestId</code> field set.</p> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@event_class(\"Fetch.requestPaused\")\n@dataclass\nclass RequestPaused:\n    \"\"\"\n    Issued when the domain is enabled and the request URL matches the\n    specified filter. The request is paused until the client responds\n    with one of continueRequest, failRequest or fulfillRequest.\n    The stage of the request can be determined by presence of responseErrorReason\n    and responseStatusCode -- the request is at the response stage if either\n    of these fields is present and in the request stage otherwise.\n    Redirect responses and subsequent requests are reported similarly to regular\n    responses and requests. Redirect responses may be distinguished by the value\n    of ``responseStatusCode`` (which is one of 301, 302, 303, 307, 308) along with\n    presence of the ``location`` header. Requests resulting from a redirect will\n    have ``redirectedRequestId`` field set.\n    \"\"\"\n\n    #: Each request the page makes will have a unique id.\n    request_id: RequestId\n    #: The details of the request.\n    request: network.Request\n    #: The id of the frame that initiated the request.\n    frame_id: page.FrameId\n    #: How the requested resource will be used.\n    resource_type: network.ResourceType\n    #: Response error if intercepted at response stage.\n    response_error_reason: typing.Optional[network.ErrorReason]\n    #: Response code if intercepted at response stage.\n    response_status_code: typing.Optional[int]\n    #: Response status text if intercepted at response stage.\n    response_status_text: typing.Optional[str]\n    #: Response headers if intercepted at the response stage.\n    response_headers: typing.Optional[typing.List[HeaderEntry]]\n    #: If the intercepted request had a corresponding Network.requestWillBeSent event fired for it,\n    #: then this networkId will be the same as the requestId present in the requestWillBeSent event.\n    network_id: typing.Optional[network.RequestId]\n    #: If the request is due to a redirect response from the server, the id of the request that\n    #: has caused the redirect.\n    redirected_request_id: typing.Optional[RequestId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RequestPaused:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            request=network.Request.from_json(json[\"request\"]),\n            frame_id=page.FrameId.from_json(json[\"frameId\"]),\n            resource_type=network.ResourceType.from_json(json[\"resourceType\"]),\n            response_error_reason=(\n                network.ErrorReason.from_json(json[\"responseErrorReason\"])\n                if json.get(\"responseErrorReason\", None) is not None\n                else None\n            ),\n            response_status_code=(\n                int(json[\"responseStatusCode\"])\n                if json.get(\"responseStatusCode\", None) is not None\n                else None\n            ),\n            response_status_text=(\n                str(json[\"responseStatusText\"])\n                if json.get(\"responseStatusText\", None) is not None\n                else None\n            ),\n            response_headers=(\n                [HeaderEntry.from_json(i) for i in json[\"responseHeaders\"]]\n                if json.get(\"responseHeaders\", None) is not None\n                else None\n            ),\n            network_id=(\n                network.RequestId.from_json(json[\"networkId\"])\n                if json.get(\"networkId\", None) is not None\n                else None\n            ),\n            redirected_request_id=(\n                RequestId.from_json(json[\"redirectedRequestId\"])\n                if json.get(\"redirectedRequestId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.frame_id","title":"<code>frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.network_id","title":"<code>network_id: typing.Optional[network.RequestId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.redirected_request_id","title":"<code>redirected_request_id: typing.Optional[RequestId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.request","title":"<code>request: network.Request</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.resource_type","title":"<code>resource_type: network.ResourceType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.response_error_reason","title":"<code>response_error_reason: typing.Optional[network.ErrorReason]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.response_headers","title":"<code>response_headers: typing.Optional[typing.List[HeaderEntry]]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.response_status_code","title":"<code>response_status_code: typing.Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.response_status_text","title":"<code>response_status_text: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.__init__","title":"<code>__init__(request_id, request, frame_id, resource_type, response_error_reason, response_status_code, response_status_text, response_headers, network_id, redirected_request_id)</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestPaused.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RequestPaused:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        request=network.Request.from_json(json[\"request\"]),\n        frame_id=page.FrameId.from_json(json[\"frameId\"]),\n        resource_type=network.ResourceType.from_json(json[\"resourceType\"]),\n        response_error_reason=(\n            network.ErrorReason.from_json(json[\"responseErrorReason\"])\n            if json.get(\"responseErrorReason\", None) is not None\n            else None\n        ),\n        response_status_code=(\n            int(json[\"responseStatusCode\"])\n            if json.get(\"responseStatusCode\", None) is not None\n            else None\n        ),\n        response_status_text=(\n            str(json[\"responseStatusText\"])\n            if json.get(\"responseStatusText\", None) is not None\n            else None\n        ),\n        response_headers=(\n            [HeaderEntry.from_json(i) for i in json[\"responseHeaders\"]]\n            if json.get(\"responseHeaders\", None) is not None\n            else None\n        ),\n        network_id=(\n            network.RequestId.from_json(json[\"networkId\"])\n            if json.get(\"networkId\", None) is not None\n            else None\n        ),\n        redirected_request_id=(\n            RequestId.from_json(json[\"redirectedRequestId\"])\n            if json.get(\"redirectedRequestId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestStage","title":"<code>RequestStage</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Stages of the request to handle. Request will intercept before the request is sent. Response will intercept after the response is received (but before response body is received).</p> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>class RequestStage(enum.Enum):\n    \"\"\"\n    Stages of the request to handle. Request will intercept before the request is\n    sent. Response will intercept after the response is received (but before response\n    body is received).\n    \"\"\"\n\n    REQUEST = \"Request\"\n    RESPONSE = \"Response\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; RequestStage:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestStage.REQUEST","title":"<code>REQUEST = 'Request'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestStage.RESPONSE","title":"<code>RESPONSE = 'Response'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestStage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; RequestStage:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.RequestStage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.continue_request","title":"<code>continue_request(request_id, url=None, method=None, post_data=None, headers=None, intercept_response=None)</code>","text":"<p>Continues the request, optionally modifying some of its parameters.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>An id the client received in requestPaused event.</p> required <code>url</code> <code>Optional[str]</code> <p>(Optional) If set, the request url will be modified in a way that's not observable by page.</p> <code>None</code> <code>method</code> <code>Optional[str]</code> <p>(Optional) If set, the request method is overridden.</p> <code>None</code> <code>post_data</code> <code>Optional[str]</code> <p>(Optional) If set, overrides the post data in the request. (Encoded as a base64 string when passed over JSON)</p> <code>None</code> <code>headers</code> <code>Optional[List[HeaderEntry]]</code> <p>(Optional) If set, overrides the request headers. Note that the overrides do not extend to subsequent redirect hops, if a redirect happens. Another override may be applied to a different request produced by a redirect.</p> <code>None</code> <code>intercept_response</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) If set, overrides response interception behavior for this request.</p> <code>None</code> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def continue_request(\n    request_id: RequestId,\n    url: typing.Optional[str] = None,\n    method: typing.Optional[str] = None,\n    post_data: typing.Optional[str] = None,\n    headers: typing.Optional[typing.List[HeaderEntry]] = None,\n    intercept_response: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Continues the request, optionally modifying some of its parameters.\n\n    :param request_id: An id the client received in requestPaused event.\n    :param url: *(Optional)* If set, the request url will be modified in a way that's not observable by page.\n    :param method: *(Optional)* If set, the request method is overridden.\n    :param post_data: *(Optional)* If set, overrides the post data in the request. (Encoded as a base64 string when passed over JSON)\n    :param headers: *(Optional)* If set, overrides the request headers. Note that the overrides do not extend to subsequent redirect hops, if a redirect happens. Another override may be applied to a different request produced by a redirect.\n    :param intercept_response: **(EXPERIMENTAL)** *(Optional)* If set, overrides response interception behavior for this request.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    if url is not None:\n        params[\"url\"] = url\n    if method is not None:\n        params[\"method\"] = method\n    if post_data is not None:\n        params[\"postData\"] = post_data\n    if headers is not None:\n        params[\"headers\"] = [i.to_json() for i in headers]\n    if intercept_response is not None:\n        params[\"interceptResponse\"] = intercept_response\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Fetch.continueRequest\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.continue_response","title":"<code>continue_response(request_id, response_code=None, response_phrase=None, response_headers=None, binary_response_headers=None)</code>","text":"<p>Continues loading of the paused response, optionally modifying the response headers. If either responseCode or headers are modified, all of them must be present.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>An id the client received in requestPaused event.</p> required <code>response_code</code> <code>Optional[int]</code> <p>(Optional) An HTTP response code. If absent, original response code will be used.</p> <code>None</code> <code>response_phrase</code> <code>Optional[str]</code> <p>(Optional) A textual representation of responseCode. If absent, a standard phrase matching responseCode is used.</p> <code>None</code> <code>response_headers</code> <code>Optional[List[HeaderEntry]]</code> <p>(Optional) Response headers. If absent, original response headers will be used.</p> <code>None</code> <code>binary_response_headers</code> <code>Optional[str]</code> <p>(Optional) Alternative way of specifying response headers as a \\0-separated series of name: value pairs. Prefer the above method unless you need to represent some non-UTF8 values that can't be transmitted over the protocol as text. (Encoded as a base64 string when passed over JSON)</p> <code>None</code> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def continue_response(\n    request_id: RequestId,\n    response_code: typing.Optional[int] = None,\n    response_phrase: typing.Optional[str] = None,\n    response_headers: typing.Optional[typing.List[HeaderEntry]] = None,\n    binary_response_headers: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    r\"\"\"\n    Continues loading of the paused response, optionally modifying the\n    response headers. If either responseCode or headers are modified, all of them\n    must be present.\n\n    **EXPERIMENTAL**\n\n    :param request_id: An id the client received in requestPaused event.\n    :param response_code: *(Optional)* An HTTP response code. If absent, original response code will be used.\n    :param response_phrase: *(Optional)* A textual representation of responseCode. If absent, a standard phrase matching responseCode is used.\n    :param response_headers: *(Optional)* Response headers. If absent, original response headers will be used.\n    :param binary_response_headers: *(Optional)* Alternative way of specifying response headers as a \\0-separated series of name: value pairs. Prefer the above method unless you need to represent some non-UTF8 values that can't be transmitted over the protocol as text. (Encoded as a base64 string when passed over JSON)\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    if response_code is not None:\n        params[\"responseCode\"] = response_code\n    if response_phrase is not None:\n        params[\"responsePhrase\"] = response_phrase\n    if response_headers is not None:\n        params[\"responseHeaders\"] = [i.to_json() for i in response_headers]\n    if binary_response_headers is not None:\n        params[\"binaryResponseHeaders\"] = binary_response_headers\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Fetch.continueResponse\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.continue_with_auth","title":"<code>continue_with_auth(request_id, auth_challenge_response)</code>","text":"<p>Continues a request supplying authChallengeResponse following authRequired event.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>An id the client received in authRequired event.</p> required <code>auth_challenge_response</code> <code>AuthChallengeResponse</code> <p>Response to  with an authChallenge.</p> required Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def continue_with_auth(\n    request_id: RequestId, auth_challenge_response: AuthChallengeResponse\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Continues a request supplying authChallengeResponse following authRequired event.\n\n    :param request_id: An id the client received in authRequired event.\n    :param auth_challenge_response: Response to  with an authChallenge.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    params[\"authChallengeResponse\"] = auth_challenge_response.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Fetch.continueWithAuth\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.disable","title":"<code>disable()</code>","text":"<p>Disables the fetch domain.</p> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables the fetch domain.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Fetch.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.enable","title":"<code>enable(patterns=None, handle_auth_requests=None)</code>","text":"<p>Enables issuing of requestPaused events. A request will be paused until client calls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.</p> <p>Parameters:</p> Name Type Description Default <code>patterns</code> <code>Optional[List[RequestPattern]]</code> <p>(Optional) If specified, only requests matching any of these patterns will produce fetchRequested event and will be paused until clients response. If not set, all requests will be affected.</p> <code>None</code> <code>handle_auth_requests</code> <code>Optional[bool]</code> <p>(Optional) If true, authRequired events will be issued and requests will be paused expecting a call to continueWithAuth.</p> <code>None</code> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def enable(\n    patterns: typing.Optional[typing.List[RequestPattern]] = None,\n    handle_auth_requests: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables issuing of requestPaused events. A request will be paused until client\n    calls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.\n\n    :param patterns: *(Optional)* If specified, only requests matching any of these patterns will produce fetchRequested event and will be paused until clients response. If not set, all requests will be affected.\n    :param handle_auth_requests: *(Optional)* If true, authRequired events will be issued and requests will be paused expecting a call to continueWithAuth.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if patterns is not None:\n        params[\"patterns\"] = [i.to_json() for i in patterns]\n    if handle_auth_requests is not None:\n        params[\"handleAuthRequests\"] = handle_auth_requests\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Fetch.enable\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.fail_request","title":"<code>fail_request(request_id, error_reason)</code>","text":"<p>Causes the request to fail with specified reason.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>An id the client received in requestPaused event.</p> required <code>error_reason</code> <code>ErrorReason</code> <p>Causes the request to fail with the given reason.</p> required Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def fail_request(\n    request_id: RequestId, error_reason: network.ErrorReason\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Causes the request to fail with specified reason.\n\n    :param request_id: An id the client received in requestPaused event.\n    :param error_reason: Causes the request to fail with the given reason.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    params[\"errorReason\"] = error_reason.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Fetch.failRequest\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.fulfill_request","title":"<code>fulfill_request(request_id, response_code, response_headers=None, binary_response_headers=None, body=None, response_phrase=None)</code>","text":"<p>Provides response to the request.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>An id the client received in requestPaused event.</p> required <code>response_code</code> <code>int</code> <p>An HTTP response code.</p> required <code>response_headers</code> <code>Optional[List[HeaderEntry]]</code> <p>(Optional) Response headers.</p> <code>None</code> <code>binary_response_headers</code> <code>Optional[str]</code> <p>(Optional) Alternative way of specifying response headers as a \\0-separated series of name: value pairs. Prefer the above method unless you need to represent some non-UTF8 values that can't be transmitted over the protocol as text. (Encoded as a base64 string when passed over JSON)</p> <code>None</code> <code>body</code> <code>Optional[str]</code> <p>(Optional) A response body. If absent, original response body will be used if the request is intercepted at the response stage and empty body will be used if the request is intercepted at the request stage. (Encoded as a base64 string when passed over JSON)</p> <code>None</code> <code>response_phrase</code> <code>Optional[str]</code> <p>(Optional) A textual representation of responseCode. If absent, a standard phrase matching responseCode is used.</p> <code>None</code> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def fulfill_request(\n    request_id: RequestId,\n    response_code: int,\n    response_headers: typing.Optional[typing.List[HeaderEntry]] = None,\n    binary_response_headers: typing.Optional[str] = None,\n    body: typing.Optional[str] = None,\n    response_phrase: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    r\"\"\"\n    Provides response to the request.\n\n    :param request_id: An id the client received in requestPaused event.\n    :param response_code: An HTTP response code.\n    :param response_headers: *(Optional)* Response headers.\n    :param binary_response_headers: *(Optional)* Alternative way of specifying response headers as a \\0-separated series of name: value pairs. Prefer the above method unless you need to represent some non-UTF8 values that can't be transmitted over the protocol as text. (Encoded as a base64 string when passed over JSON)\n    :param body: *(Optional)* A response body. If absent, original response body will be used if the request is intercepted at the response stage and empty body will be used if the request is intercepted at the request stage. (Encoded as a base64 string when passed over JSON)\n    :param response_phrase: *(Optional)* A textual representation of responseCode. If absent, a standard phrase matching responseCode is used.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    params[\"responseCode\"] = response_code\n    if response_headers is not None:\n        params[\"responseHeaders\"] = [i.to_json() for i in response_headers]\n    if binary_response_headers is not None:\n        params[\"binaryResponseHeaders\"] = binary_response_headers\n    if body is not None:\n        params[\"body\"] = body\n    if response_phrase is not None:\n        params[\"responsePhrase\"] = response_phrase\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Fetch.fulfillRequest\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.get_response_body","title":"<code>get_response_body(request_id)</code>","text":"<p>Causes the body of the response to be received from the server and returned as a single string. May only be issued for a request that is paused in the Response stage and is mutually exclusive with takeResponseBodyForInterceptionAsStream. Calling other methods that affect the request or disabling fetch domain before body is received results in an undefined behavior. Note that the response body is not available for redirects. Requests paused in the redirect received state may be differentiated by <code>responseCode</code> and presence of <code>location</code> response header, see comments to <code>requestPaused</code> for details.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>Identifier for the intercepted request to get body for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[str, bool]]</code> <p>A tuple with the following items:  0. body - Response body. 1. base64Encoded - True, if content was sent as base64.</p> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def get_response_body(\n    request_id: RequestId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, bool]]:\n    \"\"\"\n    Causes the body of the response to be received from the server and\n    returned as a single string. May only be issued for a request that\n    is paused in the Response stage and is mutually exclusive with\n    takeResponseBodyForInterceptionAsStream. Calling other methods that\n    affect the request or disabling fetch domain before body is received\n    results in an undefined behavior.\n    Note that the response body is not available for redirects. Requests\n    paused in the _redirect received_ state may be differentiated by\n    ``responseCode`` and presence of ``location`` response header, see\n    comments to ``requestPaused`` for details.\n\n    :param request_id: Identifier for the intercepted request to get body for.\n    :returns: A tuple with the following items:\n\n        0. **body** - Response body.\n        1. **base64Encoded** - True, if content was sent as base64.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Fetch.getResponseBody\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (str(json[\"body\"]), bool(json[\"base64Encoded\"]))\n</code></pre>"},{"location":"reference/cdp/fetch/#zendriver.cdp.fetch.take_response_body_as_stream","title":"<code>take_response_body_as_stream(request_id)</code>","text":"<p>Returns a handle to the stream representing the response body. The request must be paused in the HeadersReceived stage. Note that after this command the request can't be continued as is -- client either needs to cancel it or to provide the response body. The stream only supports sequential read, IO.read will fail if the position is specified. This method is mutually exclusive with getResponseBody. Calling other methods that affect the request or disabling fetch domain before body is received results in an undefined behavior.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, StreamHandle]</code> Source code in <code>zendriver/cdp/fetch.py</code> <pre><code>def take_response_body_as_stream(\n    request_id: RequestId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, io.StreamHandle]:\n    \"\"\"\n    Returns a handle to the stream representing the response body.\n    The request must be paused in the HeadersReceived stage.\n    Note that after this command the request can't be continued\n    as is -- client either needs to cancel it or to provide the\n    response body.\n    The stream only supports sequential read, IO.read will fail if the position\n    is specified.\n    This method is mutually exclusive with getResponseBody.\n    Calling other methods that affect the request or disabling fetch\n    domain before body is received results in an undefined behavior.\n\n    :param request_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Fetch.takeResponseBodyAsStream\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return io.StreamHandle.from_json(json[\"stream\"])\n</code></pre>"},{"location":"reference/cdp/headless_experimental/","title":"headless_experimental","text":""},{"location":"reference/cdp/headless_experimental/#zendriver.cdp.headless_experimental.ScreenshotParams","title":"<code>ScreenshotParams</code>  <code>dataclass</code>","text":"<p>Encoding options for a screenshot.</p> Source code in <code>zendriver/cdp/headless_experimental.py</code> <pre><code>@dataclass\nclass ScreenshotParams:\n    \"\"\"\n    Encoding options for a screenshot.\n    \"\"\"\n\n    #: Image compression format (defaults to png).\n    format_: typing.Optional[str] = None\n\n    #: Compression quality from range [0..100] (jpeg and webp only).\n    quality: typing.Optional[int] = None\n\n    #: Optimize image encoding for speed, not for resulting size (defaults to false)\n    optimize_for_speed: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.format_ is not None:\n            json[\"format\"] = self.format_\n        if self.quality is not None:\n            json[\"quality\"] = self.quality\n        if self.optimize_for_speed is not None:\n            json[\"optimizeForSpeed\"] = self.optimize_for_speed\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScreenshotParams:\n        return cls(\n            format_=(\n                str(json[\"format\"]) if json.get(\"format\", None) is not None else None\n            ),\n            quality=(\n                int(json[\"quality\"]) if json.get(\"quality\", None) is not None else None\n            ),\n            optimize_for_speed=(\n                bool(json[\"optimizeForSpeed\"])\n                if json.get(\"optimizeForSpeed\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/headless_experimental/#zendriver.cdp.headless_experimental.ScreenshotParams.format_","title":"<code>format_: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/headless_experimental/#zendriver.cdp.headless_experimental.ScreenshotParams.optimize_for_speed","title":"<code>optimize_for_speed: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/headless_experimental/#zendriver.cdp.headless_experimental.ScreenshotParams.quality","title":"<code>quality: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/headless_experimental/#zendriver.cdp.headless_experimental.ScreenshotParams.__init__","title":"<code>__init__(format_=None, quality=None, optimize_for_speed=None)</code>","text":""},{"location":"reference/cdp/headless_experimental/#zendriver.cdp.headless_experimental.ScreenshotParams.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/headless_experimental.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScreenshotParams:\n    return cls(\n        format_=(\n            str(json[\"format\"]) if json.get(\"format\", None) is not None else None\n        ),\n        quality=(\n            int(json[\"quality\"]) if json.get(\"quality\", None) is not None else None\n        ),\n        optimize_for_speed=(\n            bool(json[\"optimizeForSpeed\"])\n            if json.get(\"optimizeForSpeed\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/headless_experimental/#zendriver.cdp.headless_experimental.ScreenshotParams.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/headless_experimental.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.format_ is not None:\n        json[\"format\"] = self.format_\n    if self.quality is not None:\n        json[\"quality\"] = self.quality\n    if self.optimize_for_speed is not None:\n        json[\"optimizeForSpeed\"] = self.optimize_for_speed\n    return json\n</code></pre>"},{"location":"reference/cdp/headless_experimental/#zendriver.cdp.headless_experimental.begin_frame","title":"<code>begin_frame(frame_time_ticks=None, interval=None, no_display_updates=None, screenshot=None)</code>","text":"<p>Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a screenshot from the resulting frame. Requires that the target was created with enabled BeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also https://goo.gle/chrome-headless-rendering for more background.</p> <p>Parameters:</p> Name Type Description Default <code>frame_time_ticks</code> <code>Optional[float]</code> <p>(Optional) Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set, the current time will be used.</p> <code>None</code> <code>interval</code> <code>Optional[float]</code> <p>(Optional) The interval between BeginFrames that is reported to the compositor, in milliseconds. Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.</p> <code>None</code> <code>no_display_updates</code> <code>Optional[bool]</code> <p>(Optional) Whether updates should not be committed and drawn onto the display. False by default. If true, only side effects of the BeginFrame will be run, such as layout and animations, but any visual updates may not be visible on the display or in screenshots.</p> <code>None</code> <code>screenshot</code> <code>Optional[ScreenshotParams]</code> <p>(Optional) If set, a screenshot of the frame will be captured and returned in the response. Otherwise, no screenshot will be captured. Note that capturing a screenshot can fail, for example, during renderer initialization. In such a case, no screenshot data will be returned.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[bool, Optional[str]]]</code> <p>A tuple with the following items:  0. hasDamage - Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the display. Reported for diagnostic uses, may be removed in the future. 1. screenshotData - (Optional) Base64-encoded image data of the screenshot, if one was requested and successfully taken. (Encoded as a base64 string when passed over JSON)</p> Source code in <code>zendriver/cdp/headless_experimental.py</code> <pre><code>def begin_frame(\n    frame_time_ticks: typing.Optional[float] = None,\n    interval: typing.Optional[float] = None,\n    no_display_updates: typing.Optional[bool] = None,\n    screenshot: typing.Optional[ScreenshotParams] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[bool, typing.Optional[str]]\n]:\n    \"\"\"\n    Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a\n    screenshot from the resulting frame. Requires that the target was created with enabled\n    BeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also\n    https://goo.gle/chrome-headless-rendering for more background.\n\n    :param frame_time_ticks: *(Optional)* Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set, the current time will be used.\n    :param interval: *(Optional)* The interval between BeginFrames that is reported to the compositor, in milliseconds. Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.\n    :param no_display_updates: *(Optional)* Whether updates should not be committed and drawn onto the display. False by default. If true, only side effects of the BeginFrame will be run, such as layout and animations, but any visual updates may not be visible on the display or in screenshots.\n    :param screenshot: *(Optional)* If set, a screenshot of the frame will be captured and returned in the response. Otherwise, no screenshot will be captured. Note that capturing a screenshot can fail, for example, during renderer initialization. In such a case, no screenshot data will be returned.\n    :returns: A tuple with the following items:\n\n        0. **hasDamage** - Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the display. Reported for diagnostic uses, may be removed in the future.\n        1. **screenshotData** - *(Optional)* Base64-encoded image data of the screenshot, if one was requested and successfully taken. (Encoded as a base64 string when passed over JSON)\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if frame_time_ticks is not None:\n        params[\"frameTimeTicks\"] = frame_time_ticks\n    if interval is not None:\n        params[\"interval\"] = interval\n    if no_display_updates is not None:\n        params[\"noDisplayUpdates\"] = no_display_updates\n    if screenshot is not None:\n        params[\"screenshot\"] = screenshot.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeadlessExperimental.beginFrame\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        bool(json[\"hasDamage\"]),\n        (\n            str(json[\"screenshotData\"])\n            if json.get(\"screenshotData\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/headless_experimental/#zendriver.cdp.headless_experimental.disable","title":"<code>disable()</code>","text":"<p>Disables headless events for the target.</p> <p>.. deprecated:: 1.3</p> Source code in <code>zendriver/cdp/headless_experimental.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables headless events for the target.\n\n    .. deprecated:: 1.3\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeadlessExperimental.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/headless_experimental/#zendriver.cdp.headless_experimental.enable","title":"<code>enable()</code>","text":"<p>Enables headless events for the target.</p> <p>.. deprecated:: 1.3</p> Source code in <code>zendriver/cdp/headless_experimental.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables headless events for the target.\n\n    .. deprecated:: 1.3\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeadlessExperimental.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/heap_profiler/","title":"heap_profiler","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.AddHeapSnapshotChunk","title":"<code>AddHeapSnapshotChunk</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@event_class(\"HeapProfiler.addHeapSnapshotChunk\")\n@dataclass\nclass AddHeapSnapshotChunk:\n    chunk: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AddHeapSnapshotChunk:\n        return cls(chunk=str(json[\"chunk\"]))\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.AddHeapSnapshotChunk.chunk","title":"<code>chunk: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.AddHeapSnapshotChunk.__init__","title":"<code>__init__(chunk)</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.AddHeapSnapshotChunk.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AddHeapSnapshotChunk:\n    return cls(chunk=str(json[\"chunk\"]))\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.HeapSnapshotObjectId","title":"<code>HeapSnapshotObjectId</code>","text":"<p>               Bases: <code>str</code></p> <p>Heap snapshot object id.</p> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>class HeapSnapshotObjectId(str):\n    \"\"\"\n    Heap snapshot object id.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; HeapSnapshotObjectId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"HeapSnapshotObjectId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.HeapSnapshotObjectId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def __repr__(self):\n    return \"HeapSnapshotObjectId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.HeapSnapshotObjectId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; HeapSnapshotObjectId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.HeapSnapshotObjectId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.HeapStatsUpdate","title":"<code>HeapStatsUpdate</code>  <code>dataclass</code>","text":"<p>If heap objects tracking has been started then backend may send update for one or more fragments</p> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@event_class(\"HeapProfiler.heapStatsUpdate\")\n@dataclass\nclass HeapStatsUpdate:\n    \"\"\"\n    If heap objects tracking has been started then backend may send update for one or more fragments\n    \"\"\"\n\n    #: An array of triplets. Each triplet describes a fragment. The first integer is the fragment\n    #: index, the second integer is a total count of objects for the fragment, the third integer is\n    #: a total size of the objects for the fragment.\n    stats_update: typing.List[int]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; HeapStatsUpdate:\n        return cls(stats_update=[int(i) for i in json[\"statsUpdate\"]])\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.HeapStatsUpdate.stats_update","title":"<code>stats_update: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.HeapStatsUpdate.__init__","title":"<code>__init__(stats_update)</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.HeapStatsUpdate.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; HeapStatsUpdate:\n    return cls(stats_update=[int(i) for i in json[\"statsUpdate\"]])\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.LastSeenObjectId","title":"<code>LastSeenObjectId</code>  <code>dataclass</code>","text":"<p>If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.</p> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@event_class(\"HeapProfiler.lastSeenObjectId\")\n@dataclass\nclass LastSeenObjectId:\n    \"\"\"\n    If heap objects tracking has been started then backend regularly sends a current value for last\n    seen object id and corresponding timestamp. If the were changes in the heap since last event\n    then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n    \"\"\"\n\n    last_seen_object_id: int\n    timestamp: float\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LastSeenObjectId:\n        return cls(\n            last_seen_object_id=int(json[\"lastSeenObjectId\"]),\n            timestamp=float(json[\"timestamp\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.LastSeenObjectId.last_seen_object_id","title":"<code>last_seen_object_id: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.LastSeenObjectId.timestamp","title":"<code>timestamp: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.LastSeenObjectId.__init__","title":"<code>__init__(last_seen_object_id, timestamp)</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.LastSeenObjectId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LastSeenObjectId:\n    return cls(\n        last_seen_object_id=int(json[\"lastSeenObjectId\"]),\n        timestamp=float(json[\"timestamp\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.ReportHeapSnapshotProgress","title":"<code>ReportHeapSnapshotProgress</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@event_class(\"HeapProfiler.reportHeapSnapshotProgress\")\n@dataclass\nclass ReportHeapSnapshotProgress:\n    done: int\n    total: int\n    finished: typing.Optional[bool]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ReportHeapSnapshotProgress:\n        return cls(\n            done=int(json[\"done\"]),\n            total=int(json[\"total\"]),\n            finished=(\n                bool(json[\"finished\"])\n                if json.get(\"finished\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.ReportHeapSnapshotProgress.done","title":"<code>done: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.ReportHeapSnapshotProgress.finished","title":"<code>finished: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.ReportHeapSnapshotProgress.total","title":"<code>total: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.ReportHeapSnapshotProgress.__init__","title":"<code>__init__(done, total, finished)</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.ReportHeapSnapshotProgress.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ReportHeapSnapshotProgress:\n    return cls(\n        done=int(json[\"done\"]),\n        total=int(json[\"total\"]),\n        finished=(\n            bool(json[\"finished\"])\n            if json.get(\"finished\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.ResetProfiles","title":"<code>ResetProfiles</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@event_class(\"HeapProfiler.resetProfiles\")\n@dataclass\nclass ResetProfiles:\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ResetProfiles:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.ResetProfiles.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.ResetProfiles.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ResetProfiles:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfile","title":"<code>SamplingHeapProfile</code>  <code>dataclass</code>","text":"<p>Sampling profile.</p> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@dataclass\nclass SamplingHeapProfile:\n    \"\"\"\n    Sampling profile.\n    \"\"\"\n\n    head: SamplingHeapProfileNode\n\n    samples: typing.List[SamplingHeapProfileSample]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"head\"] = self.head.to_json()\n        json[\"samples\"] = [i.to_json() for i in self.samples]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SamplingHeapProfile:\n        return cls(\n            head=SamplingHeapProfileNode.from_json(json[\"head\"]),\n            samples=[SamplingHeapProfileSample.from_json(i) for i in json[\"samples\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfile.head","title":"<code>head: SamplingHeapProfileNode</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfile.samples","title":"<code>samples: typing.List[SamplingHeapProfileSample]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfile.__init__","title":"<code>__init__(head, samples)</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfile.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SamplingHeapProfile:\n    return cls(\n        head=SamplingHeapProfileNode.from_json(json[\"head\"]),\n        samples=[SamplingHeapProfileSample.from_json(i) for i in json[\"samples\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfile.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"head\"] = self.head.to_json()\n    json[\"samples\"] = [i.to_json() for i in self.samples]\n    return json\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileNode","title":"<code>SamplingHeapProfileNode</code>  <code>dataclass</code>","text":"<p>Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.</p> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@dataclass\nclass SamplingHeapProfileNode:\n    \"\"\"\n    Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.\n    \"\"\"\n\n    #: Function location.\n    call_frame: runtime.CallFrame\n\n    #: Allocations size in bytes for the node excluding children.\n    self_size: float\n\n    #: Node id. Ids are unique across all profiles collected between startSampling and stopSampling.\n    id_: int\n\n    #: Child nodes.\n    children: typing.List[SamplingHeapProfileNode]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"callFrame\"] = self.call_frame.to_json()\n        json[\"selfSize\"] = self.self_size\n        json[\"id\"] = self.id_\n        json[\"children\"] = [i.to_json() for i in self.children]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SamplingHeapProfileNode:\n        return cls(\n            call_frame=runtime.CallFrame.from_json(json[\"callFrame\"]),\n            self_size=float(json[\"selfSize\"]),\n            id_=int(json[\"id\"]),\n            children=[SamplingHeapProfileNode.from_json(i) for i in json[\"children\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileNode.call_frame","title":"<code>call_frame: runtime.CallFrame</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileNode.children","title":"<code>children: typing.List[SamplingHeapProfileNode]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileNode.id_","title":"<code>id_: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileNode.self_size","title":"<code>self_size: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileNode.__init__","title":"<code>__init__(call_frame, self_size, id_, children)</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileNode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SamplingHeapProfileNode:\n    return cls(\n        call_frame=runtime.CallFrame.from_json(json[\"callFrame\"]),\n        self_size=float(json[\"selfSize\"]),\n        id_=int(json[\"id\"]),\n        children=[SamplingHeapProfileNode.from_json(i) for i in json[\"children\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileNode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"callFrame\"] = self.call_frame.to_json()\n    json[\"selfSize\"] = self.self_size\n    json[\"id\"] = self.id_\n    json[\"children\"] = [i.to_json() for i in self.children]\n    return json\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileSample","title":"<code>SamplingHeapProfileSample</code>  <code>dataclass</code>","text":"<p>A single sample from a sampling profile.</p> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@dataclass\nclass SamplingHeapProfileSample:\n    \"\"\"\n    A single sample from a sampling profile.\n    \"\"\"\n\n    #: Allocation size in bytes attributed to the sample.\n    size: float\n\n    #: Id of the corresponding profile tree node.\n    node_id: int\n\n    #: Time-ordered sample ordinal number. It is unique across all profiles retrieved\n    #: between startSampling and stopSampling.\n    ordinal: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"size\"] = self.size\n        json[\"nodeId\"] = self.node_id\n        json[\"ordinal\"] = self.ordinal\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SamplingHeapProfileSample:\n        return cls(\n            size=float(json[\"size\"]),\n            node_id=int(json[\"nodeId\"]),\n            ordinal=float(json[\"ordinal\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileSample.node_id","title":"<code>node_id: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileSample.ordinal","title":"<code>ordinal: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileSample.size","title":"<code>size: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileSample.__init__","title":"<code>__init__(size, node_id, ordinal)</code>","text":""},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileSample.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SamplingHeapProfileSample:\n    return cls(\n        size=float(json[\"size\"]),\n        node_id=int(json[\"nodeId\"]),\n        ordinal=float(json[\"ordinal\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.SamplingHeapProfileSample.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"size\"] = self.size\n    json[\"nodeId\"] = self.node_id\n    json[\"ordinal\"] = self.ordinal\n    return json\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.add_inspected_heap_object","title":"<code>add_inspected_heap_object(heap_object_id)</code>","text":"<p>Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).</p> <p>Parameters:</p> Name Type Description Default <code>heap_object_id</code> <code>HeapSnapshotObjectId</code> <p>Heap snapshot object id to be accessible by means of $x command line API.</p> required Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def add_inspected_heap_object(\n    heap_object_id: HeapSnapshotObjectId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables console to refer to the node with given id via $x (see Command Line API for more details\n    $x functions).\n\n    :param heap_object_id: Heap snapshot object id to be accessible by means of $x command line API.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"heapObjectId\"] = heap_object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.addInspectedHeapObject\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.collect_garbage","title":"<code>collect_garbage()</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def collect_garbage() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.collectGarbage\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.disable","title":"<code>disable()</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.enable","title":"<code>enable()</code>","text":"Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.get_heap_object_id","title":"<code>get_heap_object_id(object_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>object_id</code> <code>RemoteObjectId</code> <p>Identifier of the object to get heap object id for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, HeapSnapshotObjectId]</code> <p>Id of the heap snapshot object corresponding to the passed remote object id.</p> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def get_heap_object_id(\n    object_id: runtime.RemoteObjectId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, HeapSnapshotObjectId]:\n    \"\"\"\n    :param object_id: Identifier of the object to get heap object id for.\n    :returns: Id of the heap snapshot object corresponding to the passed remote object id.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.getHeapObjectId\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return HeapSnapshotObjectId.from_json(json[\"heapSnapshotObjectId\"])\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.get_object_by_heap_object_id","title":"<code>get_object_by_heap_object_id(object_id, object_group=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>object_id</code> <code>HeapSnapshotObjectId</code> required <code>object_group</code> <code>Optional[str]</code> <p>(Optional) Symbolic group name that can be used to release multiple objects.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, RemoteObject]</code> <p>Evaluation result.</p> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def get_object_by_heap_object_id(\n    object_id: HeapSnapshotObjectId, object_group: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.RemoteObject]:\n    \"\"\"\n    :param object_id:\n    :param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects.\n    :returns: Evaluation result.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"objectId\"] = object_id.to_json()\n    if object_group is not None:\n        params[\"objectGroup\"] = object_group\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.getObjectByHeapObjectId\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return runtime.RemoteObject.from_json(json[\"result\"])\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.get_sampling_profile","title":"<code>get_sampling_profile()</code>","text":"<p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SamplingHeapProfile]</code> <p>Return the sampling profile being collected.</p> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def get_sampling_profile() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, SamplingHeapProfile]\n):\n    \"\"\"\n\n\n    :returns: Return the sampling profile being collected.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.getSamplingProfile\",\n    }\n    json = yield cmd_dict\n    return SamplingHeapProfile.from_json(json[\"profile\"])\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.start_sampling","title":"<code>start_sampling(sampling_interval=None, include_objects_collected_by_major_gc=None, include_objects_collected_by_minor_gc=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>sampling_interval</code> <code>Optional[float]</code> <p>(Optional) Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.</p> <code>None</code> <code>include_objects_collected_by_major_gc</code> <code>Optional[bool]</code> <p>(Optional) By default, the sampling heap profiler reports only objects which are still alive when the profile is returned via getSamplingProfile or stopSampling, which is useful for determining what functions contribute the most to steady-state memory usage. This flag instructs the sampling heap profiler to also include information about objects discarded by major GC, which will show which functions cause large temporary memory usage or long GC pauses.</p> <code>None</code> <code>include_objects_collected_by_minor_gc</code> <code>Optional[bool]</code> <p>(Optional) By default, the sampling heap profiler reports only objects which are still alive when the profile is returned via getSamplingProfile or stopSampling, which is useful for determining what functions contribute the most to steady-state memory usage. This flag instructs the sampling heap profiler to also include information about objects discarded by minor GC, which is useful when tuning a latency-sensitive application for minimal GC activity.</p> <code>None</code> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def start_sampling(\n    sampling_interval: typing.Optional[float] = None,\n    include_objects_collected_by_major_gc: typing.Optional[bool] = None,\n    include_objects_collected_by_minor_gc: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param sampling_interval: *(Optional)* Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.\n    :param include_objects_collected_by_major_gc: *(Optional)* By default, the sampling heap profiler reports only objects which are still alive when the profile is returned via getSamplingProfile or stopSampling, which is useful for determining what functions contribute the most to steady-state memory usage. This flag instructs the sampling heap profiler to also include information about objects discarded by major GC, which will show which functions cause large temporary memory usage or long GC pauses.\n    :param include_objects_collected_by_minor_gc: *(Optional)* By default, the sampling heap profiler reports only objects which are still alive when the profile is returned via getSamplingProfile or stopSampling, which is useful for determining what functions contribute the most to steady-state memory usage. This flag instructs the sampling heap profiler to also include information about objects discarded by minor GC, which is useful when tuning a latency-sensitive application for minimal GC activity.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if sampling_interval is not None:\n        params[\"samplingInterval\"] = sampling_interval\n    if include_objects_collected_by_major_gc is not None:\n        params[\"includeObjectsCollectedByMajorGC\"] = (\n            include_objects_collected_by_major_gc\n        )\n    if include_objects_collected_by_minor_gc is not None:\n        params[\"includeObjectsCollectedByMinorGC\"] = (\n            include_objects_collected_by_minor_gc\n        )\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.startSampling\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.start_tracking_heap_objects","title":"<code>start_tracking_heap_objects(track_allocations=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>track_allocations</code> <code>Optional[bool]</code> <p>(Optional)</p> <code>None</code> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def start_tracking_heap_objects(\n    track_allocations: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param track_allocations: *(Optional)*\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if track_allocations is not None:\n        params[\"trackAllocations\"] = track_allocations\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.startTrackingHeapObjects\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.stop_sampling","title":"<code>stop_sampling()</code>","text":"<p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SamplingHeapProfile]</code> <p>Recorded sampling heap profile.</p> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def stop_sampling() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, SamplingHeapProfile]:\n    \"\"\"\n\n\n    :returns: Recorded sampling heap profile.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.stopSampling\",\n    }\n    json = yield cmd_dict\n    return SamplingHeapProfile.from_json(json[\"profile\"])\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.stop_tracking_heap_objects","title":"<code>stop_tracking_heap_objects(report_progress=None, treat_global_objects_as_roots=None, capture_numeric_value=None, expose_internals=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>report_progress</code> <code>Optional[bool]</code> <p>(Optional) If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.</p> <code>None</code> <code>treat_global_objects_as_roots</code> <code>Optional[bool]</code> <p>(DEPRECATED) (Optional) Deprecated in favor of <code>exposeInternals</code>.</p> <code>None</code> <code>capture_numeric_value</code> <code>Optional[bool]</code> <p>(Optional) If true, numerical values are included in the snapshot</p> <code>None</code> <code>expose_internals</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) If true, exposes internals of the snapshot.</p> <code>None</code> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def stop_tracking_heap_objects(\n    report_progress: typing.Optional[bool] = None,\n    treat_global_objects_as_roots: typing.Optional[bool] = None,\n    capture_numeric_value: typing.Optional[bool] = None,\n    expose_internals: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param report_progress: *(Optional)* If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.\n    :param treat_global_objects_as_roots: **(DEPRECATED)** *(Optional)* Deprecated in favor of ```exposeInternals```.\n    :param capture_numeric_value: *(Optional)* If true, numerical values are included in the snapshot\n    :param expose_internals: **(EXPERIMENTAL)** *(Optional)* If true, exposes internals of the snapshot.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if report_progress is not None:\n        params[\"reportProgress\"] = report_progress\n    if treat_global_objects_as_roots is not None:\n        params[\"treatGlobalObjectsAsRoots\"] = treat_global_objects_as_roots\n    if capture_numeric_value is not None:\n        params[\"captureNumericValue\"] = capture_numeric_value\n    if expose_internals is not None:\n        params[\"exposeInternals\"] = expose_internals\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.stopTrackingHeapObjects\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/heap_profiler/#zendriver.cdp.heap_profiler.take_heap_snapshot","title":"<code>take_heap_snapshot(report_progress=None, treat_global_objects_as_roots=None, capture_numeric_value=None, expose_internals=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>report_progress</code> <code>Optional[bool]</code> <p>(Optional) If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.</p> <code>None</code> <code>treat_global_objects_as_roots</code> <code>Optional[bool]</code> <p>(DEPRECATED) (Optional) If true, a raw snapshot without artificial roots will be generated. Deprecated in favor of <code>exposeInternals</code>.</p> <code>None</code> <code>capture_numeric_value</code> <code>Optional[bool]</code> <p>(Optional) If true, numerical values are included in the snapshot</p> <code>None</code> <code>expose_internals</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) If true, exposes internals of the snapshot.</p> <code>None</code> Source code in <code>zendriver/cdp/heap_profiler.py</code> <pre><code>def take_heap_snapshot(\n    report_progress: typing.Optional[bool] = None,\n    treat_global_objects_as_roots: typing.Optional[bool] = None,\n    capture_numeric_value: typing.Optional[bool] = None,\n    expose_internals: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param report_progress: *(Optional)* If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.\n    :param treat_global_objects_as_roots: **(DEPRECATED)** *(Optional)* If true, a raw snapshot without artificial roots will be generated. Deprecated in favor of ```exposeInternals```.\n    :param capture_numeric_value: *(Optional)* If true, numerical values are included in the snapshot\n    :param expose_internals: **(EXPERIMENTAL)** *(Optional)* If true, exposes internals of the snapshot.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if report_progress is not None:\n        params[\"reportProgress\"] = report_progress\n    if treat_global_objects_as_roots is not None:\n        params[\"treatGlobalObjectsAsRoots\"] = treat_global_objects_as_roots\n    if capture_numeric_value is not None:\n        params[\"captureNumericValue\"] = capture_numeric_value\n    if expose_internals is not None:\n        params[\"exposeInternals\"] = expose_internals\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"HeapProfiler.takeHeapSnapshot\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/indexed_db/","title":"indexed_db","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DataEntry","title":"<code>DataEntry</code>  <code>dataclass</code>","text":"<p>Data entry.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@dataclass\nclass DataEntry:\n    \"\"\"\n    Data entry.\n    \"\"\"\n\n    #: Key object.\n    key: runtime.RemoteObject\n\n    #: Primary key object.\n    primary_key: runtime.RemoteObject\n\n    #: Value object.\n    value: runtime.RemoteObject\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"key\"] = self.key.to_json()\n        json[\"primaryKey\"] = self.primary_key.to_json()\n        json[\"value\"] = self.value.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DataEntry:\n        return cls(\n            key=runtime.RemoteObject.from_json(json[\"key\"]),\n            primary_key=runtime.RemoteObject.from_json(json[\"primaryKey\"]),\n            value=runtime.RemoteObject.from_json(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DataEntry.key","title":"<code>key: runtime.RemoteObject</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DataEntry.primary_key","title":"<code>primary_key: runtime.RemoteObject</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DataEntry.value","title":"<code>value: runtime.RemoteObject</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DataEntry.__init__","title":"<code>__init__(key, primary_key, value)</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DataEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DataEntry:\n    return cls(\n        key=runtime.RemoteObject.from_json(json[\"key\"]),\n        primary_key=runtime.RemoteObject.from_json(json[\"primaryKey\"]),\n        value=runtime.RemoteObject.from_json(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DataEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"key\"] = self.key.to_json()\n    json[\"primaryKey\"] = self.primary_key.to_json()\n    json[\"value\"] = self.value.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DatabaseWithObjectStores","title":"<code>DatabaseWithObjectStores</code>  <code>dataclass</code>","text":"<p>Database with an array of object stores.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@dataclass\nclass DatabaseWithObjectStores:\n    \"\"\"\n    Database with an array of object stores.\n    \"\"\"\n\n    #: Database name.\n    name: str\n\n    #: Database version (type is not 'integer', as the standard\n    #: requires the version number to be 'unsigned long long')\n    version: float\n\n    #: Object stores in this database.\n    object_stores: typing.List[ObjectStore]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"version\"] = self.version\n        json[\"objectStores\"] = [i.to_json() for i in self.object_stores]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DatabaseWithObjectStores:\n        return cls(\n            name=str(json[\"name\"]),\n            version=float(json[\"version\"]),\n            object_stores=[ObjectStore.from_json(i) for i in json[\"objectStores\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DatabaseWithObjectStores.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DatabaseWithObjectStores.object_stores","title":"<code>object_stores: typing.List[ObjectStore]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DatabaseWithObjectStores.version","title":"<code>version: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DatabaseWithObjectStores.__init__","title":"<code>__init__(name, version, object_stores)</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DatabaseWithObjectStores.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DatabaseWithObjectStores:\n    return cls(\n        name=str(json[\"name\"]),\n        version=float(json[\"version\"]),\n        object_stores=[ObjectStore.from_json(i) for i in json[\"objectStores\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.DatabaseWithObjectStores.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"version\"] = self.version\n    json[\"objectStores\"] = [i.to_json() for i in self.object_stores]\n    return json\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.Key","title":"<code>Key</code>  <code>dataclass</code>","text":"<p>Key.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@dataclass\nclass Key:\n    \"\"\"\n    Key.\n    \"\"\"\n\n    #: Key type.\n    type_: str\n\n    #: Number value.\n    number: typing.Optional[float] = None\n\n    #: String value.\n    string: typing.Optional[str] = None\n\n    #: Date value.\n    date: typing.Optional[float] = None\n\n    #: Array value.\n    array: typing.Optional[typing.List[Key]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        if self.number is not None:\n            json[\"number\"] = self.number\n        if self.string is not None:\n            json[\"string\"] = self.string\n        if self.date is not None:\n            json[\"date\"] = self.date\n        if self.array is not None:\n            json[\"array\"] = [i.to_json() for i in self.array]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Key:\n        return cls(\n            type_=str(json[\"type\"]),\n            number=(\n                float(json[\"number\"]) if json.get(\"number\", None) is not None else None\n            ),\n            string=(\n                str(json[\"string\"]) if json.get(\"string\", None) is not None else None\n            ),\n            date=float(json[\"date\"]) if json.get(\"date\", None) is not None else None,\n            array=(\n                [Key.from_json(i) for i in json[\"array\"]]\n                if json.get(\"array\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.Key.array","title":"<code>array: typing.Optional[typing.List[Key]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.Key.date","title":"<code>date: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.Key.number","title":"<code>number: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.Key.string","title":"<code>string: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.Key.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.Key.__init__","title":"<code>__init__(type_, number=None, string=None, date=None, array=None)</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.Key.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Key:\n    return cls(\n        type_=str(json[\"type\"]),\n        number=(\n            float(json[\"number\"]) if json.get(\"number\", None) is not None else None\n        ),\n        string=(\n            str(json[\"string\"]) if json.get(\"string\", None) is not None else None\n        ),\n        date=float(json[\"date\"]) if json.get(\"date\", None) is not None else None,\n        array=(\n            [Key.from_json(i) for i in json[\"array\"]]\n            if json.get(\"array\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.Key.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    if self.number is not None:\n        json[\"number\"] = self.number\n    if self.string is not None:\n        json[\"string\"] = self.string\n    if self.date is not None:\n        json[\"date\"] = self.date\n    if self.array is not None:\n        json[\"array\"] = [i.to_json() for i in self.array]\n    return json\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyPath","title":"<code>KeyPath</code>  <code>dataclass</code>","text":"<p>Key path.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@dataclass\nclass KeyPath:\n    \"\"\"\n    Key path.\n    \"\"\"\n\n    #: Key path type.\n    type_: str\n\n    #: String value.\n    string: typing.Optional[str] = None\n\n    #: Array value.\n    array: typing.Optional[typing.List[str]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        if self.string is not None:\n            json[\"string\"] = self.string\n        if self.array is not None:\n            json[\"array\"] = [i for i in self.array]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; KeyPath:\n        return cls(\n            type_=str(json[\"type\"]),\n            string=(\n                str(json[\"string\"]) if json.get(\"string\", None) is not None else None\n            ),\n            array=(\n                [str(i) for i in json[\"array\"]]\n                if json.get(\"array\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyPath.array","title":"<code>array: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyPath.string","title":"<code>string: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyPath.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyPath.__init__","title":"<code>__init__(type_, string=None, array=None)</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyPath.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; KeyPath:\n    return cls(\n        type_=str(json[\"type\"]),\n        string=(\n            str(json[\"string\"]) if json.get(\"string\", None) is not None else None\n        ),\n        array=(\n            [str(i) for i in json[\"array\"]]\n            if json.get(\"array\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyPath.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    if self.string is not None:\n        json[\"string\"] = self.string\n    if self.array is not None:\n        json[\"array\"] = [i for i in self.array]\n    return json\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyRange","title":"<code>KeyRange</code>  <code>dataclass</code>","text":"<p>Key range.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@dataclass\nclass KeyRange:\n    \"\"\"\n    Key range.\n    \"\"\"\n\n    #: If true lower bound is open.\n    lower_open: bool\n\n    #: If true upper bound is open.\n    upper_open: bool\n\n    #: Lower bound.\n    lower: typing.Optional[Key] = None\n\n    #: Upper bound.\n    upper: typing.Optional[Key] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"lowerOpen\"] = self.lower_open\n        json[\"upperOpen\"] = self.upper_open\n        if self.lower is not None:\n            json[\"lower\"] = self.lower.to_json()\n        if self.upper is not None:\n            json[\"upper\"] = self.upper.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; KeyRange:\n        return cls(\n            lower_open=bool(json[\"lowerOpen\"]),\n            upper_open=bool(json[\"upperOpen\"]),\n            lower=(\n                Key.from_json(json[\"lower\"])\n                if json.get(\"lower\", None) is not None\n                else None\n            ),\n            upper=(\n                Key.from_json(json[\"upper\"])\n                if json.get(\"upper\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyRange.lower","title":"<code>lower: typing.Optional[Key] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyRange.lower_open","title":"<code>lower_open: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyRange.upper","title":"<code>upper: typing.Optional[Key] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyRange.upper_open","title":"<code>upper_open: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyRange.__init__","title":"<code>__init__(lower_open, upper_open, lower=None, upper=None)</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyRange.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; KeyRange:\n    return cls(\n        lower_open=bool(json[\"lowerOpen\"]),\n        upper_open=bool(json[\"upperOpen\"]),\n        lower=(\n            Key.from_json(json[\"lower\"])\n            if json.get(\"lower\", None) is not None\n            else None\n        ),\n        upper=(\n            Key.from_json(json[\"upper\"])\n            if json.get(\"upper\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.KeyRange.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"lowerOpen\"] = self.lower_open\n    json[\"upperOpen\"] = self.upper_open\n    if self.lower is not None:\n        json[\"lower\"] = self.lower.to_json()\n    if self.upper is not None:\n        json[\"upper\"] = self.upper.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStore","title":"<code>ObjectStore</code>  <code>dataclass</code>","text":"<p>Object store.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@dataclass\nclass ObjectStore:\n    \"\"\"\n    Object store.\n    \"\"\"\n\n    #: Object store name.\n    name: str\n\n    #: Object store key path.\n    key_path: KeyPath\n\n    #: If true, object store has auto increment flag set.\n    auto_increment: bool\n\n    #: Indexes in this object store.\n    indexes: typing.List[ObjectStoreIndex]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"keyPath\"] = self.key_path.to_json()\n        json[\"autoIncrement\"] = self.auto_increment\n        json[\"indexes\"] = [i.to_json() for i in self.indexes]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ObjectStore:\n        return cls(\n            name=str(json[\"name\"]),\n            key_path=KeyPath.from_json(json[\"keyPath\"]),\n            auto_increment=bool(json[\"autoIncrement\"]),\n            indexes=[ObjectStoreIndex.from_json(i) for i in json[\"indexes\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStore.auto_increment","title":"<code>auto_increment: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStore.indexes","title":"<code>indexes: typing.List[ObjectStoreIndex]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStore.key_path","title":"<code>key_path: KeyPath</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStore.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStore.__init__","title":"<code>__init__(name, key_path, auto_increment, indexes)</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStore.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ObjectStore:\n    return cls(\n        name=str(json[\"name\"]),\n        key_path=KeyPath.from_json(json[\"keyPath\"]),\n        auto_increment=bool(json[\"autoIncrement\"]),\n        indexes=[ObjectStoreIndex.from_json(i) for i in json[\"indexes\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStore.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"keyPath\"] = self.key_path.to_json()\n    json[\"autoIncrement\"] = self.auto_increment\n    json[\"indexes\"] = [i.to_json() for i in self.indexes]\n    return json\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStoreIndex","title":"<code>ObjectStoreIndex</code>  <code>dataclass</code>","text":"<p>Object store index.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@dataclass\nclass ObjectStoreIndex:\n    \"\"\"\n    Object store index.\n    \"\"\"\n\n    #: Index name.\n    name: str\n\n    #: Index key path.\n    key_path: KeyPath\n\n    #: If true, index is unique.\n    unique: bool\n\n    #: If true, index allows multiple entries for a key.\n    multi_entry: bool\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"keyPath\"] = self.key_path.to_json()\n        json[\"unique\"] = self.unique\n        json[\"multiEntry\"] = self.multi_entry\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ObjectStoreIndex:\n        return cls(\n            name=str(json[\"name\"]),\n            key_path=KeyPath.from_json(json[\"keyPath\"]),\n            unique=bool(json[\"unique\"]),\n            multi_entry=bool(json[\"multiEntry\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStoreIndex.key_path","title":"<code>key_path: KeyPath</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStoreIndex.multi_entry","title":"<code>multi_entry: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStoreIndex.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStoreIndex.unique","title":"<code>unique: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStoreIndex.__init__","title":"<code>__init__(name, key_path, unique, multi_entry)</code>","text":""},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStoreIndex.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ObjectStoreIndex:\n    return cls(\n        name=str(json[\"name\"]),\n        key_path=KeyPath.from_json(json[\"keyPath\"]),\n        unique=bool(json[\"unique\"]),\n        multi_entry=bool(json[\"multiEntry\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.ObjectStoreIndex.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"keyPath\"] = self.key_path.to_json()\n    json[\"unique\"] = self.unique\n    json[\"multiEntry\"] = self.multi_entry\n    return json\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.clear_object_store","title":"<code>clear_object_store(database_name, object_store_name, security_origin=None, storage_key=None, storage_bucket=None)</code>","text":"<p>Clears all entries from an object store.</p> <p>Parameters:</p> Name Type Description Default <code>security_origin</code> <code>Optional[str]</code> <p>(Optional) At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.</p> <code>None</code> <code>storage_key</code> <code>Optional[str]</code> <p>(Optional) Storage key.</p> <code>None</code> <code>storage_bucket</code> <code>Optional[StorageBucket]</code> <p>(Optional) Storage bucket. If not specified, it uses the default bucket.</p> <code>None</code> <code>database_name</code> <code>str</code> <p>Database name.</p> required <code>object_store_name</code> <code>str</code> <p>Object store name.</p> required Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def clear_object_store(\n    database_name: str,\n    object_store_name: str,\n    security_origin: typing.Optional[str] = None,\n    storage_key: typing.Optional[str] = None,\n    storage_bucket: typing.Optional[storage.StorageBucket] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears all entries from an object store.\n\n    :param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.\n    :param storage_key: *(Optional)* Storage key.\n    :param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.\n    :param database_name: Database name.\n    :param object_store_name: Object store name.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if security_origin is not None:\n        params[\"securityOrigin\"] = security_origin\n    if storage_key is not None:\n        params[\"storageKey\"] = storage_key\n    if storage_bucket is not None:\n        params[\"storageBucket\"] = storage_bucket.to_json()\n    params[\"databaseName\"] = database_name\n    params[\"objectStoreName\"] = object_store_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IndexedDB.clearObjectStore\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.delete_database","title":"<code>delete_database(database_name, security_origin=None, storage_key=None, storage_bucket=None)</code>","text":"<p>Deletes a database.</p> <p>Parameters:</p> Name Type Description Default <code>security_origin</code> <code>Optional[str]</code> <p>(Optional) At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.</p> <code>None</code> <code>storage_key</code> <code>Optional[str]</code> <p>(Optional) Storage key.</p> <code>None</code> <code>storage_bucket</code> <code>Optional[StorageBucket]</code> <p>(Optional) Storage bucket. If not specified, it uses the default bucket.</p> <code>None</code> <code>database_name</code> <code>str</code> <p>Database name.</p> required Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def delete_database(\n    database_name: str,\n    security_origin: typing.Optional[str] = None,\n    storage_key: typing.Optional[str] = None,\n    storage_bucket: typing.Optional[storage.StorageBucket] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Deletes a database.\n\n    :param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.\n    :param storage_key: *(Optional)* Storage key.\n    :param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.\n    :param database_name: Database name.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if security_origin is not None:\n        params[\"securityOrigin\"] = security_origin\n    if storage_key is not None:\n        params[\"storageKey\"] = storage_key\n    if storage_bucket is not None:\n        params[\"storageBucket\"] = storage_bucket.to_json()\n    params[\"databaseName\"] = database_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IndexedDB.deleteDatabase\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.delete_object_store_entries","title":"<code>delete_object_store_entries(database_name, object_store_name, key_range, security_origin=None, storage_key=None, storage_bucket=None)</code>","text":"<p>Delete a range of entries from an object store</p> <p>Parameters:</p> Name Type Description Default <code>security_origin</code> <code>Optional[str]</code> <p>(Optional) At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.</p> <code>None</code> <code>storage_key</code> <code>Optional[str]</code> <p>(Optional) Storage key.</p> <code>None</code> <code>storage_bucket</code> <code>Optional[StorageBucket]</code> <p>(Optional) Storage bucket. If not specified, it uses the default bucket.</p> <code>None</code> <code>database_name</code> <code>str</code> required <code>object_store_name</code> <code>str</code> required <code>key_range</code> <code>KeyRange</code> <p>Range of entry keys to delete</p> required Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def delete_object_store_entries(\n    database_name: str,\n    object_store_name: str,\n    key_range: KeyRange,\n    security_origin: typing.Optional[str] = None,\n    storage_key: typing.Optional[str] = None,\n    storage_bucket: typing.Optional[storage.StorageBucket] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Delete a range of entries from an object store\n\n    :param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.\n    :param storage_key: *(Optional)* Storage key.\n    :param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.\n    :param database_name:\n    :param object_store_name:\n    :param key_range: Range of entry keys to delete\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if security_origin is not None:\n        params[\"securityOrigin\"] = security_origin\n    if storage_key is not None:\n        params[\"storageKey\"] = storage_key\n    if storage_bucket is not None:\n        params[\"storageBucket\"] = storage_bucket.to_json()\n    params[\"databaseName\"] = database_name\n    params[\"objectStoreName\"] = object_store_name\n    params[\"keyRange\"] = key_range.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IndexedDB.deleteObjectStoreEntries\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.disable","title":"<code>disable()</code>","text":"<p>Disables events from backend.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables events from backend.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IndexedDB.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.enable","title":"<code>enable()</code>","text":"<p>Enables events from backend.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables events from backend.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IndexedDB.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.get_metadata","title":"<code>get_metadata(database_name, object_store_name, security_origin=None, storage_key=None, storage_bucket=None)</code>","text":"<p>Gets metadata of an object store.</p> <p>Parameters:</p> Name Type Description Default <code>security_origin</code> <code>Optional[str]</code> <p>(Optional) At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.</p> <code>None</code> <code>storage_key</code> <code>Optional[str]</code> <p>(Optional) Storage key.</p> <code>None</code> <code>storage_bucket</code> <code>Optional[StorageBucket]</code> <p>(Optional) Storage bucket. If not specified, it uses the default bucket.</p> <code>None</code> <code>database_name</code> <code>str</code> <p>Database name.</p> required <code>object_store_name</code> <code>str</code> <p>Object store name.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[float, float]]</code> <p>A tuple with the following items:  0. entriesCount - the entries count 1. keyGeneratorValue - the current value of key generator, to become the next inserted key into the object store. Valid if objectStore.autoIncrement is true.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def get_metadata(\n    database_name: str,\n    object_store_name: str,\n    security_origin: typing.Optional[str] = None,\n    storage_key: typing.Optional[str] = None,\n    storage_bucket: typing.Optional[storage.StorageBucket] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[float, float]]:\n    \"\"\"\n    Gets metadata of an object store.\n\n    :param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.\n    :param storage_key: *(Optional)* Storage key.\n    :param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.\n    :param database_name: Database name.\n    :param object_store_name: Object store name.\n    :returns: A tuple with the following items:\n\n        0. **entriesCount** - the entries count\n        1. **keyGeneratorValue** - the current value of key generator, to become the next inserted key into the object store. Valid if objectStore.autoIncrement is true.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if security_origin is not None:\n        params[\"securityOrigin\"] = security_origin\n    if storage_key is not None:\n        params[\"storageKey\"] = storage_key\n    if storage_bucket is not None:\n        params[\"storageBucket\"] = storage_bucket.to_json()\n    params[\"databaseName\"] = database_name\n    params[\"objectStoreName\"] = object_store_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IndexedDB.getMetadata\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (float(json[\"entriesCount\"]), float(json[\"keyGeneratorValue\"]))\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.request_data","title":"<code>request_data(database_name, object_store_name, index_name, skip_count, page_size, security_origin=None, storage_key=None, storage_bucket=None, key_range=None)</code>","text":"<p>Requests data from object store or index.</p> <p>Parameters:</p> Name Type Description Default <code>security_origin</code> <code>Optional[str]</code> <p>(Optional) At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.</p> <code>None</code> <code>storage_key</code> <code>Optional[str]</code> <p>(Optional) Storage key.</p> <code>None</code> <code>storage_bucket</code> <code>Optional[StorageBucket]</code> <p>(Optional) Storage bucket. If not specified, it uses the default bucket.</p> <code>None</code> <code>database_name</code> <code>str</code> <p>Database name.</p> required <code>object_store_name</code> <code>str</code> <p>Object store name.</p> required <code>index_name</code> <code>str</code> <p>Index name, empty string for object store data requests.</p> required <code>skip_count</code> <code>int</code> <p>Number of records to skip.</p> required <code>page_size</code> <code>int</code> <p>Number of records to fetch.</p> required <code>key_range</code> <code>Optional[KeyRange]</code> <p>(Optional) Key range.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[List[DataEntry], bool]]</code> <p>A tuple with the following items:  0. objectStoreDataEntries - Array of object store data entries. 1. hasMore - If true, there are more entries to fetch in the given range.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def request_data(\n    database_name: str,\n    object_store_name: str,\n    index_name: str,\n    skip_count: int,\n    page_size: int,\n    security_origin: typing.Optional[str] = None,\n    storage_key: typing.Optional[str] = None,\n    storage_bucket: typing.Optional[storage.StorageBucket] = None,\n    key_range: typing.Optional[KeyRange] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List[DataEntry], bool]\n]:\n    \"\"\"\n    Requests data from object store or index.\n\n    :param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.\n    :param storage_key: *(Optional)* Storage key.\n    :param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.\n    :param database_name: Database name.\n    :param object_store_name: Object store name.\n    :param index_name: Index name, empty string for object store data requests.\n    :param skip_count: Number of records to skip.\n    :param page_size: Number of records to fetch.\n    :param key_range: *(Optional)* Key range.\n    :returns: A tuple with the following items:\n\n        0. **objectStoreDataEntries** - Array of object store data entries.\n        1. **hasMore** - If true, there are more entries to fetch in the given range.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if security_origin is not None:\n        params[\"securityOrigin\"] = security_origin\n    if storage_key is not None:\n        params[\"storageKey\"] = storage_key\n    if storage_bucket is not None:\n        params[\"storageBucket\"] = storage_bucket.to_json()\n    params[\"databaseName\"] = database_name\n    params[\"objectStoreName\"] = object_store_name\n    params[\"indexName\"] = index_name\n    params[\"skipCount\"] = skip_count\n    params[\"pageSize\"] = page_size\n    if key_range is not None:\n        params[\"keyRange\"] = key_range.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IndexedDB.requestData\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        [DataEntry.from_json(i) for i in json[\"objectStoreDataEntries\"]],\n        bool(json[\"hasMore\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.request_database","title":"<code>request_database(database_name, security_origin=None, storage_key=None, storage_bucket=None)</code>","text":"<p>Requests database with given name in given frame.</p> <p>Parameters:</p> Name Type Description Default <code>security_origin</code> <code>Optional[str]</code> <p>(Optional) At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.</p> <code>None</code> <code>storage_key</code> <code>Optional[str]</code> <p>(Optional) Storage key.</p> <code>None</code> <code>storage_bucket</code> <code>Optional[StorageBucket]</code> <p>(Optional) Storage bucket. If not specified, it uses the default bucket.</p> <code>None</code> <code>database_name</code> <code>str</code> <p>Database name.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, DatabaseWithObjectStores]</code> <p>Database with an array of object stores.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def request_database(\n    database_name: str,\n    security_origin: typing.Optional[str] = None,\n    storage_key: typing.Optional[str] = None,\n    storage_bucket: typing.Optional[storage.StorageBucket] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, DatabaseWithObjectStores]:\n    \"\"\"\n    Requests database with given name in given frame.\n\n    :param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.\n    :param storage_key: *(Optional)* Storage key.\n    :param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.\n    :param database_name: Database name.\n    :returns: Database with an array of object stores.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if security_origin is not None:\n        params[\"securityOrigin\"] = security_origin\n    if storage_key is not None:\n        params[\"storageKey\"] = storage_key\n    if storage_bucket is not None:\n        params[\"storageBucket\"] = storage_bucket.to_json()\n    params[\"databaseName\"] = database_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IndexedDB.requestDatabase\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return DatabaseWithObjectStores.from_json(json[\"databaseWithObjectStores\"])\n</code></pre>"},{"location":"reference/cdp/indexed_db/#zendriver.cdp.indexed_db.request_database_names","title":"<code>request_database_names(security_origin=None, storage_key=None, storage_bucket=None)</code>","text":"<p>Requests database names for given security origin.</p> <p>Parameters:</p> Name Type Description Default <code>security_origin</code> <code>Optional[str]</code> <p>(Optional) At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.</p> <code>None</code> <code>storage_key</code> <code>Optional[str]</code> <p>(Optional) Storage key.</p> <code>None</code> <code>storage_bucket</code> <code>Optional[StorageBucket]</code> <p>(Optional) Storage bucket. If not specified, it uses the default bucket.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[str]]</code> <p>Database names for origin.</p> Source code in <code>zendriver/cdp/indexed_db.py</code> <pre><code>def request_database_names(\n    security_origin: typing.Optional[str] = None,\n    storage_key: typing.Optional[str] = None,\n    storage_bucket: typing.Optional[storage.StorageBucket] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]:\n    \"\"\"\n    Requests database names for given security origin.\n\n    :param security_origin: *(Optional)* At least and at most one of securityOrigin, storageKey, or storageBucket must be specified. Security origin.\n    :param storage_key: *(Optional)* Storage key.\n    :param storage_bucket: *(Optional)* Storage bucket. If not specified, it uses the default bucket.\n    :returns: Database names for origin.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if security_origin is not None:\n        params[\"securityOrigin\"] = security_origin\n    if storage_key is not None:\n        params[\"storageKey\"] = storage_key\n    if storage_bucket is not None:\n        params[\"storageBucket\"] = storage_bucket.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IndexedDB.requestDatabaseNames\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [str(i) for i in json[\"databaseNames\"]]\n</code></pre>"},{"location":"reference/cdp/input_/","title":"input_","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragData","title":"<code>DragData</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@dataclass\nclass DragData:\n    items: typing.List[DragDataItem]\n\n    #: Bit field representing allowed drag operations. Copy = 1, Link = 2, Move = 16\n    drag_operations_mask: int\n\n    #: List of filenames that should be included when dropping\n    files: typing.Optional[typing.List[str]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"items\"] = [i.to_json() for i in self.items]\n        json[\"dragOperationsMask\"] = self.drag_operations_mask\n        if self.files is not None:\n            json[\"files\"] = [i for i in self.files]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DragData:\n        return cls(\n            items=[DragDataItem.from_json(i) for i in json[\"items\"]],\n            drag_operations_mask=int(json[\"dragOperationsMask\"]),\n            files=(\n                [str(i) for i in json[\"files\"]]\n                if json.get(\"files\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragData.drag_operations_mask","title":"<code>drag_operations_mask: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragData.files","title":"<code>files: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragData.items","title":"<code>items: typing.List[DragDataItem]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragData.__init__","title":"<code>__init__(items, drag_operations_mask, files=None)</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragData.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DragData:\n    return cls(\n        items=[DragDataItem.from_json(i) for i in json[\"items\"]],\n        drag_operations_mask=int(json[\"dragOperationsMask\"]),\n        files=(\n            [str(i) for i in json[\"files\"]]\n            if json.get(\"files\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragData.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"items\"] = [i.to_json() for i in self.items]\n    json[\"dragOperationsMask\"] = self.drag_operations_mask\n    if self.files is not None:\n        json[\"files\"] = [i for i in self.files]\n    return json\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragDataItem","title":"<code>DragDataItem</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@dataclass\nclass DragDataItem:\n    #: Mime type of the dragged data.\n    mime_type: str\n\n    #: Depending of the value of ``mimeType``, it contains the dragged link,\n    #: text, HTML markup or any other data.\n    data: str\n\n    #: Title associated with a link. Only valid when ``mimeType`` == \"text/uri-list\".\n    title: typing.Optional[str] = None\n\n    #: Stores the base URL for the contained markup. Only valid when ``mimeType``\n    #: == \"text/html\".\n    base_url: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"mimeType\"] = self.mime_type\n        json[\"data\"] = self.data\n        if self.title is not None:\n            json[\"title\"] = self.title\n        if self.base_url is not None:\n            json[\"baseURL\"] = self.base_url\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DragDataItem:\n        return cls(\n            mime_type=str(json[\"mimeType\"]),\n            data=str(json[\"data\"]),\n            title=str(json[\"title\"]) if json.get(\"title\", None) is not None else None,\n            base_url=(\n                str(json[\"baseURL\"]) if json.get(\"baseURL\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragDataItem.base_url","title":"<code>base_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragDataItem.data","title":"<code>data: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragDataItem.mime_type","title":"<code>mime_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragDataItem.title","title":"<code>title: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragDataItem.__init__","title":"<code>__init__(mime_type, data, title=None, base_url=None)</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragDataItem.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DragDataItem:\n    return cls(\n        mime_type=str(json[\"mimeType\"]),\n        data=str(json[\"data\"]),\n        title=str(json[\"title\"]) if json.get(\"title\", None) is not None else None,\n        base_url=(\n            str(json[\"baseURL\"]) if json.get(\"baseURL\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragDataItem.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"mimeType\"] = self.mime_type\n    json[\"data\"] = self.data\n    if self.title is not None:\n        json[\"title\"] = self.title\n    if self.base_url is not None:\n        json[\"baseURL\"] = self.base_url\n    return json\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragIntercepted","title":"<code>DragIntercepted</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Emitted only when <code>Input.setInterceptDrags</code> is enabled. Use this data with <code>Input.dispatchDragEvent</code> to restore normal drag and drop behavior.</p> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@event_class(\"Input.dragIntercepted\")\n@dataclass\nclass DragIntercepted:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Emitted only when ``Input.setInterceptDrags`` is enabled. Use this data with ``Input.dispatchDragEvent`` to\n    restore normal drag and drop behavior.\n    \"\"\"\n\n    data: DragData\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DragIntercepted:\n        return cls(data=DragData.from_json(json[\"data\"]))\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragIntercepted.data","title":"<code>data: DragData</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragIntercepted.__init__","title":"<code>__init__(data)</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.DragIntercepted.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DragIntercepted:\n    return cls(data=DragData.from_json(json[\"data\"]))\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.GestureSourceType","title":"<code>GestureSourceType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>class GestureSourceType(enum.Enum):\n    DEFAULT = \"default\"\n    TOUCH = \"touch\"\n    MOUSE = \"mouse\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; GestureSourceType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.GestureSourceType.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.GestureSourceType.MOUSE","title":"<code>MOUSE = 'mouse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.GestureSourceType.TOUCH","title":"<code>TOUCH = 'touch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.GestureSourceType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; GestureSourceType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.GestureSourceType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.MouseButton","title":"<code>MouseButton</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>class MouseButton(enum.Enum):\n    NONE = \"none\"\n    LEFT = \"left\"\n    MIDDLE = \"middle\"\n    RIGHT = \"right\"\n    BACK = \"back\"\n    FORWARD = \"forward\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; MouseButton:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.MouseButton.BACK","title":"<code>BACK = 'back'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.MouseButton.FORWARD","title":"<code>FORWARD = 'forward'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.MouseButton.LEFT","title":"<code>LEFT = 'left'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.MouseButton.MIDDLE","title":"<code>MIDDLE = 'middle'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.MouseButton.NONE","title":"<code>NONE = 'none'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.MouseButton.RIGHT","title":"<code>RIGHT = 'right'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.MouseButton.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; MouseButton:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.MouseButton.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TimeSinceEpoch","title":"<code>TimeSinceEpoch</code>","text":"<p>               Bases: <code>float</code></p> <p>UTC time in seconds, counted from January 1, 1970.</p> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>class TimeSinceEpoch(float):\n    \"\"\"\n    UTC time in seconds, counted from January 1, 1970.\n    \"\"\"\n\n    def to_json(self) -&gt; float:\n        return self\n\n    @classmethod\n    def from_json(cls, json: float) -&gt; TimeSinceEpoch:\n        return cls(json)\n\n    def __repr__(self):\n        return \"TimeSinceEpoch({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TimeSinceEpoch.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def __repr__(self):\n    return \"TimeSinceEpoch({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TimeSinceEpoch.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@classmethod\ndef from_json(cls, json: float) -&gt; TimeSinceEpoch:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TimeSinceEpoch.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def to_json(self) -&gt; float:\n    return self\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint","title":"<code>TouchPoint</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@dataclass\nclass TouchPoint:\n    #: X coordinate of the event relative to the main frame's viewport in CSS pixels.\n    x: float\n\n    #: Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to\n    #: the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.\n    y: float\n\n    #: X radius of the touch area (default: 1.0).\n    radius_x: typing.Optional[float] = None\n\n    #: Y radius of the touch area (default: 1.0).\n    radius_y: typing.Optional[float] = None\n\n    #: Rotation angle (default: 0.0).\n    rotation_angle: typing.Optional[float] = None\n\n    #: Force (default: 1.0).\n    force: typing.Optional[float] = None\n\n    #: The normalized tangential pressure, which has a range of [-1,1] (default: 0).\n    tangential_pressure: typing.Optional[float] = None\n\n    #: The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0)\n    tilt_x: typing.Optional[float] = None\n\n    #: The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).\n    tilt_y: typing.Optional[float] = None\n\n    #: The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).\n    twist: typing.Optional[int] = None\n\n    #: Identifier used to track touch sources between events, must be unique within an event.\n    id_: typing.Optional[float] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"x\"] = self.x\n        json[\"y\"] = self.y\n        if self.radius_x is not None:\n            json[\"radiusX\"] = self.radius_x\n        if self.radius_y is not None:\n            json[\"radiusY\"] = self.radius_y\n        if self.rotation_angle is not None:\n            json[\"rotationAngle\"] = self.rotation_angle\n        if self.force is not None:\n            json[\"force\"] = self.force\n        if self.tangential_pressure is not None:\n            json[\"tangentialPressure\"] = self.tangential_pressure\n        if self.tilt_x is not None:\n            json[\"tiltX\"] = self.tilt_x\n        if self.tilt_y is not None:\n            json[\"tiltY\"] = self.tilt_y\n        if self.twist is not None:\n            json[\"twist\"] = self.twist\n        if self.id_ is not None:\n            json[\"id\"] = self.id_\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TouchPoint:\n        return cls(\n            x=float(json[\"x\"]),\n            y=float(json[\"y\"]),\n            radius_x=(\n                float(json[\"radiusX\"])\n                if json.get(\"radiusX\", None) is not None\n                else None\n            ),\n            radius_y=(\n                float(json[\"radiusY\"])\n                if json.get(\"radiusY\", None) is not None\n                else None\n            ),\n            rotation_angle=(\n                float(json[\"rotationAngle\"])\n                if json.get(\"rotationAngle\", None) is not None\n                else None\n            ),\n            force=float(json[\"force\"]) if json.get(\"force\", None) is not None else None,\n            tangential_pressure=(\n                float(json[\"tangentialPressure\"])\n                if json.get(\"tangentialPressure\", None) is not None\n                else None\n            ),\n            tilt_x=(\n                float(json[\"tiltX\"]) if json.get(\"tiltX\", None) is not None else None\n            ),\n            tilt_y=(\n                float(json[\"tiltY\"]) if json.get(\"tiltY\", None) is not None else None\n            ),\n            twist=int(json[\"twist\"]) if json.get(\"twist\", None) is not None else None,\n            id_=float(json[\"id\"]) if json.get(\"id\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.force","title":"<code>force: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.id_","title":"<code>id_: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.radius_x","title":"<code>radius_x: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.radius_y","title":"<code>radius_y: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.rotation_angle","title":"<code>rotation_angle: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.tangential_pressure","title":"<code>tangential_pressure: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.tilt_x","title":"<code>tilt_x: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.tilt_y","title":"<code>tilt_y: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.twist","title":"<code>twist: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.x","title":"<code>x: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.y","title":"<code>y: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.__init__","title":"<code>__init__(x, y, radius_x=None, radius_y=None, rotation_angle=None, force=None, tangential_pressure=None, tilt_x=None, tilt_y=None, twist=None, id_=None)</code>","text":""},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TouchPoint:\n    return cls(\n        x=float(json[\"x\"]),\n        y=float(json[\"y\"]),\n        radius_x=(\n            float(json[\"radiusX\"])\n            if json.get(\"radiusX\", None) is not None\n            else None\n        ),\n        radius_y=(\n            float(json[\"radiusY\"])\n            if json.get(\"radiusY\", None) is not None\n            else None\n        ),\n        rotation_angle=(\n            float(json[\"rotationAngle\"])\n            if json.get(\"rotationAngle\", None) is not None\n            else None\n        ),\n        force=float(json[\"force\"]) if json.get(\"force\", None) is not None else None,\n        tangential_pressure=(\n            float(json[\"tangentialPressure\"])\n            if json.get(\"tangentialPressure\", None) is not None\n            else None\n        ),\n        tilt_x=(\n            float(json[\"tiltX\"]) if json.get(\"tiltX\", None) is not None else None\n        ),\n        tilt_y=(\n            float(json[\"tiltY\"]) if json.get(\"tiltY\", None) is not None else None\n        ),\n        twist=int(json[\"twist\"]) if json.get(\"twist\", None) is not None else None,\n        id_=float(json[\"id\"]) if json.get(\"id\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.TouchPoint.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"x\"] = self.x\n    json[\"y\"] = self.y\n    if self.radius_x is not None:\n        json[\"radiusX\"] = self.radius_x\n    if self.radius_y is not None:\n        json[\"radiusY\"] = self.radius_y\n    if self.rotation_angle is not None:\n        json[\"rotationAngle\"] = self.rotation_angle\n    if self.force is not None:\n        json[\"force\"] = self.force\n    if self.tangential_pressure is not None:\n        json[\"tangentialPressure\"] = self.tangential_pressure\n    if self.tilt_x is not None:\n        json[\"tiltX\"] = self.tilt_x\n    if self.tilt_y is not None:\n        json[\"tiltY\"] = self.tilt_y\n    if self.twist is not None:\n        json[\"twist\"] = self.twist\n    if self.id_ is not None:\n        json[\"id\"] = self.id_\n    return json\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.cancel_dragging","title":"<code>cancel_dragging()</code>","text":"<p>Cancels any active dragging in the page.</p> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def cancel_dragging() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Cancels any active dragging in the page.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.cancelDragging\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.dispatch_drag_event","title":"<code>dispatch_drag_event(type_, x, y, data, modifiers=None)</code>","text":"<p>Dispatches a drag event into the page.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>str</code> <p>Type of the drag event.</p> required <code>x</code> <code>float</code> <p>X coordinate of the event relative to the main frame's viewport in CSS pixels.</p> required <code>y</code> <code>float</code> <p>Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.</p> required <code>data</code> <code>DragData</code> required <code>modifiers</code> <code>Optional[int]</code> <p>(Optional) Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).</p> <code>None</code> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def dispatch_drag_event(\n    type_: str,\n    x: float,\n    y: float,\n    data: DragData,\n    modifiers: typing.Optional[int] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Dispatches a drag event into the page.\n\n    **EXPERIMENTAL**\n\n    :param type_: Type of the drag event.\n    :param x: X coordinate of the event relative to the main frame's viewport in CSS pixels.\n    :param y: Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.\n    :param data:\n    :param modifiers: *(Optional)* Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"type\"] = type_\n    params[\"x\"] = x\n    params[\"y\"] = y\n    params[\"data\"] = data.to_json()\n    if modifiers is not None:\n        params[\"modifiers\"] = modifiers\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.dispatchDragEvent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.dispatch_key_event","title":"<code>dispatch_key_event(type_, modifiers=None, timestamp=None, text=None, unmodified_text=None, key_identifier=None, code=None, key=None, windows_virtual_key_code=None, native_virtual_key_code=None, auto_repeat=None, is_keypad=None, is_system_key=None, location=None, commands=None)</code>","text":"<p>Dispatches a key event to the page.</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>str</code> <p>Type of the key event.</p> required <code>modifiers</code> <code>Optional[int]</code> <p>(Optional) Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).</p> <code>None</code> <code>timestamp</code> <code>Optional[TimeSinceEpoch]</code> <p>(Optional) Time at which the event occurred.</p> <code>None</code> <code>text</code> <code>Optional[str]</code> <p>(Optional) Text as generated by processing a virtual key code with a keyboard layout. Not needed for for ```keyUp<code>and</code>rawKeyDown```` events (default: \"\")</p> <code>None</code> <code>unmodified_text</code> <code>Optional[str]</code> <p>(Optional) Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: \"\").</p> <code>None</code> <code>key_identifier</code> <code>Optional[str]</code> <p>(Optional) Unique key identifier (e.g., 'U+0041') (default: \"\").</p> <code>None</code> <code>code</code> <code>Optional[str]</code> <p>(Optional) Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: \"\").</p> <code>None</code> <code>key</code> <code>Optional[str]</code> <p>(Optional) Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: \"\").</p> <code>None</code> <code>windows_virtual_key_code</code> <code>Optional[int]</code> <p>(Optional) Windows virtual key code (default: 0).</p> <code>None</code> <code>native_virtual_key_code</code> <code>Optional[int]</code> <p>(Optional) Native virtual key code (default: 0).</p> <code>None</code> <code>auto_repeat</code> <code>Optional[bool]</code> <p>(Optional) Whether the event was generated from auto repeat (default: false).</p> <code>None</code> <code>is_keypad</code> <code>Optional[bool]</code> <p>(Optional) Whether the event was generated from the keypad (default: false).</p> <code>None</code> <code>is_system_key</code> <code>Optional[bool]</code> <p>(Optional) Whether the event was a system key event (default: false).</p> <code>None</code> <code>location</code> <code>Optional[int]</code> <p>(Optional) Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default: 0).</p> <code>None</code> <code>commands</code> <code>Optional[List[str]]</code> <p>(EXPERIMENTAL) (Optional) Editing commands to send with the key event (e.g., 'selectAll') (default: []). These are related to but not equal the command names used in <code>`document.execCommand</code> and NSStandardKeyBindingResponding. See https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.</p> <code>None</code> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def dispatch_key_event(\n    type_: str,\n    modifiers: typing.Optional[int] = None,\n    timestamp: typing.Optional[TimeSinceEpoch] = None,\n    text: typing.Optional[str] = None,\n    unmodified_text: typing.Optional[str] = None,\n    key_identifier: typing.Optional[str] = None,\n    code: typing.Optional[str] = None,\n    key: typing.Optional[str] = None,\n    windows_virtual_key_code: typing.Optional[int] = None,\n    native_virtual_key_code: typing.Optional[int] = None,\n    auto_repeat: typing.Optional[bool] = None,\n    is_keypad: typing.Optional[bool] = None,\n    is_system_key: typing.Optional[bool] = None,\n    location: typing.Optional[int] = None,\n    commands: typing.Optional[typing.List[str]] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Dispatches a key event to the page.\n\n    :param type_: Type of the key event.\n    :param modifiers: *(Optional)* Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).\n    :param timestamp: *(Optional)* Time at which the event occurred.\n    :param text: *(Optional)* Text as generated by processing a virtual key code with a keyboard layout. Not needed for for ```keyUp```` and ````rawKeyDown```` events (default: \"\")\n    :param unmodified_text: *(Optional)* Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: \"\").\n    :param key_identifier: *(Optional)* Unique key identifier (e.g., 'U+0041') (default: \"\").\n    :param code: *(Optional)* Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: \"\").\n    :param key: *(Optional)* Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: \"\").\n    :param windows_virtual_key_code: *(Optional)* Windows virtual key code (default: 0).\n    :param native_virtual_key_code: *(Optional)* Native virtual key code (default: 0).\n    :param auto_repeat: *(Optional)* Whether the event was generated from auto repeat (default: false).\n    :param is_keypad: *(Optional)* Whether the event was generated from the keypad (default: false).\n    :param is_system_key: *(Optional)* Whether the event was a system key event (default: false).\n    :param location: *(Optional)* Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default: 0).\n    :param commands: **(EXPERIMENTAL)** *(Optional)* Editing commands to send with the key event (e.g., 'selectAll') (default: []). These are related to but not equal the command names used in ````document.execCommand``` and NSStandardKeyBindingResponding. See https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"type\"] = type_\n    if modifiers is not None:\n        params[\"modifiers\"] = modifiers\n    if timestamp is not None:\n        params[\"timestamp\"] = timestamp.to_json()\n    if text is not None:\n        params[\"text\"] = text\n    if unmodified_text is not None:\n        params[\"unmodifiedText\"] = unmodified_text\n    if key_identifier is not None:\n        params[\"keyIdentifier\"] = key_identifier\n    if code is not None:\n        params[\"code\"] = code\n    if key is not None:\n        params[\"key\"] = key\n    if windows_virtual_key_code is not None:\n        params[\"windowsVirtualKeyCode\"] = windows_virtual_key_code\n    if native_virtual_key_code is not None:\n        params[\"nativeVirtualKeyCode\"] = native_virtual_key_code\n    if auto_repeat is not None:\n        params[\"autoRepeat\"] = auto_repeat\n    if is_keypad is not None:\n        params[\"isKeypad\"] = is_keypad\n    if is_system_key is not None:\n        params[\"isSystemKey\"] = is_system_key\n    if location is not None:\n        params[\"location\"] = location\n    if commands is not None:\n        params[\"commands\"] = [i for i in commands]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.dispatchKeyEvent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.dispatch_mouse_event","title":"<code>dispatch_mouse_event(type_, x, y, modifiers=None, timestamp=None, button=None, buttons=None, click_count=None, force=None, tangential_pressure=None, tilt_x=None, tilt_y=None, twist=None, delta_x=None, delta_y=None, pointer_type=None)</code>","text":"<p>Dispatches a mouse event to the page.</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>str</code> <p>Type of the mouse event.</p> required <code>x</code> <code>float</code> <p>X coordinate of the event relative to the main frame's viewport in CSS pixels.</p> required <code>y</code> <code>float</code> <p>Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.</p> required <code>modifiers</code> <code>Optional[int]</code> <p>(Optional) Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).</p> <code>None</code> <code>timestamp</code> <code>Optional[TimeSinceEpoch]</code> <p>(Optional) Time at which the event occurred.</p> <code>None</code> <code>button</code> <code>Optional[MouseButton]</code> <p>(Optional) Mouse button (default: \"none\").</p> <code>None</code> <code>buttons</code> <code>Optional[int]</code> <p>(Optional) A number indicating which buttons are pressed on the mouse when a mouse event is triggered. Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.</p> <code>None</code> <code>click_count</code> <code>Optional[int]</code> <p>(Optional) Number of times the mouse button was clicked (default: 0).</p> <code>None</code> <code>force</code> <code>Optional[float]</code> <p>(EXPERIMENTAL) (Optional) The normalized pressure, which has a range of [0,1] (default: 0).</p> <code>None</code> <code>tangential_pressure</code> <code>Optional[float]</code> <p>(EXPERIMENTAL) (Optional) The normalized tangential pressure, which has a range of [-1,1] (default: 0).</p> <code>None</code> <code>tilt_x</code> <code>Optional[float]</code> <p>(Optional) The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).</p> <code>None</code> <code>tilt_y</code> <code>Optional[float]</code> <p>(Optional) The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).</p> <code>None</code> <code>twist</code> <code>Optional[int]</code> <p>(EXPERIMENTAL) (Optional) The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).</p> <code>None</code> <code>delta_x</code> <code>Optional[float]</code> <p>(Optional) X delta in CSS pixels for mouse wheel event (default: 0).</p> <code>None</code> <code>delta_y</code> <code>Optional[float]</code> <p>(Optional) Y delta in CSS pixels for mouse wheel event (default: 0).</p> <code>None</code> <code>pointer_type</code> <code>Optional[str]</code> <p>(Optional) Pointer type (default: \"mouse\").</p> <code>None</code> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def dispatch_mouse_event(\n    type_: str,\n    x: float,\n    y: float,\n    modifiers: typing.Optional[int] = None,\n    timestamp: typing.Optional[TimeSinceEpoch] = None,\n    button: typing.Optional[MouseButton] = None,\n    buttons: typing.Optional[int] = None,\n    click_count: typing.Optional[int] = None,\n    force: typing.Optional[float] = None,\n    tangential_pressure: typing.Optional[float] = None,\n    tilt_x: typing.Optional[float] = None,\n    tilt_y: typing.Optional[float] = None,\n    twist: typing.Optional[int] = None,\n    delta_x: typing.Optional[float] = None,\n    delta_y: typing.Optional[float] = None,\n    pointer_type: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Dispatches a mouse event to the page.\n\n    :param type_: Type of the mouse event.\n    :param x: X coordinate of the event relative to the main frame's viewport in CSS pixels.\n    :param y: Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.\n    :param modifiers: *(Optional)* Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).\n    :param timestamp: *(Optional)* Time at which the event occurred.\n    :param button: *(Optional)* Mouse button (default: \"none\").\n    :param buttons: *(Optional)* A number indicating which buttons are pressed on the mouse when a mouse event is triggered. Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.\n    :param click_count: *(Optional)* Number of times the mouse button was clicked (default: 0).\n    :param force: **(EXPERIMENTAL)** *(Optional)* The normalized pressure, which has a range of [0,1] (default: 0).\n    :param tangential_pressure: **(EXPERIMENTAL)** *(Optional)* The normalized tangential pressure, which has a range of [-1,1] (default: 0).\n    :param tilt_x: *(Optional)* The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0).\n    :param tilt_y: *(Optional)* The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0).\n    :param twist: **(EXPERIMENTAL)** *(Optional)* The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0).\n    :param delta_x: *(Optional)* X delta in CSS pixels for mouse wheel event (default: 0).\n    :param delta_y: *(Optional)* Y delta in CSS pixels for mouse wheel event (default: 0).\n    :param pointer_type: *(Optional)* Pointer type (default: \"mouse\").\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"type\"] = type_\n    params[\"x\"] = x\n    params[\"y\"] = y\n    if modifiers is not None:\n        params[\"modifiers\"] = modifiers\n    if timestamp is not None:\n        params[\"timestamp\"] = timestamp.to_json()\n    if button is not None:\n        params[\"button\"] = button.to_json()\n    if buttons is not None:\n        params[\"buttons\"] = buttons\n    if click_count is not None:\n        params[\"clickCount\"] = click_count\n    if force is not None:\n        params[\"force\"] = force\n    if tangential_pressure is not None:\n        params[\"tangentialPressure\"] = tangential_pressure\n    if tilt_x is not None:\n        params[\"tiltX\"] = tilt_x\n    if tilt_y is not None:\n        params[\"tiltY\"] = tilt_y\n    if twist is not None:\n        params[\"twist\"] = twist\n    if delta_x is not None:\n        params[\"deltaX\"] = delta_x\n    if delta_y is not None:\n        params[\"deltaY\"] = delta_y\n    if pointer_type is not None:\n        params[\"pointerType\"] = pointer_type\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.dispatchMouseEvent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.dispatch_touch_event","title":"<code>dispatch_touch_event(type_, touch_points, modifiers=None, timestamp=None)</code>","text":"<p>Dispatches a touch event to the page.</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>str</code> <p>Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while TouchStart and TouchMove must contains at least one.</p> required <code>touch_points</code> <code>List[TouchPoint]</code> <p>Active touch points on the touch device. One event per any changed point (compared to previous touch event in a sequence) is generated, emulating pressing/moving/releasing points one by one.</p> required <code>modifiers</code> <code>Optional[int]</code> <p>(Optional) Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).</p> <code>None</code> <code>timestamp</code> <code>Optional[TimeSinceEpoch]</code> <p>(Optional) Time at which the event occurred.</p> <code>None</code> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def dispatch_touch_event(\n    type_: str,\n    touch_points: typing.List[TouchPoint],\n    modifiers: typing.Optional[int] = None,\n    timestamp: typing.Optional[TimeSinceEpoch] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Dispatches a touch event to the page.\n\n    :param type_: Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while TouchStart and TouchMove must contains at least one.\n    :param touch_points: Active touch points on the touch device. One event per any changed point (compared to previous touch event in a sequence) is generated, emulating pressing/moving/releasing points one by one.\n    :param modifiers: *(Optional)* Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).\n    :param timestamp: *(Optional)* Time at which the event occurred.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"type\"] = type_\n    params[\"touchPoints\"] = [i.to_json() for i in touch_points]\n    if modifiers is not None:\n        params[\"modifiers\"] = modifiers\n    if timestamp is not None:\n        params[\"timestamp\"] = timestamp.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.dispatchTouchEvent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.emulate_touch_from_mouse_event","title":"<code>emulate_touch_from_mouse_event(type_, x, y, button, timestamp=None, delta_x=None, delta_y=None, modifiers=None, click_count=None)</code>","text":"<p>Emulates touch event from the mouse event parameters.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>type_</code> <code>str</code> <p>Type of the mouse event.</p> required <code>x</code> <code>int</code> <p>X coordinate of the mouse pointer in DIP.</p> required <code>y</code> <code>int</code> <p>Y coordinate of the mouse pointer in DIP.</p> required <code>button</code> <code>MouseButton</code> <p>Mouse button. Only \"none\", \"left\", \"right\" are supported.</p> required <code>timestamp</code> <code>Optional[TimeSinceEpoch]</code> <p>(Optional) Time at which the event occurred (default: current time).</p> <code>None</code> <code>delta_x</code> <code>Optional[float]</code> <p>(Optional) X delta in DIP for mouse wheel event (default: 0).</p> <code>None</code> <code>delta_y</code> <code>Optional[float]</code> <p>(Optional) Y delta in DIP for mouse wheel event (default: 0).</p> <code>None</code> <code>modifiers</code> <code>Optional[int]</code> <p>(Optional) Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).</p> <code>None</code> <code>click_count</code> <code>Optional[int]</code> <p>(Optional) Number of times the mouse button was clicked (default: 0).</p> <code>None</code> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def emulate_touch_from_mouse_event(\n    type_: str,\n    x: int,\n    y: int,\n    button: MouseButton,\n    timestamp: typing.Optional[TimeSinceEpoch] = None,\n    delta_x: typing.Optional[float] = None,\n    delta_y: typing.Optional[float] = None,\n    modifiers: typing.Optional[int] = None,\n    click_count: typing.Optional[int] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Emulates touch event from the mouse event parameters.\n\n    **EXPERIMENTAL**\n\n    :param type_: Type of the mouse event.\n    :param x: X coordinate of the mouse pointer in DIP.\n    :param y: Y coordinate of the mouse pointer in DIP.\n    :param button: Mouse button. Only \"none\", \"left\", \"right\" are supported.\n    :param timestamp: *(Optional)* Time at which the event occurred (default: current time).\n    :param delta_x: *(Optional)* X delta in DIP for mouse wheel event (default: 0).\n    :param delta_y: *(Optional)* Y delta in DIP for mouse wheel event (default: 0).\n    :param modifiers: *(Optional)* Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).\n    :param click_count: *(Optional)* Number of times the mouse button was clicked (default: 0).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"type\"] = type_\n    params[\"x\"] = x\n    params[\"y\"] = y\n    params[\"button\"] = button.to_json()\n    if timestamp is not None:\n        params[\"timestamp\"] = timestamp.to_json()\n    if delta_x is not None:\n        params[\"deltaX\"] = delta_x\n    if delta_y is not None:\n        params[\"deltaY\"] = delta_y\n    if modifiers is not None:\n        params[\"modifiers\"] = modifiers\n    if click_count is not None:\n        params[\"clickCount\"] = click_count\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.emulateTouchFromMouseEvent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.ime_set_composition","title":"<code>ime_set_composition(text, selection_start, selection_end, replacement_start=None, replacement_end=None)</code>","text":"<p>This method sets the current candidate text for IME. Use imeCommitComposition to commit the final text. Use imeSetComposition with empty string as text to cancel composition.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to insert</p> required <code>selection_start</code> <code>int</code> <p>selection start</p> required <code>selection_end</code> <code>int</code> <p>selection end</p> required <code>replacement_start</code> <code>Optional[int]</code> <p>(Optional) replacement start</p> <code>None</code> <code>replacement_end</code> <code>Optional[int]</code> <p>(Optional) replacement end</p> <code>None</code> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def ime_set_composition(\n    text: str,\n    selection_start: int,\n    selection_end: int,\n    replacement_start: typing.Optional[int] = None,\n    replacement_end: typing.Optional[int] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    This method sets the current candidate text for IME.\n    Use imeCommitComposition to commit the final text.\n    Use imeSetComposition with empty string as text to cancel composition.\n\n    **EXPERIMENTAL**\n\n    :param text: The text to insert\n    :param selection_start: selection start\n    :param selection_end: selection end\n    :param replacement_start: *(Optional)* replacement start\n    :param replacement_end: *(Optional)* replacement end\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"text\"] = text\n    params[\"selectionStart\"] = selection_start\n    params[\"selectionEnd\"] = selection_end\n    if replacement_start is not None:\n        params[\"replacementStart\"] = replacement_start\n    if replacement_end is not None:\n        params[\"replacementEnd\"] = replacement_end\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.imeSetComposition\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.insert_text","title":"<code>insert_text(text)</code>","text":"<p>This method emulates inserting text that doesn't come from a key press, for example an emoji keyboard or an IME.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to insert.</p> required Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def insert_text(text: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    This method emulates inserting text that doesn't come from a key press,\n    for example an emoji keyboard or an IME.\n\n    **EXPERIMENTAL**\n\n    :param text: The text to insert.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"text\"] = text\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.insertText\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.set_ignore_input_events","title":"<code>set_ignore_input_events(ignore)</code>","text":"<p>Ignores input events (useful while auditing page).</p> <p>Parameters:</p> Name Type Description Default <code>ignore</code> <code>bool</code> <p>Ignores input events processing when set to true.</p> required Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def set_ignore_input_events(\n    ignore: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Ignores input events (useful while auditing page).\n\n    :param ignore: Ignores input events processing when set to true.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"ignore\"] = ignore\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.setIgnoreInputEvents\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.set_intercept_drags","title":"<code>set_intercept_drags(enabled)</code>","text":"<p>Prevents default drag and drop behavior and instead emits <code>Input.dragIntercepted</code> events. Drag and drop behavior can be directly controlled via <code>Input.dispatchDragEvent</code>.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> required Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def set_intercept_drags(\n    enabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Prevents default drag and drop behavior and instead emits ``Input.dragIntercepted`` events.\n    Drag and drop behavior can be directly controlled via ``Input.dispatchDragEvent``.\n\n    **EXPERIMENTAL**\n\n    :param enabled:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.setInterceptDrags\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.synthesize_pinch_gesture","title":"<code>synthesize_pinch_gesture(x, y, scale_factor, relative_speed=None, gesture_source_type=None)</code>","text":"<p>Synthesizes a pinch gesture over a time period by issuing appropriate touch events.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>X coordinate of the start of the gesture in CSS pixels.</p> required <code>y</code> <code>float</code> <p>Y coordinate of the start of the gesture in CSS pixels.</p> required <code>scale_factor</code> <code>float</code> <p>Relative scale factor after zooming (&gt;1.0 zooms in, &lt;1.0 zooms out).</p> required <code>relative_speed</code> <code>Optional[int]</code> <p>(Optional) Relative pointer speed in pixels per second (default: 800).</p> <code>None</code> <code>gesture_source_type</code> <code>Optional[GestureSourceType]</code> <p>(Optional) Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).</p> <code>None</code> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def synthesize_pinch_gesture(\n    x: float,\n    y: float,\n    scale_factor: float,\n    relative_speed: typing.Optional[int] = None,\n    gesture_source_type: typing.Optional[GestureSourceType] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Synthesizes a pinch gesture over a time period by issuing appropriate touch events.\n\n    **EXPERIMENTAL**\n\n    :param x: X coordinate of the start of the gesture in CSS pixels.\n    :param y: Y coordinate of the start of the gesture in CSS pixels.\n    :param scale_factor: Relative scale factor after zooming (&gt;1.0 zooms in, &lt;1.0 zooms out).\n    :param relative_speed: *(Optional)* Relative pointer speed in pixels per second (default: 800).\n    :param gesture_source_type: *(Optional)* Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"x\"] = x\n    params[\"y\"] = y\n    params[\"scaleFactor\"] = scale_factor\n    if relative_speed is not None:\n        params[\"relativeSpeed\"] = relative_speed\n    if gesture_source_type is not None:\n        params[\"gestureSourceType\"] = gesture_source_type.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.synthesizePinchGesture\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.synthesize_scroll_gesture","title":"<code>synthesize_scroll_gesture(x, y, x_distance=None, y_distance=None, x_overscroll=None, y_overscroll=None, prevent_fling=None, speed=None, gesture_source_type=None, repeat_count=None, repeat_delay_ms=None, interaction_marker_name=None)</code>","text":"<p>Synthesizes a scroll gesture over a time period by issuing appropriate touch events.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>X coordinate of the start of the gesture in CSS pixels.</p> required <code>y</code> <code>float</code> <p>Y coordinate of the start of the gesture in CSS pixels.</p> required <code>x_distance</code> <code>Optional[float]</code> <p>(Optional) The distance to scroll along the X axis (positive to scroll left).</p> <code>None</code> <code>y_distance</code> <code>Optional[float]</code> <p>(Optional) The distance to scroll along the Y axis (positive to scroll up).</p> <code>None</code> <code>x_overscroll</code> <code>Optional[float]</code> <p>(Optional) The number of additional pixels to scroll back along the X axis, in addition to the given distance.</p> <code>None</code> <code>y_overscroll</code> <code>Optional[float]</code> <p>(Optional) The number of additional pixels to scroll back along the Y axis, in addition to the given distance.</p> <code>None</code> <code>prevent_fling</code> <code>Optional[bool]</code> <p>(Optional) Prevent fling (default: true).</p> <code>None</code> <code>speed</code> <code>Optional[int]</code> <p>(Optional) Swipe speed in pixels per second (default: 800).</p> <code>None</code> <code>gesture_source_type</code> <code>Optional[GestureSourceType]</code> <p>(Optional) Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).</p> <code>None</code> <code>repeat_count</code> <code>Optional[int]</code> <p>(Optional) The number of times to repeat the gesture (default: 0).</p> <code>None</code> <code>repeat_delay_ms</code> <code>Optional[int]</code> <p>(Optional) The number of milliseconds delay between each repeat. (default: 250).</p> <code>None</code> <code>interaction_marker_name</code> <code>Optional[str]</code> <p>(Optional) The name of the interaction markers to generate, if not empty (default: \"\").</p> <code>None</code> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def synthesize_scroll_gesture(\n    x: float,\n    y: float,\n    x_distance: typing.Optional[float] = None,\n    y_distance: typing.Optional[float] = None,\n    x_overscroll: typing.Optional[float] = None,\n    y_overscroll: typing.Optional[float] = None,\n    prevent_fling: typing.Optional[bool] = None,\n    speed: typing.Optional[int] = None,\n    gesture_source_type: typing.Optional[GestureSourceType] = None,\n    repeat_count: typing.Optional[int] = None,\n    repeat_delay_ms: typing.Optional[int] = None,\n    interaction_marker_name: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Synthesizes a scroll gesture over a time period by issuing appropriate touch events.\n\n    **EXPERIMENTAL**\n\n    :param x: X coordinate of the start of the gesture in CSS pixels.\n    :param y: Y coordinate of the start of the gesture in CSS pixels.\n    :param x_distance: *(Optional)* The distance to scroll along the X axis (positive to scroll left).\n    :param y_distance: *(Optional)* The distance to scroll along the Y axis (positive to scroll up).\n    :param x_overscroll: *(Optional)* The number of additional pixels to scroll back along the X axis, in addition to the given distance.\n    :param y_overscroll: *(Optional)* The number of additional pixels to scroll back along the Y axis, in addition to the given distance.\n    :param prevent_fling: *(Optional)* Prevent fling (default: true).\n    :param speed: *(Optional)* Swipe speed in pixels per second (default: 800).\n    :param gesture_source_type: *(Optional)* Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).\n    :param repeat_count: *(Optional)* The number of times to repeat the gesture (default: 0).\n    :param repeat_delay_ms: *(Optional)* The number of milliseconds delay between each repeat. (default: 250).\n    :param interaction_marker_name: *(Optional)* The name of the interaction markers to generate, if not empty (default: \"\").\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"x\"] = x\n    params[\"y\"] = y\n    if x_distance is not None:\n        params[\"xDistance\"] = x_distance\n    if y_distance is not None:\n        params[\"yDistance\"] = y_distance\n    if x_overscroll is not None:\n        params[\"xOverscroll\"] = x_overscroll\n    if y_overscroll is not None:\n        params[\"yOverscroll\"] = y_overscroll\n    if prevent_fling is not None:\n        params[\"preventFling\"] = prevent_fling\n    if speed is not None:\n        params[\"speed\"] = speed\n    if gesture_source_type is not None:\n        params[\"gestureSourceType\"] = gesture_source_type.to_json()\n    if repeat_count is not None:\n        params[\"repeatCount\"] = repeat_count\n    if repeat_delay_ms is not None:\n        params[\"repeatDelayMs\"] = repeat_delay_ms\n    if interaction_marker_name is not None:\n        params[\"interactionMarkerName\"] = interaction_marker_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.synthesizeScrollGesture\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/input_/#zendriver.cdp.input_.synthesize_tap_gesture","title":"<code>synthesize_tap_gesture(x, y, duration=None, tap_count=None, gesture_source_type=None)</code>","text":"<p>Synthesizes a tap gesture over a time period by issuing appropriate touch events.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>X coordinate of the start of the gesture in CSS pixels.</p> required <code>y</code> <code>float</code> <p>Y coordinate of the start of the gesture in CSS pixels.</p> required <code>duration</code> <code>Optional[int]</code> <p>(Optional) Duration between touchdown and touchup events in ms (default: 50).</p> <code>None</code> <code>tap_count</code> <code>Optional[int]</code> <p>(Optional) Number of times to perform the tap (e.g. 2 for double tap, default: 1).</p> <code>None</code> <code>gesture_source_type</code> <code>Optional[GestureSourceType]</code> <p>(Optional) Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).</p> <code>None</code> Source code in <code>zendriver/cdp/input_.py</code> <pre><code>def synthesize_tap_gesture(\n    x: float,\n    y: float,\n    duration: typing.Optional[int] = None,\n    tap_count: typing.Optional[int] = None,\n    gesture_source_type: typing.Optional[GestureSourceType] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Synthesizes a tap gesture over a time period by issuing appropriate touch events.\n\n    **EXPERIMENTAL**\n\n    :param x: X coordinate of the start of the gesture in CSS pixels.\n    :param y: Y coordinate of the start of the gesture in CSS pixels.\n    :param duration: *(Optional)* Duration between touchdown and touchup events in ms (default: 50).\n    :param tap_count: *(Optional)* Number of times to perform the tap (e.g. 2 for double tap, default: 1).\n    :param gesture_source_type: *(Optional)* Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"x\"] = x\n    params[\"y\"] = y\n    if duration is not None:\n        params[\"duration\"] = duration\n    if tap_count is not None:\n        params[\"tapCount\"] = tap_count\n    if gesture_source_type is not None:\n        params[\"gestureSourceType\"] = gesture_source_type.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Input.synthesizeTapGesture\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/inspector/","title":"inspector","text":""},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.Detached","title":"<code>Detached</code>  <code>dataclass</code>","text":"<p>Fired when remote debugging connection is about to be terminated. Contains detach reason.</p> Source code in <code>zendriver/cdp/inspector.py</code> <pre><code>@event_class(\"Inspector.detached\")\n@dataclass\nclass Detached:\n    \"\"\"\n    Fired when remote debugging connection is about to be terminated. Contains detach reason.\n    \"\"\"\n\n    #: The reason why connection has been terminated.\n    reason: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Detached:\n        return cls(reason=str(json[\"reason\"]))\n</code></pre>"},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.Detached.reason","title":"<code>reason: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.Detached.__init__","title":"<code>__init__(reason)</code>","text":""},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.Detached.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/inspector.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Detached:\n    return cls(reason=str(json[\"reason\"]))\n</code></pre>"},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.TargetCrashed","title":"<code>TargetCrashed</code>  <code>dataclass</code>","text":"<p>Fired when debugging target has crashed</p> Source code in <code>zendriver/cdp/inspector.py</code> <pre><code>@event_class(\"Inspector.targetCrashed\")\n@dataclass\nclass TargetCrashed:\n    \"\"\"\n    Fired when debugging target has crashed\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TargetCrashed:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.TargetCrashed.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.TargetCrashed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/inspector.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TargetCrashed:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.TargetReloadedAfterCrash","title":"<code>TargetReloadedAfterCrash</code>  <code>dataclass</code>","text":"<p>Fired when debugging target has reloaded after crash</p> Source code in <code>zendriver/cdp/inspector.py</code> <pre><code>@event_class(\"Inspector.targetReloadedAfterCrash\")\n@dataclass\nclass TargetReloadedAfterCrash:\n    \"\"\"\n    Fired when debugging target has reloaded after crash\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TargetReloadedAfterCrash:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.TargetReloadedAfterCrash.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.TargetReloadedAfterCrash.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/inspector.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TargetReloadedAfterCrash:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.disable","title":"<code>disable()</code>","text":"<p>Disables inspector domain notifications.</p> Source code in <code>zendriver/cdp/inspector.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables inspector domain notifications.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Inspector.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/inspector/#zendriver.cdp.inspector.enable","title":"<code>enable()</code>","text":"<p>Enables inspector domain notifications.</p> Source code in <code>zendriver/cdp/inspector.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables inspector domain notifications.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Inspector.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/io/","title":"io","text":""},{"location":"reference/cdp/io/#zendriver.cdp.io.StreamHandle","title":"<code>StreamHandle</code>","text":"<p>               Bases: <code>str</code></p> <p>This is either obtained from another method or specified as <code>blob:&lt;uuid&gt;</code> where <code>&lt;uuid&gt;</code> is an UUID of a Blob.</p> Source code in <code>zendriver/cdp/io.py</code> <pre><code>class StreamHandle(str):\n    \"\"\"\n    This is either obtained from another method or specified as ``blob:&lt;uuid&gt;`` where\n    ``&lt;uuid&gt;`` is an UUID of a Blob.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; StreamHandle:\n        return cls(json)\n\n    def __repr__(self):\n        return \"StreamHandle({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/io/#zendriver.cdp.io.StreamHandle.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/io.py</code> <pre><code>def __repr__(self):\n    return \"StreamHandle({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/io/#zendriver.cdp.io.StreamHandle.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/io.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; StreamHandle:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/io/#zendriver.cdp.io.StreamHandle.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/io.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/io/#zendriver.cdp.io.close","title":"<code>close(handle)</code>","text":"<p>Close the stream, discard any temporary backing storage.</p> <p>Parameters:</p> Name Type Description Default <code>handle</code> <code>StreamHandle</code> <p>Handle of the stream to close.</p> required Source code in <code>zendriver/cdp/io.py</code> <pre><code>def close(handle: StreamHandle) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Close the stream, discard any temporary backing storage.\n\n    :param handle: Handle of the stream to close.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"handle\"] = handle.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IO.close\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/io/#zendriver.cdp.io.read","title":"<code>read(handle, offset=None, size=None)</code>","text":"<p>Read a chunk of the stream</p> <p>Parameters:</p> Name Type Description Default <code>handle</code> <code>StreamHandle</code> <p>Handle of the stream to read.</p> required <code>offset</code> <code>Optional[int]</code> <p>(Optional) Seek to the specified offset before reading (if not specified, proceed with offset following the last read). Some types of streams may only support sequential reads.</p> <code>None</code> <code>size</code> <code>Optional[int]</code> <p>(Optional) Maximum number of bytes to read (left upon the agent discretion if not specified).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[Optional[bool], str, bool]]</code> <p>A tuple with the following items:  0. base64Encoded - (Optional) Set if the data is base64-encoded 1. data - Data that were read. 2. eof - Set if the end-of-file condition occurred while reading.</p> Source code in <code>zendriver/cdp/io.py</code> <pre><code>def read(\n    handle: StreamHandle,\n    offset: typing.Optional[int] = None,\n    size: typing.Optional[int] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.Optional[bool], str, bool]\n]:\n    \"\"\"\n    Read a chunk of the stream\n\n    :param handle: Handle of the stream to read.\n    :param offset: *(Optional)* Seek to the specified offset before reading (if not specified, proceed with offset following the last read). Some types of streams may only support sequential reads.\n    :param size: *(Optional)* Maximum number of bytes to read (left upon the agent discretion if not specified).\n    :returns: A tuple with the following items:\n\n        0. **base64Encoded** - *(Optional)* Set if the data is base64-encoded\n        1. **data** - Data that were read.\n        2. **eof** - Set if the end-of-file condition occurred while reading.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"handle\"] = handle.to_json()\n    if offset is not None:\n        params[\"offset\"] = offset\n    if size is not None:\n        params[\"size\"] = size\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IO.read\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        (\n            bool(json[\"base64Encoded\"])\n            if json.get(\"base64Encoded\", None) is not None\n            else None\n        ),\n        str(json[\"data\"]),\n        bool(json[\"eof\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/io/#zendriver.cdp.io.resolve_blob","title":"<code>resolve_blob(object_id)</code>","text":"<p>Return UUID of Blob object specified by a remote object id.</p> <p>Parameters:</p> Name Type Description Default <code>object_id</code> <code>RemoteObjectId</code> <p>Object id of a Blob object wrapper.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>UUID of the specified Blob.</p> Source code in <code>zendriver/cdp/io.py</code> <pre><code>def resolve_blob(\n    object_id: runtime.RemoteObjectId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Return UUID of Blob object specified by a remote object id.\n\n    :param object_id: Object id of a Blob object wrapper.\n    :returns: UUID of the specified Blob.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"IO.resolveBlob\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"uuid\"])\n</code></pre>"},{"location":"reference/cdp/layer_tree/","title":"layer_tree","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer","title":"<code>Layer</code>  <code>dataclass</code>","text":"<p>Information about a compositing layer.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@dataclass\nclass Layer:\n    \"\"\"\n    Information about a compositing layer.\n    \"\"\"\n\n    #: The unique id for this layer.\n    layer_id: LayerId\n\n    #: Offset from parent layer, X coordinate.\n    offset_x: float\n\n    #: Offset from parent layer, Y coordinate.\n    offset_y: float\n\n    #: Layer width.\n    width: float\n\n    #: Layer height.\n    height: float\n\n    #: Indicates how many time this layer has painted.\n    paint_count: int\n\n    #: Indicates whether this layer hosts any content, rather than being used for\n    #: transform/scrolling purposes only.\n    draws_content: bool\n\n    #: The id of parent (not present for root).\n    parent_layer_id: typing.Optional[LayerId] = None\n\n    #: The backend id for the node associated with this layer.\n    backend_node_id: typing.Optional[dom.BackendNodeId] = None\n\n    #: Transformation matrix for layer, default is identity matrix\n    transform: typing.Optional[typing.List[float]] = None\n\n    #: Transform anchor point X, absent if no transform specified\n    anchor_x: typing.Optional[float] = None\n\n    #: Transform anchor point Y, absent if no transform specified\n    anchor_y: typing.Optional[float] = None\n\n    #: Transform anchor point Z, absent if no transform specified\n    anchor_z: typing.Optional[float] = None\n\n    #: Set if layer is not visible.\n    invisible: typing.Optional[bool] = None\n\n    #: Rectangles scrolling on main thread only.\n    scroll_rects: typing.Optional[typing.List[ScrollRect]] = None\n\n    #: Sticky position constraint information\n    sticky_position_constraint: typing.Optional[StickyPositionConstraint] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"layerId\"] = self.layer_id.to_json()\n        json[\"offsetX\"] = self.offset_x\n        json[\"offsetY\"] = self.offset_y\n        json[\"width\"] = self.width\n        json[\"height\"] = self.height\n        json[\"paintCount\"] = self.paint_count\n        json[\"drawsContent\"] = self.draws_content\n        if self.parent_layer_id is not None:\n            json[\"parentLayerId\"] = self.parent_layer_id.to_json()\n        if self.backend_node_id is not None:\n            json[\"backendNodeId\"] = self.backend_node_id.to_json()\n        if self.transform is not None:\n            json[\"transform\"] = [i for i in self.transform]\n        if self.anchor_x is not None:\n            json[\"anchorX\"] = self.anchor_x\n        if self.anchor_y is not None:\n            json[\"anchorY\"] = self.anchor_y\n        if self.anchor_z is not None:\n            json[\"anchorZ\"] = self.anchor_z\n        if self.invisible is not None:\n            json[\"invisible\"] = self.invisible\n        if self.scroll_rects is not None:\n            json[\"scrollRects\"] = [i.to_json() for i in self.scroll_rects]\n        if self.sticky_position_constraint is not None:\n            json[\"stickyPositionConstraint\"] = self.sticky_position_constraint.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Layer:\n        return cls(\n            layer_id=LayerId.from_json(json[\"layerId\"]),\n            offset_x=float(json[\"offsetX\"]),\n            offset_y=float(json[\"offsetY\"]),\n            width=float(json[\"width\"]),\n            height=float(json[\"height\"]),\n            paint_count=int(json[\"paintCount\"]),\n            draws_content=bool(json[\"drawsContent\"]),\n            parent_layer_id=(\n                LayerId.from_json(json[\"parentLayerId\"])\n                if json.get(\"parentLayerId\", None) is not None\n                else None\n            ),\n            backend_node_id=(\n                dom.BackendNodeId.from_json(json[\"backendNodeId\"])\n                if json.get(\"backendNodeId\", None) is not None\n                else None\n            ),\n            transform=(\n                [float(i) for i in json[\"transform\"]]\n                if json.get(\"transform\", None) is not None\n                else None\n            ),\n            anchor_x=(\n                float(json[\"anchorX\"])\n                if json.get(\"anchorX\", None) is not None\n                else None\n            ),\n            anchor_y=(\n                float(json[\"anchorY\"])\n                if json.get(\"anchorY\", None) is not None\n                else None\n            ),\n            anchor_z=(\n                float(json[\"anchorZ\"])\n                if json.get(\"anchorZ\", None) is not None\n                else None\n            ),\n            invisible=(\n                bool(json[\"invisible\"])\n                if json.get(\"invisible\", None) is not None\n                else None\n            ),\n            scroll_rects=(\n                [ScrollRect.from_json(i) for i in json[\"scrollRects\"]]\n                if json.get(\"scrollRects\", None) is not None\n                else None\n            ),\n            sticky_position_constraint=(\n                StickyPositionConstraint.from_json(json[\"stickyPositionConstraint\"])\n                if json.get(\"stickyPositionConstraint\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.anchor_x","title":"<code>anchor_x: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.anchor_y","title":"<code>anchor_y: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.anchor_z","title":"<code>anchor_z: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.backend_node_id","title":"<code>backend_node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.draws_content","title":"<code>draws_content: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.height","title":"<code>height: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.invisible","title":"<code>invisible: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.layer_id","title":"<code>layer_id: LayerId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.offset_x","title":"<code>offset_x: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.offset_y","title":"<code>offset_y: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.paint_count","title":"<code>paint_count: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.parent_layer_id","title":"<code>parent_layer_id: typing.Optional[LayerId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.scroll_rects","title":"<code>scroll_rects: typing.Optional[typing.List[ScrollRect]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.sticky_position_constraint","title":"<code>sticky_position_constraint: typing.Optional[StickyPositionConstraint] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.transform","title":"<code>transform: typing.Optional[typing.List[float]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.width","title":"<code>width: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.__init__","title":"<code>__init__(layer_id, offset_x, offset_y, width, height, paint_count, draws_content, parent_layer_id=None, backend_node_id=None, transform=None, anchor_x=None, anchor_y=None, anchor_z=None, invisible=None, scroll_rects=None, sticky_position_constraint=None)</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Layer:\n    return cls(\n        layer_id=LayerId.from_json(json[\"layerId\"]),\n        offset_x=float(json[\"offsetX\"]),\n        offset_y=float(json[\"offsetY\"]),\n        width=float(json[\"width\"]),\n        height=float(json[\"height\"]),\n        paint_count=int(json[\"paintCount\"]),\n        draws_content=bool(json[\"drawsContent\"]),\n        parent_layer_id=(\n            LayerId.from_json(json[\"parentLayerId\"])\n            if json.get(\"parentLayerId\", None) is not None\n            else None\n        ),\n        backend_node_id=(\n            dom.BackendNodeId.from_json(json[\"backendNodeId\"])\n            if json.get(\"backendNodeId\", None) is not None\n            else None\n        ),\n        transform=(\n            [float(i) for i in json[\"transform\"]]\n            if json.get(\"transform\", None) is not None\n            else None\n        ),\n        anchor_x=(\n            float(json[\"anchorX\"])\n            if json.get(\"anchorX\", None) is not None\n            else None\n        ),\n        anchor_y=(\n            float(json[\"anchorY\"])\n            if json.get(\"anchorY\", None) is not None\n            else None\n        ),\n        anchor_z=(\n            float(json[\"anchorZ\"])\n            if json.get(\"anchorZ\", None) is not None\n            else None\n        ),\n        invisible=(\n            bool(json[\"invisible\"])\n            if json.get(\"invisible\", None) is not None\n            else None\n        ),\n        scroll_rects=(\n            [ScrollRect.from_json(i) for i in json[\"scrollRects\"]]\n            if json.get(\"scrollRects\", None) is not None\n            else None\n        ),\n        sticky_position_constraint=(\n            StickyPositionConstraint.from_json(json[\"stickyPositionConstraint\"])\n            if json.get(\"stickyPositionConstraint\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.Layer.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"layerId\"] = self.layer_id.to_json()\n    json[\"offsetX\"] = self.offset_x\n    json[\"offsetY\"] = self.offset_y\n    json[\"width\"] = self.width\n    json[\"height\"] = self.height\n    json[\"paintCount\"] = self.paint_count\n    json[\"drawsContent\"] = self.draws_content\n    if self.parent_layer_id is not None:\n        json[\"parentLayerId\"] = self.parent_layer_id.to_json()\n    if self.backend_node_id is not None:\n        json[\"backendNodeId\"] = self.backend_node_id.to_json()\n    if self.transform is not None:\n        json[\"transform\"] = [i for i in self.transform]\n    if self.anchor_x is not None:\n        json[\"anchorX\"] = self.anchor_x\n    if self.anchor_y is not None:\n        json[\"anchorY\"] = self.anchor_y\n    if self.anchor_z is not None:\n        json[\"anchorZ\"] = self.anchor_z\n    if self.invisible is not None:\n        json[\"invisible\"] = self.invisible\n    if self.scroll_rects is not None:\n        json[\"scrollRects\"] = [i.to_json() for i in self.scroll_rects]\n    if self.sticky_position_constraint is not None:\n        json[\"stickyPositionConstraint\"] = self.sticky_position_constraint.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerId","title":"<code>LayerId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique Layer identifier.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>class LayerId(str):\n    \"\"\"\n    Unique Layer identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; LayerId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"LayerId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def __repr__(self):\n    return \"LayerId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; LayerId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerPainted","title":"<code>LayerPainted</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@event_class(\"LayerTree.layerPainted\")\n@dataclass\nclass LayerPainted:\n    #: The id of the painted layer.\n    layer_id: LayerId\n    #: Clip rectangle.\n    clip: dom.Rect\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LayerPainted:\n        return cls(\n            layer_id=LayerId.from_json(json[\"layerId\"]),\n            clip=dom.Rect.from_json(json[\"clip\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerPainted.clip","title":"<code>clip: dom.Rect</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerPainted.layer_id","title":"<code>layer_id: LayerId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerPainted.__init__","title":"<code>__init__(layer_id, clip)</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerPainted.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LayerPainted:\n    return cls(\n        layer_id=LayerId.from_json(json[\"layerId\"]),\n        clip=dom.Rect.from_json(json[\"clip\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerTreeDidChange","title":"<code>LayerTreeDidChange</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@event_class(\"LayerTree.layerTreeDidChange\")\n@dataclass\nclass LayerTreeDidChange:\n    #: Layer tree, absent if not in the compositing mode.\n    layers: typing.Optional[typing.List[Layer]]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LayerTreeDidChange:\n        return cls(\n            layers=(\n                [Layer.from_json(i) for i in json[\"layers\"]]\n                if json.get(\"layers\", None) is not None\n                else None\n            )\n        )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerTreeDidChange.layers","title":"<code>layers: typing.Optional[typing.List[Layer]]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerTreeDidChange.__init__","title":"<code>__init__(layers)</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.LayerTreeDidChange.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LayerTreeDidChange:\n    return cls(\n        layers=(\n            [Layer.from_json(i) for i in json[\"layers\"]]\n            if json.get(\"layers\", None) is not None\n            else None\n        )\n    )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PaintProfile","title":"<code>PaintProfile</code>","text":"<p>               Bases: <code>list</code></p> <p>Array of timings, one per paint step.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>class PaintProfile(list):\n    \"\"\"\n    Array of timings, one per paint step.\n    \"\"\"\n\n    def to_json(self) -&gt; typing.List[float]:\n        return self\n\n    @classmethod\n    def from_json(cls, json: typing.List[float]) -&gt; PaintProfile:\n        return cls(json)\n\n    def __repr__(self):\n        return \"PaintProfile({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PaintProfile.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def __repr__(self):\n    return \"PaintProfile({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PaintProfile.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@classmethod\ndef from_json(cls, json: typing.List[float]) -&gt; PaintProfile:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PaintProfile.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def to_json(self) -&gt; typing.List[float]:\n    return self\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PictureTile","title":"<code>PictureTile</code>  <code>dataclass</code>","text":"<p>Serialized fragment of layer picture along with its offset within the layer.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@dataclass\nclass PictureTile:\n    \"\"\"\n    Serialized fragment of layer picture along with its offset within the layer.\n    \"\"\"\n\n    #: Offset from owning layer left boundary\n    x: float\n\n    #: Offset from owning layer top boundary\n    y: float\n\n    #: Base64-encoded snapshot data. (Encoded as a base64 string when passed over JSON)\n    picture: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"x\"] = self.x\n        json[\"y\"] = self.y\n        json[\"picture\"] = self.picture\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PictureTile:\n        return cls(\n            x=float(json[\"x\"]),\n            y=float(json[\"y\"]),\n            picture=str(json[\"picture\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PictureTile.picture","title":"<code>picture: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PictureTile.x","title":"<code>x: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PictureTile.y","title":"<code>y: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PictureTile.__init__","title":"<code>__init__(x, y, picture)</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PictureTile.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PictureTile:\n    return cls(\n        x=float(json[\"x\"]),\n        y=float(json[\"y\"]),\n        picture=str(json[\"picture\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.PictureTile.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"x\"] = self.x\n    json[\"y\"] = self.y\n    json[\"picture\"] = self.picture\n    return json\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.ScrollRect","title":"<code>ScrollRect</code>  <code>dataclass</code>","text":"<p>Rectangle where scrolling happens on the main thread.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@dataclass\nclass ScrollRect:\n    \"\"\"\n    Rectangle where scrolling happens on the main thread.\n    \"\"\"\n\n    #: Rectangle itself.\n    rect: dom.Rect\n\n    #: Reason for rectangle to force scrolling on the main thread\n    type_: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"rect\"] = self.rect.to_json()\n        json[\"type\"] = self.type_\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScrollRect:\n        return cls(\n            rect=dom.Rect.from_json(json[\"rect\"]),\n            type_=str(json[\"type\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.ScrollRect.rect","title":"<code>rect: dom.Rect</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.ScrollRect.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.ScrollRect.__init__","title":"<code>__init__(rect, type_)</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.ScrollRect.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScrollRect:\n    return cls(\n        rect=dom.Rect.from_json(json[\"rect\"]),\n        type_=str(json[\"type\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.ScrollRect.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"rect\"] = self.rect.to_json()\n    json[\"type\"] = self.type_\n    return json\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.SnapshotId","title":"<code>SnapshotId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique snapshot identifier.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>class SnapshotId(str):\n    \"\"\"\n    Unique snapshot identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SnapshotId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"SnapshotId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.SnapshotId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def __repr__(self):\n    return \"SnapshotId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.SnapshotId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SnapshotId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.SnapshotId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.StickyPositionConstraint","title":"<code>StickyPositionConstraint</code>  <code>dataclass</code>","text":"<p>Sticky position constraints.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@dataclass\nclass StickyPositionConstraint:\n    \"\"\"\n    Sticky position constraints.\n    \"\"\"\n\n    #: Layout rectangle of the sticky element before being shifted\n    sticky_box_rect: dom.Rect\n\n    #: Layout rectangle of the containing block of the sticky element\n    containing_block_rect: dom.Rect\n\n    #: The nearest sticky layer that shifts the sticky box\n    nearest_layer_shifting_sticky_box: typing.Optional[LayerId] = None\n\n    #: The nearest sticky layer that shifts the containing block\n    nearest_layer_shifting_containing_block: typing.Optional[LayerId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"stickyBoxRect\"] = self.sticky_box_rect.to_json()\n        json[\"containingBlockRect\"] = self.containing_block_rect.to_json()\n        if self.nearest_layer_shifting_sticky_box is not None:\n            json[\"nearestLayerShiftingStickyBox\"] = (\n                self.nearest_layer_shifting_sticky_box.to_json()\n            )\n        if self.nearest_layer_shifting_containing_block is not None:\n            json[\"nearestLayerShiftingContainingBlock\"] = (\n                self.nearest_layer_shifting_containing_block.to_json()\n            )\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StickyPositionConstraint:\n        return cls(\n            sticky_box_rect=dom.Rect.from_json(json[\"stickyBoxRect\"]),\n            containing_block_rect=dom.Rect.from_json(json[\"containingBlockRect\"]),\n            nearest_layer_shifting_sticky_box=(\n                LayerId.from_json(json[\"nearestLayerShiftingStickyBox\"])\n                if json.get(\"nearestLayerShiftingStickyBox\", None) is not None\n                else None\n            ),\n            nearest_layer_shifting_containing_block=(\n                LayerId.from_json(json[\"nearestLayerShiftingContainingBlock\"])\n                if json.get(\"nearestLayerShiftingContainingBlock\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.StickyPositionConstraint.containing_block_rect","title":"<code>containing_block_rect: dom.Rect</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.StickyPositionConstraint.nearest_layer_shifting_containing_block","title":"<code>nearest_layer_shifting_containing_block: typing.Optional[LayerId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.StickyPositionConstraint.nearest_layer_shifting_sticky_box","title":"<code>nearest_layer_shifting_sticky_box: typing.Optional[LayerId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.StickyPositionConstraint.sticky_box_rect","title":"<code>sticky_box_rect: dom.Rect</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.StickyPositionConstraint.__init__","title":"<code>__init__(sticky_box_rect, containing_block_rect, nearest_layer_shifting_sticky_box=None, nearest_layer_shifting_containing_block=None)</code>","text":""},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.StickyPositionConstraint.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StickyPositionConstraint:\n    return cls(\n        sticky_box_rect=dom.Rect.from_json(json[\"stickyBoxRect\"]),\n        containing_block_rect=dom.Rect.from_json(json[\"containingBlockRect\"]),\n        nearest_layer_shifting_sticky_box=(\n            LayerId.from_json(json[\"nearestLayerShiftingStickyBox\"])\n            if json.get(\"nearestLayerShiftingStickyBox\", None) is not None\n            else None\n        ),\n        nearest_layer_shifting_containing_block=(\n            LayerId.from_json(json[\"nearestLayerShiftingContainingBlock\"])\n            if json.get(\"nearestLayerShiftingContainingBlock\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.StickyPositionConstraint.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"stickyBoxRect\"] = self.sticky_box_rect.to_json()\n    json[\"containingBlockRect\"] = self.containing_block_rect.to_json()\n    if self.nearest_layer_shifting_sticky_box is not None:\n        json[\"nearestLayerShiftingStickyBox\"] = (\n            self.nearest_layer_shifting_sticky_box.to_json()\n        )\n    if self.nearest_layer_shifting_containing_block is not None:\n        json[\"nearestLayerShiftingContainingBlock\"] = (\n            self.nearest_layer_shifting_containing_block.to_json()\n        )\n    return json\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.compositing_reasons","title":"<code>compositing_reasons(layer_id)</code>","text":"<p>Provides the reasons why the given layer was composited.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>LayerId</code> <p>The id of the layer for which we want to get the reasons it was composited.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[List[str], List[str]]]</code> <p>A tuple with the following items:  0. compositingReasons - A list of strings specifying reasons for the given layer to become composited. 1. compositingReasonIds - A list of strings specifying reason IDs for the given layer to become composited.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def compositing_reasons(\n    layer_id: LayerId,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List[str], typing.List[str]]\n]:\n    \"\"\"\n    Provides the reasons why the given layer was composited.\n\n    :param layer_id: The id of the layer for which we want to get the reasons it was composited.\n    :returns: A tuple with the following items:\n\n        0. **compositingReasons** - A list of strings specifying reasons for the given layer to become composited.\n        1. **compositingReasonIds** - A list of strings specifying reason IDs for the given layer to become composited.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"layerId\"] = layer_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"LayerTree.compositingReasons\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        [str(i) for i in json[\"compositingReasons\"]],\n        [str(i) for i in json[\"compositingReasonIds\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.disable","title":"<code>disable()</code>","text":"<p>Disables compositing tree inspection.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables compositing tree inspection.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"LayerTree.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.enable","title":"<code>enable()</code>","text":"<p>Enables compositing tree inspection.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables compositing tree inspection.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"LayerTree.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.load_snapshot","title":"<code>load_snapshot(tiles)</code>","text":"<p>Returns the snapshot identifier.</p> <p>Parameters:</p> Name Type Description Default <code>tiles</code> <code>List[PictureTile]</code> <p>An array of tiles composing the snapshot.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SnapshotId]</code> <p>The id of the snapshot.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def load_snapshot(\n    tiles: typing.List[PictureTile],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, SnapshotId]:\n    \"\"\"\n    Returns the snapshot identifier.\n\n    :param tiles: An array of tiles composing the snapshot.\n    :returns: The id of the snapshot.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"tiles\"] = [i.to_json() for i in tiles]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"LayerTree.loadSnapshot\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return SnapshotId.from_json(json[\"snapshotId\"])\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.make_snapshot","title":"<code>make_snapshot(layer_id)</code>","text":"<p>Returns the layer snapshot identifier.</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>LayerId</code> <p>The id of the layer.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SnapshotId]</code> <p>The id of the layer snapshot.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def make_snapshot(\n    layer_id: LayerId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, SnapshotId]:\n    \"\"\"\n    Returns the layer snapshot identifier.\n\n    :param layer_id: The id of the layer.\n    :returns: The id of the layer snapshot.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"layerId\"] = layer_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"LayerTree.makeSnapshot\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return SnapshotId.from_json(json[\"snapshotId\"])\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.profile_snapshot","title":"<code>profile_snapshot(snapshot_id, min_repeat_count=None, min_duration=None, clip_rect=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>snapshot_id</code> <code>SnapshotId</code> <p>The id of the layer snapshot.</p> required <code>min_repeat_count</code> <code>Optional[int]</code> <p>(Optional) The maximum number of times to replay the snapshot (1, if not specified).</p> <code>None</code> <code>min_duration</code> <code>Optional[float]</code> <p>(Optional) The minimum duration (in seconds) to replay the snapshot.</p> <code>None</code> <code>clip_rect</code> <code>Optional[Rect]</code> <p>(Optional) The clip rectangle to apply when replaying the snapshot.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[PaintProfile]]</code> <p>The array of paint profiles, one per run.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def profile_snapshot(\n    snapshot_id: SnapshotId,\n    min_repeat_count: typing.Optional[int] = None,\n    min_duration: typing.Optional[float] = None,\n    clip_rect: typing.Optional[dom.Rect] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[PaintProfile]]:\n    \"\"\"\n    :param snapshot_id: The id of the layer snapshot.\n    :param min_repeat_count: *(Optional)* The maximum number of times to replay the snapshot (1, if not specified).\n    :param min_duration: *(Optional)* The minimum duration (in seconds) to replay the snapshot.\n    :param clip_rect: *(Optional)* The clip rectangle to apply when replaying the snapshot.\n    :returns: The array of paint profiles, one per run.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"snapshotId\"] = snapshot_id.to_json()\n    if min_repeat_count is not None:\n        params[\"minRepeatCount\"] = min_repeat_count\n    if min_duration is not None:\n        params[\"minDuration\"] = min_duration\n    if clip_rect is not None:\n        params[\"clipRect\"] = clip_rect.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"LayerTree.profileSnapshot\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [PaintProfile.from_json(i) for i in json[\"timings\"]]\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.release_snapshot","title":"<code>release_snapshot(snapshot_id)</code>","text":"<p>Releases layer snapshot captured by the back-end.</p> <p>Parameters:</p> Name Type Description Default <code>snapshot_id</code> <code>SnapshotId</code> <p>The id of the layer snapshot.</p> required Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def release_snapshot(\n    snapshot_id: SnapshotId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Releases layer snapshot captured by the back-end.\n\n    :param snapshot_id: The id of the layer snapshot.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"snapshotId\"] = snapshot_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"LayerTree.releaseSnapshot\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.replay_snapshot","title":"<code>replay_snapshot(snapshot_id, from_step=None, to_step=None, scale=None)</code>","text":"<p>Replays the layer snapshot and returns the resulting bitmap.</p> <p>Parameters:</p> Name Type Description Default <code>snapshot_id</code> <code>SnapshotId</code> <p>The id of the layer snapshot.</p> required <code>from_step</code> <code>Optional[int]</code> <p>(Optional) The first step to replay from (replay from the very start if not specified).</p> <code>None</code> <code>to_step</code> <code>Optional[int]</code> <p>(Optional) The last step to replay to (replay till the end if not specified).</p> <code>None</code> <code>scale</code> <code>Optional[float]</code> <p>(Optional) The scale to apply while replaying (defaults to 1).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>A data: URL for resulting image.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def replay_snapshot(\n    snapshot_id: SnapshotId,\n    from_step: typing.Optional[int] = None,\n    to_step: typing.Optional[int] = None,\n    scale: typing.Optional[float] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Replays the layer snapshot and returns the resulting bitmap.\n\n    :param snapshot_id: The id of the layer snapshot.\n    :param from_step: *(Optional)* The first step to replay from (replay from the very start if not specified).\n    :param to_step: *(Optional)* The last step to replay to (replay till the end if not specified).\n    :param scale: *(Optional)* The scale to apply while replaying (defaults to 1).\n    :returns: A data: URL for resulting image.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"snapshotId\"] = snapshot_id.to_json()\n    if from_step is not None:\n        params[\"fromStep\"] = from_step\n    if to_step is not None:\n        params[\"toStep\"] = to_step\n    if scale is not None:\n        params[\"scale\"] = scale\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"LayerTree.replaySnapshot\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"dataURL\"])\n</code></pre>"},{"location":"reference/cdp/layer_tree/#zendriver.cdp.layer_tree.snapshot_command_log","title":"<code>snapshot_command_log(snapshot_id)</code>","text":"<p>Replays the layer snapshot and returns canvas log.</p> <p>Parameters:</p> Name Type Description Default <code>snapshot_id</code> <code>SnapshotId</code> <p>The id of the layer snapshot.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[dict]]</code> <p>The array of canvas function calls.</p> Source code in <code>zendriver/cdp/layer_tree.py</code> <pre><code>def snapshot_command_log(\n    snapshot_id: SnapshotId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[dict]]:\n    \"\"\"\n    Replays the layer snapshot and returns canvas log.\n\n    :param snapshot_id: The id of the layer snapshot.\n    :returns: The array of canvas function calls.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"snapshotId\"] = snapshot_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"LayerTree.snapshotCommandLog\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [dict(i) for i in json[\"commandLog\"]]\n</code></pre>"},{"location":"reference/cdp/log/","title":"log","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.EntryAdded","title":"<code>EntryAdded</code>  <code>dataclass</code>","text":"<p>Issued when new message was logged.</p> Source code in <code>zendriver/cdp/log.py</code> <pre><code>@event_class(\"Log.entryAdded\")\n@dataclass\nclass EntryAdded:\n    \"\"\"\n    Issued when new message was logged.\n    \"\"\"\n\n    #: The entry.\n    entry: LogEntry\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; EntryAdded:\n        return cls(entry=LogEntry.from_json(json[\"entry\"]))\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.EntryAdded.entry","title":"<code>entry: LogEntry</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.EntryAdded.__init__","title":"<code>__init__(entry)</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.EntryAdded.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/log.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; EntryAdded:\n    return cls(entry=LogEntry.from_json(json[\"entry\"]))\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry","title":"<code>LogEntry</code>  <code>dataclass</code>","text":"<p>Log entry.</p> Source code in <code>zendriver/cdp/log.py</code> <pre><code>@dataclass\nclass LogEntry:\n    \"\"\"\n    Log entry.\n    \"\"\"\n\n    #: Log entry source.\n    source: str\n\n    #: Log entry severity.\n    level: str\n\n    #: Logged text.\n    text: str\n\n    #: Timestamp when this entry was added.\n    timestamp: runtime.Timestamp\n\n    category: typing.Optional[str] = None\n\n    #: URL of the resource if known.\n    url: typing.Optional[str] = None\n\n    #: Line number in the resource.\n    line_number: typing.Optional[int] = None\n\n    #: JavaScript stack trace.\n    stack_trace: typing.Optional[runtime.StackTrace] = None\n\n    #: Identifier of the network request associated with this entry.\n    network_request_id: typing.Optional[network.RequestId] = None\n\n    #: Identifier of the worker associated with this entry.\n    worker_id: typing.Optional[str] = None\n\n    #: Call arguments.\n    args: typing.Optional[typing.List[runtime.RemoteObject]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"source\"] = self.source\n        json[\"level\"] = self.level\n        json[\"text\"] = self.text\n        json[\"timestamp\"] = self.timestamp.to_json()\n        if self.category is not None:\n            json[\"category\"] = self.category\n        if self.url is not None:\n            json[\"url\"] = self.url\n        if self.line_number is not None:\n            json[\"lineNumber\"] = self.line_number\n        if self.stack_trace is not None:\n            json[\"stackTrace\"] = self.stack_trace.to_json()\n        if self.network_request_id is not None:\n            json[\"networkRequestId\"] = self.network_request_id.to_json()\n        if self.worker_id is not None:\n            json[\"workerId\"] = self.worker_id\n        if self.args is not None:\n            json[\"args\"] = [i.to_json() for i in self.args]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LogEntry:\n        return cls(\n            source=str(json[\"source\"]),\n            level=str(json[\"level\"]),\n            text=str(json[\"text\"]),\n            timestamp=runtime.Timestamp.from_json(json[\"timestamp\"]),\n            category=(\n                str(json[\"category\"])\n                if json.get(\"category\", None) is not None\n                else None\n            ),\n            url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n            line_number=(\n                int(json[\"lineNumber\"])\n                if json.get(\"lineNumber\", None) is not None\n                else None\n            ),\n            stack_trace=(\n                runtime.StackTrace.from_json(json[\"stackTrace\"])\n                if json.get(\"stackTrace\", None) is not None\n                else None\n            ),\n            network_request_id=(\n                network.RequestId.from_json(json[\"networkRequestId\"])\n                if json.get(\"networkRequestId\", None) is not None\n                else None\n            ),\n            worker_id=(\n                str(json[\"workerId\"])\n                if json.get(\"workerId\", None) is not None\n                else None\n            ),\n            args=(\n                [runtime.RemoteObject.from_json(i) for i in json[\"args\"]]\n                if json.get(\"args\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.args","title":"<code>args: typing.Optional[typing.List[runtime.RemoteObject]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.category","title":"<code>category: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.level","title":"<code>level: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.line_number","title":"<code>line_number: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.network_request_id","title":"<code>network_request_id: typing.Optional[network.RequestId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.source","title":"<code>source: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.stack_trace","title":"<code>stack_trace: typing.Optional[runtime.StackTrace] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.timestamp","title":"<code>timestamp: runtime.Timestamp</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.url","title":"<code>url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.worker_id","title":"<code>worker_id: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.__init__","title":"<code>__init__(source, level, text, timestamp, category=None, url=None, line_number=None, stack_trace=None, network_request_id=None, worker_id=None, args=None)</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/log.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LogEntry:\n    return cls(\n        source=str(json[\"source\"]),\n        level=str(json[\"level\"]),\n        text=str(json[\"text\"]),\n        timestamp=runtime.Timestamp.from_json(json[\"timestamp\"]),\n        category=(\n            str(json[\"category\"])\n            if json.get(\"category\", None) is not None\n            else None\n        ),\n        url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n        line_number=(\n            int(json[\"lineNumber\"])\n            if json.get(\"lineNumber\", None) is not None\n            else None\n        ),\n        stack_trace=(\n            runtime.StackTrace.from_json(json[\"stackTrace\"])\n            if json.get(\"stackTrace\", None) is not None\n            else None\n        ),\n        network_request_id=(\n            network.RequestId.from_json(json[\"networkRequestId\"])\n            if json.get(\"networkRequestId\", None) is not None\n            else None\n        ),\n        worker_id=(\n            str(json[\"workerId\"])\n            if json.get(\"workerId\", None) is not None\n            else None\n        ),\n        args=(\n            [runtime.RemoteObject.from_json(i) for i in json[\"args\"]]\n            if json.get(\"args\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.LogEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/log.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"source\"] = self.source\n    json[\"level\"] = self.level\n    json[\"text\"] = self.text\n    json[\"timestamp\"] = self.timestamp.to_json()\n    if self.category is not None:\n        json[\"category\"] = self.category\n    if self.url is not None:\n        json[\"url\"] = self.url\n    if self.line_number is not None:\n        json[\"lineNumber\"] = self.line_number\n    if self.stack_trace is not None:\n        json[\"stackTrace\"] = self.stack_trace.to_json()\n    if self.network_request_id is not None:\n        json[\"networkRequestId\"] = self.network_request_id.to_json()\n    if self.worker_id is not None:\n        json[\"workerId\"] = self.worker_id\n    if self.args is not None:\n        json[\"args\"] = [i.to_json() for i in self.args]\n    return json\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.ViolationSetting","title":"<code>ViolationSetting</code>  <code>dataclass</code>","text":"<p>Violation configuration setting.</p> Source code in <code>zendriver/cdp/log.py</code> <pre><code>@dataclass\nclass ViolationSetting:\n    \"\"\"\n    Violation configuration setting.\n    \"\"\"\n\n    #: Violation type.\n    name: str\n\n    #: Time threshold to trigger upon.\n    threshold: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"threshold\"] = self.threshold\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ViolationSetting:\n        return cls(\n            name=str(json[\"name\"]),\n            threshold=float(json[\"threshold\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.ViolationSetting.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.ViolationSetting.threshold","title":"<code>threshold: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.ViolationSetting.__init__","title":"<code>__init__(name, threshold)</code>","text":""},{"location":"reference/cdp/log/#zendriver.cdp.log.ViolationSetting.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/log.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ViolationSetting:\n    return cls(\n        name=str(json[\"name\"]),\n        threshold=float(json[\"threshold\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.ViolationSetting.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/log.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"threshold\"] = self.threshold\n    return json\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.clear","title":"<code>clear()</code>","text":"<p>Clears the log.</p> Source code in <code>zendriver/cdp/log.py</code> <pre><code>def clear() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears the log.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Log.clear\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.disable","title":"<code>disable()</code>","text":"<p>Disables log domain, prevents further log entries from being reported to the client.</p> Source code in <code>zendriver/cdp/log.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables log domain, prevents further log entries from being reported to the client.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Log.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.enable","title":"<code>enable()</code>","text":"<p>Enables log domain, sends the entries collected so far to the client by means of the <code>entryAdded</code> notification.</p> Source code in <code>zendriver/cdp/log.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables log domain, sends the entries collected so far to the client by means of the\n    ``entryAdded`` notification.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Log.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.start_violations_report","title":"<code>start_violations_report(config)</code>","text":"<p>start violation reporting.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>List[ViolationSetting]</code> <p>Configuration for violations.</p> required Source code in <code>zendriver/cdp/log.py</code> <pre><code>def start_violations_report(\n    config: typing.List[ViolationSetting],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    start violation reporting.\n\n    :param config: Configuration for violations.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"config\"] = [i.to_json() for i in config]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Log.startViolationsReport\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/log/#zendriver.cdp.log.stop_violations_report","title":"<code>stop_violations_report()</code>","text":"<p>Stop violation reporting.</p> Source code in <code>zendriver/cdp/log.py</code> <pre><code>def stop_violations_report() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Stop violation reporting.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Log.stopViolationsReport\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/media/","title":"media","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerError","title":"<code>PlayerError</code>  <code>dataclass</code>","text":"<p>Corresponds to kMediaError</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>@dataclass\nclass PlayerError:\n    \"\"\"\n    Corresponds to kMediaError\n    \"\"\"\n\n    error_type: str\n\n    #: Code is the numeric enum entry for a specific set of error codes, such\n    #: as PipelineStatusCodes in media/base/pipeline_status.h\n    code: int\n\n    #: A trace of where this error was caused / where it passed through.\n    stack: typing.List[PlayerErrorSourceLocation]\n\n    #: Errors potentially have a root cause error, ie, a DecoderError might be\n    #: caused by an WindowsError\n    cause: typing.List[PlayerError]\n\n    #: Extra data attached to an error, such as an HRESULT, Video Codec, etc.\n    data: dict\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"errorType\"] = self.error_type\n        json[\"code\"] = self.code\n        json[\"stack\"] = [i.to_json() for i in self.stack]\n        json[\"cause\"] = [i.to_json() for i in self.cause]\n        json[\"data\"] = self.data\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlayerError:\n        return cls(\n            error_type=str(json[\"errorType\"]),\n            code=int(json[\"code\"]),\n            stack=[PlayerErrorSourceLocation.from_json(i) for i in json[\"stack\"]],\n            cause=[PlayerError.from_json(i) for i in json[\"cause\"]],\n            data=dict(json[\"data\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerError.cause","title":"<code>cause: typing.List[PlayerError]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerError.code","title":"<code>code: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerError.data","title":"<code>data: dict</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerError.error_type","title":"<code>error_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerError.stack","title":"<code>stack: typing.List[PlayerErrorSourceLocation]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerError.__init__","title":"<code>__init__(error_type, code, stack, cause, data)</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerError.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlayerError:\n    return cls(\n        error_type=str(json[\"errorType\"]),\n        code=int(json[\"code\"]),\n        stack=[PlayerErrorSourceLocation.from_json(i) for i in json[\"stack\"]],\n        cause=[PlayerError.from_json(i) for i in json[\"cause\"]],\n        data=dict(json[\"data\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerError.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"errorType\"] = self.error_type\n    json[\"code\"] = self.code\n    json[\"stack\"] = [i.to_json() for i in self.stack]\n    json[\"cause\"] = [i.to_json() for i in self.cause]\n    json[\"data\"] = self.data\n    return json\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorSourceLocation","title":"<code>PlayerErrorSourceLocation</code>  <code>dataclass</code>","text":"<p>Represents logged source line numbers reported in an error. NOTE: file and line are from chromium c++ implementation code, not js.</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>@dataclass\nclass PlayerErrorSourceLocation:\n    \"\"\"\n    Represents logged source line numbers reported in an error.\n    NOTE: file and line are from chromium c++ implementation code, not js.\n    \"\"\"\n\n    file: str\n\n    line: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"file\"] = self.file\n        json[\"line\"] = self.line\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlayerErrorSourceLocation:\n        return cls(\n            file=str(json[\"file\"]),\n            line=int(json[\"line\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorSourceLocation.file","title":"<code>file: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorSourceLocation.line","title":"<code>line: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorSourceLocation.__init__","title":"<code>__init__(file, line)</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorSourceLocation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlayerErrorSourceLocation:\n    return cls(\n        file=str(json[\"file\"]),\n        line=int(json[\"line\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorSourceLocation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"file\"] = self.file\n    json[\"line\"] = self.line\n    return json\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorsRaised","title":"<code>PlayerErrorsRaised</code>  <code>dataclass</code>","text":"<p>Send a list of any errors that need to be delivered.</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>@event_class(\"Media.playerErrorsRaised\")\n@dataclass\nclass PlayerErrorsRaised:\n    \"\"\"\n    Send a list of any errors that need to be delivered.\n    \"\"\"\n\n    player_id: PlayerId\n    errors: typing.List[PlayerError]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlayerErrorsRaised:\n        return cls(\n            player_id=PlayerId.from_json(json[\"playerId\"]),\n            errors=[PlayerError.from_json(i) for i in json[\"errors\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorsRaised.errors","title":"<code>errors: typing.List[PlayerError]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorsRaised.player_id","title":"<code>player_id: PlayerId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorsRaised.__init__","title":"<code>__init__(player_id, errors)</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerErrorsRaised.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlayerErrorsRaised:\n    return cls(\n        player_id=PlayerId.from_json(json[\"playerId\"]),\n        errors=[PlayerError.from_json(i) for i in json[\"errors\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEvent","title":"<code>PlayerEvent</code>  <code>dataclass</code>","text":"<p>Corresponds to kMediaEventTriggered</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>@dataclass\nclass PlayerEvent:\n    \"\"\"\n    Corresponds to kMediaEventTriggered\n    \"\"\"\n\n    timestamp: Timestamp\n\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"timestamp\"] = self.timestamp.to_json()\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlayerEvent:\n        return cls(\n            timestamp=Timestamp.from_json(json[\"timestamp\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEvent.timestamp","title":"<code>timestamp: Timestamp</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEvent.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEvent.__init__","title":"<code>__init__(timestamp, value)</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEvent.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlayerEvent:\n    return cls(\n        timestamp=Timestamp.from_json(json[\"timestamp\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEvent.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"timestamp\"] = self.timestamp.to_json()\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEventsAdded","title":"<code>PlayerEventsAdded</code>  <code>dataclass</code>","text":"<p>Send events as a list, allowing them to be batched on the browser for less congestion. If batched, events must ALWAYS be in chronological order.</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>@event_class(\"Media.playerEventsAdded\")\n@dataclass\nclass PlayerEventsAdded:\n    \"\"\"\n    Send events as a list, allowing them to be batched on the browser for less\n    congestion. If batched, events must ALWAYS be in chronological order.\n    \"\"\"\n\n    player_id: PlayerId\n    events: typing.List[PlayerEvent]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlayerEventsAdded:\n        return cls(\n            player_id=PlayerId.from_json(json[\"playerId\"]),\n            events=[PlayerEvent.from_json(i) for i in json[\"events\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEventsAdded.events","title":"<code>events: typing.List[PlayerEvent]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEventsAdded.player_id","title":"<code>player_id: PlayerId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEventsAdded.__init__","title":"<code>__init__(player_id, events)</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerEventsAdded.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlayerEventsAdded:\n    return cls(\n        player_id=PlayerId.from_json(json[\"playerId\"]),\n        events=[PlayerEvent.from_json(i) for i in json[\"events\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerId","title":"<code>PlayerId</code>","text":"<p>               Bases: <code>str</code></p> <p>Players will get an ID that is unique within the agent context.</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>class PlayerId(str):\n    \"\"\"\n    Players will get an ID that is unique within the agent context.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PlayerId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"PlayerId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>def __repr__(self):\n    return \"PlayerId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PlayerId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessage","title":"<code>PlayerMessage</code>  <code>dataclass</code>","text":"<p>Have one type per entry in MediaLogRecord::Type Corresponds to kMessage</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>@dataclass\nclass PlayerMessage:\n    \"\"\"\n    Have one type per entry in MediaLogRecord::Type\n    Corresponds to kMessage\n    \"\"\"\n\n    #: Keep in sync with MediaLogMessageLevel\n    #: We are currently keeping the message level 'error' separate from the\n    #: PlayerError type because right now they represent different things,\n    #: this one being a DVLOG(ERROR) style log message that gets printed\n    #: based on what log level is selected in the UI, and the other is a\n    #: representation of a media::PipelineStatus object. Soon however we're\n    #: going to be moving away from using PipelineStatus for errors and\n    #: introducing a new error type which should hopefully let us integrate\n    #: the error log level into the PlayerError type.\n    level: str\n\n    message: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"level\"] = self.level\n        json[\"message\"] = self.message\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlayerMessage:\n        return cls(\n            level=str(json[\"level\"]),\n            message=str(json[\"message\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessage.level","title":"<code>level: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessage.message","title":"<code>message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessage.__init__","title":"<code>__init__(level, message)</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlayerMessage:\n    return cls(\n        level=str(json[\"level\"]),\n        message=str(json[\"message\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"level\"] = self.level\n    json[\"message\"] = self.message\n    return json\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessagesLogged","title":"<code>PlayerMessagesLogged</code>  <code>dataclass</code>","text":"<p>Send a list of any messages that need to be delivered.</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>@event_class(\"Media.playerMessagesLogged\")\n@dataclass\nclass PlayerMessagesLogged:\n    \"\"\"\n    Send a list of any messages that need to be delivered.\n    \"\"\"\n\n    player_id: PlayerId\n    messages: typing.List[PlayerMessage]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlayerMessagesLogged:\n        return cls(\n            player_id=PlayerId.from_json(json[\"playerId\"]),\n            messages=[PlayerMessage.from_json(i) for i in json[\"messages\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessagesLogged.messages","title":"<code>messages: typing.List[PlayerMessage]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessagesLogged.player_id","title":"<code>player_id: PlayerId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessagesLogged.__init__","title":"<code>__init__(player_id, messages)</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerMessagesLogged.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlayerMessagesLogged:\n    return cls(\n        player_id=PlayerId.from_json(json[\"playerId\"]),\n        messages=[PlayerMessage.from_json(i) for i in json[\"messages\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerPropertiesChanged","title":"<code>PlayerPropertiesChanged</code>  <code>dataclass</code>","text":"<p>This can be called multiple times, and can be used to set / override / remove player properties. A null propValue indicates removal.</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>@event_class(\"Media.playerPropertiesChanged\")\n@dataclass\nclass PlayerPropertiesChanged:\n    \"\"\"\n    This can be called multiple times, and can be used to set / override /\n    remove player properties. A null propValue indicates removal.\n    \"\"\"\n\n    player_id: PlayerId\n    properties: typing.List[PlayerProperty]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlayerPropertiesChanged:\n        return cls(\n            player_id=PlayerId.from_json(json[\"playerId\"]),\n            properties=[PlayerProperty.from_json(i) for i in json[\"properties\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerPropertiesChanged.player_id","title":"<code>player_id: PlayerId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerPropertiesChanged.properties","title":"<code>properties: typing.List[PlayerProperty]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerPropertiesChanged.__init__","title":"<code>__init__(player_id, properties)</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerPropertiesChanged.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlayerPropertiesChanged:\n    return cls(\n        player_id=PlayerId.from_json(json[\"playerId\"]),\n        properties=[PlayerProperty.from_json(i) for i in json[\"properties\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerProperty","title":"<code>PlayerProperty</code>  <code>dataclass</code>","text":"<p>Corresponds to kMediaPropertyChange</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>@dataclass\nclass PlayerProperty:\n    \"\"\"\n    Corresponds to kMediaPropertyChange\n    \"\"\"\n\n    name: str\n\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlayerProperty:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerProperty.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerProperty.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerProperty.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerProperty.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlayerProperty:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayerProperty.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayersCreated","title":"<code>PlayersCreated</code>  <code>dataclass</code>","text":"<p>Called whenever a player is created, or when a new agent joins and receives a list of active players. If an agent is restored, it will receive the full list of player ids and all events again.</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>@event_class(\"Media.playersCreated\")\n@dataclass\nclass PlayersCreated:\n    \"\"\"\n    Called whenever a player is created, or when a new agent joins and receives\n    a list of active players. If an agent is restored, it will receive the full\n    list of player ids and all events again.\n    \"\"\"\n\n    players: typing.List[PlayerId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PlayersCreated:\n        return cls(players=[PlayerId.from_json(i) for i in json[\"players\"]])\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayersCreated.players","title":"<code>players: typing.List[PlayerId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayersCreated.__init__","title":"<code>__init__(players)</code>","text":""},{"location":"reference/cdp/media/#zendriver.cdp.media.PlayersCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PlayersCreated:\n    return cls(players=[PlayerId.from_json(i) for i in json[\"players\"]])\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.Timestamp","title":"<code>Timestamp</code>","text":"<p>               Bases: <code>float</code></p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>class Timestamp(float):\n    def to_json(self) -&gt; float:\n        return self\n\n    @classmethod\n    def from_json(cls, json: float) -&gt; Timestamp:\n        return cls(json)\n\n    def __repr__(self):\n        return \"Timestamp({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.Timestamp.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>def __repr__(self):\n    return \"Timestamp({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.Timestamp.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>@classmethod\ndef from_json(cls, json: float) -&gt; Timestamp:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.Timestamp.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/media.py</code> <pre><code>def to_json(self) -&gt; float:\n    return self\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.disable","title":"<code>disable()</code>","text":"<p>Disables the Media domain.</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables the Media domain.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Media.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/media/#zendriver.cdp.media.enable","title":"<code>enable()</code>","text":"<p>Enables the Media domain</p> Source code in <code>zendriver/cdp/media.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables the Media domain\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Media.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/memory/","title":"memory","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.Module","title":"<code>Module</code>  <code>dataclass</code>","text":"<p>Executable module information</p> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>@dataclass\nclass Module:\n    \"\"\"\n    Executable module information\n    \"\"\"\n\n    #: Name of the module.\n    name: str\n\n    #: UUID of the module.\n    uuid: str\n\n    #: Base address where the module is loaded into memory. Encoded as a decimal\n    #: or hexadecimal (0x prefixed) string.\n    base_address: str\n\n    #: Size of the module in bytes.\n    size: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"uuid\"] = self.uuid\n        json[\"baseAddress\"] = self.base_address\n        json[\"size\"] = self.size\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Module:\n        return cls(\n            name=str(json[\"name\"]),\n            uuid=str(json[\"uuid\"]),\n            base_address=str(json[\"baseAddress\"]),\n            size=float(json[\"size\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.Module.base_address","title":"<code>base_address: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.Module.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.Module.size","title":"<code>size: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.Module.uuid","title":"<code>uuid: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.Module.__init__","title":"<code>__init__(name, uuid, base_address, size)</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.Module.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/memory.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Module:\n    return cls(\n        name=str(json[\"name\"]),\n        uuid=str(json[\"uuid\"]),\n        base_address=str(json[\"baseAddress\"]),\n        size=float(json[\"size\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.Module.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"uuid\"] = self.uuid\n    json[\"baseAddress\"] = self.base_address\n    json[\"size\"] = self.size\n    return json\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.PressureLevel","title":"<code>PressureLevel</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Memory pressure level.</p> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>class PressureLevel(enum.Enum):\n    \"\"\"\n    Memory pressure level.\n    \"\"\"\n\n    MODERATE = \"moderate\"\n    CRITICAL = \"critical\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PressureLevel:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.PressureLevel.CRITICAL","title":"<code>CRITICAL = 'critical'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.PressureLevel.MODERATE","title":"<code>MODERATE = 'moderate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.PressureLevel.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/memory.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PressureLevel:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.PressureLevel.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfile","title":"<code>SamplingProfile</code>  <code>dataclass</code>","text":"<p>Array of heap profile samples.</p> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>@dataclass\nclass SamplingProfile:\n    \"\"\"\n    Array of heap profile samples.\n    \"\"\"\n\n    samples: typing.List[SamplingProfileNode]\n\n    modules: typing.List[Module]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"samples\"] = [i.to_json() for i in self.samples]\n        json[\"modules\"] = [i.to_json() for i in self.modules]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SamplingProfile:\n        return cls(\n            samples=[SamplingProfileNode.from_json(i) for i in json[\"samples\"]],\n            modules=[Module.from_json(i) for i in json[\"modules\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfile.modules","title":"<code>modules: typing.List[Module]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfile.samples","title":"<code>samples: typing.List[SamplingProfileNode]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfile.__init__","title":"<code>__init__(samples, modules)</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfile.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/memory.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SamplingProfile:\n    return cls(\n        samples=[SamplingProfileNode.from_json(i) for i in json[\"samples\"]],\n        modules=[Module.from_json(i) for i in json[\"modules\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfile.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"samples\"] = [i.to_json() for i in self.samples]\n    json[\"modules\"] = [i.to_json() for i in self.modules]\n    return json\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfileNode","title":"<code>SamplingProfileNode</code>  <code>dataclass</code>","text":"<p>Heap profile sample.</p> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>@dataclass\nclass SamplingProfileNode:\n    \"\"\"\n    Heap profile sample.\n    \"\"\"\n\n    #: Size of the sampled allocation.\n    size: float\n\n    #: Total bytes attributed to this sample.\n    total: float\n\n    #: Execution stack at the point of allocation.\n    stack: typing.List[str]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"size\"] = self.size\n        json[\"total\"] = self.total\n        json[\"stack\"] = [i for i in self.stack]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SamplingProfileNode:\n        return cls(\n            size=float(json[\"size\"]),\n            total=float(json[\"total\"]),\n            stack=[str(i) for i in json[\"stack\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfileNode.size","title":"<code>size: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfileNode.stack","title":"<code>stack: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfileNode.total","title":"<code>total: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfileNode.__init__","title":"<code>__init__(size, total, stack)</code>","text":""},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfileNode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/memory.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SamplingProfileNode:\n    return cls(\n        size=float(json[\"size\"]),\n        total=float(json[\"total\"]),\n        stack=[str(i) for i in json[\"stack\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.SamplingProfileNode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"size\"] = self.size\n    json[\"total\"] = self.total\n    json[\"stack\"] = [i for i in self.stack]\n    return json\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.forcibly_purge_java_script_memory","title":"<code>forcibly_purge_java_script_memory()</code>","text":"<p>Simulate OomIntervention by purging V8 memory.</p> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def forcibly_purge_java_script_memory() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, None]\n):\n    \"\"\"\n    Simulate OomIntervention by purging V8 memory.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Memory.forciblyPurgeJavaScriptMemory\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.get_all_time_sampling_profile","title":"<code>get_all_time_sampling_profile()</code>","text":"<p>Retrieve native memory allocations profile collected since renderer process startup.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SamplingProfile]</code> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def get_all_time_sampling_profile() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, SamplingProfile]\n):\n    \"\"\"\n    Retrieve native memory allocations profile\n    collected since renderer process startup.\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Memory.getAllTimeSamplingProfile\",\n    }\n    json = yield cmd_dict\n    return SamplingProfile.from_json(json[\"profile\"])\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.get_browser_sampling_profile","title":"<code>get_browser_sampling_profile()</code>","text":"<p>Retrieve native memory allocations profile collected since browser process startup.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SamplingProfile]</code> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def get_browser_sampling_profile() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, SamplingProfile]\n):\n    \"\"\"\n    Retrieve native memory allocations profile\n    collected since browser process startup.\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Memory.getBrowserSamplingProfile\",\n    }\n    json = yield cmd_dict\n    return SamplingProfile.from_json(json[\"profile\"])\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.get_dom_counters","title":"<code>get_dom_counters()</code>","text":"<p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[int, int, int]]</code> <p>A tuple with the following items:  0. documents - 1. nodes - 2. jsEventListeners -</p> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def get_dom_counters() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[int, int, int]]\n):\n    \"\"\"\n\n\n    :returns: A tuple with the following items:\n\n        0. **documents** -\n        1. **nodes** -\n        2. **jsEventListeners** -\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Memory.getDOMCounters\",\n    }\n    json = yield cmd_dict\n    return (int(json[\"documents\"]), int(json[\"nodes\"]), int(json[\"jsEventListeners\"]))\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.get_sampling_profile","title":"<code>get_sampling_profile()</code>","text":"<p>Retrieve native memory allocations profile collected since last <code>startSampling</code> call.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SamplingProfile]</code> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def get_sampling_profile() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, SamplingProfile]\n):\n    \"\"\"\n    Retrieve native memory allocations profile collected since last\n    ``startSampling`` call.\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Memory.getSamplingProfile\",\n    }\n    json = yield cmd_dict\n    return SamplingProfile.from_json(json[\"profile\"])\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.prepare_for_leak_detection","title":"<code>prepare_for_leak_detection()</code>","text":"Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def prepare_for_leak_detection() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Memory.prepareForLeakDetection\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.set_pressure_notifications_suppressed","title":"<code>set_pressure_notifications_suppressed(suppressed)</code>","text":"<p>Enable/disable suppressing memory pressure notifications in all processes.</p> <p>Parameters:</p> Name Type Description Default <code>suppressed</code> <code>bool</code> <p>If true, memory pressure notifications will be suppressed.</p> required Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def set_pressure_notifications_suppressed(\n    suppressed: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enable/disable suppressing memory pressure notifications in all processes.\n\n    :param suppressed: If true, memory pressure notifications will be suppressed.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"suppressed\"] = suppressed\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Memory.setPressureNotificationsSuppressed\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.simulate_pressure_notification","title":"<code>simulate_pressure_notification(level)</code>","text":"<p>Simulate a memory pressure notification in all processes.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>PressureLevel</code> <p>Memory pressure level of the notification.</p> required Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def simulate_pressure_notification(\n    level: PressureLevel,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Simulate a memory pressure notification in all processes.\n\n    :param level: Memory pressure level of the notification.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"level\"] = level.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Memory.simulatePressureNotification\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.start_sampling","title":"<code>start_sampling(sampling_interval=None, suppress_randomness=None)</code>","text":"<p>Start collecting native memory profile.</p> <p>Parameters:</p> Name Type Description Default <code>sampling_interval</code> <code>Optional[int]</code> <p>(Optional) Average number of bytes between samples.</p> <code>None</code> <code>suppress_randomness</code> <code>Optional[bool]</code> <p>(Optional) Do not randomize intervals between samples.</p> <code>None</code> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def start_sampling(\n    sampling_interval: typing.Optional[int] = None,\n    suppress_randomness: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Start collecting native memory profile.\n\n    :param sampling_interval: *(Optional)* Average number of bytes between samples.\n    :param suppress_randomness: *(Optional)* Do not randomize intervals between samples.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if sampling_interval is not None:\n        params[\"samplingInterval\"] = sampling_interval\n    if suppress_randomness is not None:\n        params[\"suppressRandomness\"] = suppress_randomness\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Memory.startSampling\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/memory/#zendriver.cdp.memory.stop_sampling","title":"<code>stop_sampling()</code>","text":"<p>Stop collecting native memory profile.</p> Source code in <code>zendriver/cdp/memory.py</code> <pre><code>def stop_sampling() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Stop collecting native memory profile.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Memory.stopSampling\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/","title":"network","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage","title":"<code>AlternateProtocolUsage</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The reason why Chrome uses a specific transport protocol for HTTP semantics.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class AlternateProtocolUsage(enum.Enum):\n    \"\"\"\n    The reason why Chrome uses a specific transport protocol for HTTP semantics.\n    \"\"\"\n\n    ALTERNATIVE_JOB_WON_WITHOUT_RACE = \"alternativeJobWonWithoutRace\"\n    ALTERNATIVE_JOB_WON_RACE = \"alternativeJobWonRace\"\n    MAIN_JOB_WON_RACE = \"mainJobWonRace\"\n    MAPPING_MISSING = \"mappingMissing\"\n    BROKEN = \"broken\"\n    DNS_ALPN_H3_JOB_WON_WITHOUT_RACE = \"dnsAlpnH3JobWonWithoutRace\"\n    DNS_ALPN_H3_JOB_WON_RACE = \"dnsAlpnH3JobWonRace\"\n    UNSPECIFIED_REASON = \"unspecifiedReason\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AlternateProtocolUsage:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage.ALTERNATIVE_JOB_WON_RACE","title":"<code>ALTERNATIVE_JOB_WON_RACE = 'alternativeJobWonRace'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage.ALTERNATIVE_JOB_WON_WITHOUT_RACE","title":"<code>ALTERNATIVE_JOB_WON_WITHOUT_RACE = 'alternativeJobWonWithoutRace'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage.BROKEN","title":"<code>BROKEN = 'broken'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage.DNS_ALPN_H3_JOB_WON_RACE","title":"<code>DNS_ALPN_H3_JOB_WON_RACE = 'dnsAlpnH3JobWonRace'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage.DNS_ALPN_H3_JOB_WON_WITHOUT_RACE","title":"<code>DNS_ALPN_H3_JOB_WON_WITHOUT_RACE = 'dnsAlpnH3JobWonWithoutRace'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage.MAIN_JOB_WON_RACE","title":"<code>MAIN_JOB_WON_RACE = 'mainJobWonRace'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage.MAPPING_MISSING","title":"<code>MAPPING_MISSING = 'mappingMissing'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage.UNSPECIFIED_REASON","title":"<code>UNSPECIFIED_REASON = 'unspecifiedReason'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AlternateProtocolUsage:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AlternateProtocolUsage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AssociatedCookie","title":"<code>AssociatedCookie</code>  <code>dataclass</code>","text":"<p>A cookie associated with the request which may or may not be sent with it. Includes the cookies itself and reasons for blocking or exemption.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass AssociatedCookie:\n    \"\"\"\n    A cookie associated with the request which may or may not be sent with it.\n    Includes the cookies itself and reasons for blocking or exemption.\n    \"\"\"\n\n    #: The cookie object representing the cookie which was not sent.\n    cookie: Cookie\n\n    #: The reason(s) the cookie was blocked. If empty means the cookie is included.\n    blocked_reasons: typing.List[CookieBlockedReason]\n\n    #: The reason the cookie should have been blocked by 3PCD but is exempted. A cookie could\n    #: only have at most one exemption reason.\n    exemption_reason: typing.Optional[CookieExemptionReason] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"cookie\"] = self.cookie.to_json()\n        json[\"blockedReasons\"] = [i.to_json() for i in self.blocked_reasons]\n        if self.exemption_reason is not None:\n            json[\"exemptionReason\"] = self.exemption_reason.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AssociatedCookie:\n        return cls(\n            cookie=Cookie.from_json(json[\"cookie\"]),\n            blocked_reasons=[\n                CookieBlockedReason.from_json(i) for i in json[\"blockedReasons\"]\n            ],\n            exemption_reason=(\n                CookieExemptionReason.from_json(json[\"exemptionReason\"])\n                if json.get(\"exemptionReason\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AssociatedCookie.blocked_reasons","title":"<code>blocked_reasons: typing.List[CookieBlockedReason]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AssociatedCookie.cookie","title":"<code>cookie: Cookie</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AssociatedCookie.exemption_reason","title":"<code>exemption_reason: typing.Optional[CookieExemptionReason] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AssociatedCookie.__init__","title":"<code>__init__(cookie, blocked_reasons, exemption_reason=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AssociatedCookie.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AssociatedCookie:\n    return cls(\n        cookie=Cookie.from_json(json[\"cookie\"]),\n        blocked_reasons=[\n            CookieBlockedReason.from_json(i) for i in json[\"blockedReasons\"]\n        ],\n        exemption_reason=(\n            CookieExemptionReason.from_json(json[\"exemptionReason\"])\n            if json.get(\"exemptionReason\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AssociatedCookie.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"cookie\"] = self.cookie.to_json()\n    json[\"blockedReasons\"] = [i.to_json() for i in self.blocked_reasons]\n    if self.exemption_reason is not None:\n        json[\"exemptionReason\"] = self.exemption_reason.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallenge","title":"<code>AuthChallenge</code>  <code>dataclass</code>","text":"<p>Authorization challenge for HTTP status code 401 or 407.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass AuthChallenge:\n    \"\"\"\n    Authorization challenge for HTTP status code 401 or 407.\n    \"\"\"\n\n    #: Origin of the challenger.\n    origin: str\n\n    #: The authentication scheme used, such as basic or digest\n    scheme: str\n\n    #: The realm of the challenge. May be empty.\n    realm: str\n\n    #: Source of the authentication challenge.\n    source: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"origin\"] = self.origin\n        json[\"scheme\"] = self.scheme\n        json[\"realm\"] = self.realm\n        if self.source is not None:\n            json[\"source\"] = self.source\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AuthChallenge:\n        return cls(\n            origin=str(json[\"origin\"]),\n            scheme=str(json[\"scheme\"]),\n            realm=str(json[\"realm\"]),\n            source=(\n                str(json[\"source\"]) if json.get(\"source\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallenge.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallenge.realm","title":"<code>realm: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallenge.scheme","title":"<code>scheme: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallenge.source","title":"<code>source: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallenge.__init__","title":"<code>__init__(origin, scheme, realm, source=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallenge.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AuthChallenge:\n    return cls(\n        origin=str(json[\"origin\"]),\n        scheme=str(json[\"scheme\"]),\n        realm=str(json[\"realm\"]),\n        source=(\n            str(json[\"source\"]) if json.get(\"source\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallenge.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"origin\"] = self.origin\n    json[\"scheme\"] = self.scheme\n    json[\"realm\"] = self.realm\n    if self.source is not None:\n        json[\"source\"] = self.source\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallengeResponse","title":"<code>AuthChallengeResponse</code>  <code>dataclass</code>","text":"<p>Response to an AuthChallenge.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass AuthChallengeResponse:\n    \"\"\"\n    Response to an AuthChallenge.\n    \"\"\"\n\n    #: The decision on what to do in response to the authorization challenge.  Default means\n    #: deferring to the default behavior of the net stack, which will likely either the Cancel\n    #: authentication or display a popup dialog box.\n    response: str\n\n    #: The username to provide, possibly empty. Should only be set if response is\n    #: ProvideCredentials.\n    username: typing.Optional[str] = None\n\n    #: The password to provide, possibly empty. Should only be set if response is\n    #: ProvideCredentials.\n    password: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"response\"] = self.response\n        if self.username is not None:\n            json[\"username\"] = self.username\n        if self.password is not None:\n            json[\"password\"] = self.password\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AuthChallengeResponse:\n        return cls(\n            response=str(json[\"response\"]),\n            username=(\n                str(json[\"username\"])\n                if json.get(\"username\", None) is not None\n                else None\n            ),\n            password=(\n                str(json[\"password\"])\n                if json.get(\"password\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallengeResponse.password","title":"<code>password: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallengeResponse.response","title":"<code>response: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallengeResponse.username","title":"<code>username: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallengeResponse.__init__","title":"<code>__init__(response, username=None, password=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallengeResponse.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AuthChallengeResponse:\n    return cls(\n        response=str(json[\"response\"]),\n        username=(\n            str(json[\"username\"])\n            if json.get(\"username\", None) is not None\n            else None\n        ),\n        password=(\n            str(json[\"password\"])\n            if json.get(\"password\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.AuthChallengeResponse.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"response\"] = self.response\n    if self.username is not None:\n        json[\"username\"] = self.username\n    if self.password is not None:\n        json[\"password\"] = self.password\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason","title":"<code>BlockedReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The reason why request was blocked.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class BlockedReason(enum.Enum):\n    \"\"\"\n    The reason why request was blocked.\n    \"\"\"\n\n    OTHER = \"other\"\n    CSP = \"csp\"\n    MIXED_CONTENT = \"mixed-content\"\n    ORIGIN = \"origin\"\n    INSPECTOR = \"inspector\"\n    SUBRESOURCE_FILTER = \"subresource-filter\"\n    CONTENT_TYPE = \"content-type\"\n    COEP_FRAME_RESOURCE_NEEDS_COEP_HEADER = \"coep-frame-resource-needs-coep-header\"\n    COOP_SANDBOXED_IFRAME_CANNOT_NAVIGATE_TO_COOP_PAGE = (\n        \"coop-sandboxed-iframe-cannot-navigate-to-coop-page\"\n    )\n    CORP_NOT_SAME_ORIGIN = \"corp-not-same-origin\"\n    CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP = (\n        \"corp-not-same-origin-after-defaulted-to-same-origin-by-coep\"\n    )\n    CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_DIP = (\n        \"corp-not-same-origin-after-defaulted-to-same-origin-by-dip\"\n    )\n    CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP_AND_DIP = (\n        \"corp-not-same-origin-after-defaulted-to-same-origin-by-coep-and-dip\"\n    )\n    CORP_NOT_SAME_SITE = \"corp-not-same-site\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; BlockedReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.COEP_FRAME_RESOURCE_NEEDS_COEP_HEADER","title":"<code>COEP_FRAME_RESOURCE_NEEDS_COEP_HEADER = 'coep-frame-resource-needs-coep-header'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.CONTENT_TYPE","title":"<code>CONTENT_TYPE = 'content-type'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.COOP_SANDBOXED_IFRAME_CANNOT_NAVIGATE_TO_COOP_PAGE","title":"<code>COOP_SANDBOXED_IFRAME_CANNOT_NAVIGATE_TO_COOP_PAGE = 'coop-sandboxed-iframe-cannot-navigate-to-coop-page'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.CORP_NOT_SAME_ORIGIN","title":"<code>CORP_NOT_SAME_ORIGIN = 'corp-not-same-origin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP","title":"<code>CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP = 'corp-not-same-origin-after-defaulted-to-same-origin-by-coep'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP_AND_DIP","title":"<code>CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_COEP_AND_DIP = 'corp-not-same-origin-after-defaulted-to-same-origin-by-coep-and-dip'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_DIP","title":"<code>CORP_NOT_SAME_ORIGIN_AFTER_DEFAULTED_TO_SAME_ORIGIN_BY_DIP = 'corp-not-same-origin-after-defaulted-to-same-origin-by-dip'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.CORP_NOT_SAME_SITE","title":"<code>CORP_NOT_SAME_SITE = 'corp-not-same-site'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.CSP","title":"<code>CSP = 'csp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.INSPECTOR","title":"<code>INSPECTOR = 'inspector'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.MIXED_CONTENT","title":"<code>MIXED_CONTENT = 'mixed-content'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.ORIGIN","title":"<code>ORIGIN = 'origin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.OTHER","title":"<code>OTHER = 'other'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.SUBRESOURCE_FILTER","title":"<code>SUBRESOURCE_FILTER = 'subresource-filter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; BlockedReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedSetCookieWithReason","title":"<code>BlockedSetCookieWithReason</code>  <code>dataclass</code>","text":"<p>A cookie which was not stored from a response with the corresponding reason.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass BlockedSetCookieWithReason:\n    \"\"\"\n    A cookie which was not stored from a response with the corresponding reason.\n    \"\"\"\n\n    #: The reason(s) this cookie was blocked.\n    blocked_reasons: typing.List[SetCookieBlockedReason]\n\n    #: The string representing this individual cookie as it would appear in the header.\n    #: This is not the entire \"cookie\" or \"set-cookie\" header which could have multiple cookies.\n    cookie_line: str\n\n    #: The cookie object which represents the cookie which was not stored. It is optional because\n    #: sometimes complete cookie information is not available, such as in the case of parsing\n    #: errors.\n    cookie: typing.Optional[Cookie] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"blockedReasons\"] = [i.to_json() for i in self.blocked_reasons]\n        json[\"cookieLine\"] = self.cookie_line\n        if self.cookie is not None:\n            json[\"cookie\"] = self.cookie.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BlockedSetCookieWithReason:\n        return cls(\n            blocked_reasons=[\n                SetCookieBlockedReason.from_json(i) for i in json[\"blockedReasons\"]\n            ],\n            cookie_line=str(json[\"cookieLine\"]),\n            cookie=(\n                Cookie.from_json(json[\"cookie\"])\n                if json.get(\"cookie\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedSetCookieWithReason.blocked_reasons","title":"<code>blocked_reasons: typing.List[SetCookieBlockedReason]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedSetCookieWithReason.cookie","title":"<code>cookie: typing.Optional[Cookie] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedSetCookieWithReason.cookie_line","title":"<code>cookie_line: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedSetCookieWithReason.__init__","title":"<code>__init__(blocked_reasons, cookie_line, cookie=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedSetCookieWithReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BlockedSetCookieWithReason:\n    return cls(\n        blocked_reasons=[\n            SetCookieBlockedReason.from_json(i) for i in json[\"blockedReasons\"]\n        ],\n        cookie_line=str(json[\"cookieLine\"]),\n        cookie=(\n            Cookie.from_json(json[\"cookie\"])\n            if json.get(\"cookie\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.BlockedSetCookieWithReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"blockedReasons\"] = [i.to_json() for i in self.blocked_reasons]\n    json[\"cookieLine\"] = self.cookie_line\n    if self.cookie is not None:\n        json[\"cookie\"] = self.cookie.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CachedResource","title":"<code>CachedResource</code>  <code>dataclass</code>","text":"<p>Information about the cached resource.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass CachedResource:\n    \"\"\"\n    Information about the cached resource.\n    \"\"\"\n\n    #: Resource URL. This is the url of the original network request.\n    url: str\n\n    #: Type of this resource.\n    type_: ResourceType\n\n    #: Cached response body size.\n    body_size: float\n\n    #: Cached response data.\n    response: typing.Optional[Response] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        json[\"type\"] = self.type_.to_json()\n        json[\"bodySize\"] = self.body_size\n        if self.response is not None:\n            json[\"response\"] = self.response.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CachedResource:\n        return cls(\n            url=str(json[\"url\"]),\n            type_=ResourceType.from_json(json[\"type\"]),\n            body_size=float(json[\"bodySize\"]),\n            response=(\n                Response.from_json(json[\"response\"])\n                if json.get(\"response\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CachedResource.body_size","title":"<code>body_size: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CachedResource.response","title":"<code>response: typing.Optional[Response] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CachedResource.type_","title":"<code>type_: ResourceType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CachedResource.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CachedResource.__init__","title":"<code>__init__(url, type_, body_size, response=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CachedResource.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CachedResource:\n    return cls(\n        url=str(json[\"url\"]),\n        type_=ResourceType.from_json(json[\"type\"]),\n        body_size=float(json[\"bodySize\"]),\n        response=(\n            Response.from_json(json[\"response\"])\n            if json.get(\"response\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CachedResource.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    json[\"type\"] = self.type_.to_json()\n    json[\"bodySize\"] = self.body_size\n    if self.response is not None:\n        json[\"response\"] = self.response.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CertificateTransparencyCompliance","title":"<code>CertificateTransparencyCompliance</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Whether the request complied with Certificate Transparency policy.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class CertificateTransparencyCompliance(enum.Enum):\n    \"\"\"\n    Whether the request complied with Certificate Transparency policy.\n    \"\"\"\n\n    UNKNOWN = \"unknown\"\n    NOT_COMPLIANT = \"not-compliant\"\n    COMPLIANT = \"compliant\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CertificateTransparencyCompliance:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CertificateTransparencyCompliance.COMPLIANT","title":"<code>COMPLIANT = 'compliant'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CertificateTransparencyCompliance.NOT_COMPLIANT","title":"<code>NOT_COMPLIANT = 'not-compliant'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CertificateTransparencyCompliance.UNKNOWN","title":"<code>UNKNOWN = 'unknown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CertificateTransparencyCompliance.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CertificateTransparencyCompliance:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CertificateTransparencyCompliance.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ClientSecurityState","title":"<code>ClientSecurityState</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass ClientSecurityState:\n    initiator_is_secure_context: bool\n\n    initiator_ip_address_space: IPAddressSpace\n\n    private_network_request_policy: PrivateNetworkRequestPolicy\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"initiatorIsSecureContext\"] = self.initiator_is_secure_context\n        json[\"initiatorIPAddressSpace\"] = self.initiator_ip_address_space.to_json()\n        json[\"privateNetworkRequestPolicy\"] = (\n            self.private_network_request_policy.to_json()\n        )\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ClientSecurityState:\n        return cls(\n            initiator_is_secure_context=bool(json[\"initiatorIsSecureContext\"]),\n            initiator_ip_address_space=IPAddressSpace.from_json(\n                json[\"initiatorIPAddressSpace\"]\n            ),\n            private_network_request_policy=PrivateNetworkRequestPolicy.from_json(\n                json[\"privateNetworkRequestPolicy\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ClientSecurityState.initiator_ip_address_space","title":"<code>initiator_ip_address_space: IPAddressSpace</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ClientSecurityState.initiator_is_secure_context","title":"<code>initiator_is_secure_context: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ClientSecurityState.private_network_request_policy","title":"<code>private_network_request_policy: PrivateNetworkRequestPolicy</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ClientSecurityState.__init__","title":"<code>__init__(initiator_is_secure_context, initiator_ip_address_space, private_network_request_policy)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ClientSecurityState.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ClientSecurityState:\n    return cls(\n        initiator_is_secure_context=bool(json[\"initiatorIsSecureContext\"]),\n        initiator_ip_address_space=IPAddressSpace.from_json(\n            json[\"initiatorIPAddressSpace\"]\n        ),\n        private_network_request_policy=PrivateNetworkRequestPolicy.from_json(\n            json[\"privateNetworkRequestPolicy\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ClientSecurityState.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"initiatorIsSecureContext\"] = self.initiator_is_secure_context\n    json[\"initiatorIPAddressSpace\"] = self.initiator_ip_address_space.to_json()\n    json[\"privateNetworkRequestPolicy\"] = (\n        self.private_network_request_policy.to_json()\n    )\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectTiming","title":"<code>ConnectTiming</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass ConnectTiming:\n    #: Timing's requestTime is a baseline in seconds, while the other numbers are ticks in\n    #: milliseconds relatively to this requestTime. Matches ResourceTiming's requestTime for\n    #: the same request (but not for redirected requests).\n    request_time: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"requestTime\"] = self.request_time\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ConnectTiming:\n        return cls(\n            request_time=float(json[\"requestTime\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectTiming.request_time","title":"<code>request_time: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectTiming.__init__","title":"<code>__init__(request_time)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectTiming.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ConnectTiming:\n    return cls(\n        request_time=float(json[\"requestTime\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectTiming.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"requestTime\"] = self.request_time\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType","title":"<code>ConnectionType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The underlying connection technology that the browser is supposedly using.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class ConnectionType(enum.Enum):\n    \"\"\"\n    The underlying connection technology that the browser is supposedly using.\n    \"\"\"\n\n    NONE = \"none\"\n    CELLULAR2G = \"cellular2g\"\n    CELLULAR3G = \"cellular3g\"\n    CELLULAR4G = \"cellular4g\"\n    BLUETOOTH = \"bluetooth\"\n    ETHERNET = \"ethernet\"\n    WIFI = \"wifi\"\n    WIMAX = \"wimax\"\n    OTHER = \"other\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ConnectionType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.BLUETOOTH","title":"<code>BLUETOOTH = 'bluetooth'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.CELLULAR2G","title":"<code>CELLULAR2G = 'cellular2g'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.CELLULAR3G","title":"<code>CELLULAR3G = 'cellular3g'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.CELLULAR4G","title":"<code>CELLULAR4G = 'cellular4g'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.ETHERNET","title":"<code>ETHERNET = 'ethernet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.NONE","title":"<code>NONE = 'none'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.OTHER","title":"<code>OTHER = 'other'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.WIFI","title":"<code>WIFI = 'wifi'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.WIMAX","title":"<code>WIMAX = 'wimax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ConnectionType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ConnectionType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentEncoding","title":"<code>ContentEncoding</code>","text":"<p>               Bases: <code>Enum</code></p> <p>List of content encodings supported by the backend.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class ContentEncoding(enum.Enum):\n    \"\"\"\n    List of content encodings supported by the backend.\n    \"\"\"\n\n    DEFLATE = \"deflate\"\n    GZIP = \"gzip\"\n    BR = \"br\"\n    ZSTD = \"zstd\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ContentEncoding:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentEncoding.BR","title":"<code>BR = 'br'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentEncoding.DEFLATE","title":"<code>DEFLATE = 'deflate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentEncoding.GZIP","title":"<code>GZIP = 'gzip'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentEncoding.ZSTD","title":"<code>ZSTD = 'zstd'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentEncoding.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ContentEncoding:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentEncoding.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicySource","title":"<code>ContentSecurityPolicySource</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class ContentSecurityPolicySource(enum.Enum):\n    HTTP = \"HTTP\"\n    META = \"Meta\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ContentSecurityPolicySource:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicySource.HTTP","title":"<code>HTTP = 'HTTP'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicySource.META","title":"<code>META = 'Meta'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicySource.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ContentSecurityPolicySource:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicySource.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicyStatus","title":"<code>ContentSecurityPolicyStatus</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass ContentSecurityPolicyStatus:\n    effective_directives: str\n\n    is_enforced: bool\n\n    source: ContentSecurityPolicySource\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"effectiveDirectives\"] = self.effective_directives\n        json[\"isEnforced\"] = self.is_enforced\n        json[\"source\"] = self.source.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ContentSecurityPolicyStatus:\n        return cls(\n            effective_directives=str(json[\"effectiveDirectives\"]),\n            is_enforced=bool(json[\"isEnforced\"]),\n            source=ContentSecurityPolicySource.from_json(json[\"source\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicyStatus.effective_directives","title":"<code>effective_directives: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicyStatus.is_enforced","title":"<code>is_enforced: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicyStatus.source","title":"<code>source: ContentSecurityPolicySource</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicyStatus.__init__","title":"<code>__init__(effective_directives, is_enforced, source)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicyStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ContentSecurityPolicyStatus:\n    return cls(\n        effective_directives=str(json[\"effectiveDirectives\"]),\n        is_enforced=bool(json[\"isEnforced\"]),\n        source=ContentSecurityPolicySource.from_json(json[\"source\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ContentSecurityPolicyStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"effectiveDirectives\"] = self.effective_directives\n    json[\"isEnforced\"] = self.is_enforced\n    json[\"source\"] = self.source.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie","title":"<code>Cookie</code>  <code>dataclass</code>","text":"<p>Cookie object</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass Cookie:\n    \"\"\"\n    Cookie object\n    \"\"\"\n\n    #: Cookie name.\n    name: str\n\n    #: Cookie value.\n    value: str\n\n    #: Cookie domain.\n    domain: str\n\n    #: Cookie path.\n    path: str\n\n    #: Cookie size.\n    size: int\n\n    #: True if cookie is http-only.\n    http_only: bool\n\n    #: True if cookie is secure.\n    secure: bool\n\n    #: True in case of session cookie.\n    session: bool\n\n    #: Cookie Priority\n    priority: CookiePriority\n\n    #: True if cookie is SameParty.\n    same_party: bool\n\n    #: Cookie source scheme type.\n    source_scheme: CookieSourceScheme\n\n    #: Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.\n    #: An unspecified port value allows protocol clients to emulate legacy cookie scope for the port.\n    #: This is a temporary ability and it will be removed in the future.\n    source_port: int\n\n    #: Cookie expiration date as the number of seconds since the UNIX epoch.\n    expires: typing.Optional[float] = None\n\n    #: Cookie SameSite type.\n    same_site: typing.Optional[CookieSameSite] = None\n\n    #: Cookie partition key.\n    partition_key: typing.Optional[CookiePartitionKey] = None\n\n    #: True if cookie partition key is opaque.\n    partition_key_opaque: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        json[\"domain\"] = self.domain\n        json[\"path\"] = self.path\n        json[\"size\"] = self.size\n        json[\"httpOnly\"] = self.http_only\n        json[\"secure\"] = self.secure\n        json[\"session\"] = self.session\n        json[\"priority\"] = self.priority.to_json()\n        json[\"sameParty\"] = self.same_party\n        json[\"sourceScheme\"] = self.source_scheme.to_json()\n        json[\"sourcePort\"] = self.source_port\n        if self.expires is not None:\n            json[\"expires\"] = self.expires\n        if self.same_site is not None:\n            json[\"sameSite\"] = self.same_site.to_json()\n        if self.partition_key is not None:\n            json[\"partitionKey\"] = self.partition_key.to_json()\n        if self.partition_key_opaque is not None:\n            json[\"partitionKeyOpaque\"] = self.partition_key_opaque\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Cookie:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n            domain=str(json[\"domain\"]),\n            path=str(json[\"path\"]),\n            size=int(json[\"size\"]),\n            http_only=bool(json[\"httpOnly\"]),\n            secure=bool(json[\"secure\"]),\n            session=bool(json[\"session\"]),\n            priority=CookiePriority.from_json(json[\"priority\"]),\n            same_party=bool(json[\"sameParty\"]),\n            source_scheme=CookieSourceScheme.from_json(json[\"sourceScheme\"]),\n            source_port=int(json[\"sourcePort\"]),\n            expires=(\n                float(json[\"expires\"])\n                if json.get(\"expires\", None) is not None\n                else None\n            ),\n            same_site=(\n                CookieSameSite.from_json(json[\"sameSite\"])\n                if json.get(\"sameSite\", None) is not None\n                else None\n            ),\n            partition_key=(\n                CookiePartitionKey.from_json(json[\"partitionKey\"])\n                if json.get(\"partitionKey\", None) is not None\n                else None\n            ),\n            partition_key_opaque=(\n                bool(json[\"partitionKeyOpaque\"])\n                if json.get(\"partitionKeyOpaque\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.domain","title":"<code>domain: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.expires","title":"<code>expires: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.http_only","title":"<code>http_only: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.partition_key","title":"<code>partition_key: typing.Optional[CookiePartitionKey] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.partition_key_opaque","title":"<code>partition_key_opaque: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.path","title":"<code>path: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.priority","title":"<code>priority: CookiePriority</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.same_party","title":"<code>same_party: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.same_site","title":"<code>same_site: typing.Optional[CookieSameSite] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.secure","title":"<code>secure: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.session","title":"<code>session: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.size","title":"<code>size: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.source_port","title":"<code>source_port: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.source_scheme","title":"<code>source_scheme: CookieSourceScheme</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.__init__","title":"<code>__init__(name, value, domain, path, size, http_only, secure, session, priority, same_party, source_scheme, source_port, expires=None, same_site=None, partition_key=None, partition_key_opaque=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Cookie:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n        domain=str(json[\"domain\"]),\n        path=str(json[\"path\"]),\n        size=int(json[\"size\"]),\n        http_only=bool(json[\"httpOnly\"]),\n        secure=bool(json[\"secure\"]),\n        session=bool(json[\"session\"]),\n        priority=CookiePriority.from_json(json[\"priority\"]),\n        same_party=bool(json[\"sameParty\"]),\n        source_scheme=CookieSourceScheme.from_json(json[\"sourceScheme\"]),\n        source_port=int(json[\"sourcePort\"]),\n        expires=(\n            float(json[\"expires\"])\n            if json.get(\"expires\", None) is not None\n            else None\n        ),\n        same_site=(\n            CookieSameSite.from_json(json[\"sameSite\"])\n            if json.get(\"sameSite\", None) is not None\n            else None\n        ),\n        partition_key=(\n            CookiePartitionKey.from_json(json[\"partitionKey\"])\n            if json.get(\"partitionKey\", None) is not None\n            else None\n        ),\n        partition_key_opaque=(\n            bool(json[\"partitionKeyOpaque\"])\n            if json.get(\"partitionKeyOpaque\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Cookie.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    json[\"domain\"] = self.domain\n    json[\"path\"] = self.path\n    json[\"size\"] = self.size\n    json[\"httpOnly\"] = self.http_only\n    json[\"secure\"] = self.secure\n    json[\"session\"] = self.session\n    json[\"priority\"] = self.priority.to_json()\n    json[\"sameParty\"] = self.same_party\n    json[\"sourceScheme\"] = self.source_scheme.to_json()\n    json[\"sourcePort\"] = self.source_port\n    if self.expires is not None:\n        json[\"expires\"] = self.expires\n    if self.same_site is not None:\n        json[\"sameSite\"] = self.same_site.to_json()\n    if self.partition_key is not None:\n        json[\"partitionKey\"] = self.partition_key.to_json()\n    if self.partition_key_opaque is not None:\n        json[\"partitionKeyOpaque\"] = self.partition_key_opaque\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason","title":"<code>CookieBlockedReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Types of reasons why a cookie may not be sent with a request.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class CookieBlockedReason(enum.Enum):\n    \"\"\"\n    Types of reasons why a cookie may not be sent with a request.\n    \"\"\"\n\n    SECURE_ONLY = \"SecureOnly\"\n    NOT_ON_PATH = \"NotOnPath\"\n    DOMAIN_MISMATCH = \"DomainMismatch\"\n    SAME_SITE_STRICT = \"SameSiteStrict\"\n    SAME_SITE_LAX = \"SameSiteLax\"\n    SAME_SITE_UNSPECIFIED_TREATED_AS_LAX = \"SameSiteUnspecifiedTreatedAsLax\"\n    SAME_SITE_NONE_INSECURE = \"SameSiteNoneInsecure\"\n    USER_PREFERENCES = \"UserPreferences\"\n    THIRD_PARTY_PHASEOUT = \"ThirdPartyPhaseout\"\n    THIRD_PARTY_BLOCKED_IN_FIRST_PARTY_SET = \"ThirdPartyBlockedInFirstPartySet\"\n    UNKNOWN_ERROR = \"UnknownError\"\n    SCHEMEFUL_SAME_SITE_STRICT = \"SchemefulSameSiteStrict\"\n    SCHEMEFUL_SAME_SITE_LAX = \"SchemefulSameSiteLax\"\n    SCHEMEFUL_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX = (\n        \"SchemefulSameSiteUnspecifiedTreatedAsLax\"\n    )\n    SAME_PARTY_FROM_CROSS_PARTY_CONTEXT = \"SamePartyFromCrossPartyContext\"\n    NAME_VALUE_PAIR_EXCEEDS_MAX_SIZE = \"NameValuePairExceedsMaxSize\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CookieBlockedReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.DOMAIN_MISMATCH","title":"<code>DOMAIN_MISMATCH = 'DomainMismatch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.NAME_VALUE_PAIR_EXCEEDS_MAX_SIZE","title":"<code>NAME_VALUE_PAIR_EXCEEDS_MAX_SIZE = 'NameValuePairExceedsMaxSize'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.NOT_ON_PATH","title":"<code>NOT_ON_PATH = 'NotOnPath'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.SAME_PARTY_FROM_CROSS_PARTY_CONTEXT","title":"<code>SAME_PARTY_FROM_CROSS_PARTY_CONTEXT = 'SamePartyFromCrossPartyContext'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.SAME_SITE_LAX","title":"<code>SAME_SITE_LAX = 'SameSiteLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.SAME_SITE_NONE_INSECURE","title":"<code>SAME_SITE_NONE_INSECURE = 'SameSiteNoneInsecure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.SAME_SITE_STRICT","title":"<code>SAME_SITE_STRICT = 'SameSiteStrict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.SAME_SITE_UNSPECIFIED_TREATED_AS_LAX","title":"<code>SAME_SITE_UNSPECIFIED_TREATED_AS_LAX = 'SameSiteUnspecifiedTreatedAsLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.SCHEMEFUL_SAME_SITE_LAX","title":"<code>SCHEMEFUL_SAME_SITE_LAX = 'SchemefulSameSiteLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.SCHEMEFUL_SAME_SITE_STRICT","title":"<code>SCHEMEFUL_SAME_SITE_STRICT = 'SchemefulSameSiteStrict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.SCHEMEFUL_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX","title":"<code>SCHEMEFUL_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX = 'SchemefulSameSiteUnspecifiedTreatedAsLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.SECURE_ONLY","title":"<code>SECURE_ONLY = 'SecureOnly'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.THIRD_PARTY_BLOCKED_IN_FIRST_PARTY_SET","title":"<code>THIRD_PARTY_BLOCKED_IN_FIRST_PARTY_SET = 'ThirdPartyBlockedInFirstPartySet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.THIRD_PARTY_PHASEOUT","title":"<code>THIRD_PARTY_PHASEOUT = 'ThirdPartyPhaseout'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.UNKNOWN_ERROR","title":"<code>UNKNOWN_ERROR = 'UnknownError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.USER_PREFERENCES","title":"<code>USER_PREFERENCES = 'UserPreferences'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CookieBlockedReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieBlockedReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason","title":"<code>CookieExemptionReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Types of reasons why a cookie should have been blocked by 3PCD but is exempted for the request.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class CookieExemptionReason(enum.Enum):\n    \"\"\"\n    Types of reasons why a cookie should have been blocked by 3PCD but is exempted for the request.\n    \"\"\"\n\n    NONE = \"None\"\n    USER_SETTING = \"UserSetting\"\n    TPCD_METADATA = \"TPCDMetadata\"\n    TPCD_DEPRECATION_TRIAL = \"TPCDDeprecationTrial\"\n    TPCD_HEURISTICS = \"TPCDHeuristics\"\n    ENTERPRISE_POLICY = \"EnterprisePolicy\"\n    STORAGE_ACCESS = \"StorageAccess\"\n    TOP_LEVEL_STORAGE_ACCESS = \"TopLevelStorageAccess\"\n    CORS_OPT_IN = \"CorsOptIn\"\n    SCHEME = \"Scheme\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CookieExemptionReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.CORS_OPT_IN","title":"<code>CORS_OPT_IN = 'CorsOptIn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.ENTERPRISE_POLICY","title":"<code>ENTERPRISE_POLICY = 'EnterprisePolicy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.NONE","title":"<code>NONE = 'None'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.SCHEME","title":"<code>SCHEME = 'Scheme'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.STORAGE_ACCESS","title":"<code>STORAGE_ACCESS = 'StorageAccess'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.TOP_LEVEL_STORAGE_ACCESS","title":"<code>TOP_LEVEL_STORAGE_ACCESS = 'TopLevelStorageAccess'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.TPCD_DEPRECATION_TRIAL","title":"<code>TPCD_DEPRECATION_TRIAL = 'TPCDDeprecationTrial'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.TPCD_HEURISTICS","title":"<code>TPCD_HEURISTICS = 'TPCDHeuristics'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.TPCD_METADATA","title":"<code>TPCD_METADATA = 'TPCDMetadata'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.USER_SETTING","title":"<code>USER_SETTING = 'UserSetting'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CookieExemptionReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieExemptionReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam","title":"<code>CookieParam</code>  <code>dataclass</code>","text":"<p>Cookie parameter object</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass CookieParam:\n    \"\"\"\n    Cookie parameter object\n    \"\"\"\n\n    #: Cookie name.\n    name: str\n\n    #: Cookie value.\n    value: str\n\n    #: The request-URI to associate with the setting of the cookie. This value can affect the\n    #: default domain, path, source port, and source scheme values of the created cookie.\n    url: typing.Optional[str] = None\n\n    #: Cookie domain.\n    domain: typing.Optional[str] = None\n\n    #: Cookie path.\n    path: typing.Optional[str] = None\n\n    #: True if cookie is secure.\n    secure: typing.Optional[bool] = None\n\n    #: True if cookie is http-only.\n    http_only: typing.Optional[bool] = None\n\n    #: Cookie SameSite type.\n    same_site: typing.Optional[CookieSameSite] = None\n\n    #: Cookie expiration date, session cookie if not set\n    expires: typing.Optional[TimeSinceEpoch] = None\n\n    #: Cookie Priority.\n    priority: typing.Optional[CookiePriority] = None\n\n    #: True if cookie is SameParty.\n    same_party: typing.Optional[bool] = None\n\n    #: Cookie source scheme type.\n    source_scheme: typing.Optional[CookieSourceScheme] = None\n\n    #: Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port.\n    #: An unspecified port value allows protocol clients to emulate legacy cookie scope for the port.\n    #: This is a temporary ability and it will be removed in the future.\n    source_port: typing.Optional[int] = None\n\n    #: Cookie partition key. If not set, the cookie will be set as not partitioned.\n    partition_key: typing.Optional[CookiePartitionKey] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        if self.url is not None:\n            json[\"url\"] = self.url\n        if self.domain is not None:\n            json[\"domain\"] = self.domain\n        if self.path is not None:\n            json[\"path\"] = self.path\n        if self.secure is not None:\n            json[\"secure\"] = self.secure\n        if self.http_only is not None:\n            json[\"httpOnly\"] = self.http_only\n        if self.same_site is not None:\n            json[\"sameSite\"] = self.same_site.to_json()\n        if self.expires is not None:\n            json[\"expires\"] = self.expires.to_json()\n        if self.priority is not None:\n            json[\"priority\"] = self.priority.to_json()\n        if self.same_party is not None:\n            json[\"sameParty\"] = self.same_party\n        if self.source_scheme is not None:\n            json[\"sourceScheme\"] = self.source_scheme.to_json()\n        if self.source_port is not None:\n            json[\"sourcePort\"] = self.source_port\n        if self.partition_key is not None:\n            json[\"partitionKey\"] = self.partition_key.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CookieParam:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n            url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n            domain=(\n                str(json[\"domain\"]) if json.get(\"domain\", None) is not None else None\n            ),\n            path=str(json[\"path\"]) if json.get(\"path\", None) is not None else None,\n            secure=(\n                bool(json[\"secure\"]) if json.get(\"secure\", None) is not None else None\n            ),\n            http_only=(\n                bool(json[\"httpOnly\"])\n                if json.get(\"httpOnly\", None) is not None\n                else None\n            ),\n            same_site=(\n                CookieSameSite.from_json(json[\"sameSite\"])\n                if json.get(\"sameSite\", None) is not None\n                else None\n            ),\n            expires=(\n                TimeSinceEpoch.from_json(json[\"expires\"])\n                if json.get(\"expires\", None) is not None\n                else None\n            ),\n            priority=(\n                CookiePriority.from_json(json[\"priority\"])\n                if json.get(\"priority\", None) is not None\n                else None\n            ),\n            same_party=(\n                bool(json[\"sameParty\"])\n                if json.get(\"sameParty\", None) is not None\n                else None\n            ),\n            source_scheme=(\n                CookieSourceScheme.from_json(json[\"sourceScheme\"])\n                if json.get(\"sourceScheme\", None) is not None\n                else None\n            ),\n            source_port=(\n                int(json[\"sourcePort\"])\n                if json.get(\"sourcePort\", None) is not None\n                else None\n            ),\n            partition_key=(\n                CookiePartitionKey.from_json(json[\"partitionKey\"])\n                if json.get(\"partitionKey\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.domain","title":"<code>domain: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.expires","title":"<code>expires: typing.Optional[TimeSinceEpoch] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.http_only","title":"<code>http_only: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.partition_key","title":"<code>partition_key: typing.Optional[CookiePartitionKey] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.path","title":"<code>path: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.priority","title":"<code>priority: typing.Optional[CookiePriority] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.same_party","title":"<code>same_party: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.same_site","title":"<code>same_site: typing.Optional[CookieSameSite] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.secure","title":"<code>secure: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.source_port","title":"<code>source_port: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.source_scheme","title":"<code>source_scheme: typing.Optional[CookieSourceScheme] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.url","title":"<code>url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.__init__","title":"<code>__init__(name, value, url=None, domain=None, path=None, secure=None, http_only=None, same_site=None, expires=None, priority=None, same_party=None, source_scheme=None, source_port=None, partition_key=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CookieParam:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n        url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n        domain=(\n            str(json[\"domain\"]) if json.get(\"domain\", None) is not None else None\n        ),\n        path=str(json[\"path\"]) if json.get(\"path\", None) is not None else None,\n        secure=(\n            bool(json[\"secure\"]) if json.get(\"secure\", None) is not None else None\n        ),\n        http_only=(\n            bool(json[\"httpOnly\"])\n            if json.get(\"httpOnly\", None) is not None\n            else None\n        ),\n        same_site=(\n            CookieSameSite.from_json(json[\"sameSite\"])\n            if json.get(\"sameSite\", None) is not None\n            else None\n        ),\n        expires=(\n            TimeSinceEpoch.from_json(json[\"expires\"])\n            if json.get(\"expires\", None) is not None\n            else None\n        ),\n        priority=(\n            CookiePriority.from_json(json[\"priority\"])\n            if json.get(\"priority\", None) is not None\n            else None\n        ),\n        same_party=(\n            bool(json[\"sameParty\"])\n            if json.get(\"sameParty\", None) is not None\n            else None\n        ),\n        source_scheme=(\n            CookieSourceScheme.from_json(json[\"sourceScheme\"])\n            if json.get(\"sourceScheme\", None) is not None\n            else None\n        ),\n        source_port=(\n            int(json[\"sourcePort\"])\n            if json.get(\"sourcePort\", None) is not None\n            else None\n        ),\n        partition_key=(\n            CookiePartitionKey.from_json(json[\"partitionKey\"])\n            if json.get(\"partitionKey\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieParam.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    if self.url is not None:\n        json[\"url\"] = self.url\n    if self.domain is not None:\n        json[\"domain\"] = self.domain\n    if self.path is not None:\n        json[\"path\"] = self.path\n    if self.secure is not None:\n        json[\"secure\"] = self.secure\n    if self.http_only is not None:\n        json[\"httpOnly\"] = self.http_only\n    if self.same_site is not None:\n        json[\"sameSite\"] = self.same_site.to_json()\n    if self.expires is not None:\n        json[\"expires\"] = self.expires.to_json()\n    if self.priority is not None:\n        json[\"priority\"] = self.priority.to_json()\n    if self.same_party is not None:\n        json[\"sameParty\"] = self.same_party\n    if self.source_scheme is not None:\n        json[\"sourceScheme\"] = self.source_scheme.to_json()\n    if self.source_port is not None:\n        json[\"sourcePort\"] = self.source_port\n    if self.partition_key is not None:\n        json[\"partitionKey\"] = self.partition_key.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePartitionKey","title":"<code>CookiePartitionKey</code>  <code>dataclass</code>","text":"<p>cookiePartitionKey object The representation of the components of the key that are created by the cookiePartitionKey class contained in net/cookies/cookie_partition_key.h.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass CookiePartitionKey:\n    \"\"\"\n    cookiePartitionKey object\n    The representation of the components of the key that are created by the cookiePartitionKey class contained in net/cookies/cookie_partition_key.h.\n    \"\"\"\n\n    #: The site of the top-level URL the browser was visiting at the start\n    #: of the request to the endpoint that set the cookie.\n    top_level_site: str\n\n    #: Indicates if the cookie has any ancestors that are cross-site to the topLevelSite.\n    has_cross_site_ancestor: bool\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"topLevelSite\"] = self.top_level_site\n        json[\"hasCrossSiteAncestor\"] = self.has_cross_site_ancestor\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CookiePartitionKey:\n        return cls(\n            top_level_site=str(json[\"topLevelSite\"]),\n            has_cross_site_ancestor=bool(json[\"hasCrossSiteAncestor\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePartitionKey.has_cross_site_ancestor","title":"<code>has_cross_site_ancestor: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePartitionKey.top_level_site","title":"<code>top_level_site: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePartitionKey.__init__","title":"<code>__init__(top_level_site, has_cross_site_ancestor)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePartitionKey.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CookiePartitionKey:\n    return cls(\n        top_level_site=str(json[\"topLevelSite\"]),\n        has_cross_site_ancestor=bool(json[\"hasCrossSiteAncestor\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePartitionKey.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"topLevelSite\"] = self.top_level_site\n    json[\"hasCrossSiteAncestor\"] = self.has_cross_site_ancestor\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePriority","title":"<code>CookiePriority</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the cookie's 'Priority' status: https://tools.ietf.org/html/draft-west-cookie-priority-00</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class CookiePriority(enum.Enum):\n    \"\"\"\n    Represents the cookie's 'Priority' status:\n    https://tools.ietf.org/html/draft-west-cookie-priority-00\n    \"\"\"\n\n    LOW = \"Low\"\n    MEDIUM = \"Medium\"\n    HIGH = \"High\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CookiePriority:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePriority.HIGH","title":"<code>HIGH = 'High'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePriority.LOW","title":"<code>LOW = 'Low'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePriority.MEDIUM","title":"<code>MEDIUM = 'Medium'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePriority.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CookiePriority:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookiePriority.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSameSite","title":"<code>CookieSameSite</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the cookie's 'SameSite' status: https://tools.ietf.org/html/draft-west-first-party-cookies</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class CookieSameSite(enum.Enum):\n    \"\"\"\n    Represents the cookie's 'SameSite' status:\n    https://tools.ietf.org/html/draft-west-first-party-cookies\n    \"\"\"\n\n    STRICT = \"Strict\"\n    LAX = \"Lax\"\n    NONE = \"None\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CookieSameSite:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSameSite.LAX","title":"<code>LAX = 'Lax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSameSite.NONE","title":"<code>NONE = 'None'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSameSite.STRICT","title":"<code>STRICT = 'Strict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSameSite.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CookieSameSite:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSameSite.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSourceScheme","title":"<code>CookieSourceScheme</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Represents the source scheme of the origin that originally set the cookie. A value of \"Unset\" allows protocol clients to emulate legacy cookie scope for the scheme. This is a temporary ability and it will be removed in the future.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class CookieSourceScheme(enum.Enum):\n    \"\"\"\n    Represents the source scheme of the origin that originally set the cookie.\n    A value of \"Unset\" allows protocol clients to emulate legacy cookie scope for the scheme.\n    This is a temporary ability and it will be removed in the future.\n    \"\"\"\n\n    UNSET = \"Unset\"\n    NON_SECURE = \"NonSecure\"\n    SECURE = \"Secure\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CookieSourceScheme:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSourceScheme.NON_SECURE","title":"<code>NON_SECURE = 'NonSecure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSourceScheme.SECURE","title":"<code>SECURE = 'Secure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSourceScheme.UNSET","title":"<code>UNSET = 'Unset'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSourceScheme.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CookieSourceScheme:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CookieSourceScheme.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError","title":"<code>CorsError</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The reason why request was blocked.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class CorsError(enum.Enum):\n    \"\"\"\n    The reason why request was blocked.\n    \"\"\"\n\n    DISALLOWED_BY_MODE = \"DisallowedByMode\"\n    INVALID_RESPONSE = \"InvalidResponse\"\n    WILDCARD_ORIGIN_NOT_ALLOWED = \"WildcardOriginNotAllowed\"\n    MISSING_ALLOW_ORIGIN_HEADER = \"MissingAllowOriginHeader\"\n    MULTIPLE_ALLOW_ORIGIN_VALUES = \"MultipleAllowOriginValues\"\n    INVALID_ALLOW_ORIGIN_VALUE = \"InvalidAllowOriginValue\"\n    ALLOW_ORIGIN_MISMATCH = \"AllowOriginMismatch\"\n    INVALID_ALLOW_CREDENTIALS = \"InvalidAllowCredentials\"\n    CORS_DISABLED_SCHEME = \"CorsDisabledScheme\"\n    PREFLIGHT_INVALID_STATUS = \"PreflightInvalidStatus\"\n    PREFLIGHT_DISALLOWED_REDIRECT = \"PreflightDisallowedRedirect\"\n    PREFLIGHT_WILDCARD_ORIGIN_NOT_ALLOWED = \"PreflightWildcardOriginNotAllowed\"\n    PREFLIGHT_MISSING_ALLOW_ORIGIN_HEADER = \"PreflightMissingAllowOriginHeader\"\n    PREFLIGHT_MULTIPLE_ALLOW_ORIGIN_VALUES = \"PreflightMultipleAllowOriginValues\"\n    PREFLIGHT_INVALID_ALLOW_ORIGIN_VALUE = \"PreflightInvalidAllowOriginValue\"\n    PREFLIGHT_ALLOW_ORIGIN_MISMATCH = \"PreflightAllowOriginMismatch\"\n    PREFLIGHT_INVALID_ALLOW_CREDENTIALS = \"PreflightInvalidAllowCredentials\"\n    PREFLIGHT_MISSING_ALLOW_EXTERNAL = \"PreflightMissingAllowExternal\"\n    PREFLIGHT_INVALID_ALLOW_EXTERNAL = \"PreflightInvalidAllowExternal\"\n    PREFLIGHT_MISSING_ALLOW_PRIVATE_NETWORK = \"PreflightMissingAllowPrivateNetwork\"\n    PREFLIGHT_INVALID_ALLOW_PRIVATE_NETWORK = \"PreflightInvalidAllowPrivateNetwork\"\n    INVALID_ALLOW_METHODS_PREFLIGHT_RESPONSE = \"InvalidAllowMethodsPreflightResponse\"\n    INVALID_ALLOW_HEADERS_PREFLIGHT_RESPONSE = \"InvalidAllowHeadersPreflightResponse\"\n    METHOD_DISALLOWED_BY_PREFLIGHT_RESPONSE = \"MethodDisallowedByPreflightResponse\"\n    HEADER_DISALLOWED_BY_PREFLIGHT_RESPONSE = \"HeaderDisallowedByPreflightResponse\"\n    REDIRECT_CONTAINS_CREDENTIALS = \"RedirectContainsCredentials\"\n    INSECURE_PRIVATE_NETWORK = \"InsecurePrivateNetwork\"\n    INVALID_PRIVATE_NETWORK_ACCESS = \"InvalidPrivateNetworkAccess\"\n    UNEXPECTED_PRIVATE_NETWORK_ACCESS = \"UnexpectedPrivateNetworkAccess\"\n    NO_CORS_REDIRECT_MODE_NOT_FOLLOW = \"NoCorsRedirectModeNotFollow\"\n    PREFLIGHT_MISSING_PRIVATE_NETWORK_ACCESS_ID = (\n        \"PreflightMissingPrivateNetworkAccessId\"\n    )\n    PREFLIGHT_MISSING_PRIVATE_NETWORK_ACCESS_NAME = (\n        \"PreflightMissingPrivateNetworkAccessName\"\n    )\n    PRIVATE_NETWORK_ACCESS_PERMISSION_UNAVAILABLE = (\n        \"PrivateNetworkAccessPermissionUnavailable\"\n    )\n    PRIVATE_NETWORK_ACCESS_PERMISSION_DENIED = \"PrivateNetworkAccessPermissionDenied\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CorsError:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.ALLOW_ORIGIN_MISMATCH","title":"<code>ALLOW_ORIGIN_MISMATCH = 'AllowOriginMismatch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.CORS_DISABLED_SCHEME","title":"<code>CORS_DISABLED_SCHEME = 'CorsDisabledScheme'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.DISALLOWED_BY_MODE","title":"<code>DISALLOWED_BY_MODE = 'DisallowedByMode'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.HEADER_DISALLOWED_BY_PREFLIGHT_RESPONSE","title":"<code>HEADER_DISALLOWED_BY_PREFLIGHT_RESPONSE = 'HeaderDisallowedByPreflightResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.INSECURE_PRIVATE_NETWORK","title":"<code>INSECURE_PRIVATE_NETWORK = 'InsecurePrivateNetwork'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.INVALID_ALLOW_CREDENTIALS","title":"<code>INVALID_ALLOW_CREDENTIALS = 'InvalidAllowCredentials'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.INVALID_ALLOW_HEADERS_PREFLIGHT_RESPONSE","title":"<code>INVALID_ALLOW_HEADERS_PREFLIGHT_RESPONSE = 'InvalidAllowHeadersPreflightResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.INVALID_ALLOW_METHODS_PREFLIGHT_RESPONSE","title":"<code>INVALID_ALLOW_METHODS_PREFLIGHT_RESPONSE = 'InvalidAllowMethodsPreflightResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.INVALID_ALLOW_ORIGIN_VALUE","title":"<code>INVALID_ALLOW_ORIGIN_VALUE = 'InvalidAllowOriginValue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.INVALID_PRIVATE_NETWORK_ACCESS","title":"<code>INVALID_PRIVATE_NETWORK_ACCESS = 'InvalidPrivateNetworkAccess'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.INVALID_RESPONSE","title":"<code>INVALID_RESPONSE = 'InvalidResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.METHOD_DISALLOWED_BY_PREFLIGHT_RESPONSE","title":"<code>METHOD_DISALLOWED_BY_PREFLIGHT_RESPONSE = 'MethodDisallowedByPreflightResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.MISSING_ALLOW_ORIGIN_HEADER","title":"<code>MISSING_ALLOW_ORIGIN_HEADER = 'MissingAllowOriginHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.MULTIPLE_ALLOW_ORIGIN_VALUES","title":"<code>MULTIPLE_ALLOW_ORIGIN_VALUES = 'MultipleAllowOriginValues'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.NO_CORS_REDIRECT_MODE_NOT_FOLLOW","title":"<code>NO_CORS_REDIRECT_MODE_NOT_FOLLOW = 'NoCorsRedirectModeNotFollow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_ALLOW_ORIGIN_MISMATCH","title":"<code>PREFLIGHT_ALLOW_ORIGIN_MISMATCH = 'PreflightAllowOriginMismatch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_DISALLOWED_REDIRECT","title":"<code>PREFLIGHT_DISALLOWED_REDIRECT = 'PreflightDisallowedRedirect'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_INVALID_ALLOW_CREDENTIALS","title":"<code>PREFLIGHT_INVALID_ALLOW_CREDENTIALS = 'PreflightInvalidAllowCredentials'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_INVALID_ALLOW_EXTERNAL","title":"<code>PREFLIGHT_INVALID_ALLOW_EXTERNAL = 'PreflightInvalidAllowExternal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_INVALID_ALLOW_ORIGIN_VALUE","title":"<code>PREFLIGHT_INVALID_ALLOW_ORIGIN_VALUE = 'PreflightInvalidAllowOriginValue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_INVALID_ALLOW_PRIVATE_NETWORK","title":"<code>PREFLIGHT_INVALID_ALLOW_PRIVATE_NETWORK = 'PreflightInvalidAllowPrivateNetwork'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_INVALID_STATUS","title":"<code>PREFLIGHT_INVALID_STATUS = 'PreflightInvalidStatus'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_MISSING_ALLOW_EXTERNAL","title":"<code>PREFLIGHT_MISSING_ALLOW_EXTERNAL = 'PreflightMissingAllowExternal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_MISSING_ALLOW_ORIGIN_HEADER","title":"<code>PREFLIGHT_MISSING_ALLOW_ORIGIN_HEADER = 'PreflightMissingAllowOriginHeader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_MISSING_ALLOW_PRIVATE_NETWORK","title":"<code>PREFLIGHT_MISSING_ALLOW_PRIVATE_NETWORK = 'PreflightMissingAllowPrivateNetwork'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_MISSING_PRIVATE_NETWORK_ACCESS_ID","title":"<code>PREFLIGHT_MISSING_PRIVATE_NETWORK_ACCESS_ID = 'PreflightMissingPrivateNetworkAccessId'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_MISSING_PRIVATE_NETWORK_ACCESS_NAME","title":"<code>PREFLIGHT_MISSING_PRIVATE_NETWORK_ACCESS_NAME = 'PreflightMissingPrivateNetworkAccessName'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_MULTIPLE_ALLOW_ORIGIN_VALUES","title":"<code>PREFLIGHT_MULTIPLE_ALLOW_ORIGIN_VALUES = 'PreflightMultipleAllowOriginValues'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PREFLIGHT_WILDCARD_ORIGIN_NOT_ALLOWED","title":"<code>PREFLIGHT_WILDCARD_ORIGIN_NOT_ALLOWED = 'PreflightWildcardOriginNotAllowed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PRIVATE_NETWORK_ACCESS_PERMISSION_DENIED","title":"<code>PRIVATE_NETWORK_ACCESS_PERMISSION_DENIED = 'PrivateNetworkAccessPermissionDenied'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.PRIVATE_NETWORK_ACCESS_PERMISSION_UNAVAILABLE","title":"<code>PRIVATE_NETWORK_ACCESS_PERMISSION_UNAVAILABLE = 'PrivateNetworkAccessPermissionUnavailable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.REDIRECT_CONTAINS_CREDENTIALS","title":"<code>REDIRECT_CONTAINS_CREDENTIALS = 'RedirectContainsCredentials'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.UNEXPECTED_PRIVATE_NETWORK_ACCESS","title":"<code>UNEXPECTED_PRIVATE_NETWORK_ACCESS = 'UnexpectedPrivateNetworkAccess'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.WILDCARD_ORIGIN_NOT_ALLOWED","title":"<code>WILDCARD_ORIGIN_NOT_ALLOWED = 'WildcardOriginNotAllowed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CorsError:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsError.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsErrorStatus","title":"<code>CorsErrorStatus</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass CorsErrorStatus:\n    cors_error: CorsError\n\n    failed_parameter: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"corsError\"] = self.cors_error.to_json()\n        json[\"failedParameter\"] = self.failed_parameter\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CorsErrorStatus:\n        return cls(\n            cors_error=CorsError.from_json(json[\"corsError\"]),\n            failed_parameter=str(json[\"failedParameter\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsErrorStatus.cors_error","title":"<code>cors_error: CorsError</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsErrorStatus.failed_parameter","title":"<code>failed_parameter: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsErrorStatus.__init__","title":"<code>__init__(cors_error, failed_parameter)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsErrorStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CorsErrorStatus:\n    return cls(\n        cors_error=CorsError.from_json(json[\"corsError\"]),\n        failed_parameter=str(json[\"failedParameter\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CorsErrorStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"corsError\"] = self.cors_error.to_json()\n    json[\"failedParameter\"] = self.failed_parameter\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyStatus","title":"<code>CrossOriginEmbedderPolicyStatus</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass CrossOriginEmbedderPolicyStatus:\n    value: CrossOriginEmbedderPolicyValue\n\n    report_only_value: CrossOriginEmbedderPolicyValue\n\n    reporting_endpoint: typing.Optional[str] = None\n\n    report_only_reporting_endpoint: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"value\"] = self.value.to_json()\n        json[\"reportOnlyValue\"] = self.report_only_value.to_json()\n        if self.reporting_endpoint is not None:\n            json[\"reportingEndpoint\"] = self.reporting_endpoint\n        if self.report_only_reporting_endpoint is not None:\n            json[\"reportOnlyReportingEndpoint\"] = self.report_only_reporting_endpoint\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CrossOriginEmbedderPolicyStatus:\n        return cls(\n            value=CrossOriginEmbedderPolicyValue.from_json(json[\"value\"]),\n            report_only_value=CrossOriginEmbedderPolicyValue.from_json(\n                json[\"reportOnlyValue\"]\n            ),\n            reporting_endpoint=(\n                str(json[\"reportingEndpoint\"])\n                if json.get(\"reportingEndpoint\", None) is not None\n                else None\n            ),\n            report_only_reporting_endpoint=(\n                str(json[\"reportOnlyReportingEndpoint\"])\n                if json.get(\"reportOnlyReportingEndpoint\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyStatus.report_only_reporting_endpoint","title":"<code>report_only_reporting_endpoint: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyStatus.report_only_value","title":"<code>report_only_value: CrossOriginEmbedderPolicyValue</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyStatus.reporting_endpoint","title":"<code>reporting_endpoint: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyStatus.value","title":"<code>value: CrossOriginEmbedderPolicyValue</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyStatus.__init__","title":"<code>__init__(value, report_only_value, reporting_endpoint=None, report_only_reporting_endpoint=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CrossOriginEmbedderPolicyStatus:\n    return cls(\n        value=CrossOriginEmbedderPolicyValue.from_json(json[\"value\"]),\n        report_only_value=CrossOriginEmbedderPolicyValue.from_json(\n            json[\"reportOnlyValue\"]\n        ),\n        reporting_endpoint=(\n            str(json[\"reportingEndpoint\"])\n            if json.get(\"reportingEndpoint\", None) is not None\n            else None\n        ),\n        report_only_reporting_endpoint=(\n            str(json[\"reportOnlyReportingEndpoint\"])\n            if json.get(\"reportOnlyReportingEndpoint\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"value\"] = self.value.to_json()\n    json[\"reportOnlyValue\"] = self.report_only_value.to_json()\n    if self.reporting_endpoint is not None:\n        json[\"reportingEndpoint\"] = self.reporting_endpoint\n    if self.report_only_reporting_endpoint is not None:\n        json[\"reportOnlyReportingEndpoint\"] = self.report_only_reporting_endpoint\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyValue","title":"<code>CrossOriginEmbedderPolicyValue</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class CrossOriginEmbedderPolicyValue(enum.Enum):\n    NONE = \"None\"\n    CREDENTIALLESS = \"Credentialless\"\n    REQUIRE_CORP = \"RequireCorp\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CrossOriginEmbedderPolicyValue:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyValue.CREDENTIALLESS","title":"<code>CREDENTIALLESS = 'Credentialless'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyValue.NONE","title":"<code>NONE = 'None'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyValue.REQUIRE_CORP","title":"<code>REQUIRE_CORP = 'RequireCorp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyValue.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CrossOriginEmbedderPolicyValue:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginEmbedderPolicyValue.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyStatus","title":"<code>CrossOriginOpenerPolicyStatus</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass CrossOriginOpenerPolicyStatus:\n    value: CrossOriginOpenerPolicyValue\n\n    report_only_value: CrossOriginOpenerPolicyValue\n\n    reporting_endpoint: typing.Optional[str] = None\n\n    report_only_reporting_endpoint: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"value\"] = self.value.to_json()\n        json[\"reportOnlyValue\"] = self.report_only_value.to_json()\n        if self.reporting_endpoint is not None:\n            json[\"reportingEndpoint\"] = self.reporting_endpoint\n        if self.report_only_reporting_endpoint is not None:\n            json[\"reportOnlyReportingEndpoint\"] = self.report_only_reporting_endpoint\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CrossOriginOpenerPolicyStatus:\n        return cls(\n            value=CrossOriginOpenerPolicyValue.from_json(json[\"value\"]),\n            report_only_value=CrossOriginOpenerPolicyValue.from_json(\n                json[\"reportOnlyValue\"]\n            ),\n            reporting_endpoint=(\n                str(json[\"reportingEndpoint\"])\n                if json.get(\"reportingEndpoint\", None) is not None\n                else None\n            ),\n            report_only_reporting_endpoint=(\n                str(json[\"reportOnlyReportingEndpoint\"])\n                if json.get(\"reportOnlyReportingEndpoint\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyStatus.report_only_reporting_endpoint","title":"<code>report_only_reporting_endpoint: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyStatus.report_only_value","title":"<code>report_only_value: CrossOriginOpenerPolicyValue</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyStatus.reporting_endpoint","title":"<code>reporting_endpoint: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyStatus.value","title":"<code>value: CrossOriginOpenerPolicyValue</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyStatus.__init__","title":"<code>__init__(value, report_only_value, reporting_endpoint=None, report_only_reporting_endpoint=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CrossOriginOpenerPolicyStatus:\n    return cls(\n        value=CrossOriginOpenerPolicyValue.from_json(json[\"value\"]),\n        report_only_value=CrossOriginOpenerPolicyValue.from_json(\n            json[\"reportOnlyValue\"]\n        ),\n        reporting_endpoint=(\n            str(json[\"reportingEndpoint\"])\n            if json.get(\"reportingEndpoint\", None) is not None\n            else None\n        ),\n        report_only_reporting_endpoint=(\n            str(json[\"reportOnlyReportingEndpoint\"])\n            if json.get(\"reportOnlyReportingEndpoint\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"value\"] = self.value.to_json()\n    json[\"reportOnlyValue\"] = self.report_only_value.to_json()\n    if self.reporting_endpoint is not None:\n        json[\"reportingEndpoint\"] = self.reporting_endpoint\n    if self.report_only_reporting_endpoint is not None:\n        json[\"reportOnlyReportingEndpoint\"] = self.report_only_reporting_endpoint\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyValue","title":"<code>CrossOriginOpenerPolicyValue</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class CrossOriginOpenerPolicyValue(enum.Enum):\n    SAME_ORIGIN = \"SameOrigin\"\n    SAME_ORIGIN_ALLOW_POPUPS = \"SameOriginAllowPopups\"\n    RESTRICT_PROPERTIES = \"RestrictProperties\"\n    UNSAFE_NONE = \"UnsafeNone\"\n    SAME_ORIGIN_PLUS_COEP = \"SameOriginPlusCoep\"\n    RESTRICT_PROPERTIES_PLUS_COEP = \"RestrictPropertiesPlusCoep\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CrossOriginOpenerPolicyValue:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyValue.RESTRICT_PROPERTIES","title":"<code>RESTRICT_PROPERTIES = 'RestrictProperties'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyValue.RESTRICT_PROPERTIES_PLUS_COEP","title":"<code>RESTRICT_PROPERTIES_PLUS_COEP = 'RestrictPropertiesPlusCoep'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyValue.SAME_ORIGIN","title":"<code>SAME_ORIGIN = 'SameOrigin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyValue.SAME_ORIGIN_ALLOW_POPUPS","title":"<code>SAME_ORIGIN_ALLOW_POPUPS = 'SameOriginAllowPopups'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyValue.SAME_ORIGIN_PLUS_COEP","title":"<code>SAME_ORIGIN_PLUS_COEP = 'SameOriginPlusCoep'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyValue.UNSAFE_NONE","title":"<code>UNSAFE_NONE = 'UnsafeNone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyValue.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CrossOriginOpenerPolicyValue:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.CrossOriginOpenerPolicyValue.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.DataReceived","title":"<code>DataReceived</code>  <code>dataclass</code>","text":"<p>Fired when data chunk was received over the network.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.dataReceived\")\n@dataclass\nclass DataReceived:\n    \"\"\"\n    Fired when data chunk was received over the network.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: Data chunk length.\n    data_length: int\n    #: Actual bytes received (might be less than dataLength for compressed encodings).\n    encoded_data_length: int\n    #: Data that was received. (Encoded as a base64 string when passed over JSON)\n    data: typing.Optional[str]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DataReceived:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            data_length=int(json[\"dataLength\"]),\n            encoded_data_length=int(json[\"encodedDataLength\"]),\n            data=str(json[\"data\"]) if json.get(\"data\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.DataReceived.data","title":"<code>data: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.DataReceived.data_length","title":"<code>data_length: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.DataReceived.encoded_data_length","title":"<code>encoded_data_length: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.DataReceived.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.DataReceived.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.DataReceived.__init__","title":"<code>__init__(request_id, timestamp, data_length, encoded_data_length, data)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.DataReceived.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DataReceived:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        data_length=int(json[\"dataLength\"]),\n        encoded_data_length=int(json[\"encodedDataLength\"]),\n        data=str(json[\"data\"]) if json.get(\"data\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason","title":"<code>ErrorReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Network level fetch failure reason.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class ErrorReason(enum.Enum):\n    \"\"\"\n    Network level fetch failure reason.\n    \"\"\"\n\n    FAILED = \"Failed\"\n    ABORTED = \"Aborted\"\n    TIMED_OUT = \"TimedOut\"\n    ACCESS_DENIED = \"AccessDenied\"\n    CONNECTION_CLOSED = \"ConnectionClosed\"\n    CONNECTION_RESET = \"ConnectionReset\"\n    CONNECTION_REFUSED = \"ConnectionRefused\"\n    CONNECTION_ABORTED = \"ConnectionAborted\"\n    CONNECTION_FAILED = \"ConnectionFailed\"\n    NAME_NOT_RESOLVED = \"NameNotResolved\"\n    INTERNET_DISCONNECTED = \"InternetDisconnected\"\n    ADDRESS_UNREACHABLE = \"AddressUnreachable\"\n    BLOCKED_BY_CLIENT = \"BlockedByClient\"\n    BLOCKED_BY_RESPONSE = \"BlockedByResponse\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ErrorReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.ABORTED","title":"<code>ABORTED = 'Aborted'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.ACCESS_DENIED","title":"<code>ACCESS_DENIED = 'AccessDenied'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.ADDRESS_UNREACHABLE","title":"<code>ADDRESS_UNREACHABLE = 'AddressUnreachable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.BLOCKED_BY_CLIENT","title":"<code>BLOCKED_BY_CLIENT = 'BlockedByClient'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.BLOCKED_BY_RESPONSE","title":"<code>BLOCKED_BY_RESPONSE = 'BlockedByResponse'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.CONNECTION_ABORTED","title":"<code>CONNECTION_ABORTED = 'ConnectionAborted'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.CONNECTION_CLOSED","title":"<code>CONNECTION_CLOSED = 'ConnectionClosed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.CONNECTION_FAILED","title":"<code>CONNECTION_FAILED = 'ConnectionFailed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.CONNECTION_REFUSED","title":"<code>CONNECTION_REFUSED = 'ConnectionRefused'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.CONNECTION_RESET","title":"<code>CONNECTION_RESET = 'ConnectionReset'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.FAILED","title":"<code>FAILED = 'Failed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.INTERNET_DISCONNECTED","title":"<code>INTERNET_DISCONNECTED = 'InternetDisconnected'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.NAME_NOT_RESOLVED","title":"<code>NAME_NOT_RESOLVED = 'NameNotResolved'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.TIMED_OUT","title":"<code>TIMED_OUT = 'TimedOut'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ErrorReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ErrorReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.EventSourceMessageReceived","title":"<code>EventSourceMessageReceived</code>  <code>dataclass</code>","text":"<p>Fired when EventSource message is received.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.eventSourceMessageReceived\")\n@dataclass\nclass EventSourceMessageReceived:\n    \"\"\"\n    Fired when EventSource message is received.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: Message type.\n    event_name: str\n    #: Message identifier.\n    event_id: str\n    #: Message content.\n    data: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; EventSourceMessageReceived:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            event_name=str(json[\"eventName\"]),\n            event_id=str(json[\"eventId\"]),\n            data=str(json[\"data\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.EventSourceMessageReceived.data","title":"<code>data: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.EventSourceMessageReceived.event_id","title":"<code>event_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.EventSourceMessageReceived.event_name","title":"<code>event_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.EventSourceMessageReceived.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.EventSourceMessageReceived.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.EventSourceMessageReceived.__init__","title":"<code>__init__(request_id, timestamp, event_name, event_id, data)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.EventSourceMessageReceived.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; EventSourceMessageReceived:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        event_name=str(json[\"eventName\"]),\n        event_id=str(json[\"eventId\"]),\n        data=str(json[\"data\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ExemptedSetCookieWithReason","title":"<code>ExemptedSetCookieWithReason</code>  <code>dataclass</code>","text":"<p>A cookie should have been blocked by 3PCD but is exempted and stored from a response with the corresponding reason. A cookie could only have at most one exemption reason.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass ExemptedSetCookieWithReason:\n    \"\"\"\n    A cookie should have been blocked by 3PCD but is exempted and stored from a response with the\n    corresponding reason. A cookie could only have at most one exemption reason.\n    \"\"\"\n\n    #: The reason the cookie was exempted.\n    exemption_reason: CookieExemptionReason\n\n    #: The string representing this individual cookie as it would appear in the header.\n    cookie_line: str\n\n    #: The cookie object representing the cookie.\n    cookie: Cookie\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"exemptionReason\"] = self.exemption_reason.to_json()\n        json[\"cookieLine\"] = self.cookie_line\n        json[\"cookie\"] = self.cookie.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ExemptedSetCookieWithReason:\n        return cls(\n            exemption_reason=CookieExemptionReason.from_json(json[\"exemptionReason\"]),\n            cookie_line=str(json[\"cookieLine\"]),\n            cookie=Cookie.from_json(json[\"cookie\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ExemptedSetCookieWithReason.cookie","title":"<code>cookie: Cookie</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ExemptedSetCookieWithReason.cookie_line","title":"<code>cookie_line: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ExemptedSetCookieWithReason.exemption_reason","title":"<code>exemption_reason: CookieExemptionReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ExemptedSetCookieWithReason.__init__","title":"<code>__init__(exemption_reason, cookie_line, cookie)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ExemptedSetCookieWithReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ExemptedSetCookieWithReason:\n    return cls(\n        exemption_reason=CookieExemptionReason.from_json(json[\"exemptionReason\"]),\n        cookie_line=str(json[\"cookieLine\"]),\n        cookie=Cookie.from_json(json[\"cookie\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ExemptedSetCookieWithReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"exemptionReason\"] = self.exemption_reason.to_json()\n    json[\"cookieLine\"] = self.cookie_line\n    json[\"cookie\"] = self.cookie.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Headers","title":"<code>Headers</code>","text":"<p>               Bases: <code>dict</code></p> <p>Request / response headers as keys / values of JSON object.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class Headers(dict):\n    \"\"\"\n    Request / response headers as keys / values of JSON object.\n    \"\"\"\n\n    def to_json(self) -&gt; dict:\n        return self\n\n    @classmethod\n    def from_json(cls, json: dict) -&gt; Headers:\n        return cls(json)\n\n    def __repr__(self):\n        return \"Headers({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Headers.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def __repr__(self):\n    return \"Headers({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Headers.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: dict) -&gt; Headers:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Headers.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; dict:\n    return self\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.IPAddressSpace","title":"<code>IPAddressSpace</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class IPAddressSpace(enum.Enum):\n    LOCAL = \"Local\"\n    PRIVATE = \"Private\"\n    PUBLIC = \"Public\"\n    UNKNOWN = \"Unknown\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; IPAddressSpace:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.IPAddressSpace.LOCAL","title":"<code>LOCAL = 'Local'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.IPAddressSpace.PRIVATE","title":"<code>PRIVATE = 'Private'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.IPAddressSpace.PUBLIC","title":"<code>PUBLIC = 'Public'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.IPAddressSpace.UNKNOWN","title":"<code>UNKNOWN = 'Unknown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.IPAddressSpace.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; IPAddressSpace:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.IPAddressSpace.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Initiator","title":"<code>Initiator</code>  <code>dataclass</code>","text":"<p>Information about the request initiator.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass Initiator:\n    \"\"\"\n    Information about the request initiator.\n    \"\"\"\n\n    #: Type of this initiator.\n    type_: str\n\n    #: Initiator JavaScript stack trace, set for Script only.\n    stack: typing.Optional[runtime.StackTrace] = None\n\n    #: Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type.\n    url: typing.Optional[str] = None\n\n    #: Initiator line number, set for Parser type or for Script type (when script is importing\n    #: module) (0-based).\n    line_number: typing.Optional[float] = None\n\n    #: Initiator column number, set for Parser type or for Script type (when script is importing\n    #: module) (0-based).\n    column_number: typing.Optional[float] = None\n\n    #: Set if another request triggered this request (e.g. preflight).\n    request_id: typing.Optional[RequestId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        if self.stack is not None:\n            json[\"stack\"] = self.stack.to_json()\n        if self.url is not None:\n            json[\"url\"] = self.url\n        if self.line_number is not None:\n            json[\"lineNumber\"] = self.line_number\n        if self.column_number is not None:\n            json[\"columnNumber\"] = self.column_number\n        if self.request_id is not None:\n            json[\"requestId\"] = self.request_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Initiator:\n        return cls(\n            type_=str(json[\"type\"]),\n            stack=(\n                runtime.StackTrace.from_json(json[\"stack\"])\n                if json.get(\"stack\", None) is not None\n                else None\n            ),\n            url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n            line_number=(\n                float(json[\"lineNumber\"])\n                if json.get(\"lineNumber\", None) is not None\n                else None\n            ),\n            column_number=(\n                float(json[\"columnNumber\"])\n                if json.get(\"columnNumber\", None) is not None\n                else None\n            ),\n            request_id=(\n                RequestId.from_json(json[\"requestId\"])\n                if json.get(\"requestId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Initiator.column_number","title":"<code>column_number: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Initiator.line_number","title":"<code>line_number: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Initiator.request_id","title":"<code>request_id: typing.Optional[RequestId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Initiator.stack","title":"<code>stack: typing.Optional[runtime.StackTrace] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Initiator.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Initiator.url","title":"<code>url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Initiator.__init__","title":"<code>__init__(type_, stack=None, url=None, line_number=None, column_number=None, request_id=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Initiator.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Initiator:\n    return cls(\n        type_=str(json[\"type\"]),\n        stack=(\n            runtime.StackTrace.from_json(json[\"stack\"])\n            if json.get(\"stack\", None) is not None\n            else None\n        ),\n        url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n        line_number=(\n            float(json[\"lineNumber\"])\n            if json.get(\"lineNumber\", None) is not None\n            else None\n        ),\n        column_number=(\n            float(json[\"columnNumber\"])\n            if json.get(\"columnNumber\", None) is not None\n            else None\n        ),\n        request_id=(\n            RequestId.from_json(json[\"requestId\"])\n            if json.get(\"requestId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Initiator.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    if self.stack is not None:\n        json[\"stack\"] = self.stack.to_json()\n    if self.url is not None:\n        json[\"url\"] = self.url\n    if self.line_number is not None:\n        json[\"lineNumber\"] = self.line_number\n    if self.column_number is not None:\n        json[\"columnNumber\"] = self.column_number\n    if self.request_id is not None:\n        json[\"requestId\"] = self.request_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.InterceptionId","title":"<code>InterceptionId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique intercepted request identifier.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class InterceptionId(str):\n    \"\"\"\n    Unique intercepted request identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; InterceptionId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"InterceptionId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.InterceptionId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def __repr__(self):\n    return \"InterceptionId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.InterceptionId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; InterceptionId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.InterceptionId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.InterceptionStage","title":"<code>InterceptionStage</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Stages of the interception to begin intercepting. Request will intercept before the request is sent. Response will intercept after the response is received.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class InterceptionStage(enum.Enum):\n    \"\"\"\n    Stages of the interception to begin intercepting. Request will intercept before the request is\n    sent. Response will intercept after the response is received.\n    \"\"\"\n\n    REQUEST = \"Request\"\n    HEADERS_RECEIVED = \"HeadersReceived\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; InterceptionStage:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.InterceptionStage.HEADERS_RECEIVED","title":"<code>HEADERS_RECEIVED = 'HeadersReceived'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.InterceptionStage.REQUEST","title":"<code>REQUEST = 'Request'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.InterceptionStage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; InterceptionStage:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.InterceptionStage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourceOptions","title":"<code>LoadNetworkResourceOptions</code>  <code>dataclass</code>","text":"<p>An options object that may be extended later to better support CORS, CORB and streaming.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass LoadNetworkResourceOptions:\n    \"\"\"\n    An options object that may be extended later to better support CORS,\n    CORB and streaming.\n    \"\"\"\n\n    disable_cache: bool\n\n    include_credentials: bool\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"disableCache\"] = self.disable_cache\n        json[\"includeCredentials\"] = self.include_credentials\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LoadNetworkResourceOptions:\n        return cls(\n            disable_cache=bool(json[\"disableCache\"]),\n            include_credentials=bool(json[\"includeCredentials\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourceOptions.disable_cache","title":"<code>disable_cache: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourceOptions.include_credentials","title":"<code>include_credentials: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourceOptions.__init__","title":"<code>__init__(disable_cache, include_credentials)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourceOptions.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LoadNetworkResourceOptions:\n    return cls(\n        disable_cache=bool(json[\"disableCache\"]),\n        include_credentials=bool(json[\"includeCredentials\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourceOptions.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"disableCache\"] = self.disable_cache\n    json[\"includeCredentials\"] = self.include_credentials\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourcePageResult","title":"<code>LoadNetworkResourcePageResult</code>  <code>dataclass</code>","text":"<p>An object providing the result of a network resource load.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass LoadNetworkResourcePageResult:\n    \"\"\"\n    An object providing the result of a network resource load.\n    \"\"\"\n\n    success: bool\n\n    #: Optional values used for error reporting.\n    net_error: typing.Optional[float] = None\n\n    net_error_name: typing.Optional[str] = None\n\n    http_status_code: typing.Optional[float] = None\n\n    #: If successful, one of the following two fields holds the result.\n    stream: typing.Optional[io.StreamHandle] = None\n\n    #: Response headers.\n    headers: typing.Optional[Headers] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"success\"] = self.success\n        if self.net_error is not None:\n            json[\"netError\"] = self.net_error\n        if self.net_error_name is not None:\n            json[\"netErrorName\"] = self.net_error_name\n        if self.http_status_code is not None:\n            json[\"httpStatusCode\"] = self.http_status_code\n        if self.stream is not None:\n            json[\"stream\"] = self.stream.to_json()\n        if self.headers is not None:\n            json[\"headers\"] = self.headers.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LoadNetworkResourcePageResult:\n        return cls(\n            success=bool(json[\"success\"]),\n            net_error=(\n                float(json[\"netError\"])\n                if json.get(\"netError\", None) is not None\n                else None\n            ),\n            net_error_name=(\n                str(json[\"netErrorName\"])\n                if json.get(\"netErrorName\", None) is not None\n                else None\n            ),\n            http_status_code=(\n                float(json[\"httpStatusCode\"])\n                if json.get(\"httpStatusCode\", None) is not None\n                else None\n            ),\n            stream=(\n                io.StreamHandle.from_json(json[\"stream\"])\n                if json.get(\"stream\", None) is not None\n                else None\n            ),\n            headers=(\n                Headers.from_json(json[\"headers\"])\n                if json.get(\"headers\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourcePageResult.headers","title":"<code>headers: typing.Optional[Headers] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourcePageResult.http_status_code","title":"<code>http_status_code: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourcePageResult.net_error","title":"<code>net_error: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourcePageResult.net_error_name","title":"<code>net_error_name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourcePageResult.stream","title":"<code>stream: typing.Optional[io.StreamHandle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourcePageResult.success","title":"<code>success: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourcePageResult.__init__","title":"<code>__init__(success, net_error=None, net_error_name=None, http_status_code=None, stream=None, headers=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourcePageResult.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LoadNetworkResourcePageResult:\n    return cls(\n        success=bool(json[\"success\"]),\n        net_error=(\n            float(json[\"netError\"])\n            if json.get(\"netError\", None) is not None\n            else None\n        ),\n        net_error_name=(\n            str(json[\"netErrorName\"])\n            if json.get(\"netErrorName\", None) is not None\n            else None\n        ),\n        http_status_code=(\n            float(json[\"httpStatusCode\"])\n            if json.get(\"httpStatusCode\", None) is not None\n            else None\n        ),\n        stream=(\n            io.StreamHandle.from_json(json[\"stream\"])\n            if json.get(\"stream\", None) is not None\n            else None\n        ),\n        headers=(\n            Headers.from_json(json[\"headers\"])\n            if json.get(\"headers\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadNetworkResourcePageResult.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"success\"] = self.success\n    if self.net_error is not None:\n        json[\"netError\"] = self.net_error\n    if self.net_error_name is not None:\n        json[\"netErrorName\"] = self.net_error_name\n    if self.http_status_code is not None:\n        json[\"httpStatusCode\"] = self.http_status_code\n    if self.stream is not None:\n        json[\"stream\"] = self.stream.to_json()\n    if self.headers is not None:\n        json[\"headers\"] = self.headers.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoaderId","title":"<code>LoaderId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique loader identifier.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class LoaderId(str):\n    \"\"\"\n    Unique loader identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; LoaderId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"LoaderId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoaderId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def __repr__(self):\n    return \"LoaderId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoaderId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; LoaderId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoaderId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFailed","title":"<code>LoadingFailed</code>  <code>dataclass</code>","text":"<p>Fired when HTTP request has failed to load.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.loadingFailed\")\n@dataclass\nclass LoadingFailed:\n    \"\"\"\n    Fired when HTTP request has failed to load.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: Resource type.\n    type_: ResourceType\n    #: Error message. List of network errors: https://cs.chromium.org/chromium/src/net/base/net_error_list.h\n    error_text: str\n    #: True if loading was canceled.\n    canceled: typing.Optional[bool]\n    #: The reason why loading was blocked, if any.\n    blocked_reason: typing.Optional[BlockedReason]\n    #: The reason why loading was blocked by CORS, if any.\n    cors_error_status: typing.Optional[CorsErrorStatus]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LoadingFailed:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            type_=ResourceType.from_json(json[\"type\"]),\n            error_text=str(json[\"errorText\"]),\n            canceled=(\n                bool(json[\"canceled\"])\n                if json.get(\"canceled\", None) is not None\n                else None\n            ),\n            blocked_reason=(\n                BlockedReason.from_json(json[\"blockedReason\"])\n                if json.get(\"blockedReason\", None) is not None\n                else None\n            ),\n            cors_error_status=(\n                CorsErrorStatus.from_json(json[\"corsErrorStatus\"])\n                if json.get(\"corsErrorStatus\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFailed.blocked_reason","title":"<code>blocked_reason: typing.Optional[BlockedReason]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFailed.canceled","title":"<code>canceled: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFailed.cors_error_status","title":"<code>cors_error_status: typing.Optional[CorsErrorStatus]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFailed.error_text","title":"<code>error_text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFailed.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFailed.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFailed.type_","title":"<code>type_: ResourceType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFailed.__init__","title":"<code>__init__(request_id, timestamp, type_, error_text, canceled, blocked_reason, cors_error_status)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFailed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LoadingFailed:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        type_=ResourceType.from_json(json[\"type\"]),\n        error_text=str(json[\"errorText\"]),\n        canceled=(\n            bool(json[\"canceled\"])\n            if json.get(\"canceled\", None) is not None\n            else None\n        ),\n        blocked_reason=(\n            BlockedReason.from_json(json[\"blockedReason\"])\n            if json.get(\"blockedReason\", None) is not None\n            else None\n        ),\n        cors_error_status=(\n            CorsErrorStatus.from_json(json[\"corsErrorStatus\"])\n            if json.get(\"corsErrorStatus\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFinished","title":"<code>LoadingFinished</code>  <code>dataclass</code>","text":"<p>Fired when HTTP request has finished loading.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.loadingFinished\")\n@dataclass\nclass LoadingFinished:\n    \"\"\"\n    Fired when HTTP request has finished loading.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: Total number of bytes received for this request.\n    encoded_data_length: float\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LoadingFinished:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            encoded_data_length=float(json[\"encodedDataLength\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFinished.encoded_data_length","title":"<code>encoded_data_length: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFinished.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFinished.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFinished.__init__","title":"<code>__init__(request_id, timestamp, encoded_data_length)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.LoadingFinished.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LoadingFinished:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        encoded_data_length=float(json[\"encodedDataLength\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.MonotonicTime","title":"<code>MonotonicTime</code>","text":"<p>               Bases: <code>float</code></p> <p>Monotonically increasing time in seconds since an arbitrary point in the past.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class MonotonicTime(float):\n    \"\"\"\n    Monotonically increasing time in seconds since an arbitrary point in the past.\n    \"\"\"\n\n    def to_json(self) -&gt; float:\n        return self\n\n    @classmethod\n    def from_json(cls, json: float) -&gt; MonotonicTime:\n        return cls(json)\n\n    def __repr__(self):\n        return \"MonotonicTime({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.MonotonicTime.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def __repr__(self):\n    return \"MonotonicTime({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.MonotonicTime.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: float) -&gt; MonotonicTime:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.MonotonicTime.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; float:\n    return self\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.PolicyUpdated","title":"<code>PolicyUpdated</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired once security policy has been updated.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.policyUpdated\")\n@dataclass\nclass PolicyUpdated:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired once security policy has been updated.\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PolicyUpdated:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.PolicyUpdated.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.PolicyUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PolicyUpdated:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.PostDataEntry","title":"<code>PostDataEntry</code>  <code>dataclass</code>","text":"<p>Post data entry for HTTP request</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass PostDataEntry:\n    \"\"\"\n    Post data entry for HTTP request\n    \"\"\"\n\n    bytes_: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.bytes_ is not None:\n            json[\"bytes\"] = self.bytes_\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PostDataEntry:\n        return cls(\n            bytes_=str(json[\"bytes\"]) if json.get(\"bytes\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.PostDataEntry.bytes_","title":"<code>bytes_: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.PostDataEntry.__init__","title":"<code>__init__(bytes_=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.PostDataEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PostDataEntry:\n    return cls(\n        bytes_=str(json[\"bytes\"]) if json.get(\"bytes\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.PostDataEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.bytes_ is not None:\n        json[\"bytes\"] = self.bytes_\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.PrivateNetworkRequestPolicy","title":"<code>PrivateNetworkRequestPolicy</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class PrivateNetworkRequestPolicy(enum.Enum):\n    ALLOW = \"Allow\"\n    BLOCK_FROM_INSECURE_TO_MORE_PRIVATE = \"BlockFromInsecureToMorePrivate\"\n    WARN_FROM_INSECURE_TO_MORE_PRIVATE = \"WarnFromInsecureToMorePrivate\"\n    PREFLIGHT_BLOCK = \"PreflightBlock\"\n    PREFLIGHT_WARN = \"PreflightWarn\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PrivateNetworkRequestPolicy:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.PrivateNetworkRequestPolicy.ALLOW","title":"<code>ALLOW = 'Allow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.PrivateNetworkRequestPolicy.BLOCK_FROM_INSECURE_TO_MORE_PRIVATE","title":"<code>BLOCK_FROM_INSECURE_TO_MORE_PRIVATE = 'BlockFromInsecureToMorePrivate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.PrivateNetworkRequestPolicy.PREFLIGHT_BLOCK","title":"<code>PREFLIGHT_BLOCK = 'PreflightBlock'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.PrivateNetworkRequestPolicy.PREFLIGHT_WARN","title":"<code>PREFLIGHT_WARN = 'PreflightWarn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.PrivateNetworkRequestPolicy.WARN_FROM_INSECURE_TO_MORE_PRIVATE","title":"<code>WARN_FROM_INSECURE_TO_MORE_PRIVATE = 'WarnFromInsecureToMorePrivate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.PrivateNetworkRequestPolicy.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PrivateNetworkRequestPolicy:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.PrivateNetworkRequestPolicy.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportId","title":"<code>ReportId</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class ReportId(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ReportId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"ReportId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def __repr__(self):\n    return \"ReportId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ReportId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportStatus","title":"<code>ReportStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The status of a Reporting API report.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class ReportStatus(enum.Enum):\n    \"\"\"\n    The status of a Reporting API report.\n    \"\"\"\n\n    QUEUED = \"Queued\"\n    PENDING = \"Pending\"\n    MARKED_FOR_REMOVAL = \"MarkedForRemoval\"\n    SUCCESS = \"Success\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ReportStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportStatus.MARKED_FOR_REMOVAL","title":"<code>MARKED_FOR_REMOVAL = 'MarkedForRemoval'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportStatus.PENDING","title":"<code>PENDING = 'Pending'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportStatus.QUEUED","title":"<code>QUEUED = 'Queued'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportStatus.SUCCESS","title":"<code>SUCCESS = 'Success'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ReportStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpoint","title":"<code>ReportingApiEndpoint</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass ReportingApiEndpoint:\n    #: The URL of the endpoint to which reports may be delivered.\n    url: str\n\n    #: Name of the endpoint group.\n    group_name: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        json[\"groupName\"] = self.group_name\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ReportingApiEndpoint:\n        return cls(\n            url=str(json[\"url\"]),\n            group_name=str(json[\"groupName\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpoint.group_name","title":"<code>group_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpoint.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpoint.__init__","title":"<code>__init__(url, group_name)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpoint.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ReportingApiEndpoint:\n    return cls(\n        url=str(json[\"url\"]),\n        group_name=str(json[\"groupName\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpoint.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    json[\"groupName\"] = self.group_name\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpointsChangedForOrigin","title":"<code>ReportingApiEndpointsChangedForOrigin</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.reportingApiEndpointsChangedForOrigin\")\n@dataclass\nclass ReportingApiEndpointsChangedForOrigin:\n    \"\"\"\n    **EXPERIMENTAL**\n\n\n    \"\"\"\n\n    #: Origin of the document(s) which configured the endpoints.\n    origin: str\n    endpoints: typing.List[ReportingApiEndpoint]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ReportingApiEndpointsChangedForOrigin:\n        return cls(\n            origin=str(json[\"origin\"]),\n            endpoints=[ReportingApiEndpoint.from_json(i) for i in json[\"endpoints\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpointsChangedForOrigin.endpoints","title":"<code>endpoints: typing.List[ReportingApiEndpoint]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpointsChangedForOrigin.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpointsChangedForOrigin.__init__","title":"<code>__init__(origin, endpoints)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiEndpointsChangedForOrigin.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ReportingApiEndpointsChangedForOrigin:\n    return cls(\n        origin=str(json[\"origin\"]),\n        endpoints=[ReportingApiEndpoint.from_json(i) for i in json[\"endpoints\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport","title":"<code>ReportingApiReport</code>  <code>dataclass</code>","text":"<p>An object representing a report generated by the Reporting API.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass ReportingApiReport:\n    \"\"\"\n    An object representing a report generated by the Reporting API.\n    \"\"\"\n\n    id_: ReportId\n\n    #: The URL of the document that triggered the report.\n    initiator_url: str\n\n    #: The name of the endpoint group that should be used to deliver the report.\n    destination: str\n\n    #: The type of the report (specifies the set of data that is contained in the report body).\n    type_: str\n\n    #: When the report was generated.\n    timestamp: TimeSinceEpoch\n\n    #: How many uploads deep the related request was.\n    depth: int\n\n    #: The number of delivery attempts made so far, not including an active attempt.\n    completed_attempts: int\n\n    body: dict\n\n    status: ReportStatus\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"id\"] = self.id_.to_json()\n        json[\"initiatorUrl\"] = self.initiator_url\n        json[\"destination\"] = self.destination\n        json[\"type\"] = self.type_\n        json[\"timestamp\"] = self.timestamp.to_json()\n        json[\"depth\"] = self.depth\n        json[\"completedAttempts\"] = self.completed_attempts\n        json[\"body\"] = self.body\n        json[\"status\"] = self.status.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ReportingApiReport:\n        return cls(\n            id_=ReportId.from_json(json[\"id\"]),\n            initiator_url=str(json[\"initiatorUrl\"]),\n            destination=str(json[\"destination\"]),\n            type_=str(json[\"type\"]),\n            timestamp=TimeSinceEpoch.from_json(json[\"timestamp\"]),\n            depth=int(json[\"depth\"]),\n            completed_attempts=int(json[\"completedAttempts\"]),\n            body=dict(json[\"body\"]),\n            status=ReportStatus.from_json(json[\"status\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.body","title":"<code>body: dict</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.completed_attempts","title":"<code>completed_attempts: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.depth","title":"<code>depth: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.destination","title":"<code>destination: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.id_","title":"<code>id_: ReportId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.initiator_url","title":"<code>initiator_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.status","title":"<code>status: ReportStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.timestamp","title":"<code>timestamp: TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.__init__","title":"<code>__init__(id_, initiator_url, destination, type_, timestamp, depth, completed_attempts, body, status)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ReportingApiReport:\n    return cls(\n        id_=ReportId.from_json(json[\"id\"]),\n        initiator_url=str(json[\"initiatorUrl\"]),\n        destination=str(json[\"destination\"]),\n        type_=str(json[\"type\"]),\n        timestamp=TimeSinceEpoch.from_json(json[\"timestamp\"]),\n        depth=int(json[\"depth\"]),\n        completed_attempts=int(json[\"completedAttempts\"]),\n        body=dict(json[\"body\"]),\n        status=ReportStatus.from_json(json[\"status\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReport.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"id\"] = self.id_.to_json()\n    json[\"initiatorUrl\"] = self.initiator_url\n    json[\"destination\"] = self.destination\n    json[\"type\"] = self.type_\n    json[\"timestamp\"] = self.timestamp.to_json()\n    json[\"depth\"] = self.depth\n    json[\"completedAttempts\"] = self.completed_attempts\n    json[\"body\"] = self.body\n    json[\"status\"] = self.status.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReportAdded","title":"<code>ReportingApiReportAdded</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Is sent whenever a new report is added. And after 'enableReportingApi' for all existing reports.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.reportingApiReportAdded\")\n@dataclass\nclass ReportingApiReportAdded:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Is sent whenever a new report is added.\n    And after 'enableReportingApi' for all existing reports.\n    \"\"\"\n\n    report: ReportingApiReport\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ReportingApiReportAdded:\n        return cls(report=ReportingApiReport.from_json(json[\"report\"]))\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReportAdded.report","title":"<code>report: ReportingApiReport</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReportAdded.__init__","title":"<code>__init__(report)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReportAdded.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ReportingApiReportAdded:\n    return cls(report=ReportingApiReport.from_json(json[\"report\"]))\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReportUpdated","title":"<code>ReportingApiReportUpdated</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.reportingApiReportUpdated\")\n@dataclass\nclass ReportingApiReportUpdated:\n    \"\"\"\n    **EXPERIMENTAL**\n\n\n    \"\"\"\n\n    report: ReportingApiReport\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ReportingApiReportUpdated:\n        return cls(report=ReportingApiReport.from_json(json[\"report\"]))\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReportUpdated.report","title":"<code>report: ReportingApiReport</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReportUpdated.__init__","title":"<code>__init__(report)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ReportingApiReportUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ReportingApiReportUpdated:\n    return cls(report=ReportingApiReport.from_json(json[\"report\"]))\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Request","title":"<code>Request</code>  <code>dataclass</code>","text":"<p>HTTP request data.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass Request:\n    \"\"\"\n    HTTP request data.\n    \"\"\"\n\n    #: Request URL (without fragment).\n    url: str\n\n    #: HTTP request method.\n    method: str\n\n    #: HTTP request headers.\n    headers: Headers\n\n    #: Priority of the resource request at the time request is sent.\n    initial_priority: ResourcePriority\n\n    #: The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/\n    referrer_policy: str\n\n    #: Fragment of the requested URL starting with hash, if present.\n    url_fragment: typing.Optional[str] = None\n\n    #: HTTP POST request data.\n    #: Use postDataEntries instead.\n    post_data: typing.Optional[str] = None\n\n    #: True when the request has POST data. Note that postData might still be omitted when this flag is true when the data is too long.\n    has_post_data: typing.Optional[bool] = None\n\n    #: Request body elements (post data broken into individual entries).\n    post_data_entries: typing.Optional[typing.List[PostDataEntry]] = None\n\n    #: The mixed content type of the request.\n    mixed_content_type: typing.Optional[security.MixedContentType] = None\n\n    #: Whether is loaded via link preload.\n    is_link_preload: typing.Optional[bool] = None\n\n    #: Set for requests when the TrustToken API is used. Contains the parameters\n    #: passed by the developer (e.g. via \"fetch\") as understood by the backend.\n    trust_token_params: typing.Optional[TrustTokenParams] = None\n\n    #: True if this resource request is considered to be the 'same site' as the\n    #: request corresponding to the main frame.\n    is_same_site: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        json[\"method\"] = self.method\n        json[\"headers\"] = self.headers.to_json()\n        json[\"initialPriority\"] = self.initial_priority.to_json()\n        json[\"referrerPolicy\"] = self.referrer_policy\n        if self.url_fragment is not None:\n            json[\"urlFragment\"] = self.url_fragment\n        if self.post_data is not None:\n            json[\"postData\"] = self.post_data\n        if self.has_post_data is not None:\n            json[\"hasPostData\"] = self.has_post_data\n        if self.post_data_entries is not None:\n            json[\"postDataEntries\"] = [i.to_json() for i in self.post_data_entries]\n        if self.mixed_content_type is not None:\n            json[\"mixedContentType\"] = self.mixed_content_type.to_json()\n        if self.is_link_preload is not None:\n            json[\"isLinkPreload\"] = self.is_link_preload\n        if self.trust_token_params is not None:\n            json[\"trustTokenParams\"] = self.trust_token_params.to_json()\n        if self.is_same_site is not None:\n            json[\"isSameSite\"] = self.is_same_site\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Request:\n        return cls(\n            url=str(json[\"url\"]),\n            method=str(json[\"method\"]),\n            headers=Headers.from_json(json[\"headers\"]),\n            initial_priority=ResourcePriority.from_json(json[\"initialPriority\"]),\n            referrer_policy=str(json[\"referrerPolicy\"]),\n            url_fragment=(\n                str(json[\"urlFragment\"])\n                if json.get(\"urlFragment\", None) is not None\n                else None\n            ),\n            post_data=(\n                str(json[\"postData\"])\n                if json.get(\"postData\", None) is not None\n                else None\n            ),\n            has_post_data=(\n                bool(json[\"hasPostData\"])\n                if json.get(\"hasPostData\", None) is not None\n                else None\n            ),\n            post_data_entries=(\n                [PostDataEntry.from_json(i) for i in json[\"postDataEntries\"]]\n                if json.get(\"postDataEntries\", None) is not None\n                else None\n            ),\n            mixed_content_type=(\n                security.MixedContentType.from_json(json[\"mixedContentType\"])\n                if json.get(\"mixedContentType\", None) is not None\n                else None\n            ),\n            is_link_preload=(\n                bool(json[\"isLinkPreload\"])\n                if json.get(\"isLinkPreload\", None) is not None\n                else None\n            ),\n            trust_token_params=(\n                TrustTokenParams.from_json(json[\"trustTokenParams\"])\n                if json.get(\"trustTokenParams\", None) is not None\n                else None\n            ),\n            is_same_site=(\n                bool(json[\"isSameSite\"])\n                if json.get(\"isSameSite\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.has_post_data","title":"<code>has_post_data: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.headers","title":"<code>headers: Headers</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.initial_priority","title":"<code>initial_priority: ResourcePriority</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.is_link_preload","title":"<code>is_link_preload: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.is_same_site","title":"<code>is_same_site: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.method","title":"<code>method: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.mixed_content_type","title":"<code>mixed_content_type: typing.Optional[security.MixedContentType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.post_data","title":"<code>post_data: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.post_data_entries","title":"<code>post_data_entries: typing.Optional[typing.List[PostDataEntry]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.referrer_policy","title":"<code>referrer_policy: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.trust_token_params","title":"<code>trust_token_params: typing.Optional[TrustTokenParams] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.url_fragment","title":"<code>url_fragment: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.__init__","title":"<code>__init__(url, method, headers, initial_priority, referrer_policy, url_fragment=None, post_data=None, has_post_data=None, post_data_entries=None, mixed_content_type=None, is_link_preload=None, trust_token_params=None, is_same_site=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Request:\n    return cls(\n        url=str(json[\"url\"]),\n        method=str(json[\"method\"]),\n        headers=Headers.from_json(json[\"headers\"]),\n        initial_priority=ResourcePriority.from_json(json[\"initialPriority\"]),\n        referrer_policy=str(json[\"referrerPolicy\"]),\n        url_fragment=(\n            str(json[\"urlFragment\"])\n            if json.get(\"urlFragment\", None) is not None\n            else None\n        ),\n        post_data=(\n            str(json[\"postData\"])\n            if json.get(\"postData\", None) is not None\n            else None\n        ),\n        has_post_data=(\n            bool(json[\"hasPostData\"])\n            if json.get(\"hasPostData\", None) is not None\n            else None\n        ),\n        post_data_entries=(\n            [PostDataEntry.from_json(i) for i in json[\"postDataEntries\"]]\n            if json.get(\"postDataEntries\", None) is not None\n            else None\n        ),\n        mixed_content_type=(\n            security.MixedContentType.from_json(json[\"mixedContentType\"])\n            if json.get(\"mixedContentType\", None) is not None\n            else None\n        ),\n        is_link_preload=(\n            bool(json[\"isLinkPreload\"])\n            if json.get(\"isLinkPreload\", None) is not None\n            else None\n        ),\n        trust_token_params=(\n            TrustTokenParams.from_json(json[\"trustTokenParams\"])\n            if json.get(\"trustTokenParams\", None) is not None\n            else None\n        ),\n        is_same_site=(\n            bool(json[\"isSameSite\"])\n            if json.get(\"isSameSite\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Request.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    json[\"method\"] = self.method\n    json[\"headers\"] = self.headers.to_json()\n    json[\"initialPriority\"] = self.initial_priority.to_json()\n    json[\"referrerPolicy\"] = self.referrer_policy\n    if self.url_fragment is not None:\n        json[\"urlFragment\"] = self.url_fragment\n    if self.post_data is not None:\n        json[\"postData\"] = self.post_data\n    if self.has_post_data is not None:\n        json[\"hasPostData\"] = self.has_post_data\n    if self.post_data_entries is not None:\n        json[\"postDataEntries\"] = [i.to_json() for i in self.post_data_entries]\n    if self.mixed_content_type is not None:\n        json[\"mixedContentType\"] = self.mixed_content_type.to_json()\n    if self.is_link_preload is not None:\n        json[\"isLinkPreload\"] = self.is_link_preload\n    if self.trust_token_params is not None:\n        json[\"trustTokenParams\"] = self.trust_token_params.to_json()\n    if self.is_same_site is not None:\n        json[\"isSameSite\"] = self.is_same_site\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestId","title":"<code>RequestId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique request identifier.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class RequestId(str):\n    \"\"\"\n    Unique request identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; RequestId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"RequestId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def __repr__(self):\n    return \"RequestId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; RequestId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted","title":"<code>RequestIntercepted</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Details of an intercepted HTTP request, which must be either allowed, blocked, modified or mocked. Deprecated, use Fetch.requestPaused instead.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@deprecated(version=\"1.3\")\n@event_class(\"Network.requestIntercepted\")\n@dataclass\nclass RequestIntercepted:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Details of an intercepted HTTP request, which must be either allowed, blocked, modified or\n    mocked.\n    Deprecated, use Fetch.requestPaused instead.\n    \"\"\"\n\n    #: Each request the page makes will have a unique id, however if any redirects are encountered\n    #: while processing that fetch, they will be reported with the same id as the original fetch.\n    #: Likewise if HTTP authentication is needed then the same fetch id will be used.\n    interception_id: InterceptionId\n    request: Request\n    #: The id of the frame that initiated the request.\n    frame_id: page.FrameId\n    #: How the requested resource will be used.\n    resource_type: ResourceType\n    #: Whether this is a navigation request, which can abort the navigation completely.\n    is_navigation_request: bool\n    #: Set if the request is a navigation that will result in a download.\n    #: Only present after response is received from the server (i.e. HeadersReceived stage).\n    is_download: typing.Optional[bool]\n    #: Redirect location, only sent if a redirect was intercepted.\n    redirect_url: typing.Optional[str]\n    #: Details of the Authorization Challenge encountered. If this is set then\n    #: continueInterceptedRequest must contain an authChallengeResponse.\n    auth_challenge: typing.Optional[AuthChallenge]\n    #: Response error if intercepted at response stage or if redirect occurred while intercepting\n    #: request.\n    response_error_reason: typing.Optional[ErrorReason]\n    #: Response code if intercepted at response stage or if redirect occurred while intercepting\n    #: request or auth retry occurred.\n    response_status_code: typing.Optional[int]\n    #: Response headers if intercepted at the response stage or if redirect occurred while\n    #: intercepting request or auth retry occurred.\n    response_headers: typing.Optional[Headers]\n    #: If the intercepted request had a corresponding requestWillBeSent event fired for it, then\n    #: this requestId will be the same as the requestId present in the requestWillBeSent event.\n    request_id: typing.Optional[RequestId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RequestIntercepted:\n        return cls(\n            interception_id=InterceptionId.from_json(json[\"interceptionId\"]),\n            request=Request.from_json(json[\"request\"]),\n            frame_id=page.FrameId.from_json(json[\"frameId\"]),\n            resource_type=ResourceType.from_json(json[\"resourceType\"]),\n            is_navigation_request=bool(json[\"isNavigationRequest\"]),\n            is_download=(\n                bool(json[\"isDownload\"])\n                if json.get(\"isDownload\", None) is not None\n                else None\n            ),\n            redirect_url=(\n                str(json[\"redirectUrl\"])\n                if json.get(\"redirectUrl\", None) is not None\n                else None\n            ),\n            auth_challenge=(\n                AuthChallenge.from_json(json[\"authChallenge\"])\n                if json.get(\"authChallenge\", None) is not None\n                else None\n            ),\n            response_error_reason=(\n                ErrorReason.from_json(json[\"responseErrorReason\"])\n                if json.get(\"responseErrorReason\", None) is not None\n                else None\n            ),\n            response_status_code=(\n                int(json[\"responseStatusCode\"])\n                if json.get(\"responseStatusCode\", None) is not None\n                else None\n            ),\n            response_headers=(\n                Headers.from_json(json[\"responseHeaders\"])\n                if json.get(\"responseHeaders\", None) is not None\n                else None\n            ),\n            request_id=(\n                RequestId.from_json(json[\"requestId\"])\n                if json.get(\"requestId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.auth_challenge","title":"<code>auth_challenge: typing.Optional[AuthChallenge]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.frame_id","title":"<code>frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.interception_id","title":"<code>interception_id: InterceptionId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.is_download","title":"<code>is_download: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.is_navigation_request","title":"<code>is_navigation_request: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.redirect_url","title":"<code>redirect_url: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.request","title":"<code>request: Request</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.request_id","title":"<code>request_id: typing.Optional[RequestId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.resource_type","title":"<code>resource_type: ResourceType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.response_error_reason","title":"<code>response_error_reason: typing.Optional[ErrorReason]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.response_headers","title":"<code>response_headers: typing.Optional[Headers]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.response_status_code","title":"<code>response_status_code: typing.Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.__init__","title":"<code>__init__(interception_id, request, frame_id, resource_type, is_navigation_request, is_download, redirect_url, auth_challenge, response_error_reason, response_status_code, response_headers, request_id)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestIntercepted.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RequestIntercepted:\n    return cls(\n        interception_id=InterceptionId.from_json(json[\"interceptionId\"]),\n        request=Request.from_json(json[\"request\"]),\n        frame_id=page.FrameId.from_json(json[\"frameId\"]),\n        resource_type=ResourceType.from_json(json[\"resourceType\"]),\n        is_navigation_request=bool(json[\"isNavigationRequest\"]),\n        is_download=(\n            bool(json[\"isDownload\"])\n            if json.get(\"isDownload\", None) is not None\n            else None\n        ),\n        redirect_url=(\n            str(json[\"redirectUrl\"])\n            if json.get(\"redirectUrl\", None) is not None\n            else None\n        ),\n        auth_challenge=(\n            AuthChallenge.from_json(json[\"authChallenge\"])\n            if json.get(\"authChallenge\", None) is not None\n            else None\n        ),\n        response_error_reason=(\n            ErrorReason.from_json(json[\"responseErrorReason\"])\n            if json.get(\"responseErrorReason\", None) is not None\n            else None\n        ),\n        response_status_code=(\n            int(json[\"responseStatusCode\"])\n            if json.get(\"responseStatusCode\", None) is not None\n            else None\n        ),\n        response_headers=(\n            Headers.from_json(json[\"responseHeaders\"])\n            if json.get(\"responseHeaders\", None) is not None\n            else None\n        ),\n        request_id=(\n            RequestId.from_json(json[\"requestId\"])\n            if json.get(\"requestId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestPattern","title":"<code>RequestPattern</code>  <code>dataclass</code>","text":"<p>Request pattern for interception.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass RequestPattern:\n    \"\"\"\n    Request pattern for interception.\n    \"\"\"\n\n    #: Wildcards (``'*'`` -&gt; zero or more, ``'?'`` -&gt; exactly one) are allowed. Escape character is\n    #: backslash. Omitting is equivalent to ``\"*\"``.\n    url_pattern: typing.Optional[str] = None\n\n    #: If set, only requests for matching resource types will be intercepted.\n    resource_type: typing.Optional[ResourceType] = None\n\n    #: Stage at which to begin intercepting requests. Default is Request.\n    interception_stage: typing.Optional[InterceptionStage] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.url_pattern is not None:\n            json[\"urlPattern\"] = self.url_pattern\n        if self.resource_type is not None:\n            json[\"resourceType\"] = self.resource_type.to_json()\n        if self.interception_stage is not None:\n            json[\"interceptionStage\"] = self.interception_stage.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RequestPattern:\n        return cls(\n            url_pattern=(\n                str(json[\"urlPattern\"])\n                if json.get(\"urlPattern\", None) is not None\n                else None\n            ),\n            resource_type=(\n                ResourceType.from_json(json[\"resourceType\"])\n                if json.get(\"resourceType\", None) is not None\n                else None\n            ),\n            interception_stage=(\n                InterceptionStage.from_json(json[\"interceptionStage\"])\n                if json.get(\"interceptionStage\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestPattern.interception_stage","title":"<code>interception_stage: typing.Optional[InterceptionStage] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestPattern.resource_type","title":"<code>resource_type: typing.Optional[ResourceType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestPattern.url_pattern","title":"<code>url_pattern: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestPattern.__init__","title":"<code>__init__(url_pattern=None, resource_type=None, interception_stage=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestPattern.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RequestPattern:\n    return cls(\n        url_pattern=(\n            str(json[\"urlPattern\"])\n            if json.get(\"urlPattern\", None) is not None\n            else None\n        ),\n        resource_type=(\n            ResourceType.from_json(json[\"resourceType\"])\n            if json.get(\"resourceType\", None) is not None\n            else None\n        ),\n        interception_stage=(\n            InterceptionStage.from_json(json[\"interceptionStage\"])\n            if json.get(\"interceptionStage\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestPattern.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.url_pattern is not None:\n        json[\"urlPattern\"] = self.url_pattern\n    if self.resource_type is not None:\n        json[\"resourceType\"] = self.resource_type.to_json()\n    if self.interception_stage is not None:\n        json[\"interceptionStage\"] = self.interception_stage.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestServedFromCache","title":"<code>RequestServedFromCache</code>  <code>dataclass</code>","text":"<p>Fired if request ended up loading from cache.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.requestServedFromCache\")\n@dataclass\nclass RequestServedFromCache:\n    \"\"\"\n    Fired if request ended up loading from cache.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RequestServedFromCache:\n        return cls(request_id=RequestId.from_json(json[\"requestId\"]))\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestServedFromCache.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestServedFromCache.__init__","title":"<code>__init__(request_id)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestServedFromCache.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RequestServedFromCache:\n    return cls(request_id=RequestId.from_json(json[\"requestId\"]))\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent","title":"<code>RequestWillBeSent</code>  <code>dataclass</code>","text":"<p>Fired when page is about to send HTTP request.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.requestWillBeSent\")\n@dataclass\nclass RequestWillBeSent:\n    \"\"\"\n    Fired when page is about to send HTTP request.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Loader identifier. Empty string if the request is fetched from worker.\n    loader_id: LoaderId\n    #: URL of the document this request is loaded for.\n    document_url: str\n    #: Request data.\n    request: Request\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: Timestamp.\n    wall_time: TimeSinceEpoch\n    #: Request initiator.\n    initiator: Initiator\n    #: In the case that redirectResponse is populated, this flag indicates whether\n    #: requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be or were emitted\n    #: for the request which was just redirected.\n    redirect_has_extra_info: bool\n    #: Redirect response data.\n    redirect_response: typing.Optional[Response]\n    #: Type of this resource.\n    type_: typing.Optional[ResourceType]\n    #: Frame identifier.\n    frame_id: typing.Optional[page.FrameId]\n    #: Whether the request is initiated by a user gesture. Defaults to false.\n    has_user_gesture: typing.Optional[bool]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RequestWillBeSent:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            loader_id=LoaderId.from_json(json[\"loaderId\"]),\n            document_url=str(json[\"documentURL\"]),\n            request=Request.from_json(json[\"request\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            wall_time=TimeSinceEpoch.from_json(json[\"wallTime\"]),\n            initiator=Initiator.from_json(json[\"initiator\"]),\n            redirect_has_extra_info=bool(json[\"redirectHasExtraInfo\"]),\n            redirect_response=(\n                Response.from_json(json[\"redirectResponse\"])\n                if json.get(\"redirectResponse\", None) is not None\n                else None\n            ),\n            type_=(\n                ResourceType.from_json(json[\"type\"])\n                if json.get(\"type\", None) is not None\n                else None\n            ),\n            frame_id=(\n                page.FrameId.from_json(json[\"frameId\"])\n                if json.get(\"frameId\", None) is not None\n                else None\n            ),\n            has_user_gesture=(\n                bool(json[\"hasUserGesture\"])\n                if json.get(\"hasUserGesture\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.document_url","title":"<code>document_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.frame_id","title":"<code>frame_id: typing.Optional[page.FrameId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.has_user_gesture","title":"<code>has_user_gesture: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.initiator","title":"<code>initiator: Initiator</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.loader_id","title":"<code>loader_id: LoaderId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.redirect_has_extra_info","title":"<code>redirect_has_extra_info: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.redirect_response","title":"<code>redirect_response: typing.Optional[Response]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.request","title":"<code>request: Request</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.type_","title":"<code>type_: typing.Optional[ResourceType]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.wall_time","title":"<code>wall_time: TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.__init__","title":"<code>__init__(request_id, loader_id, document_url, request, timestamp, wall_time, initiator, redirect_has_extra_info, redirect_response, type_, frame_id, has_user_gesture)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSent.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RequestWillBeSent:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        loader_id=LoaderId.from_json(json[\"loaderId\"]),\n        document_url=str(json[\"documentURL\"]),\n        request=Request.from_json(json[\"request\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        wall_time=TimeSinceEpoch.from_json(json[\"wallTime\"]),\n        initiator=Initiator.from_json(json[\"initiator\"]),\n        redirect_has_extra_info=bool(json[\"redirectHasExtraInfo\"]),\n        redirect_response=(\n            Response.from_json(json[\"redirectResponse\"])\n            if json.get(\"redirectResponse\", None) is not None\n            else None\n        ),\n        type_=(\n            ResourceType.from_json(json[\"type\"])\n            if json.get(\"type\", None) is not None\n            else None\n        ),\n        frame_id=(\n            page.FrameId.from_json(json[\"frameId\"])\n            if json.get(\"frameId\", None) is not None\n            else None\n        ),\n        has_user_gesture=(\n            bool(json[\"hasUserGesture\"])\n            if json.get(\"hasUserGesture\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSentExtraInfo","title":"<code>RequestWillBeSentExtraInfo</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when additional information about a requestWillBeSent event is available from the network stack. Not every requestWillBeSent event will have an additional requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent or requestWillBeSentExtraInfo will be fired first for the same request.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.requestWillBeSentExtraInfo\")\n@dataclass\nclass RequestWillBeSentExtraInfo:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when additional information about a requestWillBeSent event is available from the\n    network stack. Not every requestWillBeSent event will have an additional\n    requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent\n    or requestWillBeSentExtraInfo will be fired first for the same request.\n    \"\"\"\n\n    #: Request identifier. Used to match this information to an existing requestWillBeSent event.\n    request_id: RequestId\n    #: A list of cookies potentially associated to the requested URL. This includes both cookies sent with\n    #: the request and the ones not sent; the latter are distinguished by having blockedReasons field set.\n    associated_cookies: typing.List[AssociatedCookie]\n    #: Raw request headers as they will be sent over the wire.\n    headers: Headers\n    #: Connection timing information for the request.\n    connect_timing: ConnectTiming\n    #: The client security state set for the request.\n    client_security_state: typing.Optional[ClientSecurityState]\n    #: Whether the site has partitioned cookies stored in a partition different than the current one.\n    site_has_cookie_in_other_partition: typing.Optional[bool]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RequestWillBeSentExtraInfo:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            associated_cookies=[\n                AssociatedCookie.from_json(i) for i in json[\"associatedCookies\"]\n            ],\n            headers=Headers.from_json(json[\"headers\"]),\n            connect_timing=ConnectTiming.from_json(json[\"connectTiming\"]),\n            client_security_state=(\n                ClientSecurityState.from_json(json[\"clientSecurityState\"])\n                if json.get(\"clientSecurityState\", None) is not None\n                else None\n            ),\n            site_has_cookie_in_other_partition=(\n                bool(json[\"siteHasCookieInOtherPartition\"])\n                if json.get(\"siteHasCookieInOtherPartition\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSentExtraInfo.associated_cookies","title":"<code>associated_cookies: typing.List[AssociatedCookie]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSentExtraInfo.client_security_state","title":"<code>client_security_state: typing.Optional[ClientSecurityState]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSentExtraInfo.connect_timing","title":"<code>connect_timing: ConnectTiming</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSentExtraInfo.headers","title":"<code>headers: Headers</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSentExtraInfo.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSentExtraInfo.site_has_cookie_in_other_partition","title":"<code>site_has_cookie_in_other_partition: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSentExtraInfo.__init__","title":"<code>__init__(request_id, associated_cookies, headers, connect_timing, client_security_state, site_has_cookie_in_other_partition)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.RequestWillBeSentExtraInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RequestWillBeSentExtraInfo:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        associated_cookies=[\n            AssociatedCookie.from_json(i) for i in json[\"associatedCookies\"]\n        ],\n        headers=Headers.from_json(json[\"headers\"]),\n        connect_timing=ConnectTiming.from_json(json[\"connectTiming\"]),\n        client_security_state=(\n            ClientSecurityState.from_json(json[\"clientSecurityState\"])\n            if json.get(\"clientSecurityState\", None) is not None\n            else None\n        ),\n        site_has_cookie_in_other_partition=(\n            bool(json[\"siteHasCookieInOtherPartition\"])\n            if json.get(\"siteHasCookieInOtherPartition\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceChangedPriority","title":"<code>ResourceChangedPriority</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when resource loading priority is changed</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.resourceChangedPriority\")\n@dataclass\nclass ResourceChangedPriority:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when resource loading priority is changed\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: New priority\n    new_priority: ResourcePriority\n    #: Timestamp.\n    timestamp: MonotonicTime\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ResourceChangedPriority:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            new_priority=ResourcePriority.from_json(json[\"newPriority\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceChangedPriority.new_priority","title":"<code>new_priority: ResourcePriority</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceChangedPriority.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceChangedPriority.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceChangedPriority.__init__","title":"<code>__init__(request_id, new_priority, timestamp)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceChangedPriority.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ResourceChangedPriority:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        new_priority=ResourcePriority.from_json(json[\"newPriority\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourcePriority","title":"<code>ResourcePriority</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Loading priority of a resource request.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class ResourcePriority(enum.Enum):\n    \"\"\"\n    Loading priority of a resource request.\n    \"\"\"\n\n    VERY_LOW = \"VeryLow\"\n    LOW = \"Low\"\n    MEDIUM = \"Medium\"\n    HIGH = \"High\"\n    VERY_HIGH = \"VeryHigh\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ResourcePriority:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourcePriority.HIGH","title":"<code>HIGH = 'High'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourcePriority.LOW","title":"<code>LOW = 'Low'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourcePriority.MEDIUM","title":"<code>MEDIUM = 'Medium'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourcePriority.VERY_HIGH","title":"<code>VERY_HIGH = 'VeryHigh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourcePriority.VERY_LOW","title":"<code>VERY_LOW = 'VeryLow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourcePriority.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ResourcePriority:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourcePriority.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming","title":"<code>ResourceTiming</code>  <code>dataclass</code>","text":"<p>Timing information for the request.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass ResourceTiming:\n    \"\"\"\n    Timing information for the request.\n    \"\"\"\n\n    #: Timing's requestTime is a baseline in seconds, while the other numbers are ticks in\n    #: milliseconds relatively to this requestTime.\n    request_time: float\n\n    #: Started resolving proxy.\n    proxy_start: float\n\n    #: Finished resolving proxy.\n    proxy_end: float\n\n    #: Started DNS address resolve.\n    dns_start: float\n\n    #: Finished DNS address resolve.\n    dns_end: float\n\n    #: Started connecting to the remote host.\n    connect_start: float\n\n    #: Connected to the remote host.\n    connect_end: float\n\n    #: Started SSL handshake.\n    ssl_start: float\n\n    #: Finished SSL handshake.\n    ssl_end: float\n\n    #: Started running ServiceWorker.\n    worker_start: float\n\n    #: Finished Starting ServiceWorker.\n    worker_ready: float\n\n    #: Started fetch event.\n    worker_fetch_start: float\n\n    #: Settled fetch event respondWith promise.\n    worker_respond_with_settled: float\n\n    #: Started sending request.\n    send_start: float\n\n    #: Finished sending request.\n    send_end: float\n\n    #: Time the server started pushing request.\n    push_start: float\n\n    #: Time the server finished pushing request.\n    push_end: float\n\n    #: Started receiving response headers.\n    receive_headers_start: float\n\n    #: Finished receiving response headers.\n    receive_headers_end: float\n\n    #: Started ServiceWorker static routing source evaluation.\n    worker_router_evaluation_start: typing.Optional[float] = None\n\n    #: Started cache lookup when the source was evaluated to ``cache``.\n    worker_cache_lookup_start: typing.Optional[float] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"requestTime\"] = self.request_time\n        json[\"proxyStart\"] = self.proxy_start\n        json[\"proxyEnd\"] = self.proxy_end\n        json[\"dnsStart\"] = self.dns_start\n        json[\"dnsEnd\"] = self.dns_end\n        json[\"connectStart\"] = self.connect_start\n        json[\"connectEnd\"] = self.connect_end\n        json[\"sslStart\"] = self.ssl_start\n        json[\"sslEnd\"] = self.ssl_end\n        json[\"workerStart\"] = self.worker_start\n        json[\"workerReady\"] = self.worker_ready\n        json[\"workerFetchStart\"] = self.worker_fetch_start\n        json[\"workerRespondWithSettled\"] = self.worker_respond_with_settled\n        json[\"sendStart\"] = self.send_start\n        json[\"sendEnd\"] = self.send_end\n        json[\"pushStart\"] = self.push_start\n        json[\"pushEnd\"] = self.push_end\n        json[\"receiveHeadersStart\"] = self.receive_headers_start\n        json[\"receiveHeadersEnd\"] = self.receive_headers_end\n        if self.worker_router_evaluation_start is not None:\n            json[\"workerRouterEvaluationStart\"] = self.worker_router_evaluation_start\n        if self.worker_cache_lookup_start is not None:\n            json[\"workerCacheLookupStart\"] = self.worker_cache_lookup_start\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ResourceTiming:\n        return cls(\n            request_time=float(json[\"requestTime\"]),\n            proxy_start=float(json[\"proxyStart\"]),\n            proxy_end=float(json[\"proxyEnd\"]),\n            dns_start=float(json[\"dnsStart\"]),\n            dns_end=float(json[\"dnsEnd\"]),\n            connect_start=float(json[\"connectStart\"]),\n            connect_end=float(json[\"connectEnd\"]),\n            ssl_start=float(json[\"sslStart\"]),\n            ssl_end=float(json[\"sslEnd\"]),\n            worker_start=float(json[\"workerStart\"]),\n            worker_ready=float(json[\"workerReady\"]),\n            worker_fetch_start=float(json[\"workerFetchStart\"]),\n            worker_respond_with_settled=float(json[\"workerRespondWithSettled\"]),\n            send_start=float(json[\"sendStart\"]),\n            send_end=float(json[\"sendEnd\"]),\n            push_start=float(json[\"pushStart\"]),\n            push_end=float(json[\"pushEnd\"]),\n            receive_headers_start=float(json[\"receiveHeadersStart\"]),\n            receive_headers_end=float(json[\"receiveHeadersEnd\"]),\n            worker_router_evaluation_start=(\n                float(json[\"workerRouterEvaluationStart\"])\n                if json.get(\"workerRouterEvaluationStart\", None) is not None\n                else None\n            ),\n            worker_cache_lookup_start=(\n                float(json[\"workerCacheLookupStart\"])\n                if json.get(\"workerCacheLookupStart\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.connect_end","title":"<code>connect_end: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.connect_start","title":"<code>connect_start: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.dns_end","title":"<code>dns_end: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.dns_start","title":"<code>dns_start: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.proxy_end","title":"<code>proxy_end: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.proxy_start","title":"<code>proxy_start: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.push_end","title":"<code>push_end: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.push_start","title":"<code>push_start: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.receive_headers_end","title":"<code>receive_headers_end: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.receive_headers_start","title":"<code>receive_headers_start: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.request_time","title":"<code>request_time: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.send_end","title":"<code>send_end: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.send_start","title":"<code>send_start: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.ssl_end","title":"<code>ssl_end: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.ssl_start","title":"<code>ssl_start: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.worker_cache_lookup_start","title":"<code>worker_cache_lookup_start: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.worker_fetch_start","title":"<code>worker_fetch_start: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.worker_ready","title":"<code>worker_ready: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.worker_respond_with_settled","title":"<code>worker_respond_with_settled: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.worker_router_evaluation_start","title":"<code>worker_router_evaluation_start: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.worker_start","title":"<code>worker_start: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.__init__","title":"<code>__init__(request_time, proxy_start, proxy_end, dns_start, dns_end, connect_start, connect_end, ssl_start, ssl_end, worker_start, worker_ready, worker_fetch_start, worker_respond_with_settled, send_start, send_end, push_start, push_end, receive_headers_start, receive_headers_end, worker_router_evaluation_start=None, worker_cache_lookup_start=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ResourceTiming:\n    return cls(\n        request_time=float(json[\"requestTime\"]),\n        proxy_start=float(json[\"proxyStart\"]),\n        proxy_end=float(json[\"proxyEnd\"]),\n        dns_start=float(json[\"dnsStart\"]),\n        dns_end=float(json[\"dnsEnd\"]),\n        connect_start=float(json[\"connectStart\"]),\n        connect_end=float(json[\"connectEnd\"]),\n        ssl_start=float(json[\"sslStart\"]),\n        ssl_end=float(json[\"sslEnd\"]),\n        worker_start=float(json[\"workerStart\"]),\n        worker_ready=float(json[\"workerReady\"]),\n        worker_fetch_start=float(json[\"workerFetchStart\"]),\n        worker_respond_with_settled=float(json[\"workerRespondWithSettled\"]),\n        send_start=float(json[\"sendStart\"]),\n        send_end=float(json[\"sendEnd\"]),\n        push_start=float(json[\"pushStart\"]),\n        push_end=float(json[\"pushEnd\"]),\n        receive_headers_start=float(json[\"receiveHeadersStart\"]),\n        receive_headers_end=float(json[\"receiveHeadersEnd\"]),\n        worker_router_evaluation_start=(\n            float(json[\"workerRouterEvaluationStart\"])\n            if json.get(\"workerRouterEvaluationStart\", None) is not None\n            else None\n        ),\n        worker_cache_lookup_start=(\n            float(json[\"workerCacheLookupStart\"])\n            if json.get(\"workerCacheLookupStart\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceTiming.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"requestTime\"] = self.request_time\n    json[\"proxyStart\"] = self.proxy_start\n    json[\"proxyEnd\"] = self.proxy_end\n    json[\"dnsStart\"] = self.dns_start\n    json[\"dnsEnd\"] = self.dns_end\n    json[\"connectStart\"] = self.connect_start\n    json[\"connectEnd\"] = self.connect_end\n    json[\"sslStart\"] = self.ssl_start\n    json[\"sslEnd\"] = self.ssl_end\n    json[\"workerStart\"] = self.worker_start\n    json[\"workerReady\"] = self.worker_ready\n    json[\"workerFetchStart\"] = self.worker_fetch_start\n    json[\"workerRespondWithSettled\"] = self.worker_respond_with_settled\n    json[\"sendStart\"] = self.send_start\n    json[\"sendEnd\"] = self.send_end\n    json[\"pushStart\"] = self.push_start\n    json[\"pushEnd\"] = self.push_end\n    json[\"receiveHeadersStart\"] = self.receive_headers_start\n    json[\"receiveHeadersEnd\"] = self.receive_headers_end\n    if self.worker_router_evaluation_start is not None:\n        json[\"workerRouterEvaluationStart\"] = self.worker_router_evaluation_start\n    if self.worker_cache_lookup_start is not None:\n        json[\"workerCacheLookupStart\"] = self.worker_cache_lookup_start\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType","title":"<code>ResourceType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Resource type as it was perceived by the rendering engine.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class ResourceType(enum.Enum):\n    \"\"\"\n    Resource type as it was perceived by the rendering engine.\n    \"\"\"\n\n    DOCUMENT = \"Document\"\n    STYLESHEET = \"Stylesheet\"\n    IMAGE = \"Image\"\n    MEDIA = \"Media\"\n    FONT = \"Font\"\n    SCRIPT = \"Script\"\n    TEXT_TRACK = \"TextTrack\"\n    XHR = \"XHR\"\n    FETCH = \"Fetch\"\n    PREFETCH = \"Prefetch\"\n    EVENT_SOURCE = \"EventSource\"\n    WEB_SOCKET = \"WebSocket\"\n    MANIFEST = \"Manifest\"\n    SIGNED_EXCHANGE = \"SignedExchange\"\n    PING = \"Ping\"\n    CSP_VIOLATION_REPORT = \"CSPViolationReport\"\n    PREFLIGHT = \"Preflight\"\n    OTHER = \"Other\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ResourceType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.CSP_VIOLATION_REPORT","title":"<code>CSP_VIOLATION_REPORT = 'CSPViolationReport'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.DOCUMENT","title":"<code>DOCUMENT = 'Document'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.EVENT_SOURCE","title":"<code>EVENT_SOURCE = 'EventSource'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.FETCH","title":"<code>FETCH = 'Fetch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.FONT","title":"<code>FONT = 'Font'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.IMAGE","title":"<code>IMAGE = 'Image'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.MANIFEST","title":"<code>MANIFEST = 'Manifest'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.MEDIA","title":"<code>MEDIA = 'Media'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.OTHER","title":"<code>OTHER = 'Other'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.PING","title":"<code>PING = 'Ping'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.PREFETCH","title":"<code>PREFETCH = 'Prefetch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.PREFLIGHT","title":"<code>PREFLIGHT = 'Preflight'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.SCRIPT","title":"<code>SCRIPT = 'Script'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.SIGNED_EXCHANGE","title":"<code>SIGNED_EXCHANGE = 'SignedExchange'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.STYLESHEET","title":"<code>STYLESHEET = 'Stylesheet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.TEXT_TRACK","title":"<code>TEXT_TRACK = 'TextTrack'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.WEB_SOCKET","title":"<code>WEB_SOCKET = 'WebSocket'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.XHR","title":"<code>XHR = 'XHR'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ResourceType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResourceType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Response","title":"<code>Response</code>  <code>dataclass</code>","text":"<p>HTTP response data.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass Response:\n    \"\"\"\n    HTTP response data.\n    \"\"\"\n\n    #: Response URL. This URL can be different from CachedResource.url in case of redirect.\n    url: str\n\n    #: HTTP response status code.\n    status: int\n\n    #: HTTP response status text.\n    status_text: str\n\n    #: HTTP response headers.\n    headers: Headers\n\n    #: Resource mimeType as determined by the browser.\n    mime_type: str\n\n    #: Resource charset as determined by the browser (if applicable).\n    charset: str\n\n    #: Specifies whether physical connection was actually reused for this request.\n    connection_reused: bool\n\n    #: Physical connection id that was actually used for this request.\n    connection_id: float\n\n    #: Total number of bytes received for this request so far.\n    encoded_data_length: float\n\n    #: Security state of the request resource.\n    security_state: security.SecurityState\n\n    #: HTTP response headers text. This has been replaced by the headers in Network.responseReceivedExtraInfo.\n    headers_text: typing.Optional[str] = None\n\n    #: Refined HTTP request headers that were actually transmitted over the network.\n    request_headers: typing.Optional[Headers] = None\n\n    #: HTTP request headers text. This has been replaced by the headers in Network.requestWillBeSentExtraInfo.\n    request_headers_text: typing.Optional[str] = None\n\n    #: Remote IP address.\n    remote_ip_address: typing.Optional[str] = None\n\n    #: Remote port.\n    remote_port: typing.Optional[int] = None\n\n    #: Specifies that the request was served from the disk cache.\n    from_disk_cache: typing.Optional[bool] = None\n\n    #: Specifies that the request was served from the ServiceWorker.\n    from_service_worker: typing.Optional[bool] = None\n\n    #: Specifies that the request was served from the prefetch cache.\n    from_prefetch_cache: typing.Optional[bool] = None\n\n    #: Specifies that the request was served from the prefetch cache.\n    from_early_hints: typing.Optional[bool] = None\n\n    #: Information about how ServiceWorker Static Router API was used. If this\n    #: field is set with ``matchedSourceType`` field, a matching rule is found.\n    #: If this field is set without ``matchedSource``, no matching rule is found.\n    #: Otherwise, the API is not used.\n    service_worker_router_info: typing.Optional[ServiceWorkerRouterInfo] = None\n\n    #: Timing information for the given request.\n    timing: typing.Optional[ResourceTiming] = None\n\n    #: Response source of response from ServiceWorker.\n    service_worker_response_source: typing.Optional[ServiceWorkerResponseSource] = None\n\n    #: The time at which the returned response was generated.\n    response_time: typing.Optional[TimeSinceEpoch] = None\n\n    #: Cache Storage Cache Name.\n    cache_storage_cache_name: typing.Optional[str] = None\n\n    #: Protocol used to fetch this request.\n    protocol: typing.Optional[str] = None\n\n    #: The reason why Chrome uses a specific transport protocol for HTTP semantics.\n    alternate_protocol_usage: typing.Optional[AlternateProtocolUsage] = None\n\n    #: Security details for the request.\n    security_details: typing.Optional[SecurityDetails] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        json[\"status\"] = self.status\n        json[\"statusText\"] = self.status_text\n        json[\"headers\"] = self.headers.to_json()\n        json[\"mimeType\"] = self.mime_type\n        json[\"charset\"] = self.charset\n        json[\"connectionReused\"] = self.connection_reused\n        json[\"connectionId\"] = self.connection_id\n        json[\"encodedDataLength\"] = self.encoded_data_length\n        json[\"securityState\"] = self.security_state.to_json()\n        if self.headers_text is not None:\n            json[\"headersText\"] = self.headers_text\n        if self.request_headers is not None:\n            json[\"requestHeaders\"] = self.request_headers.to_json()\n        if self.request_headers_text is not None:\n            json[\"requestHeadersText\"] = self.request_headers_text\n        if self.remote_ip_address is not None:\n            json[\"remoteIPAddress\"] = self.remote_ip_address\n        if self.remote_port is not None:\n            json[\"remotePort\"] = self.remote_port\n        if self.from_disk_cache is not None:\n            json[\"fromDiskCache\"] = self.from_disk_cache\n        if self.from_service_worker is not None:\n            json[\"fromServiceWorker\"] = self.from_service_worker\n        if self.from_prefetch_cache is not None:\n            json[\"fromPrefetchCache\"] = self.from_prefetch_cache\n        if self.from_early_hints is not None:\n            json[\"fromEarlyHints\"] = self.from_early_hints\n        if self.service_worker_router_info is not None:\n            json[\"serviceWorkerRouterInfo\"] = self.service_worker_router_info.to_json()\n        if self.timing is not None:\n            json[\"timing\"] = self.timing.to_json()\n        if self.service_worker_response_source is not None:\n            json[\"serviceWorkerResponseSource\"] = (\n                self.service_worker_response_source.to_json()\n            )\n        if self.response_time is not None:\n            json[\"responseTime\"] = self.response_time.to_json()\n        if self.cache_storage_cache_name is not None:\n            json[\"cacheStorageCacheName\"] = self.cache_storage_cache_name\n        if self.protocol is not None:\n            json[\"protocol\"] = self.protocol\n        if self.alternate_protocol_usage is not None:\n            json[\"alternateProtocolUsage\"] = self.alternate_protocol_usage.to_json()\n        if self.security_details is not None:\n            json[\"securityDetails\"] = self.security_details.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Response:\n        return cls(\n            url=str(json[\"url\"]),\n            status=int(json[\"status\"]),\n            status_text=str(json[\"statusText\"]),\n            headers=Headers.from_json(json[\"headers\"]),\n            mime_type=str(json[\"mimeType\"]),\n            charset=str(json[\"charset\"]),\n            connection_reused=bool(json[\"connectionReused\"]),\n            connection_id=float(json[\"connectionId\"]),\n            encoded_data_length=float(json[\"encodedDataLength\"]),\n            security_state=security.SecurityState.from_json(json[\"securityState\"]),\n            headers_text=(\n                str(json[\"headersText\"])\n                if json.get(\"headersText\", None) is not None\n                else None\n            ),\n            request_headers=(\n                Headers.from_json(json[\"requestHeaders\"])\n                if json.get(\"requestHeaders\", None) is not None\n                else None\n            ),\n            request_headers_text=(\n                str(json[\"requestHeadersText\"])\n                if json.get(\"requestHeadersText\", None) is not None\n                else None\n            ),\n            remote_ip_address=(\n                str(json[\"remoteIPAddress\"])\n                if json.get(\"remoteIPAddress\", None) is not None\n                else None\n            ),\n            remote_port=(\n                int(json[\"remotePort\"])\n                if json.get(\"remotePort\", None) is not None\n                else None\n            ),\n            from_disk_cache=(\n                bool(json[\"fromDiskCache\"])\n                if json.get(\"fromDiskCache\", None) is not None\n                else None\n            ),\n            from_service_worker=(\n                bool(json[\"fromServiceWorker\"])\n                if json.get(\"fromServiceWorker\", None) is not None\n                else None\n            ),\n            from_prefetch_cache=(\n                bool(json[\"fromPrefetchCache\"])\n                if json.get(\"fromPrefetchCache\", None) is not None\n                else None\n            ),\n            from_early_hints=(\n                bool(json[\"fromEarlyHints\"])\n                if json.get(\"fromEarlyHints\", None) is not None\n                else None\n            ),\n            service_worker_router_info=(\n                ServiceWorkerRouterInfo.from_json(json[\"serviceWorkerRouterInfo\"])\n                if json.get(\"serviceWorkerRouterInfo\", None) is not None\n                else None\n            ),\n            timing=(\n                ResourceTiming.from_json(json[\"timing\"])\n                if json.get(\"timing\", None) is not None\n                else None\n            ),\n            service_worker_response_source=(\n                ServiceWorkerResponseSource.from_json(\n                    json[\"serviceWorkerResponseSource\"]\n                )\n                if json.get(\"serviceWorkerResponseSource\", None) is not None\n                else None\n            ),\n            response_time=(\n                TimeSinceEpoch.from_json(json[\"responseTime\"])\n                if json.get(\"responseTime\", None) is not None\n                else None\n            ),\n            cache_storage_cache_name=(\n                str(json[\"cacheStorageCacheName\"])\n                if json.get(\"cacheStorageCacheName\", None) is not None\n                else None\n            ),\n            protocol=(\n                str(json[\"protocol\"])\n                if json.get(\"protocol\", None) is not None\n                else None\n            ),\n            alternate_protocol_usage=(\n                AlternateProtocolUsage.from_json(json[\"alternateProtocolUsage\"])\n                if json.get(\"alternateProtocolUsage\", None) is not None\n                else None\n            ),\n            security_details=(\n                SecurityDetails.from_json(json[\"securityDetails\"])\n                if json.get(\"securityDetails\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.alternate_protocol_usage","title":"<code>alternate_protocol_usage: typing.Optional[AlternateProtocolUsage] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.cache_storage_cache_name","title":"<code>cache_storage_cache_name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.charset","title":"<code>charset: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.connection_id","title":"<code>connection_id: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.connection_reused","title":"<code>connection_reused: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.encoded_data_length","title":"<code>encoded_data_length: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.from_disk_cache","title":"<code>from_disk_cache: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.from_early_hints","title":"<code>from_early_hints: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.from_prefetch_cache","title":"<code>from_prefetch_cache: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.from_service_worker","title":"<code>from_service_worker: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.headers","title":"<code>headers: Headers</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.headers_text","title":"<code>headers_text: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.mime_type","title":"<code>mime_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.protocol","title":"<code>protocol: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.remote_ip_address","title":"<code>remote_ip_address: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.remote_port","title":"<code>remote_port: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.request_headers","title":"<code>request_headers: typing.Optional[Headers] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.request_headers_text","title":"<code>request_headers_text: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.response_time","title":"<code>response_time: typing.Optional[TimeSinceEpoch] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.security_details","title":"<code>security_details: typing.Optional[SecurityDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.security_state","title":"<code>security_state: security.SecurityState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.service_worker_response_source","title":"<code>service_worker_response_source: typing.Optional[ServiceWorkerResponseSource] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.service_worker_router_info","title":"<code>service_worker_router_info: typing.Optional[ServiceWorkerRouterInfo] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.status","title":"<code>status: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.status_text","title":"<code>status_text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.timing","title":"<code>timing: typing.Optional[ResourceTiming] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.__init__","title":"<code>__init__(url, status, status_text, headers, mime_type, charset, connection_reused, connection_id, encoded_data_length, security_state, headers_text=None, request_headers=None, request_headers_text=None, remote_ip_address=None, remote_port=None, from_disk_cache=None, from_service_worker=None, from_prefetch_cache=None, from_early_hints=None, service_worker_router_info=None, timing=None, service_worker_response_source=None, response_time=None, cache_storage_cache_name=None, protocol=None, alternate_protocol_usage=None, security_details=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Response:\n    return cls(\n        url=str(json[\"url\"]),\n        status=int(json[\"status\"]),\n        status_text=str(json[\"statusText\"]),\n        headers=Headers.from_json(json[\"headers\"]),\n        mime_type=str(json[\"mimeType\"]),\n        charset=str(json[\"charset\"]),\n        connection_reused=bool(json[\"connectionReused\"]),\n        connection_id=float(json[\"connectionId\"]),\n        encoded_data_length=float(json[\"encodedDataLength\"]),\n        security_state=security.SecurityState.from_json(json[\"securityState\"]),\n        headers_text=(\n            str(json[\"headersText\"])\n            if json.get(\"headersText\", None) is not None\n            else None\n        ),\n        request_headers=(\n            Headers.from_json(json[\"requestHeaders\"])\n            if json.get(\"requestHeaders\", None) is not None\n            else None\n        ),\n        request_headers_text=(\n            str(json[\"requestHeadersText\"])\n            if json.get(\"requestHeadersText\", None) is not None\n            else None\n        ),\n        remote_ip_address=(\n            str(json[\"remoteIPAddress\"])\n            if json.get(\"remoteIPAddress\", None) is not None\n            else None\n        ),\n        remote_port=(\n            int(json[\"remotePort\"])\n            if json.get(\"remotePort\", None) is not None\n            else None\n        ),\n        from_disk_cache=(\n            bool(json[\"fromDiskCache\"])\n            if json.get(\"fromDiskCache\", None) is not None\n            else None\n        ),\n        from_service_worker=(\n            bool(json[\"fromServiceWorker\"])\n            if json.get(\"fromServiceWorker\", None) is not None\n            else None\n        ),\n        from_prefetch_cache=(\n            bool(json[\"fromPrefetchCache\"])\n            if json.get(\"fromPrefetchCache\", None) is not None\n            else None\n        ),\n        from_early_hints=(\n            bool(json[\"fromEarlyHints\"])\n            if json.get(\"fromEarlyHints\", None) is not None\n            else None\n        ),\n        service_worker_router_info=(\n            ServiceWorkerRouterInfo.from_json(json[\"serviceWorkerRouterInfo\"])\n            if json.get(\"serviceWorkerRouterInfo\", None) is not None\n            else None\n        ),\n        timing=(\n            ResourceTiming.from_json(json[\"timing\"])\n            if json.get(\"timing\", None) is not None\n            else None\n        ),\n        service_worker_response_source=(\n            ServiceWorkerResponseSource.from_json(\n                json[\"serviceWorkerResponseSource\"]\n            )\n            if json.get(\"serviceWorkerResponseSource\", None) is not None\n            else None\n        ),\n        response_time=(\n            TimeSinceEpoch.from_json(json[\"responseTime\"])\n            if json.get(\"responseTime\", None) is not None\n            else None\n        ),\n        cache_storage_cache_name=(\n            str(json[\"cacheStorageCacheName\"])\n            if json.get(\"cacheStorageCacheName\", None) is not None\n            else None\n        ),\n        protocol=(\n            str(json[\"protocol\"])\n            if json.get(\"protocol\", None) is not None\n            else None\n        ),\n        alternate_protocol_usage=(\n            AlternateProtocolUsage.from_json(json[\"alternateProtocolUsage\"])\n            if json.get(\"alternateProtocolUsage\", None) is not None\n            else None\n        ),\n        security_details=(\n            SecurityDetails.from_json(json[\"securityDetails\"])\n            if json.get(\"securityDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.Response.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    json[\"status\"] = self.status\n    json[\"statusText\"] = self.status_text\n    json[\"headers\"] = self.headers.to_json()\n    json[\"mimeType\"] = self.mime_type\n    json[\"charset\"] = self.charset\n    json[\"connectionReused\"] = self.connection_reused\n    json[\"connectionId\"] = self.connection_id\n    json[\"encodedDataLength\"] = self.encoded_data_length\n    json[\"securityState\"] = self.security_state.to_json()\n    if self.headers_text is not None:\n        json[\"headersText\"] = self.headers_text\n    if self.request_headers is not None:\n        json[\"requestHeaders\"] = self.request_headers.to_json()\n    if self.request_headers_text is not None:\n        json[\"requestHeadersText\"] = self.request_headers_text\n    if self.remote_ip_address is not None:\n        json[\"remoteIPAddress\"] = self.remote_ip_address\n    if self.remote_port is not None:\n        json[\"remotePort\"] = self.remote_port\n    if self.from_disk_cache is not None:\n        json[\"fromDiskCache\"] = self.from_disk_cache\n    if self.from_service_worker is not None:\n        json[\"fromServiceWorker\"] = self.from_service_worker\n    if self.from_prefetch_cache is not None:\n        json[\"fromPrefetchCache\"] = self.from_prefetch_cache\n    if self.from_early_hints is not None:\n        json[\"fromEarlyHints\"] = self.from_early_hints\n    if self.service_worker_router_info is not None:\n        json[\"serviceWorkerRouterInfo\"] = self.service_worker_router_info.to_json()\n    if self.timing is not None:\n        json[\"timing\"] = self.timing.to_json()\n    if self.service_worker_response_source is not None:\n        json[\"serviceWorkerResponseSource\"] = (\n            self.service_worker_response_source.to_json()\n        )\n    if self.response_time is not None:\n        json[\"responseTime\"] = self.response_time.to_json()\n    if self.cache_storage_cache_name is not None:\n        json[\"cacheStorageCacheName\"] = self.cache_storage_cache_name\n    if self.protocol is not None:\n        json[\"protocol\"] = self.protocol\n    if self.alternate_protocol_usage is not None:\n        json[\"alternateProtocolUsage\"] = self.alternate_protocol_usage.to_json()\n    if self.security_details is not None:\n        json[\"securityDetails\"] = self.security_details.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceived","title":"<code>ResponseReceived</code>  <code>dataclass</code>","text":"<p>Fired when HTTP response is available.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.responseReceived\")\n@dataclass\nclass ResponseReceived:\n    \"\"\"\n    Fired when HTTP response is available.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Loader identifier. Empty string if the request is fetched from worker.\n    loader_id: LoaderId\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: Resource type.\n    type_: ResourceType\n    #: Response data.\n    response: Response\n    #: Indicates whether requestWillBeSentExtraInfo and responseReceivedExtraInfo events will be\n    #: or were emitted for this request.\n    has_extra_info: bool\n    #: Frame identifier.\n    frame_id: typing.Optional[page.FrameId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ResponseReceived:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            loader_id=LoaderId.from_json(json[\"loaderId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            type_=ResourceType.from_json(json[\"type\"]),\n            response=Response.from_json(json[\"response\"]),\n            has_extra_info=bool(json[\"hasExtraInfo\"]),\n            frame_id=(\n                page.FrameId.from_json(json[\"frameId\"])\n                if json.get(\"frameId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceived.frame_id","title":"<code>frame_id: typing.Optional[page.FrameId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceived.has_extra_info","title":"<code>has_extra_info: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceived.loader_id","title":"<code>loader_id: LoaderId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceived.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceived.response","title":"<code>response: Response</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceived.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceived.type_","title":"<code>type_: ResourceType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceived.__init__","title":"<code>__init__(request_id, loader_id, timestamp, type_, response, has_extra_info, frame_id)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceived.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ResponseReceived:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        loader_id=LoaderId.from_json(json[\"loaderId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        type_=ResourceType.from_json(json[\"type\"]),\n        response=Response.from_json(json[\"response\"]),\n        has_extra_info=bool(json[\"hasExtraInfo\"]),\n        frame_id=(\n            page.FrameId.from_json(json[\"frameId\"])\n            if json.get(\"frameId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedEarlyHints","title":"<code>ResponseReceivedEarlyHints</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when 103 Early Hints headers is received in addition to the common response. Not every responseReceived event will have an responseReceivedEarlyHints fired. Only one responseReceivedEarlyHints may be fired for eached responseReceived event.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.responseReceivedEarlyHints\")\n@dataclass\nclass ResponseReceivedEarlyHints:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when 103 Early Hints headers is received in addition to the common response.\n    Not every responseReceived event will have an responseReceivedEarlyHints fired.\n    Only one responseReceivedEarlyHints may be fired for eached responseReceived event.\n    \"\"\"\n\n    #: Request identifier. Used to match this information to another responseReceived event.\n    request_id: RequestId\n    #: Raw response headers as they were received over the wire.\n    headers: Headers\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ResponseReceivedEarlyHints:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            headers=Headers.from_json(json[\"headers\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedEarlyHints.headers","title":"<code>headers: Headers</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedEarlyHints.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedEarlyHints.__init__","title":"<code>__init__(request_id, headers)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedEarlyHints.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ResponseReceivedEarlyHints:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        headers=Headers.from_json(json[\"headers\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo","title":"<code>ResponseReceivedExtraInfo</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when additional information about a responseReceived event is available from the network stack. Not every responseReceived event will have an additional responseReceivedExtraInfo for it, and responseReceivedExtraInfo may be fired before or after responseReceived.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.responseReceivedExtraInfo\")\n@dataclass\nclass ResponseReceivedExtraInfo:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when additional information about a responseReceived event is available from the network\n    stack. Not every responseReceived event will have an additional responseReceivedExtraInfo for\n    it, and responseReceivedExtraInfo may be fired before or after responseReceived.\n    \"\"\"\n\n    #: Request identifier. Used to match this information to another responseReceived event.\n    request_id: RequestId\n    #: A list of cookies which were not stored from the response along with the corresponding\n    #: reasons for blocking. The cookies here may not be valid due to syntax errors, which\n    #: are represented by the invalid cookie line string instead of a proper cookie.\n    blocked_cookies: typing.List[BlockedSetCookieWithReason]\n    #: Raw response headers as they were received over the wire.\n    headers: Headers\n    #: The IP address space of the resource. The address space can only be determined once the transport\n    #: established the connection, so we can't send it in ``requestWillBeSentExtraInfo``.\n    resource_ip_address_space: IPAddressSpace\n    #: The status code of the response. This is useful in cases the request failed and no responseReceived\n    #: event is triggered, which is the case for, e.g., CORS errors. This is also the correct status code\n    #: for cached requests, where the status in responseReceived is a 200 and this will be 304.\n    status_code: int\n    #: Raw response header text as it was received over the wire. The raw text may not always be\n    #: available, such as in the case of HTTP/2 or QUIC.\n    headers_text: typing.Optional[str]\n    #: The cookie partition key that will be used to store partitioned cookies set in this response.\n    #: Only sent when partitioned cookies are enabled.\n    cookie_partition_key: typing.Optional[CookiePartitionKey]\n    #: True if partitioned cookies are enabled, but the partition key is not serializable to string.\n    cookie_partition_key_opaque: typing.Optional[bool]\n    #: A list of cookies which should have been blocked by 3PCD but are exempted and stored from\n    #: the response with the corresponding reason.\n    exempted_cookies: typing.Optional[typing.List[ExemptedSetCookieWithReason]]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ResponseReceivedExtraInfo:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            blocked_cookies=[\n                BlockedSetCookieWithReason.from_json(i) for i in json[\"blockedCookies\"]\n            ],\n            headers=Headers.from_json(json[\"headers\"]),\n            resource_ip_address_space=IPAddressSpace.from_json(\n                json[\"resourceIPAddressSpace\"]\n            ),\n            status_code=int(json[\"statusCode\"]),\n            headers_text=(\n                str(json[\"headersText\"])\n                if json.get(\"headersText\", None) is not None\n                else None\n            ),\n            cookie_partition_key=(\n                CookiePartitionKey.from_json(json[\"cookiePartitionKey\"])\n                if json.get(\"cookiePartitionKey\", None) is not None\n                else None\n            ),\n            cookie_partition_key_opaque=(\n                bool(json[\"cookiePartitionKeyOpaque\"])\n                if json.get(\"cookiePartitionKeyOpaque\", None) is not None\n                else None\n            ),\n            exempted_cookies=(\n                [\n                    ExemptedSetCookieWithReason.from_json(i)\n                    for i in json[\"exemptedCookies\"]\n                ]\n                if json.get(\"exemptedCookies\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.blocked_cookies","title":"<code>blocked_cookies: typing.List[BlockedSetCookieWithReason]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.cookie_partition_key","title":"<code>cookie_partition_key: typing.Optional[CookiePartitionKey]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.cookie_partition_key_opaque","title":"<code>cookie_partition_key_opaque: typing.Optional[bool]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.exempted_cookies","title":"<code>exempted_cookies: typing.Optional[typing.List[ExemptedSetCookieWithReason]]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.headers","title":"<code>headers: Headers</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.headers_text","title":"<code>headers_text: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.resource_ip_address_space","title":"<code>resource_ip_address_space: IPAddressSpace</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.status_code","title":"<code>status_code: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.__init__","title":"<code>__init__(request_id, blocked_cookies, headers, resource_ip_address_space, status_code, headers_text, cookie_partition_key, cookie_partition_key_opaque, exempted_cookies)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ResponseReceivedExtraInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ResponseReceivedExtraInfo:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        blocked_cookies=[\n            BlockedSetCookieWithReason.from_json(i) for i in json[\"blockedCookies\"]\n        ],\n        headers=Headers.from_json(json[\"headers\"]),\n        resource_ip_address_space=IPAddressSpace.from_json(\n            json[\"resourceIPAddressSpace\"]\n        ),\n        status_code=int(json[\"statusCode\"]),\n        headers_text=(\n            str(json[\"headersText\"])\n            if json.get(\"headersText\", None) is not None\n            else None\n        ),\n        cookie_partition_key=(\n            CookiePartitionKey.from_json(json[\"cookiePartitionKey\"])\n            if json.get(\"cookiePartitionKey\", None) is not None\n            else None\n        ),\n        cookie_partition_key_opaque=(\n            bool(json[\"cookiePartitionKeyOpaque\"])\n            if json.get(\"cookiePartitionKeyOpaque\", None) is not None\n            else None\n        ),\n        exempted_cookies=(\n            [\n                ExemptedSetCookieWithReason.from_json(i)\n                for i in json[\"exemptedCookies\"]\n            ]\n            if json.get(\"exemptedCookies\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails","title":"<code>SecurityDetails</code>  <code>dataclass</code>","text":"<p>Security details about a request.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass SecurityDetails:\n    \"\"\"\n    Security details about a request.\n    \"\"\"\n\n    #: Protocol name (e.g. \"TLS 1.2\" or \"QUIC\").\n    protocol: str\n\n    #: Key Exchange used by the connection, or the empty string if not applicable.\n    key_exchange: str\n\n    #: Cipher name.\n    cipher: str\n\n    #: Certificate ID value.\n    certificate_id: security.CertificateId\n\n    #: Certificate subject name.\n    subject_name: str\n\n    #: Subject Alternative Name (SAN) DNS names and IP addresses.\n    san_list: typing.List[str]\n\n    #: Name of the issuing CA.\n    issuer: str\n\n    #: Certificate valid from date.\n    valid_from: TimeSinceEpoch\n\n    #: Certificate valid to (expiration) date\n    valid_to: TimeSinceEpoch\n\n    #: List of signed certificate timestamps (SCTs).\n    signed_certificate_timestamp_list: typing.List[SignedCertificateTimestamp]\n\n    #: Whether the request complied with Certificate Transparency policy\n    certificate_transparency_compliance: CertificateTransparencyCompliance\n\n    #: Whether the connection used Encrypted ClientHello\n    encrypted_client_hello: bool\n\n    #: (EC)DH group used by the connection, if applicable.\n    key_exchange_group: typing.Optional[str] = None\n\n    #: TLS MAC. Note that AEAD ciphers do not have separate MACs.\n    mac: typing.Optional[str] = None\n\n    #: The signature algorithm used by the server in the TLS server signature,\n    #: represented as a TLS SignatureScheme code point. Omitted if not\n    #: applicable or not known.\n    server_signature_algorithm: typing.Optional[int] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"protocol\"] = self.protocol\n        json[\"keyExchange\"] = self.key_exchange\n        json[\"cipher\"] = self.cipher\n        json[\"certificateId\"] = self.certificate_id.to_json()\n        json[\"subjectName\"] = self.subject_name\n        json[\"sanList\"] = [i for i in self.san_list]\n        json[\"issuer\"] = self.issuer\n        json[\"validFrom\"] = self.valid_from.to_json()\n        json[\"validTo\"] = self.valid_to.to_json()\n        json[\"signedCertificateTimestampList\"] = [\n            i.to_json() for i in self.signed_certificate_timestamp_list\n        ]\n        json[\"certificateTransparencyCompliance\"] = (\n            self.certificate_transparency_compliance.to_json()\n        )\n        json[\"encryptedClientHello\"] = self.encrypted_client_hello\n        if self.key_exchange_group is not None:\n            json[\"keyExchangeGroup\"] = self.key_exchange_group\n        if self.mac is not None:\n            json[\"mac\"] = self.mac\n        if self.server_signature_algorithm is not None:\n            json[\"serverSignatureAlgorithm\"] = self.server_signature_algorithm\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SecurityDetails:\n        return cls(\n            protocol=str(json[\"protocol\"]),\n            key_exchange=str(json[\"keyExchange\"]),\n            cipher=str(json[\"cipher\"]),\n            certificate_id=security.CertificateId.from_json(json[\"certificateId\"]),\n            subject_name=str(json[\"subjectName\"]),\n            san_list=[str(i) for i in json[\"sanList\"]],\n            issuer=str(json[\"issuer\"]),\n            valid_from=TimeSinceEpoch.from_json(json[\"validFrom\"]),\n            valid_to=TimeSinceEpoch.from_json(json[\"validTo\"]),\n            signed_certificate_timestamp_list=[\n                SignedCertificateTimestamp.from_json(i)\n                for i in json[\"signedCertificateTimestampList\"]\n            ],\n            certificate_transparency_compliance=CertificateTransparencyCompliance.from_json(\n                json[\"certificateTransparencyCompliance\"]\n            ),\n            encrypted_client_hello=bool(json[\"encryptedClientHello\"]),\n            key_exchange_group=(\n                str(json[\"keyExchangeGroup\"])\n                if json.get(\"keyExchangeGroup\", None) is not None\n                else None\n            ),\n            mac=str(json[\"mac\"]) if json.get(\"mac\", None) is not None else None,\n            server_signature_algorithm=(\n                int(json[\"serverSignatureAlgorithm\"])\n                if json.get(\"serverSignatureAlgorithm\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.certificate_id","title":"<code>certificate_id: security.CertificateId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.certificate_transparency_compliance","title":"<code>certificate_transparency_compliance: CertificateTransparencyCompliance</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.cipher","title":"<code>cipher: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.encrypted_client_hello","title":"<code>encrypted_client_hello: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.issuer","title":"<code>issuer: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.key_exchange","title":"<code>key_exchange: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.key_exchange_group","title":"<code>key_exchange_group: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.mac","title":"<code>mac: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.protocol","title":"<code>protocol: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.san_list","title":"<code>san_list: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.server_signature_algorithm","title":"<code>server_signature_algorithm: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.signed_certificate_timestamp_list","title":"<code>signed_certificate_timestamp_list: typing.List[SignedCertificateTimestamp]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.subject_name","title":"<code>subject_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.valid_from","title":"<code>valid_from: TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.valid_to","title":"<code>valid_to: TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.__init__","title":"<code>__init__(protocol, key_exchange, cipher, certificate_id, subject_name, san_list, issuer, valid_from, valid_to, signed_certificate_timestamp_list, certificate_transparency_compliance, encrypted_client_hello, key_exchange_group=None, mac=None, server_signature_algorithm=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SecurityDetails:\n    return cls(\n        protocol=str(json[\"protocol\"]),\n        key_exchange=str(json[\"keyExchange\"]),\n        cipher=str(json[\"cipher\"]),\n        certificate_id=security.CertificateId.from_json(json[\"certificateId\"]),\n        subject_name=str(json[\"subjectName\"]),\n        san_list=[str(i) for i in json[\"sanList\"]],\n        issuer=str(json[\"issuer\"]),\n        valid_from=TimeSinceEpoch.from_json(json[\"validFrom\"]),\n        valid_to=TimeSinceEpoch.from_json(json[\"validTo\"]),\n        signed_certificate_timestamp_list=[\n            SignedCertificateTimestamp.from_json(i)\n            for i in json[\"signedCertificateTimestampList\"]\n        ],\n        certificate_transparency_compliance=CertificateTransparencyCompliance.from_json(\n            json[\"certificateTransparencyCompliance\"]\n        ),\n        encrypted_client_hello=bool(json[\"encryptedClientHello\"]),\n        key_exchange_group=(\n            str(json[\"keyExchangeGroup\"])\n            if json.get(\"keyExchangeGroup\", None) is not None\n            else None\n        ),\n        mac=str(json[\"mac\"]) if json.get(\"mac\", None) is not None else None,\n        server_signature_algorithm=(\n            int(json[\"serverSignatureAlgorithm\"])\n            if json.get(\"serverSignatureAlgorithm\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"protocol\"] = self.protocol\n    json[\"keyExchange\"] = self.key_exchange\n    json[\"cipher\"] = self.cipher\n    json[\"certificateId\"] = self.certificate_id.to_json()\n    json[\"subjectName\"] = self.subject_name\n    json[\"sanList\"] = [i for i in self.san_list]\n    json[\"issuer\"] = self.issuer\n    json[\"validFrom\"] = self.valid_from.to_json()\n    json[\"validTo\"] = self.valid_to.to_json()\n    json[\"signedCertificateTimestampList\"] = [\n        i.to_json() for i in self.signed_certificate_timestamp_list\n    ]\n    json[\"certificateTransparencyCompliance\"] = (\n        self.certificate_transparency_compliance.to_json()\n    )\n    json[\"encryptedClientHello\"] = self.encrypted_client_hello\n    if self.key_exchange_group is not None:\n        json[\"keyExchangeGroup\"] = self.key_exchange_group\n    if self.mac is not None:\n        json[\"mac\"] = self.mac\n    if self.server_signature_algorithm is not None:\n        json[\"serverSignatureAlgorithm\"] = self.server_signature_algorithm\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityIsolationStatus","title":"<code>SecurityIsolationStatus</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass SecurityIsolationStatus:\n    coop: typing.Optional[CrossOriginOpenerPolicyStatus] = None\n\n    coep: typing.Optional[CrossOriginEmbedderPolicyStatus] = None\n\n    csp: typing.Optional[typing.List[ContentSecurityPolicyStatus]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.coop is not None:\n            json[\"coop\"] = self.coop.to_json()\n        if self.coep is not None:\n            json[\"coep\"] = self.coep.to_json()\n        if self.csp is not None:\n            json[\"csp\"] = [i.to_json() for i in self.csp]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SecurityIsolationStatus:\n        return cls(\n            coop=(\n                CrossOriginOpenerPolicyStatus.from_json(json[\"coop\"])\n                if json.get(\"coop\", None) is not None\n                else None\n            ),\n            coep=(\n                CrossOriginEmbedderPolicyStatus.from_json(json[\"coep\"])\n                if json.get(\"coep\", None) is not None\n                else None\n            ),\n            csp=(\n                [ContentSecurityPolicyStatus.from_json(i) for i in json[\"csp\"]]\n                if json.get(\"csp\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityIsolationStatus.coep","title":"<code>coep: typing.Optional[CrossOriginEmbedderPolicyStatus] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityIsolationStatus.coop","title":"<code>coop: typing.Optional[CrossOriginOpenerPolicyStatus] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityIsolationStatus.csp","title":"<code>csp: typing.Optional[typing.List[ContentSecurityPolicyStatus]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityIsolationStatus.__init__","title":"<code>__init__(coop=None, coep=None, csp=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityIsolationStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SecurityIsolationStatus:\n    return cls(\n        coop=(\n            CrossOriginOpenerPolicyStatus.from_json(json[\"coop\"])\n            if json.get(\"coop\", None) is not None\n            else None\n        ),\n        coep=(\n            CrossOriginEmbedderPolicyStatus.from_json(json[\"coep\"])\n            if json.get(\"coep\", None) is not None\n            else None\n        ),\n        csp=(\n            [ContentSecurityPolicyStatus.from_json(i) for i in json[\"csp\"]]\n            if json.get(\"csp\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SecurityIsolationStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.coop is not None:\n        json[\"coop\"] = self.coop.to_json()\n    if self.coep is not None:\n        json[\"coep\"] = self.coep.to_json()\n    if self.csp is not None:\n        json[\"csp\"] = [i.to_json() for i in self.csp]\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerResponseSource","title":"<code>ServiceWorkerResponseSource</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Source of serviceworker response.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class ServiceWorkerResponseSource(enum.Enum):\n    \"\"\"\n    Source of serviceworker response.\n    \"\"\"\n\n    CACHE_STORAGE = \"cache-storage\"\n    HTTP_CACHE = \"http-cache\"\n    FALLBACK_CODE = \"fallback-code\"\n    NETWORK = \"network\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ServiceWorkerResponseSource:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerResponseSource.CACHE_STORAGE","title":"<code>CACHE_STORAGE = 'cache-storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerResponseSource.FALLBACK_CODE","title":"<code>FALLBACK_CODE = 'fallback-code'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerResponseSource.HTTP_CACHE","title":"<code>HTTP_CACHE = 'http-cache'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerResponseSource.NETWORK","title":"<code>NETWORK = 'network'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerResponseSource.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ServiceWorkerResponseSource:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerResponseSource.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterInfo","title":"<code>ServiceWorkerRouterInfo</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass ServiceWorkerRouterInfo:\n    #: ID of the rule matched. If there is a matched rule, this field will\n    #: be set, otherwiser no value will be set.\n    rule_id_matched: typing.Optional[int] = None\n\n    #: The router source of the matched rule. If there is a matched rule, this\n    #: field will be set, otherwise no value will be set.\n    matched_source_type: typing.Optional[ServiceWorkerRouterSource] = None\n\n    #: The actual router source used.\n    actual_source_type: typing.Optional[ServiceWorkerRouterSource] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.rule_id_matched is not None:\n            json[\"ruleIdMatched\"] = self.rule_id_matched\n        if self.matched_source_type is not None:\n            json[\"matchedSourceType\"] = self.matched_source_type.to_json()\n        if self.actual_source_type is not None:\n            json[\"actualSourceType\"] = self.actual_source_type.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ServiceWorkerRouterInfo:\n        return cls(\n            rule_id_matched=(\n                int(json[\"ruleIdMatched\"])\n                if json.get(\"ruleIdMatched\", None) is not None\n                else None\n            ),\n            matched_source_type=(\n                ServiceWorkerRouterSource.from_json(json[\"matchedSourceType\"])\n                if json.get(\"matchedSourceType\", None) is not None\n                else None\n            ),\n            actual_source_type=(\n                ServiceWorkerRouterSource.from_json(json[\"actualSourceType\"])\n                if json.get(\"actualSourceType\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterInfo.actual_source_type","title":"<code>actual_source_type: typing.Optional[ServiceWorkerRouterSource] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterInfo.matched_source_type","title":"<code>matched_source_type: typing.Optional[ServiceWorkerRouterSource] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterInfo.rule_id_matched","title":"<code>rule_id_matched: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterInfo.__init__","title":"<code>__init__(rule_id_matched=None, matched_source_type=None, actual_source_type=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ServiceWorkerRouterInfo:\n    return cls(\n        rule_id_matched=(\n            int(json[\"ruleIdMatched\"])\n            if json.get(\"ruleIdMatched\", None) is not None\n            else None\n        ),\n        matched_source_type=(\n            ServiceWorkerRouterSource.from_json(json[\"matchedSourceType\"])\n            if json.get(\"matchedSourceType\", None) is not None\n            else None\n        ),\n        actual_source_type=(\n            ServiceWorkerRouterSource.from_json(json[\"actualSourceType\"])\n            if json.get(\"actualSourceType\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterInfo.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.rule_id_matched is not None:\n        json[\"ruleIdMatched\"] = self.rule_id_matched\n    if self.matched_source_type is not None:\n        json[\"matchedSourceType\"] = self.matched_source_type.to_json()\n    if self.actual_source_type is not None:\n        json[\"actualSourceType\"] = self.actual_source_type.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterSource","title":"<code>ServiceWorkerRouterSource</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Source of service worker router.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class ServiceWorkerRouterSource(enum.Enum):\n    \"\"\"\n    Source of service worker router.\n    \"\"\"\n\n    NETWORK = \"network\"\n    CACHE = \"cache\"\n    FETCH_EVENT = \"fetch-event\"\n    RACE_NETWORK_AND_FETCH_HANDLER = \"race-network-and-fetch-handler\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ServiceWorkerRouterSource:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterSource.CACHE","title":"<code>CACHE = 'cache'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterSource.FETCH_EVENT","title":"<code>FETCH_EVENT = 'fetch-event'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterSource.NETWORK","title":"<code>NETWORK = 'network'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterSource.RACE_NETWORK_AND_FETCH_HANDLER","title":"<code>RACE_NETWORK_AND_FETCH_HANDLER = 'race-network-and-fetch-handler'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterSource.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ServiceWorkerRouterSource:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.ServiceWorkerRouterSource.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason","title":"<code>SetCookieBlockedReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Types of reasons why a cookie may not be stored from a response.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class SetCookieBlockedReason(enum.Enum):\n    \"\"\"\n    Types of reasons why a cookie may not be stored from a response.\n    \"\"\"\n\n    SECURE_ONLY = \"SecureOnly\"\n    SAME_SITE_STRICT = \"SameSiteStrict\"\n    SAME_SITE_LAX = \"SameSiteLax\"\n    SAME_SITE_UNSPECIFIED_TREATED_AS_LAX = \"SameSiteUnspecifiedTreatedAsLax\"\n    SAME_SITE_NONE_INSECURE = \"SameSiteNoneInsecure\"\n    USER_PREFERENCES = \"UserPreferences\"\n    THIRD_PARTY_PHASEOUT = \"ThirdPartyPhaseout\"\n    THIRD_PARTY_BLOCKED_IN_FIRST_PARTY_SET = \"ThirdPartyBlockedInFirstPartySet\"\n    SYNTAX_ERROR = \"SyntaxError\"\n    SCHEME_NOT_SUPPORTED = \"SchemeNotSupported\"\n    OVERWRITE_SECURE = \"OverwriteSecure\"\n    INVALID_DOMAIN = \"InvalidDomain\"\n    INVALID_PREFIX = \"InvalidPrefix\"\n    UNKNOWN_ERROR = \"UnknownError\"\n    SCHEMEFUL_SAME_SITE_STRICT = \"SchemefulSameSiteStrict\"\n    SCHEMEFUL_SAME_SITE_LAX = \"SchemefulSameSiteLax\"\n    SCHEMEFUL_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX = (\n        \"SchemefulSameSiteUnspecifiedTreatedAsLax\"\n    )\n    SAME_PARTY_FROM_CROSS_PARTY_CONTEXT = \"SamePartyFromCrossPartyContext\"\n    SAME_PARTY_CONFLICTS_WITH_OTHER_ATTRIBUTES = \"SamePartyConflictsWithOtherAttributes\"\n    NAME_VALUE_PAIR_EXCEEDS_MAX_SIZE = \"NameValuePairExceedsMaxSize\"\n    DISALLOWED_CHARACTER = \"DisallowedCharacter\"\n    NO_COOKIE_CONTENT = \"NoCookieContent\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SetCookieBlockedReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.DISALLOWED_CHARACTER","title":"<code>DISALLOWED_CHARACTER = 'DisallowedCharacter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.INVALID_DOMAIN","title":"<code>INVALID_DOMAIN = 'InvalidDomain'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.INVALID_PREFIX","title":"<code>INVALID_PREFIX = 'InvalidPrefix'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.NAME_VALUE_PAIR_EXCEEDS_MAX_SIZE","title":"<code>NAME_VALUE_PAIR_EXCEEDS_MAX_SIZE = 'NameValuePairExceedsMaxSize'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.NO_COOKIE_CONTENT","title":"<code>NO_COOKIE_CONTENT = 'NoCookieContent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.OVERWRITE_SECURE","title":"<code>OVERWRITE_SECURE = 'OverwriteSecure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SAME_PARTY_CONFLICTS_WITH_OTHER_ATTRIBUTES","title":"<code>SAME_PARTY_CONFLICTS_WITH_OTHER_ATTRIBUTES = 'SamePartyConflictsWithOtherAttributes'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SAME_PARTY_FROM_CROSS_PARTY_CONTEXT","title":"<code>SAME_PARTY_FROM_CROSS_PARTY_CONTEXT = 'SamePartyFromCrossPartyContext'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SAME_SITE_LAX","title":"<code>SAME_SITE_LAX = 'SameSiteLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SAME_SITE_NONE_INSECURE","title":"<code>SAME_SITE_NONE_INSECURE = 'SameSiteNoneInsecure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SAME_SITE_STRICT","title":"<code>SAME_SITE_STRICT = 'SameSiteStrict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SAME_SITE_UNSPECIFIED_TREATED_AS_LAX","title":"<code>SAME_SITE_UNSPECIFIED_TREATED_AS_LAX = 'SameSiteUnspecifiedTreatedAsLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SCHEMEFUL_SAME_SITE_LAX","title":"<code>SCHEMEFUL_SAME_SITE_LAX = 'SchemefulSameSiteLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SCHEMEFUL_SAME_SITE_STRICT","title":"<code>SCHEMEFUL_SAME_SITE_STRICT = 'SchemefulSameSiteStrict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SCHEMEFUL_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX","title":"<code>SCHEMEFUL_SAME_SITE_UNSPECIFIED_TREATED_AS_LAX = 'SchemefulSameSiteUnspecifiedTreatedAsLax'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SCHEME_NOT_SUPPORTED","title":"<code>SCHEME_NOT_SUPPORTED = 'SchemeNotSupported'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SECURE_ONLY","title":"<code>SECURE_ONLY = 'SecureOnly'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.SYNTAX_ERROR","title":"<code>SYNTAX_ERROR = 'SyntaxError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.THIRD_PARTY_BLOCKED_IN_FIRST_PARTY_SET","title":"<code>THIRD_PARTY_BLOCKED_IN_FIRST_PARTY_SET = 'ThirdPartyBlockedInFirstPartySet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.THIRD_PARTY_PHASEOUT","title":"<code>THIRD_PARTY_PHASEOUT = 'ThirdPartyPhaseout'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.UNKNOWN_ERROR","title":"<code>UNKNOWN_ERROR = 'UnknownError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.USER_PREFERENCES","title":"<code>USER_PREFERENCES = 'UserPreferences'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SetCookieBlockedReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SetCookieBlockedReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp","title":"<code>SignedCertificateTimestamp</code>  <code>dataclass</code>","text":"<p>Details of a signed certificate timestamp (SCT).</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass SignedCertificateTimestamp:\n    \"\"\"\n    Details of a signed certificate timestamp (SCT).\n    \"\"\"\n\n    #: Validation status.\n    status: str\n\n    #: Origin.\n    origin: str\n\n    #: Log name / description.\n    log_description: str\n\n    #: Log ID.\n    log_id: str\n\n    #: Issuance date. Unlike TimeSinceEpoch, this contains the number of\n    #: milliseconds since January 1, 1970, UTC, not the number of seconds.\n    timestamp: float\n\n    #: Hash algorithm.\n    hash_algorithm: str\n\n    #: Signature algorithm.\n    signature_algorithm: str\n\n    #: Signature data.\n    signature_data: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"status\"] = self.status\n        json[\"origin\"] = self.origin\n        json[\"logDescription\"] = self.log_description\n        json[\"logId\"] = self.log_id\n        json[\"timestamp\"] = self.timestamp\n        json[\"hashAlgorithm\"] = self.hash_algorithm\n        json[\"signatureAlgorithm\"] = self.signature_algorithm\n        json[\"signatureData\"] = self.signature_data\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SignedCertificateTimestamp:\n        return cls(\n            status=str(json[\"status\"]),\n            origin=str(json[\"origin\"]),\n            log_description=str(json[\"logDescription\"]),\n            log_id=str(json[\"logId\"]),\n            timestamp=float(json[\"timestamp\"]),\n            hash_algorithm=str(json[\"hashAlgorithm\"]),\n            signature_algorithm=str(json[\"signatureAlgorithm\"]),\n            signature_data=str(json[\"signatureData\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.hash_algorithm","title":"<code>hash_algorithm: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.log_description","title":"<code>log_description: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.log_id","title":"<code>log_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.signature_algorithm","title":"<code>signature_algorithm: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.signature_data","title":"<code>signature_data: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.status","title":"<code>status: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.timestamp","title":"<code>timestamp: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.__init__","title":"<code>__init__(status, origin, log_description, log_id, timestamp, hash_algorithm, signature_algorithm, signature_data)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SignedCertificateTimestamp:\n    return cls(\n        status=str(json[\"status\"]),\n        origin=str(json[\"origin\"]),\n        log_description=str(json[\"logDescription\"]),\n        log_id=str(json[\"logId\"]),\n        timestamp=float(json[\"timestamp\"]),\n        hash_algorithm=str(json[\"hashAlgorithm\"]),\n        signature_algorithm=str(json[\"signatureAlgorithm\"]),\n        signature_data=str(json[\"signatureData\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedCertificateTimestamp.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"status\"] = self.status\n    json[\"origin\"] = self.origin\n    json[\"logDescription\"] = self.log_description\n    json[\"logId\"] = self.log_id\n    json[\"timestamp\"] = self.timestamp\n    json[\"hashAlgorithm\"] = self.hash_algorithm\n    json[\"signatureAlgorithm\"] = self.signature_algorithm\n    json[\"signatureData\"] = self.signature_data\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeError","title":"<code>SignedExchangeError</code>  <code>dataclass</code>","text":"<p>Information about a signed exchange response.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass SignedExchangeError:\n    \"\"\"\n    Information about a signed exchange response.\n    \"\"\"\n\n    #: Error message.\n    message: str\n\n    #: The index of the signature which caused the error.\n    signature_index: typing.Optional[int] = None\n\n    #: The field which caused the error.\n    error_field: typing.Optional[SignedExchangeErrorField] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"message\"] = self.message\n        if self.signature_index is not None:\n            json[\"signatureIndex\"] = self.signature_index\n        if self.error_field is not None:\n            json[\"errorField\"] = self.error_field.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SignedExchangeError:\n        return cls(\n            message=str(json[\"message\"]),\n            signature_index=(\n                int(json[\"signatureIndex\"])\n                if json.get(\"signatureIndex\", None) is not None\n                else None\n            ),\n            error_field=(\n                SignedExchangeErrorField.from_json(json[\"errorField\"])\n                if json.get(\"errorField\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeError.error_field","title":"<code>error_field: typing.Optional[SignedExchangeErrorField] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeError.message","title":"<code>message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeError.signature_index","title":"<code>signature_index: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeError.__init__","title":"<code>__init__(message, signature_index=None, error_field=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeError.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SignedExchangeError:\n    return cls(\n        message=str(json[\"message\"]),\n        signature_index=(\n            int(json[\"signatureIndex\"])\n            if json.get(\"signatureIndex\", None) is not None\n            else None\n        ),\n        error_field=(\n            SignedExchangeErrorField.from_json(json[\"errorField\"])\n            if json.get(\"errorField\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeError.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"message\"] = self.message\n    if self.signature_index is not None:\n        json[\"signatureIndex\"] = self.signature_index\n    if self.error_field is not None:\n        json[\"errorField\"] = self.error_field.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeErrorField","title":"<code>SignedExchangeErrorField</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Field type for a signed exchange related error.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class SignedExchangeErrorField(enum.Enum):\n    \"\"\"\n    Field type for a signed exchange related error.\n    \"\"\"\n\n    SIGNATURE_SIG = \"signatureSig\"\n    SIGNATURE_INTEGRITY = \"signatureIntegrity\"\n    SIGNATURE_CERT_URL = \"signatureCertUrl\"\n    SIGNATURE_CERT_SHA256 = \"signatureCertSha256\"\n    SIGNATURE_VALIDITY_URL = \"signatureValidityUrl\"\n    SIGNATURE_TIMESTAMPS = \"signatureTimestamps\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SignedExchangeErrorField:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeErrorField.SIGNATURE_CERT_SHA256","title":"<code>SIGNATURE_CERT_SHA256 = 'signatureCertSha256'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeErrorField.SIGNATURE_CERT_URL","title":"<code>SIGNATURE_CERT_URL = 'signatureCertUrl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeErrorField.SIGNATURE_INTEGRITY","title":"<code>SIGNATURE_INTEGRITY = 'signatureIntegrity'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeErrorField.SIGNATURE_SIG","title":"<code>SIGNATURE_SIG = 'signatureSig'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeErrorField.SIGNATURE_TIMESTAMPS","title":"<code>SIGNATURE_TIMESTAMPS = 'signatureTimestamps'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeErrorField.SIGNATURE_VALIDITY_URL","title":"<code>SIGNATURE_VALIDITY_URL = 'signatureValidityUrl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeErrorField.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SignedExchangeErrorField:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeErrorField.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeHeader","title":"<code>SignedExchangeHeader</code>  <code>dataclass</code>","text":"<p>Information about a signed exchange header. https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#cbor-representation</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass SignedExchangeHeader:\n    \"\"\"\n    Information about a signed exchange header.\n    https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#cbor-representation\n    \"\"\"\n\n    #: Signed exchange request URL.\n    request_url: str\n\n    #: Signed exchange response code.\n    response_code: int\n\n    #: Signed exchange response headers.\n    response_headers: Headers\n\n    #: Signed exchange response signature.\n    signatures: typing.List[SignedExchangeSignature]\n\n    #: Signed exchange header integrity hash in the form of ``sha256-&lt;base64-hash-value&gt;``.\n    header_integrity: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"requestUrl\"] = self.request_url\n        json[\"responseCode\"] = self.response_code\n        json[\"responseHeaders\"] = self.response_headers.to_json()\n        json[\"signatures\"] = [i.to_json() for i in self.signatures]\n        json[\"headerIntegrity\"] = self.header_integrity\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SignedExchangeHeader:\n        return cls(\n            request_url=str(json[\"requestUrl\"]),\n            response_code=int(json[\"responseCode\"]),\n            response_headers=Headers.from_json(json[\"responseHeaders\"]),\n            signatures=[\n                SignedExchangeSignature.from_json(i) for i in json[\"signatures\"]\n            ],\n            header_integrity=str(json[\"headerIntegrity\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeHeader.header_integrity","title":"<code>header_integrity: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeHeader.request_url","title":"<code>request_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeHeader.response_code","title":"<code>response_code: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeHeader.response_headers","title":"<code>response_headers: Headers</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeHeader.signatures","title":"<code>signatures: typing.List[SignedExchangeSignature]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeHeader.__init__","title":"<code>__init__(request_url, response_code, response_headers, signatures, header_integrity)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeHeader.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SignedExchangeHeader:\n    return cls(\n        request_url=str(json[\"requestUrl\"]),\n        response_code=int(json[\"responseCode\"]),\n        response_headers=Headers.from_json(json[\"responseHeaders\"]),\n        signatures=[\n            SignedExchangeSignature.from_json(i) for i in json[\"signatures\"]\n        ],\n        header_integrity=str(json[\"headerIntegrity\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeHeader.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"requestUrl\"] = self.request_url\n    json[\"responseCode\"] = self.response_code\n    json[\"responseHeaders\"] = self.response_headers.to_json()\n    json[\"signatures\"] = [i.to_json() for i in self.signatures]\n    json[\"headerIntegrity\"] = self.header_integrity\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeInfo","title":"<code>SignedExchangeInfo</code>  <code>dataclass</code>","text":"<p>Information about a signed exchange response.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass SignedExchangeInfo:\n    \"\"\"\n    Information about a signed exchange response.\n    \"\"\"\n\n    #: The outer response of signed HTTP exchange which was received from network.\n    outer_response: Response\n\n    #: Information about the signed exchange header.\n    header: typing.Optional[SignedExchangeHeader] = None\n\n    #: Security details for the signed exchange header.\n    security_details: typing.Optional[SecurityDetails] = None\n\n    #: Errors occurred while handling the signed exchange.\n    errors: typing.Optional[typing.List[SignedExchangeError]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"outerResponse\"] = self.outer_response.to_json()\n        if self.header is not None:\n            json[\"header\"] = self.header.to_json()\n        if self.security_details is not None:\n            json[\"securityDetails\"] = self.security_details.to_json()\n        if self.errors is not None:\n            json[\"errors\"] = [i.to_json() for i in self.errors]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SignedExchangeInfo:\n        return cls(\n            outer_response=Response.from_json(json[\"outerResponse\"]),\n            header=(\n                SignedExchangeHeader.from_json(json[\"header\"])\n                if json.get(\"header\", None) is not None\n                else None\n            ),\n            security_details=(\n                SecurityDetails.from_json(json[\"securityDetails\"])\n                if json.get(\"securityDetails\", None) is not None\n                else None\n            ),\n            errors=(\n                [SignedExchangeError.from_json(i) for i in json[\"errors\"]]\n                if json.get(\"errors\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeInfo.errors","title":"<code>errors: typing.Optional[typing.List[SignedExchangeError]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeInfo.header","title":"<code>header: typing.Optional[SignedExchangeHeader] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeInfo.outer_response","title":"<code>outer_response: Response</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeInfo.security_details","title":"<code>security_details: typing.Optional[SecurityDetails] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeInfo.__init__","title":"<code>__init__(outer_response, header=None, security_details=None, errors=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SignedExchangeInfo:\n    return cls(\n        outer_response=Response.from_json(json[\"outerResponse\"]),\n        header=(\n            SignedExchangeHeader.from_json(json[\"header\"])\n            if json.get(\"header\", None) is not None\n            else None\n        ),\n        security_details=(\n            SecurityDetails.from_json(json[\"securityDetails\"])\n            if json.get(\"securityDetails\", None) is not None\n            else None\n        ),\n        errors=(\n            [SignedExchangeError.from_json(i) for i in json[\"errors\"]]\n            if json.get(\"errors\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeInfo.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"outerResponse\"] = self.outer_response.to_json()\n    if self.header is not None:\n        json[\"header\"] = self.header.to_json()\n    if self.security_details is not None:\n        json[\"securityDetails\"] = self.security_details.to_json()\n    if self.errors is not None:\n        json[\"errors\"] = [i.to_json() for i in self.errors]\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeReceived","title":"<code>SignedExchangeReceived</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when a signed exchange was received over the network</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.signedExchangeReceived\")\n@dataclass\nclass SignedExchangeReceived:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when a signed exchange was received over the network\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Information about the signed exchange response.\n    info: SignedExchangeInfo\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SignedExchangeReceived:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            info=SignedExchangeInfo.from_json(json[\"info\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeReceived.info","title":"<code>info: SignedExchangeInfo</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeReceived.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeReceived.__init__","title":"<code>__init__(request_id, info)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeReceived.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SignedExchangeReceived:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        info=SignedExchangeInfo.from_json(json[\"info\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature","title":"<code>SignedExchangeSignature</code>  <code>dataclass</code>","text":"<p>Information about a signed exchange signature. https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#rfc.section.3.1</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass SignedExchangeSignature:\n    \"\"\"\n    Information about a signed exchange signature.\n    https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#rfc.section.3.1\n    \"\"\"\n\n    #: Signed exchange signature label.\n    label: str\n\n    #: The hex string of signed exchange signature.\n    signature: str\n\n    #: Signed exchange signature integrity.\n    integrity: str\n\n    #: Signed exchange signature validity Url.\n    validity_url: str\n\n    #: Signed exchange signature date.\n    date: int\n\n    #: Signed exchange signature expires.\n    expires: int\n\n    #: Signed exchange signature cert Url.\n    cert_url: typing.Optional[str] = None\n\n    #: The hex string of signed exchange signature cert sha256.\n    cert_sha256: typing.Optional[str] = None\n\n    #: The encoded certificates.\n    certificates: typing.Optional[typing.List[str]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"label\"] = self.label\n        json[\"signature\"] = self.signature\n        json[\"integrity\"] = self.integrity\n        json[\"validityUrl\"] = self.validity_url\n        json[\"date\"] = self.date\n        json[\"expires\"] = self.expires\n        if self.cert_url is not None:\n            json[\"certUrl\"] = self.cert_url\n        if self.cert_sha256 is not None:\n            json[\"certSha256\"] = self.cert_sha256\n        if self.certificates is not None:\n            json[\"certificates\"] = [i for i in self.certificates]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SignedExchangeSignature:\n        return cls(\n            label=str(json[\"label\"]),\n            signature=str(json[\"signature\"]),\n            integrity=str(json[\"integrity\"]),\n            validity_url=str(json[\"validityUrl\"]),\n            date=int(json[\"date\"]),\n            expires=int(json[\"expires\"]),\n            cert_url=(\n                str(json[\"certUrl\"]) if json.get(\"certUrl\", None) is not None else None\n            ),\n            cert_sha256=(\n                str(json[\"certSha256\"])\n                if json.get(\"certSha256\", None) is not None\n                else None\n            ),\n            certificates=(\n                [str(i) for i in json[\"certificates\"]]\n                if json.get(\"certificates\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.cert_sha256","title":"<code>cert_sha256: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.cert_url","title":"<code>cert_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.certificates","title":"<code>certificates: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.date","title":"<code>date: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.expires","title":"<code>expires: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.integrity","title":"<code>integrity: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.label","title":"<code>label: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.signature","title":"<code>signature: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.validity_url","title":"<code>validity_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.__init__","title":"<code>__init__(label, signature, integrity, validity_url, date, expires, cert_url=None, cert_sha256=None, certificates=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SignedExchangeSignature:\n    return cls(\n        label=str(json[\"label\"]),\n        signature=str(json[\"signature\"]),\n        integrity=str(json[\"integrity\"]),\n        validity_url=str(json[\"validityUrl\"]),\n        date=int(json[\"date\"]),\n        expires=int(json[\"expires\"]),\n        cert_url=(\n            str(json[\"certUrl\"]) if json.get(\"certUrl\", None) is not None else None\n        ),\n        cert_sha256=(\n            str(json[\"certSha256\"])\n            if json.get(\"certSha256\", None) is not None\n            else None\n        ),\n        certificates=(\n            [str(i) for i in json[\"certificates\"]]\n            if json.get(\"certificates\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SignedExchangeSignature.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"label\"] = self.label\n    json[\"signature\"] = self.signature\n    json[\"integrity\"] = self.integrity\n    json[\"validityUrl\"] = self.validity_url\n    json[\"date\"] = self.date\n    json[\"expires\"] = self.expires\n    if self.cert_url is not None:\n        json[\"certUrl\"] = self.cert_url\n    if self.cert_sha256 is not None:\n        json[\"certSha256\"] = self.cert_sha256\n    if self.certificates is not None:\n        json[\"certificates\"] = [i for i in self.certificates]\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseError","title":"<code>SubresourceWebBundleInnerResponseError</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when request for resources within a .wbn file failed.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.subresourceWebBundleInnerResponseError\")\n@dataclass\nclass SubresourceWebBundleInnerResponseError:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when request for resources within a .wbn file failed.\n    \"\"\"\n\n    #: Request identifier of the subresource request\n    inner_request_id: RequestId\n    #: URL of the subresource resource.\n    inner_request_url: str\n    #: Error message\n    error_message: str\n    #: Bundle request identifier. Used to match this information to another event.\n    #: This made be absent in case when the instrumentation was enabled only\n    #: after webbundle was parsed.\n    bundle_request_id: typing.Optional[RequestId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SubresourceWebBundleInnerResponseError:\n        return cls(\n            inner_request_id=RequestId.from_json(json[\"innerRequestId\"]),\n            inner_request_url=str(json[\"innerRequestURL\"]),\n            error_message=str(json[\"errorMessage\"]),\n            bundle_request_id=(\n                RequestId.from_json(json[\"bundleRequestId\"])\n                if json.get(\"bundleRequestId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseError.bundle_request_id","title":"<code>bundle_request_id: typing.Optional[RequestId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseError.error_message","title":"<code>error_message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseError.inner_request_id","title":"<code>inner_request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseError.inner_request_url","title":"<code>inner_request_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseError.__init__","title":"<code>__init__(inner_request_id, inner_request_url, error_message, bundle_request_id)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseError.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SubresourceWebBundleInnerResponseError:\n    return cls(\n        inner_request_id=RequestId.from_json(json[\"innerRequestId\"]),\n        inner_request_url=str(json[\"innerRequestURL\"]),\n        error_message=str(json[\"errorMessage\"]),\n        bundle_request_id=(\n            RequestId.from_json(json[\"bundleRequestId\"])\n            if json.get(\"bundleRequestId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseParsed","title":"<code>SubresourceWebBundleInnerResponseParsed</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when handling requests for resources within a .wbn file. Note: this will only be fired for resources that are requested by the webpage.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.subresourceWebBundleInnerResponseParsed\")\n@dataclass\nclass SubresourceWebBundleInnerResponseParsed:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when handling requests for resources within a .wbn file.\n    Note: this will only be fired for resources that are requested by the webpage.\n    \"\"\"\n\n    #: Request identifier of the subresource request\n    inner_request_id: RequestId\n    #: URL of the subresource resource.\n    inner_request_url: str\n    #: Bundle request identifier. Used to match this information to another event.\n    #: This made be absent in case when the instrumentation was enabled only\n    #: after webbundle was parsed.\n    bundle_request_id: typing.Optional[RequestId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SubresourceWebBundleInnerResponseParsed:\n        return cls(\n            inner_request_id=RequestId.from_json(json[\"innerRequestId\"]),\n            inner_request_url=str(json[\"innerRequestURL\"]),\n            bundle_request_id=(\n                RequestId.from_json(json[\"bundleRequestId\"])\n                if json.get(\"bundleRequestId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseParsed.bundle_request_id","title":"<code>bundle_request_id: typing.Optional[RequestId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseParsed.inner_request_id","title":"<code>inner_request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseParsed.inner_request_url","title":"<code>inner_request_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseParsed.__init__","title":"<code>__init__(inner_request_id, inner_request_url, bundle_request_id)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleInnerResponseParsed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SubresourceWebBundleInnerResponseParsed:\n    return cls(\n        inner_request_id=RequestId.from_json(json[\"innerRequestId\"]),\n        inner_request_url=str(json[\"innerRequestURL\"]),\n        bundle_request_id=(\n            RequestId.from_json(json[\"bundleRequestId\"])\n            if json.get(\"bundleRequestId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleMetadataError","title":"<code>SubresourceWebBundleMetadataError</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired once when parsing the .wbn file has failed.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.subresourceWebBundleMetadataError\")\n@dataclass\nclass SubresourceWebBundleMetadataError:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired once when parsing the .wbn file has failed.\n    \"\"\"\n\n    #: Request identifier. Used to match this information to another event.\n    request_id: RequestId\n    #: Error message\n    error_message: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SubresourceWebBundleMetadataError:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            error_message=str(json[\"errorMessage\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleMetadataError.error_message","title":"<code>error_message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleMetadataError.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleMetadataError.__init__","title":"<code>__init__(request_id, error_message)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleMetadataError.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SubresourceWebBundleMetadataError:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        error_message=str(json[\"errorMessage\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleMetadataReceived","title":"<code>SubresourceWebBundleMetadataReceived</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired once when parsing the .wbn file has succeeded. The event contains the information about the web bundle contents.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.subresourceWebBundleMetadataReceived\")\n@dataclass\nclass SubresourceWebBundleMetadataReceived:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired once when parsing the .wbn file has succeeded.\n    The event contains the information about the web bundle contents.\n    \"\"\"\n\n    #: Request identifier. Used to match this information to another event.\n    request_id: RequestId\n    #: A list of URLs of resources in the subresource Web Bundle.\n    urls: typing.List[str]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SubresourceWebBundleMetadataReceived:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            urls=[str(i) for i in json[\"urls\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleMetadataReceived.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleMetadataReceived.urls","title":"<code>urls: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleMetadataReceived.__init__","title":"<code>__init__(request_id, urls)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.SubresourceWebBundleMetadataReceived.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SubresourceWebBundleMetadataReceived:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        urls=[str(i) for i in json[\"urls\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TimeSinceEpoch","title":"<code>TimeSinceEpoch</code>","text":"<p>               Bases: <code>float</code></p> <p>UTC time in seconds, counted from January 1, 1970.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class TimeSinceEpoch(float):\n    \"\"\"\n    UTC time in seconds, counted from January 1, 1970.\n    \"\"\"\n\n    def to_json(self) -&gt; float:\n        return self\n\n    @classmethod\n    def from_json(cls, json: float) -&gt; TimeSinceEpoch:\n        return cls(json)\n\n    def __repr__(self):\n        return \"TimeSinceEpoch({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TimeSinceEpoch.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def __repr__(self):\n    return \"TimeSinceEpoch({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TimeSinceEpoch.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: float) -&gt; TimeSinceEpoch:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TimeSinceEpoch.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; float:\n    return self\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationDone","title":"<code>TrustTokenOperationDone</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired exactly once for each Trust Token operation. Depending on the type of the operation and whether the operation succeeded or failed, the event is fired before the corresponding request was sent or after the response was received.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.trustTokenOperationDone\")\n@dataclass\nclass TrustTokenOperationDone:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired exactly once for each Trust Token operation. Depending on\n    the type of the operation and whether the operation succeeded or\n    failed, the event is fired before the corresponding request was sent\n    or after the response was received.\n    \"\"\"\n\n    #: Detailed success or error status of the operation.\n    #: 'AlreadyExists' also signifies a successful operation, as the result\n    #: of the operation already exists und thus, the operation was abort\n    #: preemptively (e.g. a cache hit).\n    status: str\n    type_: TrustTokenOperationType\n    request_id: RequestId\n    #: Top level origin. The context in which the operation was attempted.\n    top_level_origin: typing.Optional[str]\n    #: Origin of the issuer in case of a \"Issuance\" or \"Redemption\" operation.\n    issuer_origin: typing.Optional[str]\n    #: The number of obtained Trust Tokens on a successful \"Issuance\" operation.\n    issued_token_count: typing.Optional[int]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TrustTokenOperationDone:\n        return cls(\n            status=str(json[\"status\"]),\n            type_=TrustTokenOperationType.from_json(json[\"type\"]),\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            top_level_origin=(\n                str(json[\"topLevelOrigin\"])\n                if json.get(\"topLevelOrigin\", None) is not None\n                else None\n            ),\n            issuer_origin=(\n                str(json[\"issuerOrigin\"])\n                if json.get(\"issuerOrigin\", None) is not None\n                else None\n            ),\n            issued_token_count=(\n                int(json[\"issuedTokenCount\"])\n                if json.get(\"issuedTokenCount\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationDone.issued_token_count","title":"<code>issued_token_count: typing.Optional[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationDone.issuer_origin","title":"<code>issuer_origin: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationDone.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationDone.status","title":"<code>status: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationDone.top_level_origin","title":"<code>top_level_origin: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationDone.type_","title":"<code>type_: TrustTokenOperationType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationDone.__init__","title":"<code>__init__(status, type_, request_id, top_level_origin, issuer_origin, issued_token_count)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationDone.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TrustTokenOperationDone:\n    return cls(\n        status=str(json[\"status\"]),\n        type_=TrustTokenOperationType.from_json(json[\"type\"]),\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        top_level_origin=(\n            str(json[\"topLevelOrigin\"])\n            if json.get(\"topLevelOrigin\", None) is not None\n            else None\n        ),\n        issuer_origin=(\n            str(json[\"issuerOrigin\"])\n            if json.get(\"issuerOrigin\", None) is not None\n            else None\n        ),\n        issued_token_count=(\n            int(json[\"issuedTokenCount\"])\n            if json.get(\"issuedTokenCount\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationType","title":"<code>TrustTokenOperationType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>class TrustTokenOperationType(enum.Enum):\n    ISSUANCE = \"Issuance\"\n    REDEMPTION = \"Redemption\"\n    SIGNING = \"Signing\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; TrustTokenOperationType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationType.ISSUANCE","title":"<code>ISSUANCE = 'Issuance'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationType.REDEMPTION","title":"<code>REDEMPTION = 'Redemption'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationType.SIGNING","title":"<code>SIGNING = 'Signing'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; TrustTokenOperationType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenOperationType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenParams","title":"<code>TrustTokenParams</code>  <code>dataclass</code>","text":"<p>Determines what type of Trust Token operation is executed and depending on the type, some additional parameters. The values are specified in third_party/blink/renderer/core/fetch/trust_token.idl.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass TrustTokenParams:\n    \"\"\"\n    Determines what type of Trust Token operation is executed and\n    depending on the type, some additional parameters. The values\n    are specified in third_party/blink/renderer/core/fetch/trust_token.idl.\n    \"\"\"\n\n    operation: TrustTokenOperationType\n\n    #: Only set for \"token-redemption\" operation and determine whether\n    #: to request a fresh SRR or use a still valid cached SRR.\n    refresh_policy: str\n\n    #: Origins of issuers from whom to request tokens or redemption\n    #: records.\n    issuers: typing.Optional[typing.List[str]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"operation\"] = self.operation.to_json()\n        json[\"refreshPolicy\"] = self.refresh_policy\n        if self.issuers is not None:\n            json[\"issuers\"] = [i for i in self.issuers]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TrustTokenParams:\n        return cls(\n            operation=TrustTokenOperationType.from_json(json[\"operation\"]),\n            refresh_policy=str(json[\"refreshPolicy\"]),\n            issuers=(\n                [str(i) for i in json[\"issuers\"]]\n                if json.get(\"issuers\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenParams.issuers","title":"<code>issuers: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenParams.operation","title":"<code>operation: TrustTokenOperationType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenParams.refresh_policy","title":"<code>refresh_policy: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenParams.__init__","title":"<code>__init__(operation, refresh_policy, issuers=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenParams.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TrustTokenParams:\n    return cls(\n        operation=TrustTokenOperationType.from_json(json[\"operation\"]),\n        refresh_policy=str(json[\"refreshPolicy\"]),\n        issuers=(\n            [str(i) for i in json[\"issuers\"]]\n            if json.get(\"issuers\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.TrustTokenParams.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"operation\"] = self.operation.to_json()\n    json[\"refreshPolicy\"] = self.refresh_policy\n    if self.issuers is not None:\n        json[\"issuers\"] = [i for i in self.issuers]\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketClosed","title":"<code>WebSocketClosed</code>  <code>dataclass</code>","text":"<p>Fired when WebSocket is closed.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.webSocketClosed\")\n@dataclass\nclass WebSocketClosed:\n    \"\"\"\n    Fired when WebSocket is closed.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebSocketClosed:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketClosed.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketClosed.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketClosed.__init__","title":"<code>__init__(request_id, timestamp)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketClosed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebSocketClosed:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketCreated","title":"<code>WebSocketCreated</code>  <code>dataclass</code>","text":"<p>Fired upon WebSocket creation.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.webSocketCreated\")\n@dataclass\nclass WebSocketCreated:\n    \"\"\"\n    Fired upon WebSocket creation.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: WebSocket request URL.\n    url: str\n    #: Request initiator.\n    initiator: typing.Optional[Initiator]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebSocketCreated:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            url=str(json[\"url\"]),\n            initiator=(\n                Initiator.from_json(json[\"initiator\"])\n                if json.get(\"initiator\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketCreated.initiator","title":"<code>initiator: typing.Optional[Initiator]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketCreated.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketCreated.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketCreated.__init__","title":"<code>__init__(request_id, url, initiator)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebSocketCreated:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        url=str(json[\"url\"]),\n        initiator=(\n            Initiator.from_json(json[\"initiator\"])\n            if json.get(\"initiator\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrame","title":"<code>WebSocketFrame</code>  <code>dataclass</code>","text":"<p>WebSocket message data. This represents an entire WebSocket message, not just a fragmented frame as the name suggests.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass WebSocketFrame:\n    \"\"\"\n    WebSocket message data. This represents an entire WebSocket message, not just a fragmented frame as the name suggests.\n    \"\"\"\n\n    #: WebSocket message opcode.\n    opcode: float\n\n    #: WebSocket message mask.\n    mask: bool\n\n    #: WebSocket message payload data.\n    #: If the opcode is 1, this is a text message and payloadData is a UTF-8 string.\n    #: If the opcode isn't 1, then payloadData is a base64 encoded string representing binary data.\n    payload_data: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"opcode\"] = self.opcode\n        json[\"mask\"] = self.mask\n        json[\"payloadData\"] = self.payload_data\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebSocketFrame:\n        return cls(\n            opcode=float(json[\"opcode\"]),\n            mask=bool(json[\"mask\"]),\n            payload_data=str(json[\"payloadData\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrame.mask","title":"<code>mask: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrame.opcode","title":"<code>opcode: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrame.payload_data","title":"<code>payload_data: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrame.__init__","title":"<code>__init__(opcode, mask, payload_data)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrame.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebSocketFrame:\n    return cls(\n        opcode=float(json[\"opcode\"]),\n        mask=bool(json[\"mask\"]),\n        payload_data=str(json[\"payloadData\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrame.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"opcode\"] = self.opcode\n    json[\"mask\"] = self.mask\n    json[\"payloadData\"] = self.payload_data\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameError","title":"<code>WebSocketFrameError</code>  <code>dataclass</code>","text":"<p>Fired when WebSocket message error occurs.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.webSocketFrameError\")\n@dataclass\nclass WebSocketFrameError:\n    \"\"\"\n    Fired when WebSocket message error occurs.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: WebSocket error message.\n    error_message: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebSocketFrameError:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            error_message=str(json[\"errorMessage\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameError.error_message","title":"<code>error_message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameError.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameError.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameError.__init__","title":"<code>__init__(request_id, timestamp, error_message)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameError.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebSocketFrameError:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        error_message=str(json[\"errorMessage\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameReceived","title":"<code>WebSocketFrameReceived</code>  <code>dataclass</code>","text":"<p>Fired when WebSocket message is received.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.webSocketFrameReceived\")\n@dataclass\nclass WebSocketFrameReceived:\n    \"\"\"\n    Fired when WebSocket message is received.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: WebSocket response data.\n    response: WebSocketFrame\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebSocketFrameReceived:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            response=WebSocketFrame.from_json(json[\"response\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameReceived.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameReceived.response","title":"<code>response: WebSocketFrame</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameReceived.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameReceived.__init__","title":"<code>__init__(request_id, timestamp, response)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameReceived.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebSocketFrameReceived:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        response=WebSocketFrame.from_json(json[\"response\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameSent","title":"<code>WebSocketFrameSent</code>  <code>dataclass</code>","text":"<p>Fired when WebSocket message is sent.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.webSocketFrameSent\")\n@dataclass\nclass WebSocketFrameSent:\n    \"\"\"\n    Fired when WebSocket message is sent.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: WebSocket response data.\n    response: WebSocketFrame\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebSocketFrameSent:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            response=WebSocketFrame.from_json(json[\"response\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameSent.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameSent.response","title":"<code>response: WebSocketFrame</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameSent.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameSent.__init__","title":"<code>__init__(request_id, timestamp, response)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketFrameSent.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebSocketFrameSent:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        response=WebSocketFrame.from_json(json[\"response\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketHandshakeResponseReceived","title":"<code>WebSocketHandshakeResponseReceived</code>  <code>dataclass</code>","text":"<p>Fired when WebSocket handshake response becomes available.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.webSocketHandshakeResponseReceived\")\n@dataclass\nclass WebSocketHandshakeResponseReceived:\n    \"\"\"\n    Fired when WebSocket handshake response becomes available.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: WebSocket response data.\n    response: WebSocketResponse\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebSocketHandshakeResponseReceived:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            response=WebSocketResponse.from_json(json[\"response\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketHandshakeResponseReceived.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketHandshakeResponseReceived.response","title":"<code>response: WebSocketResponse</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketHandshakeResponseReceived.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketHandshakeResponseReceived.__init__","title":"<code>__init__(request_id, timestamp, response)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketHandshakeResponseReceived.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebSocketHandshakeResponseReceived:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        response=WebSocketResponse.from_json(json[\"response\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketRequest","title":"<code>WebSocketRequest</code>  <code>dataclass</code>","text":"<p>WebSocket request data.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass WebSocketRequest:\n    \"\"\"\n    WebSocket request data.\n    \"\"\"\n\n    #: HTTP request headers.\n    headers: Headers\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"headers\"] = self.headers.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebSocketRequest:\n        return cls(\n            headers=Headers.from_json(json[\"headers\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketRequest.headers","title":"<code>headers: Headers</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketRequest.__init__","title":"<code>__init__(headers)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketRequest.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebSocketRequest:\n    return cls(\n        headers=Headers.from_json(json[\"headers\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketRequest.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"headers\"] = self.headers.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketResponse","title":"<code>WebSocketResponse</code>  <code>dataclass</code>","text":"<p>WebSocket response data.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@dataclass\nclass WebSocketResponse:\n    \"\"\"\n    WebSocket response data.\n    \"\"\"\n\n    #: HTTP response status code.\n    status: int\n\n    #: HTTP response status text.\n    status_text: str\n\n    #: HTTP response headers.\n    headers: Headers\n\n    #: HTTP response headers text.\n    headers_text: typing.Optional[str] = None\n\n    #: HTTP request headers.\n    request_headers: typing.Optional[Headers] = None\n\n    #: HTTP request headers text.\n    request_headers_text: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"status\"] = self.status\n        json[\"statusText\"] = self.status_text\n        json[\"headers\"] = self.headers.to_json()\n        if self.headers_text is not None:\n            json[\"headersText\"] = self.headers_text\n        if self.request_headers is not None:\n            json[\"requestHeaders\"] = self.request_headers.to_json()\n        if self.request_headers_text is not None:\n            json[\"requestHeadersText\"] = self.request_headers_text\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebSocketResponse:\n        return cls(\n            status=int(json[\"status\"]),\n            status_text=str(json[\"statusText\"]),\n            headers=Headers.from_json(json[\"headers\"]),\n            headers_text=(\n                str(json[\"headersText\"])\n                if json.get(\"headersText\", None) is not None\n                else None\n            ),\n            request_headers=(\n                Headers.from_json(json[\"requestHeaders\"])\n                if json.get(\"requestHeaders\", None) is not None\n                else None\n            ),\n            request_headers_text=(\n                str(json[\"requestHeadersText\"])\n                if json.get(\"requestHeadersText\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketResponse.headers","title":"<code>headers: Headers</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketResponse.headers_text","title":"<code>headers_text: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketResponse.request_headers","title":"<code>request_headers: typing.Optional[Headers] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketResponse.request_headers_text","title":"<code>request_headers_text: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketResponse.status","title":"<code>status: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketResponse.status_text","title":"<code>status_text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketResponse.__init__","title":"<code>__init__(status, status_text, headers, headers_text=None, request_headers=None, request_headers_text=None)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketResponse.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebSocketResponse:\n    return cls(\n        status=int(json[\"status\"]),\n        status_text=str(json[\"statusText\"]),\n        headers=Headers.from_json(json[\"headers\"]),\n        headers_text=(\n            str(json[\"headersText\"])\n            if json.get(\"headersText\", None) is not None\n            else None\n        ),\n        request_headers=(\n            Headers.from_json(json[\"requestHeaders\"])\n            if json.get(\"requestHeaders\", None) is not None\n            else None\n        ),\n        request_headers_text=(\n            str(json[\"requestHeadersText\"])\n            if json.get(\"requestHeadersText\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketResponse.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"status\"] = self.status\n    json[\"statusText\"] = self.status_text\n    json[\"headers\"] = self.headers.to_json()\n    if self.headers_text is not None:\n        json[\"headersText\"] = self.headers_text\n    if self.request_headers is not None:\n        json[\"requestHeaders\"] = self.request_headers.to_json()\n    if self.request_headers_text is not None:\n        json[\"requestHeadersText\"] = self.request_headers_text\n    return json\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketWillSendHandshakeRequest","title":"<code>WebSocketWillSendHandshakeRequest</code>  <code>dataclass</code>","text":"<p>Fired when WebSocket is about to initiate handshake.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.webSocketWillSendHandshakeRequest\")\n@dataclass\nclass WebSocketWillSendHandshakeRequest:\n    \"\"\"\n    Fired when WebSocket is about to initiate handshake.\n    \"\"\"\n\n    #: Request identifier.\n    request_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: UTC Timestamp.\n    wall_time: TimeSinceEpoch\n    #: WebSocket request data.\n    request: WebSocketRequest\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebSocketWillSendHandshakeRequest:\n        return cls(\n            request_id=RequestId.from_json(json[\"requestId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            wall_time=TimeSinceEpoch.from_json(json[\"wallTime\"]),\n            request=WebSocketRequest.from_json(json[\"request\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketWillSendHandshakeRequest.request","title":"<code>request: WebSocketRequest</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketWillSendHandshakeRequest.request_id","title":"<code>request_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketWillSendHandshakeRequest.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketWillSendHandshakeRequest.wall_time","title":"<code>wall_time: TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketWillSendHandshakeRequest.__init__","title":"<code>__init__(request_id, timestamp, wall_time, request)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebSocketWillSendHandshakeRequest.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebSocketWillSendHandshakeRequest:\n    return cls(\n        request_id=RequestId.from_json(json[\"requestId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        wall_time=TimeSinceEpoch.from_json(json[\"wallTime\"]),\n        request=WebSocketRequest.from_json(json[\"request\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportClosed","title":"<code>WebTransportClosed</code>  <code>dataclass</code>","text":"<p>Fired when WebTransport is disposed.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.webTransportClosed\")\n@dataclass\nclass WebTransportClosed:\n    \"\"\"\n    Fired when WebTransport is disposed.\n    \"\"\"\n\n    #: WebTransport identifier.\n    transport_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebTransportClosed:\n        return cls(\n            transport_id=RequestId.from_json(json[\"transportId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportClosed.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportClosed.transport_id","title":"<code>transport_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportClosed.__init__","title":"<code>__init__(transport_id, timestamp)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportClosed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebTransportClosed:\n    return cls(\n        transport_id=RequestId.from_json(json[\"transportId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportConnectionEstablished","title":"<code>WebTransportConnectionEstablished</code>  <code>dataclass</code>","text":"<p>Fired when WebTransport handshake is finished.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.webTransportConnectionEstablished\")\n@dataclass\nclass WebTransportConnectionEstablished:\n    \"\"\"\n    Fired when WebTransport handshake is finished.\n    \"\"\"\n\n    #: WebTransport identifier.\n    transport_id: RequestId\n    #: Timestamp.\n    timestamp: MonotonicTime\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebTransportConnectionEstablished:\n        return cls(\n            transport_id=RequestId.from_json(json[\"transportId\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportConnectionEstablished.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportConnectionEstablished.transport_id","title":"<code>transport_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportConnectionEstablished.__init__","title":"<code>__init__(transport_id, timestamp)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportConnectionEstablished.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebTransportConnectionEstablished:\n    return cls(\n        transport_id=RequestId.from_json(json[\"transportId\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportCreated","title":"<code>WebTransportCreated</code>  <code>dataclass</code>","text":"<p>Fired upon WebTransport creation.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@event_class(\"Network.webTransportCreated\")\n@dataclass\nclass WebTransportCreated:\n    \"\"\"\n    Fired upon WebTransport creation.\n    \"\"\"\n\n    #: WebTransport identifier.\n    transport_id: RequestId\n    #: WebTransport request URL.\n    url: str\n    #: Timestamp.\n    timestamp: MonotonicTime\n    #: Request initiator.\n    initiator: typing.Optional[Initiator]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebTransportCreated:\n        return cls(\n            transport_id=RequestId.from_json(json[\"transportId\"]),\n            url=str(json[\"url\"]),\n            timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n            initiator=(\n                Initiator.from_json(json[\"initiator\"])\n                if json.get(\"initiator\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportCreated.initiator","title":"<code>initiator: typing.Optional[Initiator]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportCreated.timestamp","title":"<code>timestamp: MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportCreated.transport_id","title":"<code>transport_id: RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportCreated.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportCreated.__init__","title":"<code>__init__(transport_id, url, timestamp, initiator)</code>","text":""},{"location":"reference/cdp/network/#zendriver.cdp.network.WebTransportCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/network.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebTransportCreated:\n    return cls(\n        transport_id=RequestId.from_json(json[\"transportId\"]),\n        url=str(json[\"url\"]),\n        timestamp=MonotonicTime.from_json(json[\"timestamp\"]),\n        initiator=(\n            Initiator.from_json(json[\"initiator\"])\n            if json.get(\"initiator\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.can_clear_browser_cache","title":"<code>can_clear_browser_cache()</code>","text":"<p>Tells whether clearing browser cache is supported.</p> <p>.. deprecated:: 1.3</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, bool]</code> <p>True if browser cache can be cleared.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef can_clear_browser_cache() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]:\n    \"\"\"\n    Tells whether clearing browser cache is supported.\n\n    .. deprecated:: 1.3\n\n    :returns: True if browser cache can be cleared.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.canClearBrowserCache\",\n    }\n    json = yield cmd_dict\n    return bool(json[\"result\"])\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.can_clear_browser_cookies","title":"<code>can_clear_browser_cookies()</code>","text":"<p>Tells whether clearing browser cookies is supported.</p> <p>.. deprecated:: 1.3</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, bool]</code> <p>True if browser cookies can be cleared.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef can_clear_browser_cookies() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]:\n    \"\"\"\n    Tells whether clearing browser cookies is supported.\n\n    .. deprecated:: 1.3\n\n    :returns: True if browser cookies can be cleared.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.canClearBrowserCookies\",\n    }\n    json = yield cmd_dict\n    return bool(json[\"result\"])\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.can_emulate_network_conditions","title":"<code>can_emulate_network_conditions()</code>","text":"<p>Tells whether emulation of network conditions is supported.</p> <p>.. deprecated:: 1.3</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, bool]</code> <p>True if emulation of network conditions is supported.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef can_emulate_network_conditions() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]\n):\n    \"\"\"\n    Tells whether emulation of network conditions is supported.\n\n    .. deprecated:: 1.3\n\n    :returns: True if emulation of network conditions is supported.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.canEmulateNetworkConditions\",\n    }\n    json = yield cmd_dict\n    return bool(json[\"result\"])\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.clear_accepted_encodings_override","title":"<code>clear_accepted_encodings_override()</code>","text":"<p>Clears accepted encodings set by setAcceptedEncodings</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def clear_accepted_encodings_override() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, None]\n):\n    \"\"\"\n    Clears accepted encodings set by setAcceptedEncodings\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.clearAcceptedEncodingsOverride\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.clear_browser_cache","title":"<code>clear_browser_cache()</code>","text":"<p>Clears browser cache.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def clear_browser_cache() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears browser cache.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.clearBrowserCache\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.clear_browser_cookies","title":"<code>clear_browser_cookies()</code>","text":"<p>Clears browser cookies.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def clear_browser_cookies() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears browser cookies.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.clearBrowserCookies\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.continue_intercepted_request","title":"<code>continue_intercepted_request(interception_id, error_reason=None, raw_response=None, url=None, method=None, post_data=None, headers=None, auth_challenge_response=None)</code>","text":"<p>Response to Network.requestIntercepted which either modifies the request to continue with any modifications, or blocks it, or completes it with the provided response bytes. If a network fetch occurs as a result which encounters a redirect an additional Network.requestIntercepted event will be sent with the same InterceptionId. Deprecated, use Fetch.continueRequest, Fetch.fulfillRequest and Fetch.failRequest instead.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>interception_id</code> <code>InterceptionId</code> required <code>error_reason</code> <code>Optional[ErrorReason]</code> <p>(Optional) If set this causes the request to fail with the given reason. Passing <code>Aborted```` for requests marked with ````isNavigationRequest</code> also cancels the navigation. Must not be set in response to an authChallenge.</p> <code>None</code> <code>raw_response</code> <code>Optional[str]</code> <p>(Optional) If set the requests completes using with the provided base64 encoded raw response, including HTTP status line and headers etc... Must not be set in response to an authChallenge. (Encoded as a base64 string when passed over JSON)</p> <code>None</code> <code>url</code> <code>Optional[str]</code> <p>(Optional) If set the request url will be modified in a way that's not observable by page. Must not be set in response to an authChallenge.</p> <code>None</code> <code>method</code> <code>Optional[str]</code> <p>(Optional) If set this allows the request method to be overridden. Must not be set in response to an authChallenge.</p> <code>None</code> <code>post_data</code> <code>Optional[str]</code> <p>(Optional) If set this allows postData to be set. Must not be set in response to an authChallenge.</p> <code>None</code> <code>headers</code> <code>Optional[Headers]</code> <p>(Optional) If set this allows the request headers to be changed. Must not be set in response to an authChallenge.</p> <code>None</code> <code>auth_challenge_response</code> <code>Optional[AuthChallengeResponse]</code> <p>(Optional) Response to a requestIntercepted with an authChallenge. Must not be set otherwise.</p> <code>None</code> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef continue_intercepted_request(\n    interception_id: InterceptionId,\n    error_reason: typing.Optional[ErrorReason] = None,\n    raw_response: typing.Optional[str] = None,\n    url: typing.Optional[str] = None,\n    method: typing.Optional[str] = None,\n    post_data: typing.Optional[str] = None,\n    headers: typing.Optional[Headers] = None,\n    auth_challenge_response: typing.Optional[AuthChallengeResponse] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Response to Network.requestIntercepted which either modifies the request to continue with any\n    modifications, or blocks it, or completes it with the provided response bytes. If a network\n    fetch occurs as a result which encounters a redirect an additional Network.requestIntercepted\n    event will be sent with the same InterceptionId.\n    Deprecated, use Fetch.continueRequest, Fetch.fulfillRequest and Fetch.failRequest instead.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param interception_id:\n    :param error_reason: *(Optional)* If set this causes the request to fail with the given reason. Passing ```Aborted```` for requests marked with ````isNavigationRequest``` also cancels the navigation. Must not be set in response to an authChallenge.\n    :param raw_response: *(Optional)* If set the requests completes using with the provided base64 encoded raw response, including HTTP status line and headers etc... Must not be set in response to an authChallenge. (Encoded as a base64 string when passed over JSON)\n    :param url: *(Optional)* If set the request url will be modified in a way that's not observable by page. Must not be set in response to an authChallenge.\n    :param method: *(Optional)* If set this allows the request method to be overridden. Must not be set in response to an authChallenge.\n    :param post_data: *(Optional)* If set this allows postData to be set. Must not be set in response to an authChallenge.\n    :param headers: *(Optional)* If set this allows the request headers to be changed. Must not be set in response to an authChallenge.\n    :param auth_challenge_response: *(Optional)* Response to a requestIntercepted with an authChallenge. Must not be set otherwise.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"interceptionId\"] = interception_id.to_json()\n    if error_reason is not None:\n        params[\"errorReason\"] = error_reason.to_json()\n    if raw_response is not None:\n        params[\"rawResponse\"] = raw_response\n    if url is not None:\n        params[\"url\"] = url\n    if method is not None:\n        params[\"method\"] = method\n    if post_data is not None:\n        params[\"postData\"] = post_data\n    if headers is not None:\n        params[\"headers\"] = headers.to_json()\n    if auth_challenge_response is not None:\n        params[\"authChallengeResponse\"] = auth_challenge_response.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.continueInterceptedRequest\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.delete_cookies","title":"<code>delete_cookies(name, url=None, domain=None, path=None, partition_key=None)</code>","text":"<p>Deletes browser cookies with matching name and url or domain/path/partitionKey pair.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the cookies to remove.</p> required <code>url</code> <code>Optional[str]</code> <p>(Optional) If specified, deletes all the cookies with the given name where domain and path match provided URL.</p> <code>None</code> <code>domain</code> <code>Optional[str]</code> <p>(Optional) If specified, deletes only cookies with the exact domain.</p> <code>None</code> <code>path</code> <code>Optional[str]</code> <p>(Optional) If specified, deletes only cookies with the exact path.</p> <code>None</code> <code>partition_key</code> <code>Optional[CookiePartitionKey]</code> <p>(EXPERIMENTAL) (Optional) If specified, deletes only cookies with the the given name and partitionKey where all partition key attributes match the cookie partition key attribute.</p> <code>None</code> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def delete_cookies(\n    name: str,\n    url: typing.Optional[str] = None,\n    domain: typing.Optional[str] = None,\n    path: typing.Optional[str] = None,\n    partition_key: typing.Optional[CookiePartitionKey] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Deletes browser cookies with matching name and url or domain/path/partitionKey pair.\n\n    :param name: Name of the cookies to remove.\n    :param url: *(Optional)* If specified, deletes all the cookies with the given name where domain and path match provided URL.\n    :param domain: *(Optional)* If specified, deletes only cookies with the exact domain.\n    :param path: *(Optional)* If specified, deletes only cookies with the exact path.\n    :param partition_key: **(EXPERIMENTAL)** *(Optional)* If specified, deletes only cookies with the the given name and partitionKey where all partition key attributes match the cookie partition key attribute.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"name\"] = name\n    if url is not None:\n        params[\"url\"] = url\n    if domain is not None:\n        params[\"domain\"] = domain\n    if path is not None:\n        params[\"path\"] = path\n    if partition_key is not None:\n        params[\"partitionKey\"] = partition_key.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.deleteCookies\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.disable","title":"<code>disable()</code>","text":"<p>Disables network tracking, prevents network events from being sent to the client.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables network tracking, prevents network events from being sent to the client.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.emulate_network_conditions","title":"<code>emulate_network_conditions(offline, latency, download_throughput, upload_throughput, connection_type=None, packet_loss=None, packet_queue_length=None, packet_reordering=None)</code>","text":"<p>Activates emulation of network conditions.</p> <p>Parameters:</p> Name Type Description Default <code>offline</code> <code>bool</code> <p>True to emulate internet disconnection.</p> required <code>latency</code> <code>float</code> <p>Minimum latency from request sent to response headers received (ms).</p> required <code>download_throughput</code> <code>float</code> <p>Maximal aggregated download throughput (bytes/sec). -1 disables download throttling.</p> required <code>upload_throughput</code> <code>float</code> <p>Maximal aggregated upload throughput (bytes/sec).  -1 disables upload throttling.</p> required <code>connection_type</code> <code>Optional[ConnectionType]</code> <p>(Optional) Connection type if known.</p> <code>None</code> <code>packet_loss</code> <code>Optional[float]</code> <p>(EXPERIMENTAL) (Optional) WebRTC packet loss (percent, 0-100). 0 disables packet loss emulation, 100 drops all the packets.</p> <code>None</code> <code>packet_queue_length</code> <code>Optional[int]</code> <p>(EXPERIMENTAL) (Optional) WebRTC packet queue length (packet). 0 removes any queue length limitations.</p> <code>None</code> <code>packet_reordering</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) WebRTC packetReordering feature.</p> <code>None</code> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def emulate_network_conditions(\n    offline: bool,\n    latency: float,\n    download_throughput: float,\n    upload_throughput: float,\n    connection_type: typing.Optional[ConnectionType] = None,\n    packet_loss: typing.Optional[float] = None,\n    packet_queue_length: typing.Optional[int] = None,\n    packet_reordering: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Activates emulation of network conditions.\n\n    :param offline: True to emulate internet disconnection.\n    :param latency: Minimum latency from request sent to response headers received (ms).\n    :param download_throughput: Maximal aggregated download throughput (bytes/sec). -1 disables download throttling.\n    :param upload_throughput: Maximal aggregated upload throughput (bytes/sec).  -1 disables upload throttling.\n    :param connection_type: *(Optional)* Connection type if known.\n    :param packet_loss: **(EXPERIMENTAL)** *(Optional)* WebRTC packet loss (percent, 0-100). 0 disables packet loss emulation, 100 drops all the packets.\n    :param packet_queue_length: **(EXPERIMENTAL)** *(Optional)* WebRTC packet queue length (packet). 0 removes any queue length limitations.\n    :param packet_reordering: **(EXPERIMENTAL)** *(Optional)* WebRTC packetReordering feature.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"offline\"] = offline\n    params[\"latency\"] = latency\n    params[\"downloadThroughput\"] = download_throughput\n    params[\"uploadThroughput\"] = upload_throughput\n    if connection_type is not None:\n        params[\"connectionType\"] = connection_type.to_json()\n    if packet_loss is not None:\n        params[\"packetLoss\"] = packet_loss\n    if packet_queue_length is not None:\n        params[\"packetQueueLength\"] = packet_queue_length\n    if packet_reordering is not None:\n        params[\"packetReordering\"] = packet_reordering\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.emulateNetworkConditions\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.enable","title":"<code>enable(max_total_buffer_size=None, max_resource_buffer_size=None, max_post_data_size=None)</code>","text":"<p>Enables network tracking, network events will now be delivered to the client.</p> <p>Parameters:</p> Name Type Description Default <code>max_total_buffer_size</code> <code>Optional[int]</code> <p>(EXPERIMENTAL) (Optional) Buffer size in bytes to use when preserving network payloads (XHRs, etc).</p> <code>None</code> <code>max_resource_buffer_size</code> <code>Optional[int]</code> <p>(EXPERIMENTAL) (Optional) Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).</p> <code>None</code> <code>max_post_data_size</code> <code>Optional[int]</code> <p>(Optional) Longest post body size (in bytes) that would be included in requestWillBeSent notification</p> <code>None</code> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def enable(\n    max_total_buffer_size: typing.Optional[int] = None,\n    max_resource_buffer_size: typing.Optional[int] = None,\n    max_post_data_size: typing.Optional[int] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables network tracking, network events will now be delivered to the client.\n\n    :param max_total_buffer_size: **(EXPERIMENTAL)** *(Optional)* Buffer size in bytes to use when preserving network payloads (XHRs, etc).\n    :param max_resource_buffer_size: **(EXPERIMENTAL)** *(Optional)* Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).\n    :param max_post_data_size: *(Optional)* Longest post body size (in bytes) that would be included in requestWillBeSent notification\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if max_total_buffer_size is not None:\n        params[\"maxTotalBufferSize\"] = max_total_buffer_size\n    if max_resource_buffer_size is not None:\n        params[\"maxResourceBufferSize\"] = max_resource_buffer_size\n    if max_post_data_size is not None:\n        params[\"maxPostDataSize\"] = max_post_data_size\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.enable\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.enable_reporting_api","title":"<code>enable_reporting_api(enable)</code>","text":"<p>Enables tracking for the Reporting API, events generated by the Reporting API will now be delivered to the client. Enabling triggers 'reportingApiReportAdded' for all existing reports.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enable</code> <code>bool</code> <p>Whether to enable or disable events for the Reporting API</p> required Source code in <code>zendriver/cdp/network.py</code> <pre><code>def enable_reporting_api(\n    enable: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables tracking for the Reporting API, events generated by the Reporting API will now be delivered to the client.\n    Enabling triggers 'reportingApiReportAdded' for all existing reports.\n\n    **EXPERIMENTAL**\n\n    :param enable: Whether to enable or disable events for the Reporting API\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enable\"] = enable\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.enableReportingApi\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.get_all_cookies","title":"<code>get_all_cookies()</code>","text":"<p>Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field. Deprecated. Use Storage.getCookies instead.</p> <p>.. deprecated:: 1.3</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Cookie]]</code> <p>Array of cookie objects.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef get_all_cookies() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Cookie]]\n):\n    \"\"\"\n    Returns all browser cookies. Depending on the backend support, will return detailed cookie\n    information in the ``cookies`` field.\n    Deprecated. Use Storage.getCookies instead.\n\n    .. deprecated:: 1.3\n\n    :returns: Array of cookie objects.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.getAllCookies\",\n    }\n    json = yield cmd_dict\n    return [Cookie.from_json(i) for i in json[\"cookies\"]]\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.get_certificate","title":"<code>get_certificate(origin)</code>","text":"<p>Returns the DER-encoded certificate.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> <p>Origin to get certificate for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[str]]</code> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def get_certificate(\n    origin: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]:\n    \"\"\"\n    Returns the DER-encoded certificate.\n\n    **EXPERIMENTAL**\n\n    :param origin: Origin to get certificate for.\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.getCertificate\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [str(i) for i in json[\"tableNames\"]]\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.get_cookies","title":"<code>get_cookies(urls=None)</code>","text":"<p>Returns all browser cookies for the current URL. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.</p> <p>Parameters:</p> Name Type Description Default <code>urls</code> <code>Optional[List[str]]</code> <p>(Optional) The list of URLs for which applicable cookies will be fetched. If not specified, it's assumed to be set to the list containing the URLs of the page and all of its subframes.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Cookie]]</code> <p>Array of cookie objects.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def get_cookies(\n    urls: typing.Optional[typing.List[str]] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Cookie]]:\n    \"\"\"\n    Returns all browser cookies for the current URL. Depending on the backend support, will return\n    detailed cookie information in the ``cookies`` field.\n\n    :param urls: *(Optional)* The list of URLs for which applicable cookies will be fetched. If not specified, it's assumed to be set to the list containing the URLs of the page and all of its subframes.\n    :returns: Array of cookie objects.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if urls is not None:\n        params[\"urls\"] = [i for i in urls]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.getCookies\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [Cookie.from_json(i) for i in json[\"cookies\"]]\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.get_request_post_data","title":"<code>get_request_post_data(request_id)</code>","text":"<p>Returns post data sent with the request. Returns an error when no data was sent with the request.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>Identifier of the network request to get content for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>Request body string, omitting files from multipart requests</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def get_request_post_data(\n    request_id: RequestId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Returns post data sent with the request. Returns an error when no data was sent with the request.\n\n    :param request_id: Identifier of the network request to get content for.\n    :returns: Request body string, omitting files from multipart requests\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.getRequestPostData\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"postData\"])\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.get_response_body","title":"<code>get_response_body(request_id)</code>","text":"<p>Returns content served for the given request.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>Identifier of the network request to get content for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[str, bool]]</code> <p>A tuple with the following items:  0. body - Response body. 1. base64Encoded - True, if content was sent as base64.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def get_response_body(\n    request_id: RequestId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, bool]]:\n    \"\"\"\n    Returns content served for the given request.\n\n    :param request_id: Identifier of the network request to get content for.\n    :returns: A tuple with the following items:\n\n        0. **body** - Response body.\n        1. **base64Encoded** - True, if content was sent as base64.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.getResponseBody\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (str(json[\"body\"]), bool(json[\"base64Encoded\"]))\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.get_response_body_for_interception","title":"<code>get_response_body_for_interception(interception_id)</code>","text":"<p>Returns content served for the given currently intercepted request.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>interception_id</code> <code>InterceptionId</code> <p>Identifier for the intercepted request to get body for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[str, bool]]</code> <p>A tuple with the following items:  0. body - Response body. 1. base64Encoded - True, if content was sent as base64.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def get_response_body_for_interception(\n    interception_id: InterceptionId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, bool]]:\n    \"\"\"\n    Returns content served for the given currently intercepted request.\n\n    **EXPERIMENTAL**\n\n    :param interception_id: Identifier for the intercepted request to get body for.\n    :returns: A tuple with the following items:\n\n        0. **body** - Response body.\n        1. **base64Encoded** - True, if content was sent as base64.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"interceptionId\"] = interception_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.getResponseBodyForInterception\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (str(json[\"body\"]), bool(json[\"base64Encoded\"]))\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.get_security_isolation_status","title":"<code>get_security_isolation_status(frame_id=None)</code>","text":"<p>Returns information about the COEP/COOP isolation status.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>Optional[FrameId]</code> <p>(Optional) If no frameId is provided, the status of the target is provided.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SecurityIsolationStatus]</code> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def get_security_isolation_status(\n    frame_id: typing.Optional[page.FrameId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, SecurityIsolationStatus]:\n    \"\"\"\n    Returns information about the COEP/COOP isolation status.\n\n    **EXPERIMENTAL**\n\n    :param frame_id: *(Optional)* If no frameId is provided, the status of the target is provided.\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if frame_id is not None:\n        params[\"frameId\"] = frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.getSecurityIsolationStatus\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return SecurityIsolationStatus.from_json(json[\"status\"])\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.load_network_resource","title":"<code>load_network_resource(url, options, frame_id=None)</code>","text":"<p>Fetches the resource and returns the content.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>Optional[FrameId]</code> <p>(Optional) Frame id to get the resource for. Mandatory for frame targets, and should be omitted for worker targets.</p> <code>None</code> <code>url</code> <code>str</code> <p>URL of the resource to get content for.</p> required <code>options</code> <code>LoadNetworkResourceOptions</code> <p>Options for the request.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, LoadNetworkResourcePageResult]</code> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def load_network_resource(\n    url: str,\n    options: LoadNetworkResourceOptions,\n    frame_id: typing.Optional[page.FrameId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, LoadNetworkResourcePageResult]:\n    \"\"\"\n    Fetches the resource and returns the content.\n\n    **EXPERIMENTAL**\n\n    :param frame_id: *(Optional)* Frame id to get the resource for. Mandatory for frame targets, and should be omitted for worker targets.\n    :param url: URL of the resource to get content for.\n    :param options: Options for the request.\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if frame_id is not None:\n        params[\"frameId\"] = frame_id.to_json()\n    params[\"url\"] = url\n    params[\"options\"] = options.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.loadNetworkResource\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return LoadNetworkResourcePageResult.from_json(json[\"resource\"])\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.replay_xhr","title":"<code>replay_xhr(request_id)</code>","text":"<p>This method sends a new XMLHttpRequest which is identical to the original one. The following parameters should be identical: method, url, async, request body, extra headers, withCredentials attribute, user, password.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>Identifier of XHR to replay.</p> required Source code in <code>zendriver/cdp/network.py</code> <pre><code>def replay_xhr(\n    request_id: RequestId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    This method sends a new XMLHttpRequest which is identical to the original one. The following\n    parameters should be identical: method, url, async, request body, extra headers, withCredentials\n    attribute, user, password.\n\n    **EXPERIMENTAL**\n\n    :param request_id: Identifier of XHR to replay.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.replayXHR\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.search_in_response_body","title":"<code>search_in_response_body(request_id, query, case_sensitive=None, is_regex=None)</code>","text":"<p>Searches for given string in response content.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>Identifier of the network response to search.</p> required <code>query</code> <code>str</code> <p>String to search for.</p> required <code>case_sensitive</code> <code>Optional[bool]</code> <p>(Optional) If true, search is case sensitive.</p> <code>None</code> <code>is_regex</code> <code>Optional[bool]</code> <p>(Optional) If true, treats string parameter as regex.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[SearchMatch]]</code> <p>List of search matches.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def search_in_response_body(\n    request_id: RequestId,\n    query: str,\n    case_sensitive: typing.Optional[bool] = None,\n    is_regex: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[debugger.SearchMatch]]:\n    \"\"\"\n    Searches for given string in response content.\n\n    **EXPERIMENTAL**\n\n    :param request_id: Identifier of the network response to search.\n    :param query: String to search for.\n    :param case_sensitive: *(Optional)* If true, search is case sensitive.\n    :param is_regex: *(Optional)* If true, treats string parameter as regex.\n    :returns: List of search matches.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    params[\"query\"] = query\n    if case_sensitive is not None:\n        params[\"caseSensitive\"] = case_sensitive\n    if is_regex is not None:\n        params[\"isRegex\"] = is_regex\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.searchInResponseBody\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [debugger.SearchMatch.from_json(i) for i in json[\"result\"]]\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.set_accepted_encodings","title":"<code>set_accepted_encodings(encodings)</code>","text":"<p>Sets a list of content encodings that will be accepted. Empty list means no encoding is accepted.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>encodings</code> <code>List[ContentEncoding]</code> <p>List of accepted content encodings.</p> required Source code in <code>zendriver/cdp/network.py</code> <pre><code>def set_accepted_encodings(\n    encodings: typing.List[ContentEncoding],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets a list of content encodings that will be accepted. Empty list means no encoding is accepted.\n\n    **EXPERIMENTAL**\n\n    :param encodings: List of accepted content encodings.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"encodings\"] = [i.to_json() for i in encodings]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.setAcceptedEncodings\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.set_attach_debug_stack","title":"<code>set_attach_debug_stack(enabled)</code>","text":"<p>Specifies whether to attach a page script stack id in requests</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to attach a page script stack for debugging purpose.</p> required Source code in <code>zendriver/cdp/network.py</code> <pre><code>def set_attach_debug_stack(\n    enabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Specifies whether to attach a page script stack id in requests\n\n    **EXPERIMENTAL**\n\n    :param enabled: Whether to attach a page script stack for debugging purpose.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.setAttachDebugStack\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.set_blocked_ur_ls","title":"<code>set_blocked_ur_ls(urls)</code>","text":"<p>Blocks URLs from loading.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>urls</code> <code>List[str]</code> <p>URL patterns to block. Wildcards ('*') are allowed.</p> required Source code in <code>zendriver/cdp/network.py</code> <pre><code>def set_blocked_ur_ls(\n    urls: typing.List[str],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Blocks URLs from loading.\n\n    **EXPERIMENTAL**\n\n    :param urls: URL patterns to block. Wildcards ('*') are allowed.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"urls\"] = [i for i in urls]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.setBlockedURLs\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.set_bypass_service_worker","title":"<code>set_bypass_service_worker(bypass)</code>","text":"<p>Toggles ignoring of service worker for each request.</p> <p>Parameters:</p> Name Type Description Default <code>bypass</code> <code>bool</code> <p>Bypass service worker and load from network.</p> required Source code in <code>zendriver/cdp/network.py</code> <pre><code>def set_bypass_service_worker(\n    bypass: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Toggles ignoring of service worker for each request.\n\n    :param bypass: Bypass service worker and load from network.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"bypass\"] = bypass\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.setBypassServiceWorker\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.set_cache_disabled","title":"<code>set_cache_disabled(cache_disabled)</code>","text":"<p>Toggles ignoring cache for each request. If <code>true</code>, cache will not be used.</p> <p>Parameters:</p> Name Type Description Default <code>cache_disabled</code> <code>bool</code> <p>Cache disabled state.</p> required Source code in <code>zendriver/cdp/network.py</code> <pre><code>def set_cache_disabled(\n    cache_disabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Toggles ignoring cache for each request. If ``true``, cache will not be used.\n\n    :param cache_disabled: Cache disabled state.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"cacheDisabled\"] = cache_disabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.setCacheDisabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.set_cookie","title":"<code>set_cookie(name, value, url=None, domain=None, path=None, secure=None, http_only=None, same_site=None, expires=None, priority=None, same_party=None, source_scheme=None, source_port=None, partition_key=None)</code>","text":"<p>Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Cookie name.</p> required <code>value</code> <code>str</code> <p>Cookie value.</p> required <code>url</code> <code>Optional[str]</code> <p>(Optional) The request-URI to associate with the setting of the cookie. This value can affect the default domain, path, source port, and source scheme values of the created cookie.</p> <code>None</code> <code>domain</code> <code>Optional[str]</code> <p>(Optional) Cookie domain.</p> <code>None</code> <code>path</code> <code>Optional[str]</code> <p>(Optional) Cookie path.</p> <code>None</code> <code>secure</code> <code>Optional[bool]</code> <p>(Optional) True if cookie is secure.</p> <code>None</code> <code>http_only</code> <code>Optional[bool]</code> <p>(Optional) True if cookie is http-only.</p> <code>None</code> <code>same_site</code> <code>Optional[CookieSameSite]</code> <p>(Optional) Cookie SameSite type.</p> <code>None</code> <code>expires</code> <code>Optional[TimeSinceEpoch]</code> <p>(Optional) Cookie expiration date, session cookie if not set</p> <code>None</code> <code>priority</code> <code>Optional[CookiePriority]</code> <p>(EXPERIMENTAL) (Optional) Cookie Priority type.</p> <code>None</code> <code>same_party</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) True if cookie is SameParty.</p> <code>None</code> <code>source_scheme</code> <code>Optional[CookieSourceScheme]</code> <p>(EXPERIMENTAL) (Optional) Cookie source scheme type.</p> <code>None</code> <code>source_port</code> <code>Optional[int]</code> <p>(EXPERIMENTAL) (Optional) Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port. An unspecified port value allows protocol clients to emulate legacy cookie scope for the port. This is a temporary ability and it will be removed in the future.</p> <code>None</code> <code>partition_key</code> <code>Optional[CookiePartitionKey]</code> <p>(EXPERIMENTAL) (Optional) Cookie partition key. If not set, the cookie will be set as not partitioned.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, bool]</code> <p>Always set to true. If an error occurs, the response indicates protocol error.</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def set_cookie(\n    name: str,\n    value: str,\n    url: typing.Optional[str] = None,\n    domain: typing.Optional[str] = None,\n    path: typing.Optional[str] = None,\n    secure: typing.Optional[bool] = None,\n    http_only: typing.Optional[bool] = None,\n    same_site: typing.Optional[CookieSameSite] = None,\n    expires: typing.Optional[TimeSinceEpoch] = None,\n    priority: typing.Optional[CookiePriority] = None,\n    same_party: typing.Optional[bool] = None,\n    source_scheme: typing.Optional[CookieSourceScheme] = None,\n    source_port: typing.Optional[int] = None,\n    partition_key: typing.Optional[CookiePartitionKey] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]:\n    \"\"\"\n    Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.\n\n    :param name: Cookie name.\n    :param value: Cookie value.\n    :param url: *(Optional)* The request-URI to associate with the setting of the cookie. This value can affect the default domain, path, source port, and source scheme values of the created cookie.\n    :param domain: *(Optional)* Cookie domain.\n    :param path: *(Optional)* Cookie path.\n    :param secure: *(Optional)* True if cookie is secure.\n    :param http_only: *(Optional)* True if cookie is http-only.\n    :param same_site: *(Optional)* Cookie SameSite type.\n    :param expires: *(Optional)* Cookie expiration date, session cookie if not set\n    :param priority: **(EXPERIMENTAL)** *(Optional)* Cookie Priority type.\n    :param same_party: **(EXPERIMENTAL)** *(Optional)* True if cookie is SameParty.\n    :param source_scheme: **(EXPERIMENTAL)** *(Optional)* Cookie source scheme type.\n    :param source_port: **(EXPERIMENTAL)** *(Optional)* Cookie source port. Valid values are {-1, [1, 65535]}, -1 indicates an unspecified port. An unspecified port value allows protocol clients to emulate legacy cookie scope for the port. This is a temporary ability and it will be removed in the future.\n    :param partition_key: **(EXPERIMENTAL)** *(Optional)* Cookie partition key. If not set, the cookie will be set as not partitioned.\n    :returns: Always set to true. If an error occurs, the response indicates protocol error.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"name\"] = name\n    params[\"value\"] = value\n    if url is not None:\n        params[\"url\"] = url\n    if domain is not None:\n        params[\"domain\"] = domain\n    if path is not None:\n        params[\"path\"] = path\n    if secure is not None:\n        params[\"secure\"] = secure\n    if http_only is not None:\n        params[\"httpOnly\"] = http_only\n    if same_site is not None:\n        params[\"sameSite\"] = same_site.to_json()\n    if expires is not None:\n        params[\"expires\"] = expires.to_json()\n    if priority is not None:\n        params[\"priority\"] = priority.to_json()\n    if same_party is not None:\n        params[\"sameParty\"] = same_party\n    if source_scheme is not None:\n        params[\"sourceScheme\"] = source_scheme.to_json()\n    if source_port is not None:\n        params[\"sourcePort\"] = source_port\n    if partition_key is not None:\n        params[\"partitionKey\"] = partition_key.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.setCookie\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return bool(json[\"success\"])\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.set_cookies","title":"<code>set_cookies(cookies)</code>","text":"<p>Sets given cookies.</p> <p>Parameters:</p> Name Type Description Default <code>cookies</code> <code>List[CookieParam]</code> <p>Cookies to be set.</p> required Source code in <code>zendriver/cdp/network.py</code> <pre><code>def set_cookies(\n    cookies: typing.List[CookieParam],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets given cookies.\n\n    :param cookies: Cookies to be set.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"cookies\"] = [i.to_json() for i in cookies]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.setCookies\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.set_extra_http_headers","title":"<code>set_extra_http_headers(headers)</code>","text":"<p>Specifies whether to always send extra HTTP headers with the requests from this page.</p> <p>Parameters:</p> Name Type Description Default <code>headers</code> <code>Headers</code> <p>Map with extra HTTP headers.</p> required Source code in <code>zendriver/cdp/network.py</code> <pre><code>def set_extra_http_headers(\n    headers: Headers,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Specifies whether to always send extra HTTP headers with the requests from this page.\n\n    :param headers: Map with extra HTTP headers.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"headers\"] = headers.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.setExtraHTTPHeaders\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.set_request_interception","title":"<code>set_request_interception(patterns)</code>","text":"<p>Sets the requests to intercept that match the provided patterns and optionally resource types. Deprecated, please use Fetch.enable instead.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>patterns</code> <code>List[RequestPattern]</code> <p>Requests matching any of these patterns will be forwarded and wait for the corresponding continueInterceptedRequest call.</p> required Source code in <code>zendriver/cdp/network.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_request_interception(\n    patterns: typing.List[RequestPattern],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets the requests to intercept that match the provided patterns and optionally resource types.\n    Deprecated, please use Fetch.enable instead.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param patterns: Requests matching any of these patterns will be forwarded and wait for the corresponding continueInterceptedRequest call.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"patterns\"] = [i.to_json() for i in patterns]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.setRequestInterception\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.set_user_agent_override","title":"<code>set_user_agent_override(user_agent, accept_language=None, platform=None, user_agent_metadata=None)</code>","text":"<p>Allows overriding user agent with the given string.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>User agent to use.</p> required <code>accept_language</code> <code>Optional[str]</code> <p>(Optional) Browser language to emulate.</p> <code>None</code> <code>platform</code> <code>Optional[str]</code> <p>(Optional) The platform navigator.platform should return.</p> <code>None</code> <code>user_agent_metadata</code> <code>Optional[UserAgentMetadata]</code> <p>(EXPERIMENTAL) (Optional) To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData</p> <code>None</code> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def set_user_agent_override(\n    user_agent: str,\n    accept_language: typing.Optional[str] = None,\n    platform: typing.Optional[str] = None,\n    user_agent_metadata: typing.Optional[emulation.UserAgentMetadata] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Allows overriding user agent with the given string.\n\n    :param user_agent: User agent to use.\n    :param accept_language: *(Optional)* Browser language to emulate.\n    :param platform: *(Optional)* The platform navigator.platform should return.\n    :param user_agent_metadata: **(EXPERIMENTAL)** *(Optional)* To be sent in Sec-CH-UA-* headers and returned in navigator.userAgentData\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"userAgent\"] = user_agent\n    if accept_language is not None:\n        params[\"acceptLanguage\"] = accept_language\n    if platform is not None:\n        params[\"platform\"] = platform\n    if user_agent_metadata is not None:\n        params[\"userAgentMetadata\"] = user_agent_metadata.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.setUserAgentOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.stream_resource_content","title":"<code>stream_resource_content(request_id)</code>","text":"<p>Enables streaming of the response for the given requestId. If enabled, the dataReceived event contains the data that was received during streaming.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>RequestId</code> <p>Identifier of the request to stream.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>Data that has been buffered until streaming is enabled. (Encoded as a base64 string when passed over JSON)</p> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def stream_resource_content(\n    request_id: RequestId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Enables streaming of the response for the given requestId.\n    If enabled, the dataReceived event contains the data that was received during streaming.\n\n    **EXPERIMENTAL**\n\n    :param request_id: Identifier of the request to stream.\n    :returns: Data that has been buffered until streaming is enabled. (Encoded as a base64 string when passed over JSON)\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"requestId\"] = request_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.streamResourceContent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"bufferedData\"])\n</code></pre>"},{"location":"reference/cdp/network/#zendriver.cdp.network.take_response_body_for_interception_as_stream","title":"<code>take_response_body_for_interception_as_stream(interception_id)</code>","text":"<p>Returns a handle to the stream representing the response body. Note that after this command, the intercepted request can't be continued as is -- you either need to cancel it or to provide the response body. The stream only supports sequential read, IO.read will fail if the position is specified.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>interception_id</code> <code>InterceptionId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, StreamHandle]</code> Source code in <code>zendriver/cdp/network.py</code> <pre><code>def take_response_body_for_interception_as_stream(\n    interception_id: InterceptionId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, io.StreamHandle]:\n    \"\"\"\n    Returns a handle to the stream representing the response body. Note that after this command,\n    the intercepted request can't be continued as is -- you either need to cancel it or to provide\n    the response body. The stream only supports sequential read, IO.read will fail if the position\n    is specified.\n\n    **EXPERIMENTAL**\n\n    :param interception_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"interceptionId\"] = interception_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Network.takeResponseBodyForInterceptionAsStream\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return io.StreamHandle.from_json(json[\"stream\"])\n</code></pre>"},{"location":"reference/cdp/overlay/","title":"overlay","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.BoxStyle","title":"<code>BoxStyle</code>  <code>dataclass</code>","text":"<p>Style information for drawing a box.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass BoxStyle:\n    \"\"\"\n    Style information for drawing a box.\n    \"\"\"\n\n    #: The background color for the box (default: transparent)\n    fill_color: typing.Optional[dom.RGBA] = None\n\n    #: The hatching color for the box (default: transparent)\n    hatch_color: typing.Optional[dom.RGBA] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.fill_color is not None:\n            json[\"fillColor\"] = self.fill_color.to_json()\n        if self.hatch_color is not None:\n            json[\"hatchColor\"] = self.hatch_color.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BoxStyle:\n        return cls(\n            fill_color=(\n                dom.RGBA.from_json(json[\"fillColor\"])\n                if json.get(\"fillColor\", None) is not None\n                else None\n            ),\n            hatch_color=(\n                dom.RGBA.from_json(json[\"hatchColor\"])\n                if json.get(\"hatchColor\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.BoxStyle.fill_color","title":"<code>fill_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.BoxStyle.hatch_color","title":"<code>hatch_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.BoxStyle.__init__","title":"<code>__init__(fill_color=None, hatch_color=None)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.BoxStyle.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BoxStyle:\n    return cls(\n        fill_color=(\n            dom.RGBA.from_json(json[\"fillColor\"])\n            if json.get(\"fillColor\", None) is not None\n            else None\n        ),\n        hatch_color=(\n            dom.RGBA.from_json(json[\"hatchColor\"])\n            if json.get(\"hatchColor\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.BoxStyle.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.fill_color is not None:\n        json[\"fillColor\"] = self.fill_color.to_json()\n    if self.hatch_color is not None:\n        json[\"hatchColor\"] = self.hatch_color.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ColorFormat","title":"<code>ColorFormat</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>class ColorFormat(enum.Enum):\n    RGB = \"rgb\"\n    HSL = \"hsl\"\n    HWB = \"hwb\"\n    HEX_ = \"hex\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ColorFormat:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ColorFormat.HEX_","title":"<code>HEX_ = 'hex'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ColorFormat.HSL","title":"<code>HSL = 'hsl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ColorFormat.HWB","title":"<code>HWB = 'hwb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ColorFormat.RGB","title":"<code>RGB = 'rgb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ColorFormat.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ColorFormat:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ColorFormat.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryContainerHighlightConfig","title":"<code>ContainerQueryContainerHighlightConfig</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass ContainerQueryContainerHighlightConfig:\n    #: The style of the container border.\n    container_border: typing.Optional[LineStyle] = None\n\n    #: The style of the descendants' borders.\n    descendant_border: typing.Optional[LineStyle] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.container_border is not None:\n            json[\"containerBorder\"] = self.container_border.to_json()\n        if self.descendant_border is not None:\n            json[\"descendantBorder\"] = self.descendant_border.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ContainerQueryContainerHighlightConfig:\n        return cls(\n            container_border=(\n                LineStyle.from_json(json[\"containerBorder\"])\n                if json.get(\"containerBorder\", None) is not None\n                else None\n            ),\n            descendant_border=(\n                LineStyle.from_json(json[\"descendantBorder\"])\n                if json.get(\"descendantBorder\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryContainerHighlightConfig.container_border","title":"<code>container_border: typing.Optional[LineStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryContainerHighlightConfig.descendant_border","title":"<code>descendant_border: typing.Optional[LineStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryContainerHighlightConfig.__init__","title":"<code>__init__(container_border=None, descendant_border=None)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryContainerHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ContainerQueryContainerHighlightConfig:\n    return cls(\n        container_border=(\n            LineStyle.from_json(json[\"containerBorder\"])\n            if json.get(\"containerBorder\", None) is not None\n            else None\n        ),\n        descendant_border=(\n            LineStyle.from_json(json[\"descendantBorder\"])\n            if json.get(\"descendantBorder\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryContainerHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.container_border is not None:\n        json[\"containerBorder\"] = self.container_border.to_json()\n    if self.descendant_border is not None:\n        json[\"descendantBorder\"] = self.descendant_border.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryHighlightConfig","title":"<code>ContainerQueryHighlightConfig</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass ContainerQueryHighlightConfig:\n    #: A descriptor for the highlight appearance of container query containers.\n    container_query_container_highlight_config: ContainerQueryContainerHighlightConfig\n\n    #: Identifier of the container node to highlight.\n    node_id: dom.NodeId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"containerQueryContainerHighlightConfig\"] = (\n            self.container_query_container_highlight_config.to_json()\n        )\n        json[\"nodeId\"] = self.node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ContainerQueryHighlightConfig:\n        return cls(\n            container_query_container_highlight_config=ContainerQueryContainerHighlightConfig.from_json(\n                json[\"containerQueryContainerHighlightConfig\"]\n            ),\n            node_id=dom.NodeId.from_json(json[\"nodeId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryHighlightConfig.container_query_container_highlight_config","title":"<code>container_query_container_highlight_config: ContainerQueryContainerHighlightConfig</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryHighlightConfig.node_id","title":"<code>node_id: dom.NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryHighlightConfig.__init__","title":"<code>__init__(container_query_container_highlight_config, node_id)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ContainerQueryHighlightConfig:\n    return cls(\n        container_query_container_highlight_config=ContainerQueryContainerHighlightConfig.from_json(\n            json[\"containerQueryContainerHighlightConfig\"]\n        ),\n        node_id=dom.NodeId.from_json(json[\"nodeId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContainerQueryHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"containerQueryContainerHighlightConfig\"] = (\n        self.container_query_container_highlight_config.to_json()\n    )\n    json[\"nodeId\"] = self.node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContrastAlgorithm","title":"<code>ContrastAlgorithm</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>class ContrastAlgorithm(enum.Enum):\n    AA = \"aa\"\n    AAA = \"aaa\"\n    APCA = \"apca\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ContrastAlgorithm:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContrastAlgorithm.AA","title":"<code>AA = 'aa'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContrastAlgorithm.AAA","title":"<code>AAA = 'aaa'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContrastAlgorithm.APCA","title":"<code>APCA = 'apca'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContrastAlgorithm.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ContrastAlgorithm:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ContrastAlgorithm.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig","title":"<code>FlexContainerHighlightConfig</code>  <code>dataclass</code>","text":"<p>Configuration data for the highlighting of Flex container elements.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass FlexContainerHighlightConfig:\n    \"\"\"\n    Configuration data for the highlighting of Flex container elements.\n    \"\"\"\n\n    #: The style of the container border\n    container_border: typing.Optional[LineStyle] = None\n\n    #: The style of the separator between lines\n    line_separator: typing.Optional[LineStyle] = None\n\n    #: The style of the separator between items\n    item_separator: typing.Optional[LineStyle] = None\n\n    #: Style of content-distribution space on the main axis (justify-content).\n    main_distributed_space: typing.Optional[BoxStyle] = None\n\n    #: Style of content-distribution space on the cross axis (align-content).\n    cross_distributed_space: typing.Optional[BoxStyle] = None\n\n    #: Style of empty space caused by row gaps (gap/row-gap).\n    row_gap_space: typing.Optional[BoxStyle] = None\n\n    #: Style of empty space caused by columns gaps (gap/column-gap).\n    column_gap_space: typing.Optional[BoxStyle] = None\n\n    #: Style of the self-alignment line (align-items).\n    cross_alignment: typing.Optional[LineStyle] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.container_border is not None:\n            json[\"containerBorder\"] = self.container_border.to_json()\n        if self.line_separator is not None:\n            json[\"lineSeparator\"] = self.line_separator.to_json()\n        if self.item_separator is not None:\n            json[\"itemSeparator\"] = self.item_separator.to_json()\n        if self.main_distributed_space is not None:\n            json[\"mainDistributedSpace\"] = self.main_distributed_space.to_json()\n        if self.cross_distributed_space is not None:\n            json[\"crossDistributedSpace\"] = self.cross_distributed_space.to_json()\n        if self.row_gap_space is not None:\n            json[\"rowGapSpace\"] = self.row_gap_space.to_json()\n        if self.column_gap_space is not None:\n            json[\"columnGapSpace\"] = self.column_gap_space.to_json()\n        if self.cross_alignment is not None:\n            json[\"crossAlignment\"] = self.cross_alignment.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FlexContainerHighlightConfig:\n        return cls(\n            container_border=(\n                LineStyle.from_json(json[\"containerBorder\"])\n                if json.get(\"containerBorder\", None) is not None\n                else None\n            ),\n            line_separator=(\n                LineStyle.from_json(json[\"lineSeparator\"])\n                if json.get(\"lineSeparator\", None) is not None\n                else None\n            ),\n            item_separator=(\n                LineStyle.from_json(json[\"itemSeparator\"])\n                if json.get(\"itemSeparator\", None) is not None\n                else None\n            ),\n            main_distributed_space=(\n                BoxStyle.from_json(json[\"mainDistributedSpace\"])\n                if json.get(\"mainDistributedSpace\", None) is not None\n                else None\n            ),\n            cross_distributed_space=(\n                BoxStyle.from_json(json[\"crossDistributedSpace\"])\n                if json.get(\"crossDistributedSpace\", None) is not None\n                else None\n            ),\n            row_gap_space=(\n                BoxStyle.from_json(json[\"rowGapSpace\"])\n                if json.get(\"rowGapSpace\", None) is not None\n                else None\n            ),\n            column_gap_space=(\n                BoxStyle.from_json(json[\"columnGapSpace\"])\n                if json.get(\"columnGapSpace\", None) is not None\n                else None\n            ),\n            cross_alignment=(\n                LineStyle.from_json(json[\"crossAlignment\"])\n                if json.get(\"crossAlignment\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.column_gap_space","title":"<code>column_gap_space: typing.Optional[BoxStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.container_border","title":"<code>container_border: typing.Optional[LineStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.cross_alignment","title":"<code>cross_alignment: typing.Optional[LineStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.cross_distributed_space","title":"<code>cross_distributed_space: typing.Optional[BoxStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.item_separator","title":"<code>item_separator: typing.Optional[LineStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.line_separator","title":"<code>line_separator: typing.Optional[LineStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.main_distributed_space","title":"<code>main_distributed_space: typing.Optional[BoxStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.row_gap_space","title":"<code>row_gap_space: typing.Optional[BoxStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.__init__","title":"<code>__init__(container_border=None, line_separator=None, item_separator=None, main_distributed_space=None, cross_distributed_space=None, row_gap_space=None, column_gap_space=None, cross_alignment=None)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FlexContainerHighlightConfig:\n    return cls(\n        container_border=(\n            LineStyle.from_json(json[\"containerBorder\"])\n            if json.get(\"containerBorder\", None) is not None\n            else None\n        ),\n        line_separator=(\n            LineStyle.from_json(json[\"lineSeparator\"])\n            if json.get(\"lineSeparator\", None) is not None\n            else None\n        ),\n        item_separator=(\n            LineStyle.from_json(json[\"itemSeparator\"])\n            if json.get(\"itemSeparator\", None) is not None\n            else None\n        ),\n        main_distributed_space=(\n            BoxStyle.from_json(json[\"mainDistributedSpace\"])\n            if json.get(\"mainDistributedSpace\", None) is not None\n            else None\n        ),\n        cross_distributed_space=(\n            BoxStyle.from_json(json[\"crossDistributedSpace\"])\n            if json.get(\"crossDistributedSpace\", None) is not None\n            else None\n        ),\n        row_gap_space=(\n            BoxStyle.from_json(json[\"rowGapSpace\"])\n            if json.get(\"rowGapSpace\", None) is not None\n            else None\n        ),\n        column_gap_space=(\n            BoxStyle.from_json(json[\"columnGapSpace\"])\n            if json.get(\"columnGapSpace\", None) is not None\n            else None\n        ),\n        cross_alignment=(\n            LineStyle.from_json(json[\"crossAlignment\"])\n            if json.get(\"crossAlignment\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexContainerHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.container_border is not None:\n        json[\"containerBorder\"] = self.container_border.to_json()\n    if self.line_separator is not None:\n        json[\"lineSeparator\"] = self.line_separator.to_json()\n    if self.item_separator is not None:\n        json[\"itemSeparator\"] = self.item_separator.to_json()\n    if self.main_distributed_space is not None:\n        json[\"mainDistributedSpace\"] = self.main_distributed_space.to_json()\n    if self.cross_distributed_space is not None:\n        json[\"crossDistributedSpace\"] = self.cross_distributed_space.to_json()\n    if self.row_gap_space is not None:\n        json[\"rowGapSpace\"] = self.row_gap_space.to_json()\n    if self.column_gap_space is not None:\n        json[\"columnGapSpace\"] = self.column_gap_space.to_json()\n    if self.cross_alignment is not None:\n        json[\"crossAlignment\"] = self.cross_alignment.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexItemHighlightConfig","title":"<code>FlexItemHighlightConfig</code>  <code>dataclass</code>","text":"<p>Configuration data for the highlighting of Flex item elements.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass FlexItemHighlightConfig:\n    \"\"\"\n    Configuration data for the highlighting of Flex item elements.\n    \"\"\"\n\n    #: Style of the box representing the item's base size\n    base_size_box: typing.Optional[BoxStyle] = None\n\n    #: Style of the border around the box representing the item's base size\n    base_size_border: typing.Optional[LineStyle] = None\n\n    #: Style of the arrow representing if the item grew or shrank\n    flexibility_arrow: typing.Optional[LineStyle] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.base_size_box is not None:\n            json[\"baseSizeBox\"] = self.base_size_box.to_json()\n        if self.base_size_border is not None:\n            json[\"baseSizeBorder\"] = self.base_size_border.to_json()\n        if self.flexibility_arrow is not None:\n            json[\"flexibilityArrow\"] = self.flexibility_arrow.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FlexItemHighlightConfig:\n        return cls(\n            base_size_box=(\n                BoxStyle.from_json(json[\"baseSizeBox\"])\n                if json.get(\"baseSizeBox\", None) is not None\n                else None\n            ),\n            base_size_border=(\n                LineStyle.from_json(json[\"baseSizeBorder\"])\n                if json.get(\"baseSizeBorder\", None) is not None\n                else None\n            ),\n            flexibility_arrow=(\n                LineStyle.from_json(json[\"flexibilityArrow\"])\n                if json.get(\"flexibilityArrow\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexItemHighlightConfig.base_size_border","title":"<code>base_size_border: typing.Optional[LineStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexItemHighlightConfig.base_size_box","title":"<code>base_size_box: typing.Optional[BoxStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexItemHighlightConfig.flexibility_arrow","title":"<code>flexibility_arrow: typing.Optional[LineStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexItemHighlightConfig.__init__","title":"<code>__init__(base_size_box=None, base_size_border=None, flexibility_arrow=None)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexItemHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FlexItemHighlightConfig:\n    return cls(\n        base_size_box=(\n            BoxStyle.from_json(json[\"baseSizeBox\"])\n            if json.get(\"baseSizeBox\", None) is not None\n            else None\n        ),\n        base_size_border=(\n            LineStyle.from_json(json[\"baseSizeBorder\"])\n            if json.get(\"baseSizeBorder\", None) is not None\n            else None\n        ),\n        flexibility_arrow=(\n            LineStyle.from_json(json[\"flexibilityArrow\"])\n            if json.get(\"flexibilityArrow\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexItemHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.base_size_box is not None:\n        json[\"baseSizeBox\"] = self.base_size_box.to_json()\n    if self.base_size_border is not None:\n        json[\"baseSizeBorder\"] = self.base_size_border.to_json()\n    if self.flexibility_arrow is not None:\n        json[\"flexibilityArrow\"] = self.flexibility_arrow.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexNodeHighlightConfig","title":"<code>FlexNodeHighlightConfig</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass FlexNodeHighlightConfig:\n    #: A descriptor for the highlight appearance of flex containers.\n    flex_container_highlight_config: FlexContainerHighlightConfig\n\n    #: Identifier of the node to highlight.\n    node_id: dom.NodeId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"flexContainerHighlightConfig\"] = (\n            self.flex_container_highlight_config.to_json()\n        )\n        json[\"nodeId\"] = self.node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FlexNodeHighlightConfig:\n        return cls(\n            flex_container_highlight_config=FlexContainerHighlightConfig.from_json(\n                json[\"flexContainerHighlightConfig\"]\n            ),\n            node_id=dom.NodeId.from_json(json[\"nodeId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexNodeHighlightConfig.flex_container_highlight_config","title":"<code>flex_container_highlight_config: FlexContainerHighlightConfig</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexNodeHighlightConfig.node_id","title":"<code>node_id: dom.NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexNodeHighlightConfig.__init__","title":"<code>__init__(flex_container_highlight_config, node_id)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexNodeHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FlexNodeHighlightConfig:\n    return cls(\n        flex_container_highlight_config=FlexContainerHighlightConfig.from_json(\n            json[\"flexContainerHighlightConfig\"]\n        ),\n        node_id=dom.NodeId.from_json(json[\"nodeId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.FlexNodeHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"flexContainerHighlightConfig\"] = (\n        self.flex_container_highlight_config.to_json()\n    )\n    json[\"nodeId\"] = self.node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig","title":"<code>GridHighlightConfig</code>  <code>dataclass</code>","text":"<p>Configuration data for the highlighting of Grid elements.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass GridHighlightConfig:\n    \"\"\"\n    Configuration data for the highlighting of Grid elements.\n    \"\"\"\n\n    #: Whether the extension lines from grid cells to the rulers should be shown (default: false).\n    show_grid_extension_lines: typing.Optional[bool] = None\n\n    #: Show Positive line number labels (default: false).\n    show_positive_line_numbers: typing.Optional[bool] = None\n\n    #: Show Negative line number labels (default: false).\n    show_negative_line_numbers: typing.Optional[bool] = None\n\n    #: Show area name labels (default: false).\n    show_area_names: typing.Optional[bool] = None\n\n    #: Show line name labels (default: false).\n    show_line_names: typing.Optional[bool] = None\n\n    #: Show track size labels (default: false).\n    show_track_sizes: typing.Optional[bool] = None\n\n    #: The grid container border highlight color (default: transparent).\n    grid_border_color: typing.Optional[dom.RGBA] = None\n\n    #: The cell border color (default: transparent). Deprecated, please use rowLineColor and columnLineColor instead.\n    cell_border_color: typing.Optional[dom.RGBA] = None\n\n    #: The row line color (default: transparent).\n    row_line_color: typing.Optional[dom.RGBA] = None\n\n    #: The column line color (default: transparent).\n    column_line_color: typing.Optional[dom.RGBA] = None\n\n    #: Whether the grid border is dashed (default: false).\n    grid_border_dash: typing.Optional[bool] = None\n\n    #: Whether the cell border is dashed (default: false). Deprecated, please us rowLineDash and columnLineDash instead.\n    cell_border_dash: typing.Optional[bool] = None\n\n    #: Whether row lines are dashed (default: false).\n    row_line_dash: typing.Optional[bool] = None\n\n    #: Whether column lines are dashed (default: false).\n    column_line_dash: typing.Optional[bool] = None\n\n    #: The row gap highlight fill color (default: transparent).\n    row_gap_color: typing.Optional[dom.RGBA] = None\n\n    #: The row gap hatching fill color (default: transparent).\n    row_hatch_color: typing.Optional[dom.RGBA] = None\n\n    #: The column gap highlight fill color (default: transparent).\n    column_gap_color: typing.Optional[dom.RGBA] = None\n\n    #: The column gap hatching fill color (default: transparent).\n    column_hatch_color: typing.Optional[dom.RGBA] = None\n\n    #: The named grid areas border color (Default: transparent).\n    area_border_color: typing.Optional[dom.RGBA] = None\n\n    #: The grid container background color (Default: transparent).\n    grid_background_color: typing.Optional[dom.RGBA] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.show_grid_extension_lines is not None:\n            json[\"showGridExtensionLines\"] = self.show_grid_extension_lines\n        if self.show_positive_line_numbers is not None:\n            json[\"showPositiveLineNumbers\"] = self.show_positive_line_numbers\n        if self.show_negative_line_numbers is not None:\n            json[\"showNegativeLineNumbers\"] = self.show_negative_line_numbers\n        if self.show_area_names is not None:\n            json[\"showAreaNames\"] = self.show_area_names\n        if self.show_line_names is not None:\n            json[\"showLineNames\"] = self.show_line_names\n        if self.show_track_sizes is not None:\n            json[\"showTrackSizes\"] = self.show_track_sizes\n        if self.grid_border_color is not None:\n            json[\"gridBorderColor\"] = self.grid_border_color.to_json()\n        if self.cell_border_color is not None:\n            json[\"cellBorderColor\"] = self.cell_border_color.to_json()\n        if self.row_line_color is not None:\n            json[\"rowLineColor\"] = self.row_line_color.to_json()\n        if self.column_line_color is not None:\n            json[\"columnLineColor\"] = self.column_line_color.to_json()\n        if self.grid_border_dash is not None:\n            json[\"gridBorderDash\"] = self.grid_border_dash\n        if self.cell_border_dash is not None:\n            json[\"cellBorderDash\"] = self.cell_border_dash\n        if self.row_line_dash is not None:\n            json[\"rowLineDash\"] = self.row_line_dash\n        if self.column_line_dash is not None:\n            json[\"columnLineDash\"] = self.column_line_dash\n        if self.row_gap_color is not None:\n            json[\"rowGapColor\"] = self.row_gap_color.to_json()\n        if self.row_hatch_color is not None:\n            json[\"rowHatchColor\"] = self.row_hatch_color.to_json()\n        if self.column_gap_color is not None:\n            json[\"columnGapColor\"] = self.column_gap_color.to_json()\n        if self.column_hatch_color is not None:\n            json[\"columnHatchColor\"] = self.column_hatch_color.to_json()\n        if self.area_border_color is not None:\n            json[\"areaBorderColor\"] = self.area_border_color.to_json()\n        if self.grid_background_color is not None:\n            json[\"gridBackgroundColor\"] = self.grid_background_color.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; GridHighlightConfig:\n        return cls(\n            show_grid_extension_lines=(\n                bool(json[\"showGridExtensionLines\"])\n                if json.get(\"showGridExtensionLines\", None) is not None\n                else None\n            ),\n            show_positive_line_numbers=(\n                bool(json[\"showPositiveLineNumbers\"])\n                if json.get(\"showPositiveLineNumbers\", None) is not None\n                else None\n            ),\n            show_negative_line_numbers=(\n                bool(json[\"showNegativeLineNumbers\"])\n                if json.get(\"showNegativeLineNumbers\", None) is not None\n                else None\n            ),\n            show_area_names=(\n                bool(json[\"showAreaNames\"])\n                if json.get(\"showAreaNames\", None) is not None\n                else None\n            ),\n            show_line_names=(\n                bool(json[\"showLineNames\"])\n                if json.get(\"showLineNames\", None) is not None\n                else None\n            ),\n            show_track_sizes=(\n                bool(json[\"showTrackSizes\"])\n                if json.get(\"showTrackSizes\", None) is not None\n                else None\n            ),\n            grid_border_color=(\n                dom.RGBA.from_json(json[\"gridBorderColor\"])\n                if json.get(\"gridBorderColor\", None) is not None\n                else None\n            ),\n            cell_border_color=(\n                dom.RGBA.from_json(json[\"cellBorderColor\"])\n                if json.get(\"cellBorderColor\", None) is not None\n                else None\n            ),\n            row_line_color=(\n                dom.RGBA.from_json(json[\"rowLineColor\"])\n                if json.get(\"rowLineColor\", None) is not None\n                else None\n            ),\n            column_line_color=(\n                dom.RGBA.from_json(json[\"columnLineColor\"])\n                if json.get(\"columnLineColor\", None) is not None\n                else None\n            ),\n            grid_border_dash=(\n                bool(json[\"gridBorderDash\"])\n                if json.get(\"gridBorderDash\", None) is not None\n                else None\n            ),\n            cell_border_dash=(\n                bool(json[\"cellBorderDash\"])\n                if json.get(\"cellBorderDash\", None) is not None\n                else None\n            ),\n            row_line_dash=(\n                bool(json[\"rowLineDash\"])\n                if json.get(\"rowLineDash\", None) is not None\n                else None\n            ),\n            column_line_dash=(\n                bool(json[\"columnLineDash\"])\n                if json.get(\"columnLineDash\", None) is not None\n                else None\n            ),\n            row_gap_color=(\n                dom.RGBA.from_json(json[\"rowGapColor\"])\n                if json.get(\"rowGapColor\", None) is not None\n                else None\n            ),\n            row_hatch_color=(\n                dom.RGBA.from_json(json[\"rowHatchColor\"])\n                if json.get(\"rowHatchColor\", None) is not None\n                else None\n            ),\n            column_gap_color=(\n                dom.RGBA.from_json(json[\"columnGapColor\"])\n                if json.get(\"columnGapColor\", None) is not None\n                else None\n            ),\n            column_hatch_color=(\n                dom.RGBA.from_json(json[\"columnHatchColor\"])\n                if json.get(\"columnHatchColor\", None) is not None\n                else None\n            ),\n            area_border_color=(\n                dom.RGBA.from_json(json[\"areaBorderColor\"])\n                if json.get(\"areaBorderColor\", None) is not None\n                else None\n            ),\n            grid_background_color=(\n                dom.RGBA.from_json(json[\"gridBackgroundColor\"])\n                if json.get(\"gridBackgroundColor\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.area_border_color","title":"<code>area_border_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.cell_border_color","title":"<code>cell_border_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.cell_border_dash","title":"<code>cell_border_dash: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.column_gap_color","title":"<code>column_gap_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.column_hatch_color","title":"<code>column_hatch_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.column_line_color","title":"<code>column_line_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.column_line_dash","title":"<code>column_line_dash: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.grid_background_color","title":"<code>grid_background_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.grid_border_color","title":"<code>grid_border_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.grid_border_dash","title":"<code>grid_border_dash: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.row_gap_color","title":"<code>row_gap_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.row_hatch_color","title":"<code>row_hatch_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.row_line_color","title":"<code>row_line_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.row_line_dash","title":"<code>row_line_dash: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.show_area_names","title":"<code>show_area_names: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.show_grid_extension_lines","title":"<code>show_grid_extension_lines: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.show_line_names","title":"<code>show_line_names: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.show_negative_line_numbers","title":"<code>show_negative_line_numbers: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.show_positive_line_numbers","title":"<code>show_positive_line_numbers: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.show_track_sizes","title":"<code>show_track_sizes: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.__init__","title":"<code>__init__(show_grid_extension_lines=None, show_positive_line_numbers=None, show_negative_line_numbers=None, show_area_names=None, show_line_names=None, show_track_sizes=None, grid_border_color=None, cell_border_color=None, row_line_color=None, column_line_color=None, grid_border_dash=None, cell_border_dash=None, row_line_dash=None, column_line_dash=None, row_gap_color=None, row_hatch_color=None, column_gap_color=None, column_hatch_color=None, area_border_color=None, grid_background_color=None)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; GridHighlightConfig:\n    return cls(\n        show_grid_extension_lines=(\n            bool(json[\"showGridExtensionLines\"])\n            if json.get(\"showGridExtensionLines\", None) is not None\n            else None\n        ),\n        show_positive_line_numbers=(\n            bool(json[\"showPositiveLineNumbers\"])\n            if json.get(\"showPositiveLineNumbers\", None) is not None\n            else None\n        ),\n        show_negative_line_numbers=(\n            bool(json[\"showNegativeLineNumbers\"])\n            if json.get(\"showNegativeLineNumbers\", None) is not None\n            else None\n        ),\n        show_area_names=(\n            bool(json[\"showAreaNames\"])\n            if json.get(\"showAreaNames\", None) is not None\n            else None\n        ),\n        show_line_names=(\n            bool(json[\"showLineNames\"])\n            if json.get(\"showLineNames\", None) is not None\n            else None\n        ),\n        show_track_sizes=(\n            bool(json[\"showTrackSizes\"])\n            if json.get(\"showTrackSizes\", None) is not None\n            else None\n        ),\n        grid_border_color=(\n            dom.RGBA.from_json(json[\"gridBorderColor\"])\n            if json.get(\"gridBorderColor\", None) is not None\n            else None\n        ),\n        cell_border_color=(\n            dom.RGBA.from_json(json[\"cellBorderColor\"])\n            if json.get(\"cellBorderColor\", None) is not None\n            else None\n        ),\n        row_line_color=(\n            dom.RGBA.from_json(json[\"rowLineColor\"])\n            if json.get(\"rowLineColor\", None) is not None\n            else None\n        ),\n        column_line_color=(\n            dom.RGBA.from_json(json[\"columnLineColor\"])\n            if json.get(\"columnLineColor\", None) is not None\n            else None\n        ),\n        grid_border_dash=(\n            bool(json[\"gridBorderDash\"])\n            if json.get(\"gridBorderDash\", None) is not None\n            else None\n        ),\n        cell_border_dash=(\n            bool(json[\"cellBorderDash\"])\n            if json.get(\"cellBorderDash\", None) is not None\n            else None\n        ),\n        row_line_dash=(\n            bool(json[\"rowLineDash\"])\n            if json.get(\"rowLineDash\", None) is not None\n            else None\n        ),\n        column_line_dash=(\n            bool(json[\"columnLineDash\"])\n            if json.get(\"columnLineDash\", None) is not None\n            else None\n        ),\n        row_gap_color=(\n            dom.RGBA.from_json(json[\"rowGapColor\"])\n            if json.get(\"rowGapColor\", None) is not None\n            else None\n        ),\n        row_hatch_color=(\n            dom.RGBA.from_json(json[\"rowHatchColor\"])\n            if json.get(\"rowHatchColor\", None) is not None\n            else None\n        ),\n        column_gap_color=(\n            dom.RGBA.from_json(json[\"columnGapColor\"])\n            if json.get(\"columnGapColor\", None) is not None\n            else None\n        ),\n        column_hatch_color=(\n            dom.RGBA.from_json(json[\"columnHatchColor\"])\n            if json.get(\"columnHatchColor\", None) is not None\n            else None\n        ),\n        area_border_color=(\n            dom.RGBA.from_json(json[\"areaBorderColor\"])\n            if json.get(\"areaBorderColor\", None) is not None\n            else None\n        ),\n        grid_background_color=(\n            dom.RGBA.from_json(json[\"gridBackgroundColor\"])\n            if json.get(\"gridBackgroundColor\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.show_grid_extension_lines is not None:\n        json[\"showGridExtensionLines\"] = self.show_grid_extension_lines\n    if self.show_positive_line_numbers is not None:\n        json[\"showPositiveLineNumbers\"] = self.show_positive_line_numbers\n    if self.show_negative_line_numbers is not None:\n        json[\"showNegativeLineNumbers\"] = self.show_negative_line_numbers\n    if self.show_area_names is not None:\n        json[\"showAreaNames\"] = self.show_area_names\n    if self.show_line_names is not None:\n        json[\"showLineNames\"] = self.show_line_names\n    if self.show_track_sizes is not None:\n        json[\"showTrackSizes\"] = self.show_track_sizes\n    if self.grid_border_color is not None:\n        json[\"gridBorderColor\"] = self.grid_border_color.to_json()\n    if self.cell_border_color is not None:\n        json[\"cellBorderColor\"] = self.cell_border_color.to_json()\n    if self.row_line_color is not None:\n        json[\"rowLineColor\"] = self.row_line_color.to_json()\n    if self.column_line_color is not None:\n        json[\"columnLineColor\"] = self.column_line_color.to_json()\n    if self.grid_border_dash is not None:\n        json[\"gridBorderDash\"] = self.grid_border_dash\n    if self.cell_border_dash is not None:\n        json[\"cellBorderDash\"] = self.cell_border_dash\n    if self.row_line_dash is not None:\n        json[\"rowLineDash\"] = self.row_line_dash\n    if self.column_line_dash is not None:\n        json[\"columnLineDash\"] = self.column_line_dash\n    if self.row_gap_color is not None:\n        json[\"rowGapColor\"] = self.row_gap_color.to_json()\n    if self.row_hatch_color is not None:\n        json[\"rowHatchColor\"] = self.row_hatch_color.to_json()\n    if self.column_gap_color is not None:\n        json[\"columnGapColor\"] = self.column_gap_color.to_json()\n    if self.column_hatch_color is not None:\n        json[\"columnHatchColor\"] = self.column_hatch_color.to_json()\n    if self.area_border_color is not None:\n        json[\"areaBorderColor\"] = self.area_border_color.to_json()\n    if self.grid_background_color is not None:\n        json[\"gridBackgroundColor\"] = self.grid_background_color.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridNodeHighlightConfig","title":"<code>GridNodeHighlightConfig</code>  <code>dataclass</code>","text":"<p>Configurations for Persistent Grid Highlight</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass GridNodeHighlightConfig:\n    \"\"\"\n    Configurations for Persistent Grid Highlight\n    \"\"\"\n\n    #: A descriptor for the highlight appearance.\n    grid_highlight_config: GridHighlightConfig\n\n    #: Identifier of the node to highlight.\n    node_id: dom.NodeId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"gridHighlightConfig\"] = self.grid_highlight_config.to_json()\n        json[\"nodeId\"] = self.node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; GridNodeHighlightConfig:\n        return cls(\n            grid_highlight_config=GridHighlightConfig.from_json(\n                json[\"gridHighlightConfig\"]\n            ),\n            node_id=dom.NodeId.from_json(json[\"nodeId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridNodeHighlightConfig.grid_highlight_config","title":"<code>grid_highlight_config: GridHighlightConfig</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridNodeHighlightConfig.node_id","title":"<code>node_id: dom.NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridNodeHighlightConfig.__init__","title":"<code>__init__(grid_highlight_config, node_id)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridNodeHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; GridNodeHighlightConfig:\n    return cls(\n        grid_highlight_config=GridHighlightConfig.from_json(\n            json[\"gridHighlightConfig\"]\n        ),\n        node_id=dom.NodeId.from_json(json[\"nodeId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.GridNodeHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"gridHighlightConfig\"] = self.grid_highlight_config.to_json()\n    json[\"nodeId\"] = self.node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig","title":"<code>HighlightConfig</code>  <code>dataclass</code>","text":"<p>Configuration data for the highlighting of page elements.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass HighlightConfig:\n    \"\"\"\n    Configuration data for the highlighting of page elements.\n    \"\"\"\n\n    #: Whether the node info tooltip should be shown (default: false).\n    show_info: typing.Optional[bool] = None\n\n    #: Whether the node styles in the tooltip (default: false).\n    show_styles: typing.Optional[bool] = None\n\n    #: Whether the rulers should be shown (default: false).\n    show_rulers: typing.Optional[bool] = None\n\n    #: Whether the a11y info should be shown (default: true).\n    show_accessibility_info: typing.Optional[bool] = None\n\n    #: Whether the extension lines from node to the rulers should be shown (default: false).\n    show_extension_lines: typing.Optional[bool] = None\n\n    #: The content box highlight fill color (default: transparent).\n    content_color: typing.Optional[dom.RGBA] = None\n\n    #: The padding highlight fill color (default: transparent).\n    padding_color: typing.Optional[dom.RGBA] = None\n\n    #: The border highlight fill color (default: transparent).\n    border_color: typing.Optional[dom.RGBA] = None\n\n    #: The margin highlight fill color (default: transparent).\n    margin_color: typing.Optional[dom.RGBA] = None\n\n    #: The event target element highlight fill color (default: transparent).\n    event_target_color: typing.Optional[dom.RGBA] = None\n\n    #: The shape outside fill color (default: transparent).\n    shape_color: typing.Optional[dom.RGBA] = None\n\n    #: The shape margin fill color (default: transparent).\n    shape_margin_color: typing.Optional[dom.RGBA] = None\n\n    #: The grid layout color (default: transparent).\n    css_grid_color: typing.Optional[dom.RGBA] = None\n\n    #: The color format used to format color styles (default: hex).\n    color_format: typing.Optional[ColorFormat] = None\n\n    #: The grid layout highlight configuration (default: all transparent).\n    grid_highlight_config: typing.Optional[GridHighlightConfig] = None\n\n    #: The flex container highlight configuration (default: all transparent).\n    flex_container_highlight_config: typing.Optional[FlexContainerHighlightConfig] = (\n        None\n    )\n\n    #: The flex item highlight configuration (default: all transparent).\n    flex_item_highlight_config: typing.Optional[FlexItemHighlightConfig] = None\n\n    #: The contrast algorithm to use for the contrast ratio (default: aa).\n    contrast_algorithm: typing.Optional[ContrastAlgorithm] = None\n\n    #: The container query container highlight configuration (default: all transparent).\n    container_query_container_highlight_config: typing.Optional[\n        ContainerQueryContainerHighlightConfig\n    ] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.show_info is not None:\n            json[\"showInfo\"] = self.show_info\n        if self.show_styles is not None:\n            json[\"showStyles\"] = self.show_styles\n        if self.show_rulers is not None:\n            json[\"showRulers\"] = self.show_rulers\n        if self.show_accessibility_info is not None:\n            json[\"showAccessibilityInfo\"] = self.show_accessibility_info\n        if self.show_extension_lines is not None:\n            json[\"showExtensionLines\"] = self.show_extension_lines\n        if self.content_color is not None:\n            json[\"contentColor\"] = self.content_color.to_json()\n        if self.padding_color is not None:\n            json[\"paddingColor\"] = self.padding_color.to_json()\n        if self.border_color is not None:\n            json[\"borderColor\"] = self.border_color.to_json()\n        if self.margin_color is not None:\n            json[\"marginColor\"] = self.margin_color.to_json()\n        if self.event_target_color is not None:\n            json[\"eventTargetColor\"] = self.event_target_color.to_json()\n        if self.shape_color is not None:\n            json[\"shapeColor\"] = self.shape_color.to_json()\n        if self.shape_margin_color is not None:\n            json[\"shapeMarginColor\"] = self.shape_margin_color.to_json()\n        if self.css_grid_color is not None:\n            json[\"cssGridColor\"] = self.css_grid_color.to_json()\n        if self.color_format is not None:\n            json[\"colorFormat\"] = self.color_format.to_json()\n        if self.grid_highlight_config is not None:\n            json[\"gridHighlightConfig\"] = self.grid_highlight_config.to_json()\n        if self.flex_container_highlight_config is not None:\n            json[\"flexContainerHighlightConfig\"] = (\n                self.flex_container_highlight_config.to_json()\n            )\n        if self.flex_item_highlight_config is not None:\n            json[\"flexItemHighlightConfig\"] = self.flex_item_highlight_config.to_json()\n        if self.contrast_algorithm is not None:\n            json[\"contrastAlgorithm\"] = self.contrast_algorithm.to_json()\n        if self.container_query_container_highlight_config is not None:\n            json[\"containerQueryContainerHighlightConfig\"] = (\n                self.container_query_container_highlight_config.to_json()\n            )\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; HighlightConfig:\n        return cls(\n            show_info=(\n                bool(json[\"showInfo\"])\n                if json.get(\"showInfo\", None) is not None\n                else None\n            ),\n            show_styles=(\n                bool(json[\"showStyles\"])\n                if json.get(\"showStyles\", None) is not None\n                else None\n            ),\n            show_rulers=(\n                bool(json[\"showRulers\"])\n                if json.get(\"showRulers\", None) is not None\n                else None\n            ),\n            show_accessibility_info=(\n                bool(json[\"showAccessibilityInfo\"])\n                if json.get(\"showAccessibilityInfo\", None) is not None\n                else None\n            ),\n            show_extension_lines=(\n                bool(json[\"showExtensionLines\"])\n                if json.get(\"showExtensionLines\", None) is not None\n                else None\n            ),\n            content_color=(\n                dom.RGBA.from_json(json[\"contentColor\"])\n                if json.get(\"contentColor\", None) is not None\n                else None\n            ),\n            padding_color=(\n                dom.RGBA.from_json(json[\"paddingColor\"])\n                if json.get(\"paddingColor\", None) is not None\n                else None\n            ),\n            border_color=(\n                dom.RGBA.from_json(json[\"borderColor\"])\n                if json.get(\"borderColor\", None) is not None\n                else None\n            ),\n            margin_color=(\n                dom.RGBA.from_json(json[\"marginColor\"])\n                if json.get(\"marginColor\", None) is not None\n                else None\n            ),\n            event_target_color=(\n                dom.RGBA.from_json(json[\"eventTargetColor\"])\n                if json.get(\"eventTargetColor\", None) is not None\n                else None\n            ),\n            shape_color=(\n                dom.RGBA.from_json(json[\"shapeColor\"])\n                if json.get(\"shapeColor\", None) is not None\n                else None\n            ),\n            shape_margin_color=(\n                dom.RGBA.from_json(json[\"shapeMarginColor\"])\n                if json.get(\"shapeMarginColor\", None) is not None\n                else None\n            ),\n            css_grid_color=(\n                dom.RGBA.from_json(json[\"cssGridColor\"])\n                if json.get(\"cssGridColor\", None) is not None\n                else None\n            ),\n            color_format=(\n                ColorFormat.from_json(json[\"colorFormat\"])\n                if json.get(\"colorFormat\", None) is not None\n                else None\n            ),\n            grid_highlight_config=(\n                GridHighlightConfig.from_json(json[\"gridHighlightConfig\"])\n                if json.get(\"gridHighlightConfig\", None) is not None\n                else None\n            ),\n            flex_container_highlight_config=(\n                FlexContainerHighlightConfig.from_json(\n                    json[\"flexContainerHighlightConfig\"]\n                )\n                if json.get(\"flexContainerHighlightConfig\", None) is not None\n                else None\n            ),\n            flex_item_highlight_config=(\n                FlexItemHighlightConfig.from_json(json[\"flexItemHighlightConfig\"])\n                if json.get(\"flexItemHighlightConfig\", None) is not None\n                else None\n            ),\n            contrast_algorithm=(\n                ContrastAlgorithm.from_json(json[\"contrastAlgorithm\"])\n                if json.get(\"contrastAlgorithm\", None) is not None\n                else None\n            ),\n            container_query_container_highlight_config=(\n                ContainerQueryContainerHighlightConfig.from_json(\n                    json[\"containerQueryContainerHighlightConfig\"]\n                )\n                if json.get(\"containerQueryContainerHighlightConfig\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.border_color","title":"<code>border_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.color_format","title":"<code>color_format: typing.Optional[ColorFormat] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.container_query_container_highlight_config","title":"<code>container_query_container_highlight_config: typing.Optional[ContainerQueryContainerHighlightConfig] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.content_color","title":"<code>content_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.contrast_algorithm","title":"<code>contrast_algorithm: typing.Optional[ContrastAlgorithm] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.css_grid_color","title":"<code>css_grid_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.event_target_color","title":"<code>event_target_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.flex_container_highlight_config","title":"<code>flex_container_highlight_config: typing.Optional[FlexContainerHighlightConfig] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.flex_item_highlight_config","title":"<code>flex_item_highlight_config: typing.Optional[FlexItemHighlightConfig] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.grid_highlight_config","title":"<code>grid_highlight_config: typing.Optional[GridHighlightConfig] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.margin_color","title":"<code>margin_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.padding_color","title":"<code>padding_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.shape_color","title":"<code>shape_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.shape_margin_color","title":"<code>shape_margin_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.show_accessibility_info","title":"<code>show_accessibility_info: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.show_extension_lines","title":"<code>show_extension_lines: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.show_info","title":"<code>show_info: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.show_rulers","title":"<code>show_rulers: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.show_styles","title":"<code>show_styles: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.__init__","title":"<code>__init__(show_info=None, show_styles=None, show_rulers=None, show_accessibility_info=None, show_extension_lines=None, content_color=None, padding_color=None, border_color=None, margin_color=None, event_target_color=None, shape_color=None, shape_margin_color=None, css_grid_color=None, color_format=None, grid_highlight_config=None, flex_container_highlight_config=None, flex_item_highlight_config=None, contrast_algorithm=None, container_query_container_highlight_config=None)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; HighlightConfig:\n    return cls(\n        show_info=(\n            bool(json[\"showInfo\"])\n            if json.get(\"showInfo\", None) is not None\n            else None\n        ),\n        show_styles=(\n            bool(json[\"showStyles\"])\n            if json.get(\"showStyles\", None) is not None\n            else None\n        ),\n        show_rulers=(\n            bool(json[\"showRulers\"])\n            if json.get(\"showRulers\", None) is not None\n            else None\n        ),\n        show_accessibility_info=(\n            bool(json[\"showAccessibilityInfo\"])\n            if json.get(\"showAccessibilityInfo\", None) is not None\n            else None\n        ),\n        show_extension_lines=(\n            bool(json[\"showExtensionLines\"])\n            if json.get(\"showExtensionLines\", None) is not None\n            else None\n        ),\n        content_color=(\n            dom.RGBA.from_json(json[\"contentColor\"])\n            if json.get(\"contentColor\", None) is not None\n            else None\n        ),\n        padding_color=(\n            dom.RGBA.from_json(json[\"paddingColor\"])\n            if json.get(\"paddingColor\", None) is not None\n            else None\n        ),\n        border_color=(\n            dom.RGBA.from_json(json[\"borderColor\"])\n            if json.get(\"borderColor\", None) is not None\n            else None\n        ),\n        margin_color=(\n            dom.RGBA.from_json(json[\"marginColor\"])\n            if json.get(\"marginColor\", None) is not None\n            else None\n        ),\n        event_target_color=(\n            dom.RGBA.from_json(json[\"eventTargetColor\"])\n            if json.get(\"eventTargetColor\", None) is not None\n            else None\n        ),\n        shape_color=(\n            dom.RGBA.from_json(json[\"shapeColor\"])\n            if json.get(\"shapeColor\", None) is not None\n            else None\n        ),\n        shape_margin_color=(\n            dom.RGBA.from_json(json[\"shapeMarginColor\"])\n            if json.get(\"shapeMarginColor\", None) is not None\n            else None\n        ),\n        css_grid_color=(\n            dom.RGBA.from_json(json[\"cssGridColor\"])\n            if json.get(\"cssGridColor\", None) is not None\n            else None\n        ),\n        color_format=(\n            ColorFormat.from_json(json[\"colorFormat\"])\n            if json.get(\"colorFormat\", None) is not None\n            else None\n        ),\n        grid_highlight_config=(\n            GridHighlightConfig.from_json(json[\"gridHighlightConfig\"])\n            if json.get(\"gridHighlightConfig\", None) is not None\n            else None\n        ),\n        flex_container_highlight_config=(\n            FlexContainerHighlightConfig.from_json(\n                json[\"flexContainerHighlightConfig\"]\n            )\n            if json.get(\"flexContainerHighlightConfig\", None) is not None\n            else None\n        ),\n        flex_item_highlight_config=(\n            FlexItemHighlightConfig.from_json(json[\"flexItemHighlightConfig\"])\n            if json.get(\"flexItemHighlightConfig\", None) is not None\n            else None\n        ),\n        contrast_algorithm=(\n            ContrastAlgorithm.from_json(json[\"contrastAlgorithm\"])\n            if json.get(\"contrastAlgorithm\", None) is not None\n            else None\n        ),\n        container_query_container_highlight_config=(\n            ContainerQueryContainerHighlightConfig.from_json(\n                json[\"containerQueryContainerHighlightConfig\"]\n            )\n            if json.get(\"containerQueryContainerHighlightConfig\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.show_info is not None:\n        json[\"showInfo\"] = self.show_info\n    if self.show_styles is not None:\n        json[\"showStyles\"] = self.show_styles\n    if self.show_rulers is not None:\n        json[\"showRulers\"] = self.show_rulers\n    if self.show_accessibility_info is not None:\n        json[\"showAccessibilityInfo\"] = self.show_accessibility_info\n    if self.show_extension_lines is not None:\n        json[\"showExtensionLines\"] = self.show_extension_lines\n    if self.content_color is not None:\n        json[\"contentColor\"] = self.content_color.to_json()\n    if self.padding_color is not None:\n        json[\"paddingColor\"] = self.padding_color.to_json()\n    if self.border_color is not None:\n        json[\"borderColor\"] = self.border_color.to_json()\n    if self.margin_color is not None:\n        json[\"marginColor\"] = self.margin_color.to_json()\n    if self.event_target_color is not None:\n        json[\"eventTargetColor\"] = self.event_target_color.to_json()\n    if self.shape_color is not None:\n        json[\"shapeColor\"] = self.shape_color.to_json()\n    if self.shape_margin_color is not None:\n        json[\"shapeMarginColor\"] = self.shape_margin_color.to_json()\n    if self.css_grid_color is not None:\n        json[\"cssGridColor\"] = self.css_grid_color.to_json()\n    if self.color_format is not None:\n        json[\"colorFormat\"] = self.color_format.to_json()\n    if self.grid_highlight_config is not None:\n        json[\"gridHighlightConfig\"] = self.grid_highlight_config.to_json()\n    if self.flex_container_highlight_config is not None:\n        json[\"flexContainerHighlightConfig\"] = (\n            self.flex_container_highlight_config.to_json()\n        )\n    if self.flex_item_highlight_config is not None:\n        json[\"flexItemHighlightConfig\"] = self.flex_item_highlight_config.to_json()\n    if self.contrast_algorithm is not None:\n        json[\"contrastAlgorithm\"] = self.contrast_algorithm.to_json()\n    if self.container_query_container_highlight_config is not None:\n        json[\"containerQueryContainerHighlightConfig\"] = (\n            self.container_query_container_highlight_config.to_json()\n        )\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HingeConfig","title":"<code>HingeConfig</code>  <code>dataclass</code>","text":"<p>Configuration for dual screen hinge</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass HingeConfig:\n    \"\"\"\n    Configuration for dual screen hinge\n    \"\"\"\n\n    #: A rectangle represent hinge\n    rect: dom.Rect\n\n    #: The content box highlight fill color (default: a dark color).\n    content_color: typing.Optional[dom.RGBA] = None\n\n    #: The content box highlight outline color (default: transparent).\n    outline_color: typing.Optional[dom.RGBA] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"rect\"] = self.rect.to_json()\n        if self.content_color is not None:\n            json[\"contentColor\"] = self.content_color.to_json()\n        if self.outline_color is not None:\n            json[\"outlineColor\"] = self.outline_color.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; HingeConfig:\n        return cls(\n            rect=dom.Rect.from_json(json[\"rect\"]),\n            content_color=(\n                dom.RGBA.from_json(json[\"contentColor\"])\n                if json.get(\"contentColor\", None) is not None\n                else None\n            ),\n            outline_color=(\n                dom.RGBA.from_json(json[\"outlineColor\"])\n                if json.get(\"outlineColor\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HingeConfig.content_color","title":"<code>content_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HingeConfig.outline_color","title":"<code>outline_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HingeConfig.rect","title":"<code>rect: dom.Rect</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HingeConfig.__init__","title":"<code>__init__(rect, content_color=None, outline_color=None)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HingeConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; HingeConfig:\n    return cls(\n        rect=dom.Rect.from_json(json[\"rect\"]),\n        content_color=(\n            dom.RGBA.from_json(json[\"contentColor\"])\n            if json.get(\"contentColor\", None) is not None\n            else None\n        ),\n        outline_color=(\n            dom.RGBA.from_json(json[\"outlineColor\"])\n            if json.get(\"outlineColor\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.HingeConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"rect\"] = self.rect.to_json()\n    if self.content_color is not None:\n        json[\"contentColor\"] = self.content_color.to_json()\n    if self.outline_color is not None:\n        json[\"outlineColor\"] = self.outline_color.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectMode","title":"<code>InspectMode</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>class InspectMode(enum.Enum):\n    SEARCH_FOR_NODE = \"searchForNode\"\n    SEARCH_FOR_UA_SHADOW_DOM = \"searchForUAShadowDOM\"\n    CAPTURE_AREA_SCREENSHOT = \"captureAreaScreenshot\"\n    SHOW_DISTANCES = \"showDistances\"\n    NONE = \"none\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; InspectMode:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectMode.CAPTURE_AREA_SCREENSHOT","title":"<code>CAPTURE_AREA_SCREENSHOT = 'captureAreaScreenshot'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectMode.NONE","title":"<code>NONE = 'none'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectMode.SEARCH_FOR_NODE","title":"<code>SEARCH_FOR_NODE = 'searchForNode'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectMode.SEARCH_FOR_UA_SHADOW_DOM","title":"<code>SEARCH_FOR_UA_SHADOW_DOM = 'searchForUAShadowDOM'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectMode.SHOW_DISTANCES","title":"<code>SHOW_DISTANCES = 'showDistances'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectMode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; InspectMode:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectMode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectModeCanceled","title":"<code>InspectModeCanceled</code>  <code>dataclass</code>","text":"<p>Fired when user cancels the inspect mode.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@event_class(\"Overlay.inspectModeCanceled\")\n@dataclass\nclass InspectModeCanceled:\n    \"\"\"\n    Fired when user cancels the inspect mode.\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InspectModeCanceled:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectModeCanceled.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectModeCanceled.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InspectModeCanceled:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectNodeRequested","title":"<code>InspectNodeRequested</code>  <code>dataclass</code>","text":"<p>Fired when the node should be inspected. This happens after call to <code>setInspectMode</code> or when user manually inspects an element.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@event_class(\"Overlay.inspectNodeRequested\")\n@dataclass\nclass InspectNodeRequested:\n    \"\"\"\n    Fired when the node should be inspected. This happens after call to ``setInspectMode`` or when\n    user manually inspects an element.\n    \"\"\"\n\n    #: Id of the node to inspect.\n    backend_node_id: dom.BackendNodeId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InspectNodeRequested:\n        return cls(backend_node_id=dom.BackendNodeId.from_json(json[\"backendNodeId\"]))\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectNodeRequested.backend_node_id","title":"<code>backend_node_id: dom.BackendNodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectNodeRequested.__init__","title":"<code>__init__(backend_node_id)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.InspectNodeRequested.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InspectNodeRequested:\n    return cls(backend_node_id=dom.BackendNodeId.from_json(json[\"backendNodeId\"]))\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolatedElementHighlightConfig","title":"<code>IsolatedElementHighlightConfig</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass IsolatedElementHighlightConfig:\n    #: A descriptor for the highlight appearance of an element in isolation mode.\n    isolation_mode_highlight_config: IsolationModeHighlightConfig\n\n    #: Identifier of the isolated element to highlight.\n    node_id: dom.NodeId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"isolationModeHighlightConfig\"] = (\n            self.isolation_mode_highlight_config.to_json()\n        )\n        json[\"nodeId\"] = self.node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; IsolatedElementHighlightConfig:\n        return cls(\n            isolation_mode_highlight_config=IsolationModeHighlightConfig.from_json(\n                json[\"isolationModeHighlightConfig\"]\n            ),\n            node_id=dom.NodeId.from_json(json[\"nodeId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolatedElementHighlightConfig.isolation_mode_highlight_config","title":"<code>isolation_mode_highlight_config: IsolationModeHighlightConfig</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolatedElementHighlightConfig.node_id","title":"<code>node_id: dom.NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolatedElementHighlightConfig.__init__","title":"<code>__init__(isolation_mode_highlight_config, node_id)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolatedElementHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; IsolatedElementHighlightConfig:\n    return cls(\n        isolation_mode_highlight_config=IsolationModeHighlightConfig.from_json(\n            json[\"isolationModeHighlightConfig\"]\n        ),\n        node_id=dom.NodeId.from_json(json[\"nodeId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolatedElementHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"isolationModeHighlightConfig\"] = (\n        self.isolation_mode_highlight_config.to_json()\n    )\n    json[\"nodeId\"] = self.node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolationModeHighlightConfig","title":"<code>IsolationModeHighlightConfig</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass IsolationModeHighlightConfig:\n    #: The fill color of the resizers (default: transparent).\n    resizer_color: typing.Optional[dom.RGBA] = None\n\n    #: The fill color for resizer handles (default: transparent).\n    resizer_handle_color: typing.Optional[dom.RGBA] = None\n\n    #: The fill color for the mask covering non-isolated elements (default: transparent).\n    mask_color: typing.Optional[dom.RGBA] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.resizer_color is not None:\n            json[\"resizerColor\"] = self.resizer_color.to_json()\n        if self.resizer_handle_color is not None:\n            json[\"resizerHandleColor\"] = self.resizer_handle_color.to_json()\n        if self.mask_color is not None:\n            json[\"maskColor\"] = self.mask_color.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; IsolationModeHighlightConfig:\n        return cls(\n            resizer_color=(\n                dom.RGBA.from_json(json[\"resizerColor\"])\n                if json.get(\"resizerColor\", None) is not None\n                else None\n            ),\n            resizer_handle_color=(\n                dom.RGBA.from_json(json[\"resizerHandleColor\"])\n                if json.get(\"resizerHandleColor\", None) is not None\n                else None\n            ),\n            mask_color=(\n                dom.RGBA.from_json(json[\"maskColor\"])\n                if json.get(\"maskColor\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolationModeHighlightConfig.mask_color","title":"<code>mask_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolationModeHighlightConfig.resizer_color","title":"<code>resizer_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolationModeHighlightConfig.resizer_handle_color","title":"<code>resizer_handle_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolationModeHighlightConfig.__init__","title":"<code>__init__(resizer_color=None, resizer_handle_color=None, mask_color=None)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolationModeHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; IsolationModeHighlightConfig:\n    return cls(\n        resizer_color=(\n            dom.RGBA.from_json(json[\"resizerColor\"])\n            if json.get(\"resizerColor\", None) is not None\n            else None\n        ),\n        resizer_handle_color=(\n            dom.RGBA.from_json(json[\"resizerHandleColor\"])\n            if json.get(\"resizerHandleColor\", None) is not None\n            else None\n        ),\n        mask_color=(\n            dom.RGBA.from_json(json[\"maskColor\"])\n            if json.get(\"maskColor\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.IsolationModeHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.resizer_color is not None:\n        json[\"resizerColor\"] = self.resizer_color.to_json()\n    if self.resizer_handle_color is not None:\n        json[\"resizerHandleColor\"] = self.resizer_handle_color.to_json()\n    if self.mask_color is not None:\n        json[\"maskColor\"] = self.mask_color.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.LineStyle","title":"<code>LineStyle</code>  <code>dataclass</code>","text":"<p>Style information for drawing a line.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass LineStyle:\n    \"\"\"\n    Style information for drawing a line.\n    \"\"\"\n\n    #: The color of the line (default: transparent)\n    color: typing.Optional[dom.RGBA] = None\n\n    #: The line pattern (default: solid)\n    pattern: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.color is not None:\n            json[\"color\"] = self.color.to_json()\n        if self.pattern is not None:\n            json[\"pattern\"] = self.pattern\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LineStyle:\n        return cls(\n            color=(\n                dom.RGBA.from_json(json[\"color\"])\n                if json.get(\"color\", None) is not None\n                else None\n            ),\n            pattern=(\n                str(json[\"pattern\"]) if json.get(\"pattern\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.LineStyle.color","title":"<code>color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.LineStyle.pattern","title":"<code>pattern: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.LineStyle.__init__","title":"<code>__init__(color=None, pattern=None)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.LineStyle.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LineStyle:\n    return cls(\n        color=(\n            dom.RGBA.from_json(json[\"color\"])\n            if json.get(\"color\", None) is not None\n            else None\n        ),\n        pattern=(\n            str(json[\"pattern\"]) if json.get(\"pattern\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.LineStyle.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.color is not None:\n        json[\"color\"] = self.color.to_json()\n    if self.pattern is not None:\n        json[\"pattern\"] = self.pattern\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.NodeHighlightRequested","title":"<code>NodeHighlightRequested</code>  <code>dataclass</code>","text":"<p>Fired when the node should be highlighted. This happens after call to <code>setInspectMode</code>.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@event_class(\"Overlay.nodeHighlightRequested\")\n@dataclass\nclass NodeHighlightRequested:\n    \"\"\"\n    Fired when the node should be highlighted. This happens after call to ``setInspectMode``.\n    \"\"\"\n\n    node_id: dom.NodeId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NodeHighlightRequested:\n        return cls(node_id=dom.NodeId.from_json(json[\"nodeId\"]))\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.NodeHighlightRequested.node_id","title":"<code>node_id: dom.NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.NodeHighlightRequested.__init__","title":"<code>__init__(node_id)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.NodeHighlightRequested.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NodeHighlightRequested:\n    return cls(node_id=dom.NodeId.from_json(json[\"nodeId\"]))\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScreenshotRequested","title":"<code>ScreenshotRequested</code>  <code>dataclass</code>","text":"<p>Fired when user asks to capture screenshot of some area on the page.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@event_class(\"Overlay.screenshotRequested\")\n@dataclass\nclass ScreenshotRequested:\n    \"\"\"\n    Fired when user asks to capture screenshot of some area on the page.\n    \"\"\"\n\n    #: Viewport to capture, in device independent pixels (dip).\n    viewport: page.Viewport\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScreenshotRequested:\n        return cls(viewport=page.Viewport.from_json(json[\"viewport\"]))\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScreenshotRequested.viewport","title":"<code>viewport: page.Viewport</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScreenshotRequested.__init__","title":"<code>__init__(viewport)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScreenshotRequested.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScreenshotRequested:\n    return cls(viewport=page.Viewport.from_json(json[\"viewport\"]))\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapContainerHighlightConfig","title":"<code>ScrollSnapContainerHighlightConfig</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass ScrollSnapContainerHighlightConfig:\n    #: The style of the snapport border (default: transparent)\n    snapport_border: typing.Optional[LineStyle] = None\n\n    #: The style of the snap area border (default: transparent)\n    snap_area_border: typing.Optional[LineStyle] = None\n\n    #: The margin highlight fill color (default: transparent).\n    scroll_margin_color: typing.Optional[dom.RGBA] = None\n\n    #: The padding highlight fill color (default: transparent).\n    scroll_padding_color: typing.Optional[dom.RGBA] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.snapport_border is not None:\n            json[\"snapportBorder\"] = self.snapport_border.to_json()\n        if self.snap_area_border is not None:\n            json[\"snapAreaBorder\"] = self.snap_area_border.to_json()\n        if self.scroll_margin_color is not None:\n            json[\"scrollMarginColor\"] = self.scroll_margin_color.to_json()\n        if self.scroll_padding_color is not None:\n            json[\"scrollPaddingColor\"] = self.scroll_padding_color.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScrollSnapContainerHighlightConfig:\n        return cls(\n            snapport_border=(\n                LineStyle.from_json(json[\"snapportBorder\"])\n                if json.get(\"snapportBorder\", None) is not None\n                else None\n            ),\n            snap_area_border=(\n                LineStyle.from_json(json[\"snapAreaBorder\"])\n                if json.get(\"snapAreaBorder\", None) is not None\n                else None\n            ),\n            scroll_margin_color=(\n                dom.RGBA.from_json(json[\"scrollMarginColor\"])\n                if json.get(\"scrollMarginColor\", None) is not None\n                else None\n            ),\n            scroll_padding_color=(\n                dom.RGBA.from_json(json[\"scrollPaddingColor\"])\n                if json.get(\"scrollPaddingColor\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapContainerHighlightConfig.scroll_margin_color","title":"<code>scroll_margin_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapContainerHighlightConfig.scroll_padding_color","title":"<code>scroll_padding_color: typing.Optional[dom.RGBA] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapContainerHighlightConfig.snap_area_border","title":"<code>snap_area_border: typing.Optional[LineStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapContainerHighlightConfig.snapport_border","title":"<code>snapport_border: typing.Optional[LineStyle] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapContainerHighlightConfig.__init__","title":"<code>__init__(snapport_border=None, snap_area_border=None, scroll_margin_color=None, scroll_padding_color=None)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapContainerHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScrollSnapContainerHighlightConfig:\n    return cls(\n        snapport_border=(\n            LineStyle.from_json(json[\"snapportBorder\"])\n            if json.get(\"snapportBorder\", None) is not None\n            else None\n        ),\n        snap_area_border=(\n            LineStyle.from_json(json[\"snapAreaBorder\"])\n            if json.get(\"snapAreaBorder\", None) is not None\n            else None\n        ),\n        scroll_margin_color=(\n            dom.RGBA.from_json(json[\"scrollMarginColor\"])\n            if json.get(\"scrollMarginColor\", None) is not None\n            else None\n        ),\n        scroll_padding_color=(\n            dom.RGBA.from_json(json[\"scrollPaddingColor\"])\n            if json.get(\"scrollPaddingColor\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapContainerHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.snapport_border is not None:\n        json[\"snapportBorder\"] = self.snapport_border.to_json()\n    if self.snap_area_border is not None:\n        json[\"snapAreaBorder\"] = self.snap_area_border.to_json()\n    if self.scroll_margin_color is not None:\n        json[\"scrollMarginColor\"] = self.scroll_margin_color.to_json()\n    if self.scroll_padding_color is not None:\n        json[\"scrollPaddingColor\"] = self.scroll_padding_color.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapHighlightConfig","title":"<code>ScrollSnapHighlightConfig</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass ScrollSnapHighlightConfig:\n    #: A descriptor for the highlight appearance of scroll snap containers.\n    scroll_snap_container_highlight_config: ScrollSnapContainerHighlightConfig\n\n    #: Identifier of the node to highlight.\n    node_id: dom.NodeId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"scrollSnapContainerHighlightConfig\"] = (\n            self.scroll_snap_container_highlight_config.to_json()\n        )\n        json[\"nodeId\"] = self.node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScrollSnapHighlightConfig:\n        return cls(\n            scroll_snap_container_highlight_config=ScrollSnapContainerHighlightConfig.from_json(\n                json[\"scrollSnapContainerHighlightConfig\"]\n            ),\n            node_id=dom.NodeId.from_json(json[\"nodeId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapHighlightConfig.node_id","title":"<code>node_id: dom.NodeId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapHighlightConfig.scroll_snap_container_highlight_config","title":"<code>scroll_snap_container_highlight_config: ScrollSnapContainerHighlightConfig</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapHighlightConfig.__init__","title":"<code>__init__(scroll_snap_container_highlight_config, node_id)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapHighlightConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScrollSnapHighlightConfig:\n    return cls(\n        scroll_snap_container_highlight_config=ScrollSnapContainerHighlightConfig.from_json(\n            json[\"scrollSnapContainerHighlightConfig\"]\n        ),\n        node_id=dom.NodeId.from_json(json[\"nodeId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.ScrollSnapHighlightConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"scrollSnapContainerHighlightConfig\"] = (\n        self.scroll_snap_container_highlight_config.to_json()\n    )\n    json[\"nodeId\"] = self.node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.SourceOrderConfig","title":"<code>SourceOrderConfig</code>  <code>dataclass</code>","text":"<p>Configuration data for drawing the source order of an elements children.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass SourceOrderConfig:\n    \"\"\"\n    Configuration data for drawing the source order of an elements children.\n    \"\"\"\n\n    #: the color to outline the given element in.\n    parent_outline_color: dom.RGBA\n\n    #: the color to outline the child elements in.\n    child_outline_color: dom.RGBA\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"parentOutlineColor\"] = self.parent_outline_color.to_json()\n        json[\"childOutlineColor\"] = self.child_outline_color.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SourceOrderConfig:\n        return cls(\n            parent_outline_color=dom.RGBA.from_json(json[\"parentOutlineColor\"]),\n            child_outline_color=dom.RGBA.from_json(json[\"childOutlineColor\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.SourceOrderConfig.child_outline_color","title":"<code>child_outline_color: dom.RGBA</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.SourceOrderConfig.parent_outline_color","title":"<code>parent_outline_color: dom.RGBA</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.SourceOrderConfig.__init__","title":"<code>__init__(parent_outline_color, child_outline_color)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.SourceOrderConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SourceOrderConfig:\n    return cls(\n        parent_outline_color=dom.RGBA.from_json(json[\"parentOutlineColor\"]),\n        child_outline_color=dom.RGBA.from_json(json[\"childOutlineColor\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.SourceOrderConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"parentOutlineColor\"] = self.parent_outline_color.to_json()\n    json[\"childOutlineColor\"] = self.child_outline_color.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.WindowControlsOverlayConfig","title":"<code>WindowControlsOverlayConfig</code>  <code>dataclass</code>","text":"<p>Configuration for Window Controls Overlay</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@dataclass\nclass WindowControlsOverlayConfig:\n    \"\"\"\n    Configuration for Window Controls Overlay\n    \"\"\"\n\n    #: Whether the title bar CSS should be shown when emulating the Window Controls Overlay.\n    show_css: bool\n\n    #: Selected platforms to show the overlay.\n    selected_platform: str\n\n    #: The theme color defined in app manifest.\n    theme_color: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"showCSS\"] = self.show_css\n        json[\"selectedPlatform\"] = self.selected_platform\n        json[\"themeColor\"] = self.theme_color\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WindowControlsOverlayConfig:\n        return cls(\n            show_css=bool(json[\"showCSS\"]),\n            selected_platform=str(json[\"selectedPlatform\"]),\n            theme_color=str(json[\"themeColor\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.WindowControlsOverlayConfig.selected_platform","title":"<code>selected_platform: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.WindowControlsOverlayConfig.show_css","title":"<code>show_css: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.WindowControlsOverlayConfig.theme_color","title":"<code>theme_color: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.WindowControlsOverlayConfig.__init__","title":"<code>__init__(show_css, selected_platform, theme_color)</code>","text":""},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.WindowControlsOverlayConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WindowControlsOverlayConfig:\n    return cls(\n        show_css=bool(json[\"showCSS\"]),\n        selected_platform=str(json[\"selectedPlatform\"]),\n        theme_color=str(json[\"themeColor\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.WindowControlsOverlayConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"showCSS\"] = self.show_css\n    json[\"selectedPlatform\"] = self.selected_platform\n    json[\"themeColor\"] = self.theme_color\n    return json\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.disable","title":"<code>disable()</code>","text":"<p>Disables domain notifications.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables domain notifications.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.enable","title":"<code>enable()</code>","text":"<p>Enables domain notifications.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables domain notifications.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.get_grid_highlight_objects_for_test","title":"<code>get_grid_highlight_objects_for_test(node_ids)</code>","text":"<p>For Persistent Grid testing.</p> <p>Parameters:</p> Name Type Description Default <code>node_ids</code> <code>List[NodeId]</code> <p>Ids of the node to get highlight object for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, dict]</code> <p>Grid Highlight data for the node ids provided.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def get_grid_highlight_objects_for_test(\n    node_ids: typing.List[dom.NodeId],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, dict]:\n    \"\"\"\n    For Persistent Grid testing.\n\n    :param node_ids: Ids of the node to get highlight object for.\n    :returns: Grid Highlight data for the node ids provided.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeIds\"] = [i.to_json() for i in node_ids]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.getGridHighlightObjectsForTest\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return dict(json[\"highlights\"])\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.get_highlight_object_for_test","title":"<code>get_highlight_object_for_test(node_id, include_distance=None, include_style=None, color_format=None, show_accessibility_info=None)</code>","text":"<p>For testing.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to get highlight object for.</p> required <code>include_distance</code> <code>Optional[bool]</code> <p>(Optional) Whether to include distance info.</p> <code>None</code> <code>include_style</code> <code>Optional[bool]</code> <p>(Optional) Whether to include style info.</p> <code>None</code> <code>color_format</code> <code>Optional[ColorFormat]</code> <p>(Optional) The color format to get config with (default: hex).</p> <code>None</code> <code>show_accessibility_info</code> <code>Optional[bool]</code> <p>(Optional) Whether to show accessibility info (default: true).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, dict]</code> <p>Highlight data for the node.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def get_highlight_object_for_test(\n    node_id: dom.NodeId,\n    include_distance: typing.Optional[bool] = None,\n    include_style: typing.Optional[bool] = None,\n    color_format: typing.Optional[ColorFormat] = None,\n    show_accessibility_info: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, dict]:\n    \"\"\"\n    For testing.\n\n    :param node_id: Id of the node to get highlight object for.\n    :param include_distance: *(Optional)* Whether to include distance info.\n    :param include_style: *(Optional)* Whether to include style info.\n    :param color_format: *(Optional)* The color format to get config with (default: hex).\n    :param show_accessibility_info: *(Optional)* Whether to show accessibility info (default: true).\n    :returns: Highlight data for the node.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    if include_distance is not None:\n        params[\"includeDistance\"] = include_distance\n    if include_style is not None:\n        params[\"includeStyle\"] = include_style\n    if color_format is not None:\n        params[\"colorFormat\"] = color_format.to_json()\n    if show_accessibility_info is not None:\n        params[\"showAccessibilityInfo\"] = show_accessibility_info\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.getHighlightObjectForTest\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return dict(json[\"highlight\"])\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.get_source_order_highlight_object_for_test","title":"<code>get_source_order_highlight_object_for_test(node_id)</code>","text":"<p>For Source Order Viewer testing.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>NodeId</code> <p>Id of the node to highlight.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, dict]</code> <p>Source order highlight data for the node id provided.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def get_source_order_highlight_object_for_test(\n    node_id: dom.NodeId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, dict]:\n    \"\"\"\n    For Source Order Viewer testing.\n\n    :param node_id: Id of the node to highlight.\n    :returns: Source order highlight data for the node id provided.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"nodeId\"] = node_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.getSourceOrderHighlightObjectForTest\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return dict(json[\"highlight\"])\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.hide_highlight","title":"<code>hide_highlight()</code>","text":"<p>Hides any highlight.</p> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def hide_highlight() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Hides any highlight.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.hideHighlight\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.highlight_frame","title":"<code>highlight_frame(frame_id, content_color=None, content_outline_color=None)</code>","text":"<p>Highlights owner element of the frame with given id. Deprecated: Doesn't work reliably and cannot be fixed due to process separation (the owner node might be in a different process). Determine the owner node in the client and use highlightNode.</p> <p>.. deprecated:: 1.3</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> <p>Identifier of the frame to highlight.</p> required <code>content_color</code> <code>Optional[RGBA]</code> <p>(Optional) The content box highlight fill color (default: transparent).</p> <code>None</code> <code>content_outline_color</code> <code>Optional[RGBA]</code> <p>(Optional) The content box highlight outline color (default: transparent).</p> <code>None</code> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef highlight_frame(\n    frame_id: page.FrameId,\n    content_color: typing.Optional[dom.RGBA] = None,\n    content_outline_color: typing.Optional[dom.RGBA] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Highlights owner element of the frame with given id.\n    Deprecated: Doesn't work reliably and cannot be fixed due to process\n    separation (the owner node might be in a different process). Determine\n    the owner node in the client and use highlightNode.\n\n    .. deprecated:: 1.3\n\n    :param frame_id: Identifier of the frame to highlight.\n    :param content_color: *(Optional)* The content box highlight fill color (default: transparent).\n    :param content_outline_color: *(Optional)* The content box highlight outline color (default: transparent).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    if content_color is not None:\n        params[\"contentColor\"] = content_color.to_json()\n    if content_outline_color is not None:\n        params[\"contentOutlineColor\"] = content_outline_color.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.highlightFrame\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.highlight_node","title":"<code>highlight_node(highlight_config, node_id=None, backend_node_id=None, object_id=None, selector=None)</code>","text":"<p>Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified.</p> <p>Parameters:</p> Name Type Description Default <code>highlight_config</code> <code>HighlightConfig</code> <p>A descriptor for the highlight appearance.</p> required <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node to highlight.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node to highlight.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node to be highlighted.</p> <code>None</code> <code>selector</code> <code>Optional[str]</code> <p>(Optional) Selectors to highlight relevant nodes.</p> <code>None</code> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def highlight_node(\n    highlight_config: HighlightConfig,\n    node_id: typing.Optional[dom.NodeId] = None,\n    backend_node_id: typing.Optional[dom.BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n    selector: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or\n    objectId must be specified.\n\n    :param highlight_config: A descriptor for the highlight appearance.\n    :param node_id: *(Optional)* Identifier of the node to highlight.\n    :param backend_node_id: *(Optional)* Identifier of the backend node to highlight.\n    :param object_id: *(Optional)* JavaScript object id of the node to be highlighted.\n    :param selector: *(Optional)* Selectors to highlight relevant nodes.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"highlightConfig\"] = highlight_config.to_json()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    if selector is not None:\n        params[\"selector\"] = selector\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.highlightNode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.highlight_quad","title":"<code>highlight_quad(quad, color=None, outline_color=None)</code>","text":"<p>Highlights given quad. Coordinates are absolute with respect to the main frame viewport.</p> <p>Parameters:</p> Name Type Description Default <code>quad</code> <code>Quad</code> <p>Quad to highlight</p> required <code>color</code> <code>Optional[RGBA]</code> <p>(Optional) The highlight fill color (default: transparent).</p> <code>None</code> <code>outline_color</code> <code>Optional[RGBA]</code> <p>(Optional) The highlight outline color (default: transparent).</p> <code>None</code> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def highlight_quad(\n    quad: dom.Quad,\n    color: typing.Optional[dom.RGBA] = None,\n    outline_color: typing.Optional[dom.RGBA] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Highlights given quad. Coordinates are absolute with respect to the main frame viewport.\n\n    :param quad: Quad to highlight\n    :param color: *(Optional)* The highlight fill color (default: transparent).\n    :param outline_color: *(Optional)* The highlight outline color (default: transparent).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"quad\"] = quad.to_json()\n    if color is not None:\n        params[\"color\"] = color.to_json()\n    if outline_color is not None:\n        params[\"outlineColor\"] = outline_color.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.highlightQuad\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.highlight_rect","title":"<code>highlight_rect(x, y, width, height, color=None, outline_color=None)</code>","text":"<p>Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int</code> <p>X coordinate</p> required <code>y</code> <code>int</code> <p>Y coordinate</p> required <code>width</code> <code>int</code> <p>Rectangle width</p> required <code>height</code> <code>int</code> <p>Rectangle height</p> required <code>color</code> <code>Optional[RGBA]</code> <p>(Optional) The highlight fill color (default: transparent).</p> <code>None</code> <code>outline_color</code> <code>Optional[RGBA]</code> <p>(Optional) The highlight outline color (default: transparent).</p> <code>None</code> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def highlight_rect(\n    x: int,\n    y: int,\n    width: int,\n    height: int,\n    color: typing.Optional[dom.RGBA] = None,\n    outline_color: typing.Optional[dom.RGBA] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.\n\n    :param x: X coordinate\n    :param y: Y coordinate\n    :param width: Rectangle width\n    :param height: Rectangle height\n    :param color: *(Optional)* The highlight fill color (default: transparent).\n    :param outline_color: *(Optional)* The highlight outline color (default: transparent).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"x\"] = x\n    params[\"y\"] = y\n    params[\"width\"] = width\n    params[\"height\"] = height\n    if color is not None:\n        params[\"color\"] = color.to_json()\n    if outline_color is not None:\n        params[\"outlineColor\"] = outline_color.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.highlightRect\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.highlight_source_order","title":"<code>highlight_source_order(source_order_config, node_id=None, backend_node_id=None, object_id=None)</code>","text":"<p>Highlights the source order of the children of the DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified.</p> <p>Parameters:</p> Name Type Description Default <code>source_order_config</code> <code>SourceOrderConfig</code> <p>A descriptor for the appearance of the overlay drawing.</p> required <code>node_id</code> <code>Optional[NodeId]</code> <p>(Optional) Identifier of the node to highlight.</p> <code>None</code> <code>backend_node_id</code> <code>Optional[BackendNodeId]</code> <p>(Optional) Identifier of the backend node to highlight.</p> <code>None</code> <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) JavaScript object id of the node to be highlighted.</p> <code>None</code> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def highlight_source_order(\n    source_order_config: SourceOrderConfig,\n    node_id: typing.Optional[dom.NodeId] = None,\n    backend_node_id: typing.Optional[dom.BackendNodeId] = None,\n    object_id: typing.Optional[runtime.RemoteObjectId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Highlights the source order of the children of the DOM node with given id or with the given\n    JavaScript object wrapper. Either nodeId or objectId must be specified.\n\n    :param source_order_config: A descriptor for the appearance of the overlay drawing.\n    :param node_id: *(Optional)* Identifier of the node to highlight.\n    :param backend_node_id: *(Optional)* Identifier of the backend node to highlight.\n    :param object_id: *(Optional)* JavaScript object id of the node to be highlighted.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"sourceOrderConfig\"] = source_order_config.to_json()\n    if node_id is not None:\n        params[\"nodeId\"] = node_id.to_json()\n    if backend_node_id is not None:\n        params[\"backendNodeId\"] = backend_node_id.to_json()\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.highlightSourceOrder\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_inspect_mode","title":"<code>set_inspect_mode(mode, highlight_config=None)</code>","text":"<p>Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspectNodeRequested' event upon element selection.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>InspectMode</code> <p>Set an inspection mode.</p> required <code>highlight_config</code> <code>Optional[HighlightConfig]</code> <p>(Optional) A descriptor for the highlight appearance of hovered-over nodes. May be omitted if <code>enabled == false</code>.</p> <code>None</code> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_inspect_mode(\n    mode: InspectMode, highlight_config: typing.Optional[HighlightConfig] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted.\n    Backend then generates 'inspectNodeRequested' event upon element selection.\n\n    :param mode: Set an inspection mode.\n    :param highlight_config: *(Optional)* A descriptor for the highlight appearance of hovered-over nodes. May be omitted if ```enabled == false```.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"mode\"] = mode.to_json()\n    if highlight_config is not None:\n        params[\"highlightConfig\"] = highlight_config.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setInspectMode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_paused_in_debugger_message","title":"<code>set_paused_in_debugger_message(message=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>message</code> <code>Optional[str]</code> <p>(Optional) The message to display, also triggers resume and step over controls.</p> <code>None</code> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_paused_in_debugger_message(\n    message: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param message: *(Optional)* The message to display, also triggers resume and step over controls.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if message is not None:\n        params[\"message\"] = message\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setPausedInDebuggerMessage\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_ad_highlights","title":"<code>set_show_ad_highlights(show)</code>","text":"<p>Highlights owner element of all frames detected to be ads.</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> <p>True for showing ad highlights</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_ad_highlights(\n    show: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Highlights owner element of all frames detected to be ads.\n\n    :param show: True for showing ad highlights\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"show\"] = show\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowAdHighlights\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_container_query_overlays","title":"<code>set_show_container_query_overlays(container_query_highlight_configs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>container_query_highlight_configs</code> <code>List[ContainerQueryHighlightConfig]</code> <p>An array of node identifiers and descriptors for the highlight appearance.</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_container_query_overlays(\n    container_query_highlight_configs: typing.List[ContainerQueryHighlightConfig],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param container_query_highlight_configs: An array of node identifiers and descriptors for the highlight appearance.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"containerQueryHighlightConfigs\"] = [\n        i.to_json() for i in container_query_highlight_configs\n    ]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowContainerQueryOverlays\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_debug_borders","title":"<code>set_show_debug_borders(show)</code>","text":"<p>Requests that backend shows debug borders on layers</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> <p>True for showing debug borders</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_debug_borders(\n    show: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Requests that backend shows debug borders on layers\n\n    :param show: True for showing debug borders\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"show\"] = show\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowDebugBorders\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_flex_overlays","title":"<code>set_show_flex_overlays(flex_node_highlight_configs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>flex_node_highlight_configs</code> <code>List[FlexNodeHighlightConfig]</code> <p>An array of node identifiers and descriptors for the highlight appearance.</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_flex_overlays(\n    flex_node_highlight_configs: typing.List[FlexNodeHighlightConfig],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param flex_node_highlight_configs: An array of node identifiers and descriptors for the highlight appearance.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"flexNodeHighlightConfigs\"] = [\n        i.to_json() for i in flex_node_highlight_configs\n    ]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowFlexOverlays\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_fps_counter","title":"<code>set_show_fps_counter(show)</code>","text":"<p>Requests that backend shows the FPS counter</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> <p>True for showing the FPS counter</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_fps_counter(\n    show: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Requests that backend shows the FPS counter\n\n    :param show: True for showing the FPS counter\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"show\"] = show\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowFPSCounter\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_grid_overlays","title":"<code>set_show_grid_overlays(grid_node_highlight_configs)</code>","text":"<p>Highlight multiple elements with the CSS Grid overlay.</p> <p>Parameters:</p> Name Type Description Default <code>grid_node_highlight_configs</code> <code>List[GridNodeHighlightConfig]</code> <p>An array of node identifiers and descriptors for the highlight appearance.</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_grid_overlays(\n    grid_node_highlight_configs: typing.List[GridNodeHighlightConfig],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Highlight multiple elements with the CSS Grid overlay.\n\n    :param grid_node_highlight_configs: An array of node identifiers and descriptors for the highlight appearance.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"gridNodeHighlightConfigs\"] = [\n        i.to_json() for i in grid_node_highlight_configs\n    ]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowGridOverlays\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_hinge","title":"<code>set_show_hinge(hinge_config=None)</code>","text":"<p>Add a dual screen device hinge</p> <p>Parameters:</p> Name Type Description Default <code>hinge_config</code> <code>Optional[HingeConfig]</code> <p>(Optional) hinge data, null means hideHinge</p> <code>None</code> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_hinge(\n    hinge_config: typing.Optional[HingeConfig] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Add a dual screen device hinge\n\n    :param hinge_config: *(Optional)* hinge data, null means hideHinge\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if hinge_config is not None:\n        params[\"hingeConfig\"] = hinge_config.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowHinge\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_hit_test_borders","title":"<code>set_show_hit_test_borders(show)</code>","text":"<p>Deprecated, no longer has any effect.</p> <p>.. deprecated:: 1.3</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> <p>True for showing hit-test borders</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_show_hit_test_borders(\n    show: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Deprecated, no longer has any effect.\n\n    .. deprecated:: 1.3\n\n    :param show: True for showing hit-test borders\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"show\"] = show\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowHitTestBorders\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_isolated_elements","title":"<code>set_show_isolated_elements(isolated_element_highlight_configs)</code>","text":"<p>Show elements in isolation mode with overlays.</p> <p>Parameters:</p> Name Type Description Default <code>isolated_element_highlight_configs</code> <code>List[IsolatedElementHighlightConfig]</code> <p>An array of node identifiers and descriptors for the highlight appearance.</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_isolated_elements(\n    isolated_element_highlight_configs: typing.List[IsolatedElementHighlightConfig],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Show elements in isolation mode with overlays.\n\n    :param isolated_element_highlight_configs: An array of node identifiers and descriptors for the highlight appearance.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"isolatedElementHighlightConfigs\"] = [\n        i.to_json() for i in isolated_element_highlight_configs\n    ]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowIsolatedElements\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_layout_shift_regions","title":"<code>set_show_layout_shift_regions(result)</code>","text":"<p>Requests that backend shows layout shift regions</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>bool</code> <p>True for showing layout shift regions</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_layout_shift_regions(\n    result: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Requests that backend shows layout shift regions\n\n    :param result: True for showing layout shift regions\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"result\"] = result\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowLayoutShiftRegions\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_paint_rects","title":"<code>set_show_paint_rects(result)</code>","text":"<p>Requests that backend shows paint rectangles</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>bool</code> <p>True for showing paint rectangles</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_paint_rects(\n    result: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Requests that backend shows paint rectangles\n\n    :param result: True for showing paint rectangles\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"result\"] = result\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowPaintRects\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_scroll_bottleneck_rects","title":"<code>set_show_scroll_bottleneck_rects(show)</code>","text":"<p>Requests that backend shows scroll bottleneck rects</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> <p>True for showing scroll bottleneck rects</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_scroll_bottleneck_rects(\n    show: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Requests that backend shows scroll bottleneck rects\n\n    :param show: True for showing scroll bottleneck rects\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"show\"] = show\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowScrollBottleneckRects\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_scroll_snap_overlays","title":"<code>set_show_scroll_snap_overlays(scroll_snap_highlight_configs)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>scroll_snap_highlight_configs</code> <code>List[ScrollSnapHighlightConfig]</code> <p>An array of node identifiers and descriptors for the highlight appearance.</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_scroll_snap_overlays(\n    scroll_snap_highlight_configs: typing.List[ScrollSnapHighlightConfig],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param scroll_snap_highlight_configs: An array of node identifiers and descriptors for the highlight appearance.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scrollSnapHighlightConfigs\"] = [\n        i.to_json() for i in scroll_snap_highlight_configs\n    ]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowScrollSnapOverlays\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_viewport_size_on_resize","title":"<code>set_show_viewport_size_on_resize(show)</code>","text":"<p>Paints viewport size upon main frame resize.</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> <p>Whether to paint size or not.</p> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_viewport_size_on_resize(\n    show: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Paints viewport size upon main frame resize.\n\n    :param show: Whether to paint size or not.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"show\"] = show\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowViewportSizeOnResize\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_web_vitals","title":"<code>set_show_web_vitals(show)</code>","text":"<p>Request that backend shows an overlay with web vital metrics.</p> <p>Parameters:</p> Name Type Description Default <code>show</code> <code>bool</code> required Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_web_vitals(show: bool) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Request that backend shows an overlay with web vital metrics.\n\n    :param show:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"show\"] = show\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowWebVitals\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/overlay/#zendriver.cdp.overlay.set_show_window_controls_overlay","title":"<code>set_show_window_controls_overlay(window_controls_overlay_config=None)</code>","text":"<p>Show Window Controls Overlay for PWA</p> <p>Parameters:</p> Name Type Description Default <code>window_controls_overlay_config</code> <code>Optional[WindowControlsOverlayConfig]</code> <p>(Optional) Window Controls Overlay data, null means hide Window Controls Overlay</p> <code>None</code> Source code in <code>zendriver/cdp/overlay.py</code> <pre><code>def set_show_window_controls_overlay(\n    window_controls_overlay_config: typing.Optional[WindowControlsOverlayConfig] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Show Window Controls Overlay for PWA\n\n    :param window_controls_overlay_config: *(Optional)* Window Controls Overlay data, null means hide Window Controls Overlay\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if window_controls_overlay_config is not None:\n        params[\"windowControlsOverlayConfig\"] = window_controls_overlay_config.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Overlay.setShowWindowControlsOverlay\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/","title":"page","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameExplanation","title":"<code>AdFrameExplanation</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class AdFrameExplanation(enum.Enum):\n    PARENT_IS_AD = \"ParentIsAd\"\n    CREATED_BY_AD_SCRIPT = \"CreatedByAdScript\"\n    MATCHED_BLOCKING_RULE = \"MatchedBlockingRule\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AdFrameExplanation:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameExplanation.CREATED_BY_AD_SCRIPT","title":"<code>CREATED_BY_AD_SCRIPT = 'CreatedByAdScript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameExplanation.MATCHED_BLOCKING_RULE","title":"<code>MATCHED_BLOCKING_RULE = 'MatchedBlockingRule'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameExplanation.PARENT_IS_AD","title":"<code>PARENT_IS_AD = 'ParentIsAd'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameExplanation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AdFrameExplanation:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameExplanation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameStatus","title":"<code>AdFrameStatus</code>  <code>dataclass</code>","text":"<p>Indicates whether a frame has been identified as an ad and why.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass AdFrameStatus:\n    \"\"\"\n    Indicates whether a frame has been identified as an ad and why.\n    \"\"\"\n\n    ad_frame_type: AdFrameType\n\n    explanations: typing.Optional[typing.List[AdFrameExplanation]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"adFrameType\"] = self.ad_frame_type.to_json()\n        if self.explanations is not None:\n            json[\"explanations\"] = [i.to_json() for i in self.explanations]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AdFrameStatus:\n        return cls(\n            ad_frame_type=AdFrameType.from_json(json[\"adFrameType\"]),\n            explanations=(\n                [AdFrameExplanation.from_json(i) for i in json[\"explanations\"]]\n                if json.get(\"explanations\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameStatus.ad_frame_type","title":"<code>ad_frame_type: AdFrameType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameStatus.explanations","title":"<code>explanations: typing.Optional[typing.List[AdFrameExplanation]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameStatus.__init__","title":"<code>__init__(ad_frame_type, explanations=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AdFrameStatus:\n    return cls(\n        ad_frame_type=AdFrameType.from_json(json[\"adFrameType\"]),\n        explanations=(\n            [AdFrameExplanation.from_json(i) for i in json[\"explanations\"]]\n            if json.get(\"explanations\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"adFrameType\"] = self.ad_frame_type.to_json()\n    if self.explanations is not None:\n        json[\"explanations\"] = [i.to_json() for i in self.explanations]\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameType","title":"<code>AdFrameType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Indicates whether a frame has been identified as an ad.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class AdFrameType(enum.Enum):\n    \"\"\"\n    Indicates whether a frame has been identified as an ad.\n    \"\"\"\n\n    NONE = \"none\"\n    CHILD = \"child\"\n    ROOT = \"root\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AdFrameType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameType.CHILD","title":"<code>CHILD = 'child'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameType.NONE","title":"<code>NONE = 'none'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameType.ROOT","title":"<code>ROOT = 'root'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AdFrameType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdFrameType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdScriptId","title":"<code>AdScriptId</code>  <code>dataclass</code>","text":"<p>Identifies the bottom-most script which caused the frame to be labelled as an ad.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass AdScriptId:\n    \"\"\"\n    Identifies the bottom-most script which caused the frame to be labelled\n    as an ad.\n    \"\"\"\n\n    #: Script Id of the bottom-most script which caused the frame to be labelled\n    #: as an ad.\n    script_id: runtime.ScriptId\n\n    #: Id of adScriptId's debugger.\n    debugger_id: runtime.UniqueDebuggerId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"scriptId\"] = self.script_id.to_json()\n        json[\"debuggerId\"] = self.debugger_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AdScriptId:\n        return cls(\n            script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n            debugger_id=runtime.UniqueDebuggerId.from_json(json[\"debuggerId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdScriptId.debugger_id","title":"<code>debugger_id: runtime.UniqueDebuggerId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdScriptId.script_id","title":"<code>script_id: runtime.ScriptId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdScriptId.__init__","title":"<code>__init__(script_id, debugger_id)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AdScriptId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AdScriptId:\n    return cls(\n        script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n        debugger_id=runtime.UniqueDebuggerId.from_json(json[\"debuggerId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AdScriptId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"scriptId\"] = self.script_id.to_json()\n    json[\"debuggerId\"] = self.debugger_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestError","title":"<code>AppManifestError</code>  <code>dataclass</code>","text":"<p>Error while paring app manifest.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass AppManifestError:\n    \"\"\"\n    Error while paring app manifest.\n    \"\"\"\n\n    #: Error message.\n    message: str\n\n    #: If critical, this is a non-recoverable parse error.\n    critical: int\n\n    #: Error line.\n    line: int\n\n    #: Error column.\n    column: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"message\"] = self.message\n        json[\"critical\"] = self.critical\n        json[\"line\"] = self.line\n        json[\"column\"] = self.column\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AppManifestError:\n        return cls(\n            message=str(json[\"message\"]),\n            critical=int(json[\"critical\"]),\n            line=int(json[\"line\"]),\n            column=int(json[\"column\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestError.column","title":"<code>column: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestError.critical","title":"<code>critical: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestError.line","title":"<code>line: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestError.message","title":"<code>message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestError.__init__","title":"<code>__init__(message, critical, line, column)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestError.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AppManifestError:\n    return cls(\n        message=str(json[\"message\"]),\n        critical=int(json[\"critical\"]),\n        line=int(json[\"line\"]),\n        column=int(json[\"column\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestError.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"message\"] = self.message\n    json[\"critical\"] = self.critical\n    json[\"line\"] = self.line\n    json[\"column\"] = self.column\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestParsedProperties","title":"<code>AppManifestParsedProperties</code>  <code>dataclass</code>","text":"<p>Parsed app manifest properties.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass AppManifestParsedProperties:\n    \"\"\"\n    Parsed app manifest properties.\n    \"\"\"\n\n    #: Computed scope value\n    scope: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"scope\"] = self.scope\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AppManifestParsedProperties:\n        return cls(\n            scope=str(json[\"scope\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestParsedProperties.scope","title":"<code>scope: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestParsedProperties.__init__","title":"<code>__init__(scope)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestParsedProperties.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AppManifestParsedProperties:\n    return cls(\n        scope=str(json[\"scope\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AppManifestParsedProperties.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"scope\"] = self.scope\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AutoResponseMode","title":"<code>AutoResponseMode</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of possible auto-response for permission / prompt dialogs.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class AutoResponseMode(enum.Enum):\n    \"\"\"\n    Enum of possible auto-response for permission / prompt dialogs.\n    \"\"\"\n\n    NONE = \"none\"\n    AUTO_ACCEPT = \"autoAccept\"\n    AUTO_REJECT = \"autoReject\"\n    AUTO_OPT_OUT = \"autoOptOut\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AutoResponseMode:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AutoResponseMode.AUTO_ACCEPT","title":"<code>AUTO_ACCEPT = 'autoAccept'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AutoResponseMode.AUTO_OPT_OUT","title":"<code>AUTO_OPT_OUT = 'autoOptOut'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AutoResponseMode.AUTO_REJECT","title":"<code>AUTO_REJECT = 'autoReject'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AutoResponseMode.NONE","title":"<code>NONE = 'none'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.AutoResponseMode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AutoResponseMode:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.AutoResponseMode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheBlockingDetails","title":"<code>BackForwardCacheBlockingDetails</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass BackForwardCacheBlockingDetails:\n    #: Line number in the script (0-based).\n    line_number: int\n\n    #: Column number in the script (0-based).\n    column_number: int\n\n    #: Url of the file where blockage happened. Optional because of tests.\n    url: typing.Optional[str] = None\n\n    #: Function name where blockage happened. Optional because of anonymous functions and tests.\n    function: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"lineNumber\"] = self.line_number\n        json[\"columnNumber\"] = self.column_number\n        if self.url is not None:\n            json[\"url\"] = self.url\n        if self.function is not None:\n            json[\"function\"] = self.function\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BackForwardCacheBlockingDetails:\n        return cls(\n            line_number=int(json[\"lineNumber\"]),\n            column_number=int(json[\"columnNumber\"]),\n            url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n            function=(\n                str(json[\"function\"])\n                if json.get(\"function\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheBlockingDetails.column_number","title":"<code>column_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheBlockingDetails.function","title":"<code>function: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheBlockingDetails.line_number","title":"<code>line_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheBlockingDetails.url","title":"<code>url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheBlockingDetails.__init__","title":"<code>__init__(line_number, column_number, url=None, function=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheBlockingDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BackForwardCacheBlockingDetails:\n    return cls(\n        line_number=int(json[\"lineNumber\"]),\n        column_number=int(json[\"columnNumber\"]),\n        url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n        function=(\n            str(json[\"function\"])\n            if json.get(\"function\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheBlockingDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"lineNumber\"] = self.line_number\n    json[\"columnNumber\"] = self.column_number\n    if self.url is not None:\n        json[\"url\"] = self.url\n    if self.function is not None:\n        json[\"function\"] = self.function\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanation","title":"<code>BackForwardCacheNotRestoredExplanation</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass BackForwardCacheNotRestoredExplanation:\n    #: Type of the reason\n    type_: BackForwardCacheNotRestoredReasonType\n\n    #: Not restored reason\n    reason: BackForwardCacheNotRestoredReason\n\n    #: Context associated with the reason. The meaning of this context is\n    #: dependent on the reason:\n    #: - EmbedderExtensionSentMessageToCachedFrame: the extension ID.\n    context: typing.Optional[str] = None\n\n    details: typing.Optional[typing.List[BackForwardCacheBlockingDetails]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_.to_json()\n        json[\"reason\"] = self.reason.to_json()\n        if self.context is not None:\n            json[\"context\"] = self.context\n        if self.details is not None:\n            json[\"details\"] = [i.to_json() for i in self.details]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BackForwardCacheNotRestoredExplanation:\n        return cls(\n            type_=BackForwardCacheNotRestoredReasonType.from_json(json[\"type\"]),\n            reason=BackForwardCacheNotRestoredReason.from_json(json[\"reason\"]),\n            context=(\n                str(json[\"context\"]) if json.get(\"context\", None) is not None else None\n            ),\n            details=(\n                [BackForwardCacheBlockingDetails.from_json(i) for i in json[\"details\"]]\n                if json.get(\"details\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanation.context","title":"<code>context: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanation.details","title":"<code>details: typing.Optional[typing.List[BackForwardCacheBlockingDetails]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanation.reason","title":"<code>reason: BackForwardCacheNotRestoredReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanation.type_","title":"<code>type_: BackForwardCacheNotRestoredReasonType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanation.__init__","title":"<code>__init__(type_, reason, context=None, details=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BackForwardCacheNotRestoredExplanation:\n    return cls(\n        type_=BackForwardCacheNotRestoredReasonType.from_json(json[\"type\"]),\n        reason=BackForwardCacheNotRestoredReason.from_json(json[\"reason\"]),\n        context=(\n            str(json[\"context\"]) if json.get(\"context\", None) is not None else None\n        ),\n        details=(\n            [BackForwardCacheBlockingDetails.from_json(i) for i in json[\"details\"]]\n            if json.get(\"details\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_.to_json()\n    json[\"reason\"] = self.reason.to_json()\n    if self.context is not None:\n        json[\"context\"] = self.context\n    if self.details is not None:\n        json[\"details\"] = [i.to_json() for i in self.details]\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanationTree","title":"<code>BackForwardCacheNotRestoredExplanationTree</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass BackForwardCacheNotRestoredExplanationTree:\n    #: URL of each frame\n    url: str\n\n    #: Not restored reasons of each frame\n    explanations: typing.List[BackForwardCacheNotRestoredExplanation]\n\n    #: Array of children frame\n    children: typing.List[BackForwardCacheNotRestoredExplanationTree]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        json[\"explanations\"] = [i.to_json() for i in self.explanations]\n        json[\"children\"] = [i.to_json() for i in self.children]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BackForwardCacheNotRestoredExplanationTree:\n        return cls(\n            url=str(json[\"url\"]),\n            explanations=[\n                BackForwardCacheNotRestoredExplanation.from_json(i)\n                for i in json[\"explanations\"]\n            ],\n            children=[\n                BackForwardCacheNotRestoredExplanationTree.from_json(i)\n                for i in json[\"children\"]\n            ],\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanationTree.children","title":"<code>children: typing.List[BackForwardCacheNotRestoredExplanationTree]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanationTree.explanations","title":"<code>explanations: typing.List[BackForwardCacheNotRestoredExplanation]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanationTree.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanationTree.__init__","title":"<code>__init__(url, explanations, children)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanationTree.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BackForwardCacheNotRestoredExplanationTree:\n    return cls(\n        url=str(json[\"url\"]),\n        explanations=[\n            BackForwardCacheNotRestoredExplanation.from_json(i)\n            for i in json[\"explanations\"]\n        ],\n        children=[\n            BackForwardCacheNotRestoredExplanationTree.from_json(i)\n            for i in json[\"children\"]\n        ],\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredExplanationTree.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    json[\"explanations\"] = [i.to_json() for i in self.explanations]\n    json[\"children\"] = [i.to_json() for i in self.children]\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason","title":"<code>BackForwardCacheNotRestoredReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>List of not restored reasons for back-forward cache.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class BackForwardCacheNotRestoredReason(enum.Enum):\n    \"\"\"\n    List of not restored reasons for back-forward cache.\n    \"\"\"\n\n    NOT_PRIMARY_MAIN_FRAME = \"NotPrimaryMainFrame\"\n    BACK_FORWARD_CACHE_DISABLED = \"BackForwardCacheDisabled\"\n    RELATED_ACTIVE_CONTENTS_EXIST = \"RelatedActiveContentsExist\"\n    HTTP_STATUS_NOT_OK = \"HTTPStatusNotOK\"\n    SCHEME_NOT_HTTP_OR_HTTPS = \"SchemeNotHTTPOrHTTPS\"\n    LOADING = \"Loading\"\n    WAS_GRANTED_MEDIA_ACCESS = \"WasGrantedMediaAccess\"\n    DISABLE_FOR_RENDER_FRAME_HOST_CALLED = \"DisableForRenderFrameHostCalled\"\n    DOMAIN_NOT_ALLOWED = \"DomainNotAllowed\"\n    HTTP_METHOD_NOT_GET = \"HTTPMethodNotGET\"\n    SUBFRAME_IS_NAVIGATING = \"SubframeIsNavigating\"\n    TIMEOUT = \"Timeout\"\n    CACHE_LIMIT = \"CacheLimit\"\n    JAVA_SCRIPT_EXECUTION = \"JavaScriptExecution\"\n    RENDERER_PROCESS_KILLED = \"RendererProcessKilled\"\n    RENDERER_PROCESS_CRASHED = \"RendererProcessCrashed\"\n    SCHEDULER_TRACKED_FEATURE_USED = \"SchedulerTrackedFeatureUsed\"\n    CONFLICTING_BROWSING_INSTANCE = \"ConflictingBrowsingInstance\"\n    CACHE_FLUSHED = \"CacheFlushed\"\n    SERVICE_WORKER_VERSION_ACTIVATION = \"ServiceWorkerVersionActivation\"\n    SESSION_RESTORED = \"SessionRestored\"\n    SERVICE_WORKER_POST_MESSAGE = \"ServiceWorkerPostMessage\"\n    ENTERED_BACK_FORWARD_CACHE_BEFORE_SERVICE_WORKER_HOST_ADDED = (\n        \"EnteredBackForwardCacheBeforeServiceWorkerHostAdded\"\n    )\n    RENDER_FRAME_HOST_REUSED_SAME_SITE = \"RenderFrameHostReused_SameSite\"\n    RENDER_FRAME_HOST_REUSED_CROSS_SITE = \"RenderFrameHostReused_CrossSite\"\n    SERVICE_WORKER_CLAIM = \"ServiceWorkerClaim\"\n    IGNORE_EVENT_AND_EVICT = \"IgnoreEventAndEvict\"\n    HAVE_INNER_CONTENTS = \"HaveInnerContents\"\n    TIMEOUT_PUTTING_IN_CACHE = \"TimeoutPuttingInCache\"\n    BACK_FORWARD_CACHE_DISABLED_BY_LOW_MEMORY = \"BackForwardCacheDisabledByLowMemory\"\n    BACK_FORWARD_CACHE_DISABLED_BY_COMMAND_LINE = (\n        \"BackForwardCacheDisabledByCommandLine\"\n    )\n    NETWORK_REQUEST_DATAPIPE_DRAINED_AS_BYTES_CONSUMER = (\n        \"NetworkRequestDatapipeDrainedAsBytesConsumer\"\n    )\n    NETWORK_REQUEST_REDIRECTED = \"NetworkRequestRedirected\"\n    NETWORK_REQUEST_TIMEOUT = \"NetworkRequestTimeout\"\n    NETWORK_EXCEEDS_BUFFER_LIMIT = \"NetworkExceedsBufferLimit\"\n    NAVIGATION_CANCELLED_WHILE_RESTORING = \"NavigationCancelledWhileRestoring\"\n    NOT_MOST_RECENT_NAVIGATION_ENTRY = \"NotMostRecentNavigationEntry\"\n    BACK_FORWARD_CACHE_DISABLED_FOR_PRERENDER = \"BackForwardCacheDisabledForPrerender\"\n    USER_AGENT_OVERRIDE_DIFFERS = \"UserAgentOverrideDiffers\"\n    FOREGROUND_CACHE_LIMIT = \"ForegroundCacheLimit\"\n    BROWSING_INSTANCE_NOT_SWAPPED = \"BrowsingInstanceNotSwapped\"\n    BACK_FORWARD_CACHE_DISABLED_FOR_DELEGATE = \"BackForwardCacheDisabledForDelegate\"\n    UNLOAD_HANDLER_EXISTS_IN_MAIN_FRAME = \"UnloadHandlerExistsInMainFrame\"\n    UNLOAD_HANDLER_EXISTS_IN_SUB_FRAME = \"UnloadHandlerExistsInSubFrame\"\n    SERVICE_WORKER_UNREGISTRATION = \"ServiceWorkerUnregistration\"\n    CACHE_CONTROL_NO_STORE = \"CacheControlNoStore\"\n    CACHE_CONTROL_NO_STORE_COOKIE_MODIFIED = \"CacheControlNoStoreCookieModified\"\n    CACHE_CONTROL_NO_STORE_HTTP_ONLY_COOKIE_MODIFIED = (\n        \"CacheControlNoStoreHTTPOnlyCookieModified\"\n    )\n    NO_RESPONSE_HEAD = \"NoResponseHead\"\n    UNKNOWN = \"Unknown\"\n    ACTIVATION_NAVIGATIONS_DISALLOWED_FOR_BUG1234857 = (\n        \"ActivationNavigationsDisallowedForBug1234857\"\n    )\n    ERROR_DOCUMENT = \"ErrorDocument\"\n    FENCED_FRAMES_EMBEDDER = \"FencedFramesEmbedder\"\n    COOKIE_DISABLED = \"CookieDisabled\"\n    HTTP_AUTH_REQUIRED = \"HTTPAuthRequired\"\n    COOKIE_FLUSHED = \"CookieFlushed\"\n    BROADCAST_CHANNEL_ON_MESSAGE = \"BroadcastChannelOnMessage\"\n    WEB_VIEW_SETTINGS_CHANGED = \"WebViewSettingsChanged\"\n    WEB_VIEW_JAVA_SCRIPT_OBJECT_CHANGED = \"WebViewJavaScriptObjectChanged\"\n    WEB_VIEW_MESSAGE_LISTENER_INJECTED = \"WebViewMessageListenerInjected\"\n    WEB_VIEW_SAFE_BROWSING_ALLOWLIST_CHANGED = \"WebViewSafeBrowsingAllowlistChanged\"\n    WEB_VIEW_DOCUMENT_START_JAVASCRIPT_CHANGED = \"WebViewDocumentStartJavascriptChanged\"\n    WEB_SOCKET = \"WebSocket\"\n    WEB_TRANSPORT = \"WebTransport\"\n    WEB_RTC = \"WebRTC\"\n    MAIN_RESOURCE_HAS_CACHE_CONTROL_NO_STORE = \"MainResourceHasCacheControlNoStore\"\n    MAIN_RESOURCE_HAS_CACHE_CONTROL_NO_CACHE = \"MainResourceHasCacheControlNoCache\"\n    SUBRESOURCE_HAS_CACHE_CONTROL_NO_STORE = \"SubresourceHasCacheControlNoStore\"\n    SUBRESOURCE_HAS_CACHE_CONTROL_NO_CACHE = \"SubresourceHasCacheControlNoCache\"\n    CONTAINS_PLUGINS = \"ContainsPlugins\"\n    DOCUMENT_LOADED = \"DocumentLoaded\"\n    OUTSTANDING_NETWORK_REQUEST_OTHERS = \"OutstandingNetworkRequestOthers\"\n    REQUESTED_MIDI_PERMISSION = \"RequestedMIDIPermission\"\n    REQUESTED_AUDIO_CAPTURE_PERMISSION = \"RequestedAudioCapturePermission\"\n    REQUESTED_VIDEO_CAPTURE_PERMISSION = \"RequestedVideoCapturePermission\"\n    REQUESTED_BACK_FORWARD_CACHE_BLOCKED_SENSORS = (\n        \"RequestedBackForwardCacheBlockedSensors\"\n    )\n    REQUESTED_BACKGROUND_WORK_PERMISSION = \"RequestedBackgroundWorkPermission\"\n    BROADCAST_CHANNEL = \"BroadcastChannel\"\n    WEB_XR = \"WebXR\"\n    SHARED_WORKER = \"SharedWorker\"\n    WEB_LOCKS = \"WebLocks\"\n    WEB_HID = \"WebHID\"\n    WEB_SHARE = \"WebShare\"\n    REQUESTED_STORAGE_ACCESS_GRANT = \"RequestedStorageAccessGrant\"\n    WEB_NFC = \"WebNfc\"\n    OUTSTANDING_NETWORK_REQUEST_FETCH = \"OutstandingNetworkRequestFetch\"\n    OUTSTANDING_NETWORK_REQUEST_XHR = \"OutstandingNetworkRequestXHR\"\n    APP_BANNER = \"AppBanner\"\n    PRINTING = \"Printing\"\n    WEB_DATABASE = \"WebDatabase\"\n    PICTURE_IN_PICTURE = \"PictureInPicture\"\n    PORTAL = \"Portal\"\n    SPEECH_RECOGNIZER = \"SpeechRecognizer\"\n    IDLE_MANAGER = \"IdleManager\"\n    PAYMENT_MANAGER = \"PaymentManager\"\n    SPEECH_SYNTHESIS = \"SpeechSynthesis\"\n    KEYBOARD_LOCK = \"KeyboardLock\"\n    WEB_OTP_SERVICE = \"WebOTPService\"\n    OUTSTANDING_NETWORK_REQUEST_DIRECT_SOCKET = \"OutstandingNetworkRequestDirectSocket\"\n    INJECTED_JAVASCRIPT = \"InjectedJavascript\"\n    INJECTED_STYLE_SHEET = \"InjectedStyleSheet\"\n    KEEPALIVE_REQUEST = \"KeepaliveRequest\"\n    INDEXED_DB_EVENT = \"IndexedDBEvent\"\n    DUMMY = \"Dummy\"\n    JS_NETWORK_REQUEST_RECEIVED_CACHE_CONTROL_NO_STORE_RESOURCE = (\n        \"JsNetworkRequestReceivedCacheControlNoStoreResource\"\n    )\n    WEB_RTC_STICKY = \"WebRTCSticky\"\n    WEB_TRANSPORT_STICKY = \"WebTransportSticky\"\n    WEB_SOCKET_STICKY = \"WebSocketSticky\"\n    SMART_CARD = \"SmartCard\"\n    LIVE_MEDIA_STREAM_TRACK = \"LiveMediaStreamTrack\"\n    UNLOAD_HANDLER = \"UnloadHandler\"\n    PARSER_ABORTED = \"ParserAborted\"\n    CONTENT_SECURITY_HANDLER = \"ContentSecurityHandler\"\n    CONTENT_WEB_AUTHENTICATION_API = \"ContentWebAuthenticationAPI\"\n    CONTENT_FILE_CHOOSER = \"ContentFileChooser\"\n    CONTENT_SERIAL = \"ContentSerial\"\n    CONTENT_FILE_SYSTEM_ACCESS = \"ContentFileSystemAccess\"\n    CONTENT_MEDIA_DEVICES_DISPATCHER_HOST = \"ContentMediaDevicesDispatcherHost\"\n    CONTENT_WEB_BLUETOOTH = \"ContentWebBluetooth\"\n    CONTENT_WEB_USB = \"ContentWebUSB\"\n    CONTENT_MEDIA_SESSION_SERVICE = \"ContentMediaSessionService\"\n    CONTENT_SCREEN_READER = \"ContentScreenReader\"\n    EMBEDDER_POPUP_BLOCKER_TAB_HELPER = \"EmbedderPopupBlockerTabHelper\"\n    EMBEDDER_SAFE_BROWSING_TRIGGERED_POPUP_BLOCKER = (\n        \"EmbedderSafeBrowsingTriggeredPopupBlocker\"\n    )\n    EMBEDDER_SAFE_BROWSING_THREAT_DETAILS = \"EmbedderSafeBrowsingThreatDetails\"\n    EMBEDDER_APP_BANNER_MANAGER = \"EmbedderAppBannerManager\"\n    EMBEDDER_DOM_DISTILLER_VIEWER_SOURCE = \"EmbedderDomDistillerViewerSource\"\n    EMBEDDER_DOM_DISTILLER_SELF_DELETING_REQUEST_DELEGATE = (\n        \"EmbedderDomDistillerSelfDeletingRequestDelegate\"\n    )\n    EMBEDDER_OOM_INTERVENTION_TAB_HELPER = \"EmbedderOomInterventionTabHelper\"\n    EMBEDDER_OFFLINE_PAGE = \"EmbedderOfflinePage\"\n    EMBEDDER_CHROME_PASSWORD_MANAGER_CLIENT_BIND_CREDENTIAL_MANAGER = (\n        \"EmbedderChromePasswordManagerClientBindCredentialManager\"\n    )\n    EMBEDDER_PERMISSION_REQUEST_MANAGER = \"EmbedderPermissionRequestManager\"\n    EMBEDDER_MODAL_DIALOG = \"EmbedderModalDialog\"\n    EMBEDDER_EXTENSIONS = \"EmbedderExtensions\"\n    EMBEDDER_EXTENSION_MESSAGING = \"EmbedderExtensionMessaging\"\n    EMBEDDER_EXTENSION_MESSAGING_FOR_OPEN_PORT = \"EmbedderExtensionMessagingForOpenPort\"\n    EMBEDDER_EXTENSION_SENT_MESSAGE_TO_CACHED_FRAME = (\n        \"EmbedderExtensionSentMessageToCachedFrame\"\n    )\n    REQUESTED_BY_WEB_VIEW_CLIENT = \"RequestedByWebViewClient\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; BackForwardCacheNotRestoredReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.ACTIVATION_NAVIGATIONS_DISALLOWED_FOR_BUG1234857","title":"<code>ACTIVATION_NAVIGATIONS_DISALLOWED_FOR_BUG1234857 = 'ActivationNavigationsDisallowedForBug1234857'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.APP_BANNER","title":"<code>APP_BANNER = 'AppBanner'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.BACK_FORWARD_CACHE_DISABLED","title":"<code>BACK_FORWARD_CACHE_DISABLED = 'BackForwardCacheDisabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.BACK_FORWARD_CACHE_DISABLED_BY_COMMAND_LINE","title":"<code>BACK_FORWARD_CACHE_DISABLED_BY_COMMAND_LINE = 'BackForwardCacheDisabledByCommandLine'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.BACK_FORWARD_CACHE_DISABLED_BY_LOW_MEMORY","title":"<code>BACK_FORWARD_CACHE_DISABLED_BY_LOW_MEMORY = 'BackForwardCacheDisabledByLowMemory'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.BACK_FORWARD_CACHE_DISABLED_FOR_DELEGATE","title":"<code>BACK_FORWARD_CACHE_DISABLED_FOR_DELEGATE = 'BackForwardCacheDisabledForDelegate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.BACK_FORWARD_CACHE_DISABLED_FOR_PRERENDER","title":"<code>BACK_FORWARD_CACHE_DISABLED_FOR_PRERENDER = 'BackForwardCacheDisabledForPrerender'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.BROADCAST_CHANNEL","title":"<code>BROADCAST_CHANNEL = 'BroadcastChannel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.BROADCAST_CHANNEL_ON_MESSAGE","title":"<code>BROADCAST_CHANNEL_ON_MESSAGE = 'BroadcastChannelOnMessage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.BROWSING_INSTANCE_NOT_SWAPPED","title":"<code>BROWSING_INSTANCE_NOT_SWAPPED = 'BrowsingInstanceNotSwapped'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CACHE_CONTROL_NO_STORE","title":"<code>CACHE_CONTROL_NO_STORE = 'CacheControlNoStore'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CACHE_CONTROL_NO_STORE_COOKIE_MODIFIED","title":"<code>CACHE_CONTROL_NO_STORE_COOKIE_MODIFIED = 'CacheControlNoStoreCookieModified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CACHE_CONTROL_NO_STORE_HTTP_ONLY_COOKIE_MODIFIED","title":"<code>CACHE_CONTROL_NO_STORE_HTTP_ONLY_COOKIE_MODIFIED = 'CacheControlNoStoreHTTPOnlyCookieModified'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CACHE_FLUSHED","title":"<code>CACHE_FLUSHED = 'CacheFlushed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CACHE_LIMIT","title":"<code>CACHE_LIMIT = 'CacheLimit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONFLICTING_BROWSING_INSTANCE","title":"<code>CONFLICTING_BROWSING_INSTANCE = 'ConflictingBrowsingInstance'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTAINS_PLUGINS","title":"<code>CONTAINS_PLUGINS = 'ContainsPlugins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTENT_FILE_CHOOSER","title":"<code>CONTENT_FILE_CHOOSER = 'ContentFileChooser'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTENT_FILE_SYSTEM_ACCESS","title":"<code>CONTENT_FILE_SYSTEM_ACCESS = 'ContentFileSystemAccess'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTENT_MEDIA_DEVICES_DISPATCHER_HOST","title":"<code>CONTENT_MEDIA_DEVICES_DISPATCHER_HOST = 'ContentMediaDevicesDispatcherHost'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTENT_MEDIA_SESSION_SERVICE","title":"<code>CONTENT_MEDIA_SESSION_SERVICE = 'ContentMediaSessionService'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTENT_SCREEN_READER","title":"<code>CONTENT_SCREEN_READER = 'ContentScreenReader'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTENT_SECURITY_HANDLER","title":"<code>CONTENT_SECURITY_HANDLER = 'ContentSecurityHandler'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTENT_SERIAL","title":"<code>CONTENT_SERIAL = 'ContentSerial'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTENT_WEB_AUTHENTICATION_API","title":"<code>CONTENT_WEB_AUTHENTICATION_API = 'ContentWebAuthenticationAPI'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTENT_WEB_BLUETOOTH","title":"<code>CONTENT_WEB_BLUETOOTH = 'ContentWebBluetooth'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.CONTENT_WEB_USB","title":"<code>CONTENT_WEB_USB = 'ContentWebUSB'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.COOKIE_DISABLED","title":"<code>COOKIE_DISABLED = 'CookieDisabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.COOKIE_FLUSHED","title":"<code>COOKIE_FLUSHED = 'CookieFlushed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.DISABLE_FOR_RENDER_FRAME_HOST_CALLED","title":"<code>DISABLE_FOR_RENDER_FRAME_HOST_CALLED = 'DisableForRenderFrameHostCalled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.DOCUMENT_LOADED","title":"<code>DOCUMENT_LOADED = 'DocumentLoaded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.DOMAIN_NOT_ALLOWED","title":"<code>DOMAIN_NOT_ALLOWED = 'DomainNotAllowed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.DUMMY","title":"<code>DUMMY = 'Dummy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_APP_BANNER_MANAGER","title":"<code>EMBEDDER_APP_BANNER_MANAGER = 'EmbedderAppBannerManager'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_CHROME_PASSWORD_MANAGER_CLIENT_BIND_CREDENTIAL_MANAGER","title":"<code>EMBEDDER_CHROME_PASSWORD_MANAGER_CLIENT_BIND_CREDENTIAL_MANAGER = 'EmbedderChromePasswordManagerClientBindCredentialManager'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_DOM_DISTILLER_SELF_DELETING_REQUEST_DELEGATE","title":"<code>EMBEDDER_DOM_DISTILLER_SELF_DELETING_REQUEST_DELEGATE = 'EmbedderDomDistillerSelfDeletingRequestDelegate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_DOM_DISTILLER_VIEWER_SOURCE","title":"<code>EMBEDDER_DOM_DISTILLER_VIEWER_SOURCE = 'EmbedderDomDistillerViewerSource'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_EXTENSIONS","title":"<code>EMBEDDER_EXTENSIONS = 'EmbedderExtensions'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_EXTENSION_MESSAGING","title":"<code>EMBEDDER_EXTENSION_MESSAGING = 'EmbedderExtensionMessaging'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_EXTENSION_MESSAGING_FOR_OPEN_PORT","title":"<code>EMBEDDER_EXTENSION_MESSAGING_FOR_OPEN_PORT = 'EmbedderExtensionMessagingForOpenPort'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_EXTENSION_SENT_MESSAGE_TO_CACHED_FRAME","title":"<code>EMBEDDER_EXTENSION_SENT_MESSAGE_TO_CACHED_FRAME = 'EmbedderExtensionSentMessageToCachedFrame'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_MODAL_DIALOG","title":"<code>EMBEDDER_MODAL_DIALOG = 'EmbedderModalDialog'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_OFFLINE_PAGE","title":"<code>EMBEDDER_OFFLINE_PAGE = 'EmbedderOfflinePage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_OOM_INTERVENTION_TAB_HELPER","title":"<code>EMBEDDER_OOM_INTERVENTION_TAB_HELPER = 'EmbedderOomInterventionTabHelper'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_PERMISSION_REQUEST_MANAGER","title":"<code>EMBEDDER_PERMISSION_REQUEST_MANAGER = 'EmbedderPermissionRequestManager'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_POPUP_BLOCKER_TAB_HELPER","title":"<code>EMBEDDER_POPUP_BLOCKER_TAB_HELPER = 'EmbedderPopupBlockerTabHelper'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_SAFE_BROWSING_THREAT_DETAILS","title":"<code>EMBEDDER_SAFE_BROWSING_THREAT_DETAILS = 'EmbedderSafeBrowsingThreatDetails'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.EMBEDDER_SAFE_BROWSING_TRIGGERED_POPUP_BLOCKER","title":"<code>EMBEDDER_SAFE_BROWSING_TRIGGERED_POPUP_BLOCKER = 'EmbedderSafeBrowsingTriggeredPopupBlocker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.ENTERED_BACK_FORWARD_CACHE_BEFORE_SERVICE_WORKER_HOST_ADDED","title":"<code>ENTERED_BACK_FORWARD_CACHE_BEFORE_SERVICE_WORKER_HOST_ADDED = 'EnteredBackForwardCacheBeforeServiceWorkerHostAdded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.ERROR_DOCUMENT","title":"<code>ERROR_DOCUMENT = 'ErrorDocument'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.FENCED_FRAMES_EMBEDDER","title":"<code>FENCED_FRAMES_EMBEDDER = 'FencedFramesEmbedder'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.FOREGROUND_CACHE_LIMIT","title":"<code>FOREGROUND_CACHE_LIMIT = 'ForegroundCacheLimit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.HAVE_INNER_CONTENTS","title":"<code>HAVE_INNER_CONTENTS = 'HaveInnerContents'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.HTTP_AUTH_REQUIRED","title":"<code>HTTP_AUTH_REQUIRED = 'HTTPAuthRequired'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.HTTP_METHOD_NOT_GET","title":"<code>HTTP_METHOD_NOT_GET = 'HTTPMethodNotGET'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.HTTP_STATUS_NOT_OK","title":"<code>HTTP_STATUS_NOT_OK = 'HTTPStatusNotOK'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.IDLE_MANAGER","title":"<code>IDLE_MANAGER = 'IdleManager'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.IGNORE_EVENT_AND_EVICT","title":"<code>IGNORE_EVENT_AND_EVICT = 'IgnoreEventAndEvict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.INDEXED_DB_EVENT","title":"<code>INDEXED_DB_EVENT = 'IndexedDBEvent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.INJECTED_JAVASCRIPT","title":"<code>INJECTED_JAVASCRIPT = 'InjectedJavascript'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.INJECTED_STYLE_SHEET","title":"<code>INJECTED_STYLE_SHEET = 'InjectedStyleSheet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.JAVA_SCRIPT_EXECUTION","title":"<code>JAVA_SCRIPT_EXECUTION = 'JavaScriptExecution'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.JS_NETWORK_REQUEST_RECEIVED_CACHE_CONTROL_NO_STORE_RESOURCE","title":"<code>JS_NETWORK_REQUEST_RECEIVED_CACHE_CONTROL_NO_STORE_RESOURCE = 'JsNetworkRequestReceivedCacheControlNoStoreResource'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.KEEPALIVE_REQUEST","title":"<code>KEEPALIVE_REQUEST = 'KeepaliveRequest'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.KEYBOARD_LOCK","title":"<code>KEYBOARD_LOCK = 'KeyboardLock'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.LIVE_MEDIA_STREAM_TRACK","title":"<code>LIVE_MEDIA_STREAM_TRACK = 'LiveMediaStreamTrack'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.LOADING","title":"<code>LOADING = 'Loading'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.MAIN_RESOURCE_HAS_CACHE_CONTROL_NO_CACHE","title":"<code>MAIN_RESOURCE_HAS_CACHE_CONTROL_NO_CACHE = 'MainResourceHasCacheControlNoCache'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.MAIN_RESOURCE_HAS_CACHE_CONTROL_NO_STORE","title":"<code>MAIN_RESOURCE_HAS_CACHE_CONTROL_NO_STORE = 'MainResourceHasCacheControlNoStore'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.NAVIGATION_CANCELLED_WHILE_RESTORING","title":"<code>NAVIGATION_CANCELLED_WHILE_RESTORING = 'NavigationCancelledWhileRestoring'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.NETWORK_EXCEEDS_BUFFER_LIMIT","title":"<code>NETWORK_EXCEEDS_BUFFER_LIMIT = 'NetworkExceedsBufferLimit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.NETWORK_REQUEST_DATAPIPE_DRAINED_AS_BYTES_CONSUMER","title":"<code>NETWORK_REQUEST_DATAPIPE_DRAINED_AS_BYTES_CONSUMER = 'NetworkRequestDatapipeDrainedAsBytesConsumer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.NETWORK_REQUEST_REDIRECTED","title":"<code>NETWORK_REQUEST_REDIRECTED = 'NetworkRequestRedirected'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.NETWORK_REQUEST_TIMEOUT","title":"<code>NETWORK_REQUEST_TIMEOUT = 'NetworkRequestTimeout'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.NOT_MOST_RECENT_NAVIGATION_ENTRY","title":"<code>NOT_MOST_RECENT_NAVIGATION_ENTRY = 'NotMostRecentNavigationEntry'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.NOT_PRIMARY_MAIN_FRAME","title":"<code>NOT_PRIMARY_MAIN_FRAME = 'NotPrimaryMainFrame'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.NO_RESPONSE_HEAD","title":"<code>NO_RESPONSE_HEAD = 'NoResponseHead'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.OUTSTANDING_NETWORK_REQUEST_DIRECT_SOCKET","title":"<code>OUTSTANDING_NETWORK_REQUEST_DIRECT_SOCKET = 'OutstandingNetworkRequestDirectSocket'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.OUTSTANDING_NETWORK_REQUEST_FETCH","title":"<code>OUTSTANDING_NETWORK_REQUEST_FETCH = 'OutstandingNetworkRequestFetch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.OUTSTANDING_NETWORK_REQUEST_OTHERS","title":"<code>OUTSTANDING_NETWORK_REQUEST_OTHERS = 'OutstandingNetworkRequestOthers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.OUTSTANDING_NETWORK_REQUEST_XHR","title":"<code>OUTSTANDING_NETWORK_REQUEST_XHR = 'OutstandingNetworkRequestXHR'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.PARSER_ABORTED","title":"<code>PARSER_ABORTED = 'ParserAborted'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.PAYMENT_MANAGER","title":"<code>PAYMENT_MANAGER = 'PaymentManager'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.PICTURE_IN_PICTURE","title":"<code>PICTURE_IN_PICTURE = 'PictureInPicture'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.PORTAL","title":"<code>PORTAL = 'Portal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.PRINTING","title":"<code>PRINTING = 'Printing'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.RELATED_ACTIVE_CONTENTS_EXIST","title":"<code>RELATED_ACTIVE_CONTENTS_EXIST = 'RelatedActiveContentsExist'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.RENDERER_PROCESS_CRASHED","title":"<code>RENDERER_PROCESS_CRASHED = 'RendererProcessCrashed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.RENDERER_PROCESS_KILLED","title":"<code>RENDERER_PROCESS_KILLED = 'RendererProcessKilled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.RENDER_FRAME_HOST_REUSED_CROSS_SITE","title":"<code>RENDER_FRAME_HOST_REUSED_CROSS_SITE = 'RenderFrameHostReused_CrossSite'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.RENDER_FRAME_HOST_REUSED_SAME_SITE","title":"<code>RENDER_FRAME_HOST_REUSED_SAME_SITE = 'RenderFrameHostReused_SameSite'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.REQUESTED_AUDIO_CAPTURE_PERMISSION","title":"<code>REQUESTED_AUDIO_CAPTURE_PERMISSION = 'RequestedAudioCapturePermission'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.REQUESTED_BACKGROUND_WORK_PERMISSION","title":"<code>REQUESTED_BACKGROUND_WORK_PERMISSION = 'RequestedBackgroundWorkPermission'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.REQUESTED_BACK_FORWARD_CACHE_BLOCKED_SENSORS","title":"<code>REQUESTED_BACK_FORWARD_CACHE_BLOCKED_SENSORS = 'RequestedBackForwardCacheBlockedSensors'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.REQUESTED_BY_WEB_VIEW_CLIENT","title":"<code>REQUESTED_BY_WEB_VIEW_CLIENT = 'RequestedByWebViewClient'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.REQUESTED_MIDI_PERMISSION","title":"<code>REQUESTED_MIDI_PERMISSION = 'RequestedMIDIPermission'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.REQUESTED_STORAGE_ACCESS_GRANT","title":"<code>REQUESTED_STORAGE_ACCESS_GRANT = 'RequestedStorageAccessGrant'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.REQUESTED_VIDEO_CAPTURE_PERMISSION","title":"<code>REQUESTED_VIDEO_CAPTURE_PERMISSION = 'RequestedVideoCapturePermission'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SCHEDULER_TRACKED_FEATURE_USED","title":"<code>SCHEDULER_TRACKED_FEATURE_USED = 'SchedulerTrackedFeatureUsed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SCHEME_NOT_HTTP_OR_HTTPS","title":"<code>SCHEME_NOT_HTTP_OR_HTTPS = 'SchemeNotHTTPOrHTTPS'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SERVICE_WORKER_CLAIM","title":"<code>SERVICE_WORKER_CLAIM = 'ServiceWorkerClaim'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SERVICE_WORKER_POST_MESSAGE","title":"<code>SERVICE_WORKER_POST_MESSAGE = 'ServiceWorkerPostMessage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SERVICE_WORKER_UNREGISTRATION","title":"<code>SERVICE_WORKER_UNREGISTRATION = 'ServiceWorkerUnregistration'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SERVICE_WORKER_VERSION_ACTIVATION","title":"<code>SERVICE_WORKER_VERSION_ACTIVATION = 'ServiceWorkerVersionActivation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SESSION_RESTORED","title":"<code>SESSION_RESTORED = 'SessionRestored'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SHARED_WORKER","title":"<code>SHARED_WORKER = 'SharedWorker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SMART_CARD","title":"<code>SMART_CARD = 'SmartCard'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SPEECH_RECOGNIZER","title":"<code>SPEECH_RECOGNIZER = 'SpeechRecognizer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SPEECH_SYNTHESIS","title":"<code>SPEECH_SYNTHESIS = 'SpeechSynthesis'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SUBFRAME_IS_NAVIGATING","title":"<code>SUBFRAME_IS_NAVIGATING = 'SubframeIsNavigating'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SUBRESOURCE_HAS_CACHE_CONTROL_NO_CACHE","title":"<code>SUBRESOURCE_HAS_CACHE_CONTROL_NO_CACHE = 'SubresourceHasCacheControlNoCache'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.SUBRESOURCE_HAS_CACHE_CONTROL_NO_STORE","title":"<code>SUBRESOURCE_HAS_CACHE_CONTROL_NO_STORE = 'SubresourceHasCacheControlNoStore'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.TIMEOUT","title":"<code>TIMEOUT = 'Timeout'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.TIMEOUT_PUTTING_IN_CACHE","title":"<code>TIMEOUT_PUTTING_IN_CACHE = 'TimeoutPuttingInCache'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.UNKNOWN","title":"<code>UNKNOWN = 'Unknown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.UNLOAD_HANDLER","title":"<code>UNLOAD_HANDLER = 'UnloadHandler'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.UNLOAD_HANDLER_EXISTS_IN_MAIN_FRAME","title":"<code>UNLOAD_HANDLER_EXISTS_IN_MAIN_FRAME = 'UnloadHandlerExistsInMainFrame'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.UNLOAD_HANDLER_EXISTS_IN_SUB_FRAME","title":"<code>UNLOAD_HANDLER_EXISTS_IN_SUB_FRAME = 'UnloadHandlerExistsInSubFrame'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.USER_AGENT_OVERRIDE_DIFFERS","title":"<code>USER_AGENT_OVERRIDE_DIFFERS = 'UserAgentOverrideDiffers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WAS_GRANTED_MEDIA_ACCESS","title":"<code>WAS_GRANTED_MEDIA_ACCESS = 'WasGrantedMediaAccess'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_DATABASE","title":"<code>WEB_DATABASE = 'WebDatabase'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_HID","title":"<code>WEB_HID = 'WebHID'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_LOCKS","title":"<code>WEB_LOCKS = 'WebLocks'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_NFC","title":"<code>WEB_NFC = 'WebNfc'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_OTP_SERVICE","title":"<code>WEB_OTP_SERVICE = 'WebOTPService'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_RTC","title":"<code>WEB_RTC = 'WebRTC'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_RTC_STICKY","title":"<code>WEB_RTC_STICKY = 'WebRTCSticky'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_SHARE","title":"<code>WEB_SHARE = 'WebShare'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_SOCKET","title":"<code>WEB_SOCKET = 'WebSocket'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_SOCKET_STICKY","title":"<code>WEB_SOCKET_STICKY = 'WebSocketSticky'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_TRANSPORT","title":"<code>WEB_TRANSPORT = 'WebTransport'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_TRANSPORT_STICKY","title":"<code>WEB_TRANSPORT_STICKY = 'WebTransportSticky'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_VIEW_DOCUMENT_START_JAVASCRIPT_CHANGED","title":"<code>WEB_VIEW_DOCUMENT_START_JAVASCRIPT_CHANGED = 'WebViewDocumentStartJavascriptChanged'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_VIEW_JAVA_SCRIPT_OBJECT_CHANGED","title":"<code>WEB_VIEW_JAVA_SCRIPT_OBJECT_CHANGED = 'WebViewJavaScriptObjectChanged'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_VIEW_MESSAGE_LISTENER_INJECTED","title":"<code>WEB_VIEW_MESSAGE_LISTENER_INJECTED = 'WebViewMessageListenerInjected'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_VIEW_SAFE_BROWSING_ALLOWLIST_CHANGED","title":"<code>WEB_VIEW_SAFE_BROWSING_ALLOWLIST_CHANGED = 'WebViewSafeBrowsingAllowlistChanged'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_VIEW_SETTINGS_CHANGED","title":"<code>WEB_VIEW_SETTINGS_CHANGED = 'WebViewSettingsChanged'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.WEB_XR","title":"<code>WEB_XR = 'WebXR'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; BackForwardCacheNotRestoredReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReasonType","title":"<code>BackForwardCacheNotRestoredReasonType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Types of not restored reasons for back-forward cache.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class BackForwardCacheNotRestoredReasonType(enum.Enum):\n    \"\"\"\n    Types of not restored reasons for back-forward cache.\n    \"\"\"\n\n    SUPPORT_PENDING = \"SupportPending\"\n    PAGE_SUPPORT_NEEDED = \"PageSupportNeeded\"\n    CIRCUMSTANTIAL = \"Circumstantial\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; BackForwardCacheNotRestoredReasonType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReasonType.CIRCUMSTANTIAL","title":"<code>CIRCUMSTANTIAL = 'Circumstantial'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReasonType.PAGE_SUPPORT_NEEDED","title":"<code>PAGE_SUPPORT_NEEDED = 'PageSupportNeeded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReasonType.SUPPORT_PENDING","title":"<code>SUPPORT_PENDING = 'SupportPending'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReasonType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; BackForwardCacheNotRestoredReasonType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotRestoredReasonType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotUsed","title":"<code>BackForwardCacheNotUsed</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired for failed bfcache history navigations if BackForwardCache feature is enabled. Do not assume any ordering with the Page.frameNavigated event. This event is fired only for main-frame history navigation where the document changes (non-same-document navigations), when bfcache navigation fails.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.backForwardCacheNotUsed\")\n@dataclass\nclass BackForwardCacheNotUsed:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired for failed bfcache history navigations if BackForwardCache feature is enabled. Do\n    not assume any ordering with the Page.frameNavigated event. This event is fired only for\n    main-frame history navigation where the document changes (non-same-document navigations),\n    when bfcache navigation fails.\n    \"\"\"\n\n    #: The loader id for the associated navigation.\n    loader_id: network.LoaderId\n    #: The frame id of the associated frame.\n    frame_id: FrameId\n    #: Array of reasons why the page could not be cached. This must not be empty.\n    not_restored_explanations: typing.List[BackForwardCacheNotRestoredExplanation]\n    #: Tree structure of reasons why the page could not be cached for each frame.\n    not_restored_explanations_tree: typing.Optional[\n        BackForwardCacheNotRestoredExplanationTree\n    ]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BackForwardCacheNotUsed:\n        return cls(\n            loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n            frame_id=FrameId.from_json(json[\"frameId\"]),\n            not_restored_explanations=[\n                BackForwardCacheNotRestoredExplanation.from_json(i)\n                for i in json[\"notRestoredExplanations\"]\n            ],\n            not_restored_explanations_tree=(\n                BackForwardCacheNotRestoredExplanationTree.from_json(\n                    json[\"notRestoredExplanationsTree\"]\n                )\n                if json.get(\"notRestoredExplanationsTree\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotUsed.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotUsed.loader_id","title":"<code>loader_id: network.LoaderId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotUsed.not_restored_explanations","title":"<code>not_restored_explanations: typing.List[BackForwardCacheNotRestoredExplanation]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotUsed.not_restored_explanations_tree","title":"<code>not_restored_explanations_tree: typing.Optional[BackForwardCacheNotRestoredExplanationTree]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotUsed.__init__","title":"<code>__init__(loader_id, frame_id, not_restored_explanations, not_restored_explanations_tree)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.BackForwardCacheNotUsed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BackForwardCacheNotUsed:\n    return cls(\n        loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n        frame_id=FrameId.from_json(json[\"frameId\"]),\n        not_restored_explanations=[\n            BackForwardCacheNotRestoredExplanation.from_json(i)\n            for i in json[\"notRestoredExplanations\"]\n        ],\n        not_restored_explanations_tree=(\n            BackForwardCacheNotRestoredExplanationTree.from_json(\n                json[\"notRestoredExplanationsTree\"]\n            )\n            if json.get(\"notRestoredExplanationsTree\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationDisposition","title":"<code>ClientNavigationDisposition</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class ClientNavigationDisposition(enum.Enum):\n    CURRENT_TAB = \"currentTab\"\n    NEW_TAB = \"newTab\"\n    NEW_WINDOW = \"newWindow\"\n    DOWNLOAD = \"download\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ClientNavigationDisposition:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationDisposition.CURRENT_TAB","title":"<code>CURRENT_TAB = 'currentTab'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationDisposition.DOWNLOAD","title":"<code>DOWNLOAD = 'download'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationDisposition.NEW_TAB","title":"<code>NEW_TAB = 'newTab'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationDisposition.NEW_WINDOW","title":"<code>NEW_WINDOW = 'newWindow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationDisposition.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ClientNavigationDisposition:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationDisposition.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason","title":"<code>ClientNavigationReason</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class ClientNavigationReason(enum.Enum):\n    FORM_SUBMISSION_GET = \"formSubmissionGet\"\n    FORM_SUBMISSION_POST = \"formSubmissionPost\"\n    HTTP_HEADER_REFRESH = \"httpHeaderRefresh\"\n    SCRIPT_INITIATED = \"scriptInitiated\"\n    META_TAG_REFRESH = \"metaTagRefresh\"\n    PAGE_BLOCK_INTERSTITIAL = \"pageBlockInterstitial\"\n    RELOAD = \"reload\"\n    ANCHOR_CLICK = \"anchorClick\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ClientNavigationReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason.ANCHOR_CLICK","title":"<code>ANCHOR_CLICK = 'anchorClick'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason.FORM_SUBMISSION_GET","title":"<code>FORM_SUBMISSION_GET = 'formSubmissionGet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason.FORM_SUBMISSION_POST","title":"<code>FORM_SUBMISSION_POST = 'formSubmissionPost'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason.HTTP_HEADER_REFRESH","title":"<code>HTTP_HEADER_REFRESH = 'httpHeaderRefresh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason.META_TAG_REFRESH","title":"<code>META_TAG_REFRESH = 'metaTagRefresh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason.PAGE_BLOCK_INTERSTITIAL","title":"<code>PAGE_BLOCK_INTERSTITIAL = 'pageBlockInterstitial'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason.RELOAD","title":"<code>RELOAD = 'reload'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason.SCRIPT_INITIATED","title":"<code>SCRIPT_INITIATED = 'scriptInitiated'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ClientNavigationReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ClientNavigationReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheParams","title":"<code>CompilationCacheParams</code>  <code>dataclass</code>","text":"<p>Per-script compilation cache parameters for <code>Page.produceCompilationCache</code></p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass CompilationCacheParams:\n    \"\"\"\n    Per-script compilation cache parameters for ``Page.produceCompilationCache``\n    \"\"\"\n\n    #: The URL of the script to produce a compilation cache entry for.\n    url: str\n\n    #: A hint to the backend whether eager compilation is recommended.\n    #: (the actual compilation mode used is upon backend discretion).\n    eager: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        if self.eager is not None:\n            json[\"eager\"] = self.eager\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CompilationCacheParams:\n        return cls(\n            url=str(json[\"url\"]),\n            eager=bool(json[\"eager\"]) if json.get(\"eager\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheParams.eager","title":"<code>eager: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheParams.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheParams.__init__","title":"<code>__init__(url, eager=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheParams.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CompilationCacheParams:\n    return cls(\n        url=str(json[\"url\"]),\n        eager=bool(json[\"eager\"]) if json.get(\"eager\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheParams.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    if self.eager is not None:\n        json[\"eager\"] = self.eager\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheProduced","title":"<code>CompilationCacheProduced</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Issued for every compilation cache generated. Is only available if Page.setGenerateCompilationCache is enabled.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.compilationCacheProduced\")\n@dataclass\nclass CompilationCacheProduced:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Issued for every compilation cache generated. Is only available\n    if Page.setGenerateCompilationCache is enabled.\n    \"\"\"\n\n    url: str\n    #: Base64-encoded data (Encoded as a base64 string when passed over JSON)\n    data: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CompilationCacheProduced:\n        return cls(url=str(json[\"url\"]), data=str(json[\"data\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheProduced.data","title":"<code>data: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheProduced.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheProduced.__init__","title":"<code>__init__(url, data)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.CompilationCacheProduced.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CompilationCacheProduced:\n    return cls(url=str(json[\"url\"]), data=str(json[\"data\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.CrossOriginIsolatedContextType","title":"<code>CrossOriginIsolatedContextType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Indicates whether the frame is cross-origin isolated and why it is the case.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class CrossOriginIsolatedContextType(enum.Enum):\n    \"\"\"\n    Indicates whether the frame is cross-origin isolated and why it is the case.\n    \"\"\"\n\n    ISOLATED = \"Isolated\"\n    NOT_ISOLATED = \"NotIsolated\"\n    NOT_ISOLATED_FEATURE_DISABLED = \"NotIsolatedFeatureDisabled\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CrossOriginIsolatedContextType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.CrossOriginIsolatedContextType.ISOLATED","title":"<code>ISOLATED = 'Isolated'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.CrossOriginIsolatedContextType.NOT_ISOLATED","title":"<code>NOT_ISOLATED = 'NotIsolated'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.CrossOriginIsolatedContextType.NOT_ISOLATED_FEATURE_DISABLED","title":"<code>NOT_ISOLATED_FEATURE_DISABLED = 'NotIsolatedFeatureDisabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.CrossOriginIsolatedContextType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CrossOriginIsolatedContextType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.CrossOriginIsolatedContextType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DialogType","title":"<code>DialogType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Javascript dialog type.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class DialogType(enum.Enum):\n    \"\"\"\n    Javascript dialog type.\n    \"\"\"\n\n    ALERT = \"alert\"\n    CONFIRM = \"confirm\"\n    PROMPT = \"prompt\"\n    BEFOREUNLOAD = \"beforeunload\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; DialogType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DialogType.ALERT","title":"<code>ALERT = 'alert'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DialogType.BEFOREUNLOAD","title":"<code>BEFOREUNLOAD = 'beforeunload'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DialogType.CONFIRM","title":"<code>CONFIRM = 'confirm'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DialogType.PROMPT","title":"<code>PROMPT = 'prompt'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DialogType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; DialogType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DialogType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DocumentOpened","title":"<code>DocumentOpened</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when opening document to write to.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.documentOpened\")\n@dataclass\nclass DocumentOpened:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when opening document to write to.\n    \"\"\"\n\n    #: Frame object.\n    frame: Frame\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DocumentOpened:\n        return cls(frame=Frame.from_json(json[\"frame\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DocumentOpened.frame","title":"<code>frame: Frame</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DocumentOpened.__init__","title":"<code>__init__(frame)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DocumentOpened.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DocumentOpened:\n    return cls(frame=Frame.from_json(json[\"frame\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DomContentEventFired","title":"<code>DomContentEventFired</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.domContentEventFired\")\n@dataclass\nclass DomContentEventFired:\n    timestamp: network.MonotonicTime\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DomContentEventFired:\n        return cls(timestamp=network.MonotonicTime.from_json(json[\"timestamp\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DomContentEventFired.timestamp","title":"<code>timestamp: network.MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DomContentEventFired.__init__","title":"<code>__init__(timestamp)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DomContentEventFired.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DomContentEventFired:\n    return cls(timestamp=network.MonotonicTime.from_json(json[\"timestamp\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadProgress","title":"<code>DownloadProgress</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when download makes progress. Last call has <code>done</code> == true. Deprecated. Use Browser.downloadProgress instead.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\n@event_class(\"Page.downloadProgress\")\n@dataclass\nclass DownloadProgress:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when download makes progress. Last call has ``done`` == true.\n    Deprecated. Use Browser.downloadProgress instead.\n    \"\"\"\n\n    #: Global unique identifier of the download.\n    guid: str\n    #: Total expected bytes to download.\n    total_bytes: float\n    #: Total bytes received.\n    received_bytes: float\n    #: Download status.\n    state: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DownloadProgress:\n        return cls(\n            guid=str(json[\"guid\"]),\n            total_bytes=float(json[\"totalBytes\"]),\n            received_bytes=float(json[\"receivedBytes\"]),\n            state=str(json[\"state\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadProgress.guid","title":"<code>guid: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadProgress.received_bytes","title":"<code>received_bytes: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadProgress.state","title":"<code>state: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadProgress.total_bytes","title":"<code>total_bytes: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadProgress.__init__","title":"<code>__init__(guid, total_bytes, received_bytes, state)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadProgress.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DownloadProgress:\n    return cls(\n        guid=str(json[\"guid\"]),\n        total_bytes=float(json[\"totalBytes\"]),\n        received_bytes=float(json[\"receivedBytes\"]),\n        state=str(json[\"state\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadWillBegin","title":"<code>DownloadWillBegin</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when page is about to start a download. Deprecated. Use Browser.downloadWillBegin instead.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\n@event_class(\"Page.downloadWillBegin\")\n@dataclass\nclass DownloadWillBegin:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when page is about to start a download.\n    Deprecated. Use Browser.downloadWillBegin instead.\n    \"\"\"\n\n    #: Id of the frame that caused download to begin.\n    frame_id: FrameId\n    #: Global unique identifier of the download.\n    guid: str\n    #: URL of the resource being downloaded.\n    url: str\n    #: Suggested file name of the resource (the actual name of the file saved on disk may differ).\n    suggested_filename: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DownloadWillBegin:\n        return cls(\n            frame_id=FrameId.from_json(json[\"frameId\"]),\n            guid=str(json[\"guid\"]),\n            url=str(json[\"url\"]),\n            suggested_filename=str(json[\"suggestedFilename\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadWillBegin.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadWillBegin.guid","title":"<code>guid: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadWillBegin.suggested_filename","title":"<code>suggested_filename: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadWillBegin.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadWillBegin.__init__","title":"<code>__init__(frame_id, guid, url, suggested_filename)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.DownloadWillBegin.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DownloadWillBegin:\n    return cls(\n        frame_id=FrameId.from_json(json[\"frameId\"]),\n        guid=str(json[\"guid\"]),\n        url=str(json[\"url\"]),\n        suggested_filename=str(json[\"suggestedFilename\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FileChooserOpened","title":"<code>FileChooserOpened</code>  <code>dataclass</code>","text":"<p>Emitted only when <code>page.interceptFileChooser</code> is enabled.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.fileChooserOpened\")\n@dataclass\nclass FileChooserOpened:\n    \"\"\"\n    Emitted only when ``page.interceptFileChooser`` is enabled.\n    \"\"\"\n\n    #: Id of the frame containing input node.\n    frame_id: FrameId\n    #: Input mode.\n    mode: str\n    #: Input node id. Only present for file choosers opened via an ``&lt;input type=\"file\"&gt;`` element.\n    backend_node_id: typing.Optional[dom.BackendNodeId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FileChooserOpened:\n        return cls(\n            frame_id=FrameId.from_json(json[\"frameId\"]),\n            mode=str(json[\"mode\"]),\n            backend_node_id=(\n                dom.BackendNodeId.from_json(json[\"backendNodeId\"])\n                if json.get(\"backendNodeId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FileChooserOpened.backend_node_id","title":"<code>backend_node_id: typing.Optional[dom.BackendNodeId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileChooserOpened.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileChooserOpened.mode","title":"<code>mode: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileChooserOpened.__init__","title":"<code>__init__(frame_id, mode, backend_node_id)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileChooserOpened.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FileChooserOpened:\n    return cls(\n        frame_id=FrameId.from_json(json[\"frameId\"]),\n        mode=str(json[\"mode\"]),\n        backend_node_id=(\n            dom.BackendNodeId.from_json(json[\"backendNodeId\"])\n            if json.get(\"backendNodeId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FileFilter","title":"<code>FileFilter</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass FileFilter:\n    name: typing.Optional[str] = None\n\n    accepts: typing.Optional[typing.List[str]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.name is not None:\n            json[\"name\"] = self.name\n        if self.accepts is not None:\n            json[\"accepts\"] = [i for i in self.accepts]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FileFilter:\n        return cls(\n            name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n            accepts=(\n                [str(i) for i in json[\"accepts\"]]\n                if json.get(\"accepts\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FileFilter.accepts","title":"<code>accepts: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileFilter.name","title":"<code>name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileFilter.__init__","title":"<code>__init__(name=None, accepts=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileFilter.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FileFilter:\n    return cls(\n        name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n        accepts=(\n            [str(i) for i in json[\"accepts\"]]\n            if json.get(\"accepts\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FileFilter.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.name is not None:\n        json[\"name\"] = self.name\n    if self.accepts is not None:\n        json[\"accepts\"] = [i for i in self.accepts]\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FileHandler","title":"<code>FileHandler</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass FileHandler:\n    action: str\n\n    name: str\n\n    #: Won't repeat the enums, using string for easy comparison. Same as the\n    #: other enums below.\n    launch_type: str\n\n    icons: typing.Optional[typing.List[ImageResource]] = None\n\n    #: Mimic a map, name is the key, accepts is the value.\n    accepts: typing.Optional[typing.List[FileFilter]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"action\"] = self.action\n        json[\"name\"] = self.name\n        json[\"launchType\"] = self.launch_type\n        if self.icons is not None:\n            json[\"icons\"] = [i.to_json() for i in self.icons]\n        if self.accepts is not None:\n            json[\"accepts\"] = [i.to_json() for i in self.accepts]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FileHandler:\n        return cls(\n            action=str(json[\"action\"]),\n            name=str(json[\"name\"]),\n            launch_type=str(json[\"launchType\"]),\n            icons=(\n                [ImageResource.from_json(i) for i in json[\"icons\"]]\n                if json.get(\"icons\", None) is not None\n                else None\n            ),\n            accepts=(\n                [FileFilter.from_json(i) for i in json[\"accepts\"]]\n                if json.get(\"accepts\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FileHandler.accepts","title":"<code>accepts: typing.Optional[typing.List[FileFilter]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileHandler.action","title":"<code>action: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileHandler.icons","title":"<code>icons: typing.Optional[typing.List[ImageResource]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileHandler.launch_type","title":"<code>launch_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileHandler.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileHandler.__init__","title":"<code>__init__(action, name, launch_type, icons=None, accepts=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FileHandler.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FileHandler:\n    return cls(\n        action=str(json[\"action\"]),\n        name=str(json[\"name\"]),\n        launch_type=str(json[\"launchType\"]),\n        icons=(\n            [ImageResource.from_json(i) for i in json[\"icons\"]]\n            if json.get(\"icons\", None) is not None\n            else None\n        ),\n        accepts=(\n            [FileFilter.from_json(i) for i in json[\"accepts\"]]\n            if json.get(\"accepts\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FileHandler.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"action\"] = self.action\n    json[\"name\"] = self.name\n    json[\"launchType\"] = self.launch_type\n    if self.icons is not None:\n        json[\"icons\"] = [i.to_json() for i in self.icons]\n    if self.accepts is not None:\n        json[\"accepts\"] = [i.to_json() for i in self.accepts]\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies","title":"<code>FontFamilies</code>  <code>dataclass</code>","text":"<p>Generic font families collection.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass FontFamilies:\n    \"\"\"\n    Generic font families collection.\n    \"\"\"\n\n    #: The standard font-family.\n    standard: typing.Optional[str] = None\n\n    #: The fixed font-family.\n    fixed: typing.Optional[str] = None\n\n    #: The serif font-family.\n    serif: typing.Optional[str] = None\n\n    #: The sansSerif font-family.\n    sans_serif: typing.Optional[str] = None\n\n    #: The cursive font-family.\n    cursive: typing.Optional[str] = None\n\n    #: The fantasy font-family.\n    fantasy: typing.Optional[str] = None\n\n    #: The math font-family.\n    math: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.standard is not None:\n            json[\"standard\"] = self.standard\n        if self.fixed is not None:\n            json[\"fixed\"] = self.fixed\n        if self.serif is not None:\n            json[\"serif\"] = self.serif\n        if self.sans_serif is not None:\n            json[\"sansSerif\"] = self.sans_serif\n        if self.cursive is not None:\n            json[\"cursive\"] = self.cursive\n        if self.fantasy is not None:\n            json[\"fantasy\"] = self.fantasy\n        if self.math is not None:\n            json[\"math\"] = self.math\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FontFamilies:\n        return cls(\n            standard=(\n                str(json[\"standard\"])\n                if json.get(\"standard\", None) is not None\n                else None\n            ),\n            fixed=str(json[\"fixed\"]) if json.get(\"fixed\", None) is not None else None,\n            serif=str(json[\"serif\"]) if json.get(\"serif\", None) is not None else None,\n            sans_serif=(\n                str(json[\"sansSerif\"])\n                if json.get(\"sansSerif\", None) is not None\n                else None\n            ),\n            cursive=(\n                str(json[\"cursive\"]) if json.get(\"cursive\", None) is not None else None\n            ),\n            fantasy=(\n                str(json[\"fantasy\"]) if json.get(\"fantasy\", None) is not None else None\n            ),\n            math=str(json[\"math\"]) if json.get(\"math\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies.cursive","title":"<code>cursive: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies.fantasy","title":"<code>fantasy: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies.fixed","title":"<code>fixed: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies.math","title":"<code>math: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies.sans_serif","title":"<code>sans_serif: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies.serif","title":"<code>serif: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies.standard","title":"<code>standard: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies.__init__","title":"<code>__init__(standard=None, fixed=None, serif=None, sans_serif=None, cursive=None, fantasy=None, math=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FontFamilies:\n    return cls(\n        standard=(\n            str(json[\"standard\"])\n            if json.get(\"standard\", None) is not None\n            else None\n        ),\n        fixed=str(json[\"fixed\"]) if json.get(\"fixed\", None) is not None else None,\n        serif=str(json[\"serif\"]) if json.get(\"serif\", None) is not None else None,\n        sans_serif=(\n            str(json[\"sansSerif\"])\n            if json.get(\"sansSerif\", None) is not None\n            else None\n        ),\n        cursive=(\n            str(json[\"cursive\"]) if json.get(\"cursive\", None) is not None else None\n        ),\n        fantasy=(\n            str(json[\"fantasy\"]) if json.get(\"fantasy\", None) is not None else None\n        ),\n        math=str(json[\"math\"]) if json.get(\"math\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FontFamilies.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.standard is not None:\n        json[\"standard\"] = self.standard\n    if self.fixed is not None:\n        json[\"fixed\"] = self.fixed\n    if self.serif is not None:\n        json[\"serif\"] = self.serif\n    if self.sans_serif is not None:\n        json[\"sansSerif\"] = self.sans_serif\n    if self.cursive is not None:\n        json[\"cursive\"] = self.cursive\n    if self.fantasy is not None:\n        json[\"fantasy\"] = self.fantasy\n    if self.math is not None:\n        json[\"math\"] = self.math\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FontSizes","title":"<code>FontSizes</code>  <code>dataclass</code>","text":"<p>Default font sizes.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass FontSizes:\n    \"\"\"\n    Default font sizes.\n    \"\"\"\n\n    #: Default standard font size.\n    standard: typing.Optional[int] = None\n\n    #: Default fixed font size.\n    fixed: typing.Optional[int] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.standard is not None:\n            json[\"standard\"] = self.standard\n        if self.fixed is not None:\n            json[\"fixed\"] = self.fixed\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FontSizes:\n        return cls(\n            standard=(\n                int(json[\"standard\"])\n                if json.get(\"standard\", None) is not None\n                else None\n            ),\n            fixed=int(json[\"fixed\"]) if json.get(\"fixed\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FontSizes.fixed","title":"<code>fixed: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontSizes.standard","title":"<code>standard: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontSizes.__init__","title":"<code>__init__(standard=None, fixed=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FontSizes.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FontSizes:\n    return cls(\n        standard=(\n            int(json[\"standard\"])\n            if json.get(\"standard\", None) is not None\n            else None\n        ),\n        fixed=int(json[\"fixed\"]) if json.get(\"fixed\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FontSizes.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.standard is not None:\n        json[\"standard\"] = self.standard\n    if self.fixed is not None:\n        json[\"fixed\"] = self.fixed\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame","title":"<code>Frame</code>  <code>dataclass</code>","text":"<p>Information about the Frame on the page.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass Frame:\n    \"\"\"\n    Information about the Frame on the page.\n    \"\"\"\n\n    #: Frame unique identifier.\n    id_: FrameId\n\n    #: Identifier of the loader associated with this frame.\n    loader_id: network.LoaderId\n\n    #: Frame document's URL without fragment.\n    url: str\n\n    #: Frame document's registered domain, taking the public suffixes list into account.\n    #: Extracted from the Frame's url.\n    #: Example URLs: http://www.google.com/file.html -&gt; \"google.com\"\n    #:               http://a.b.co.uk/file.html      -&gt; \"b.co.uk\"\n    domain_and_registry: str\n\n    #: Frame document's security origin.\n    security_origin: str\n\n    #: Frame document's mimeType as determined by the browser.\n    mime_type: str\n\n    #: Indicates whether the main document is a secure context and explains why that is the case.\n    secure_context_type: SecureContextType\n\n    #: Indicates whether this is a cross origin isolated context.\n    cross_origin_isolated_context_type: CrossOriginIsolatedContextType\n\n    #: Indicated which gated APIs / features are available.\n    gated_api_features: typing.List[GatedAPIFeatures]\n\n    #: Parent frame identifier.\n    parent_id: typing.Optional[FrameId] = None\n\n    #: Frame's name as specified in the tag.\n    name: typing.Optional[str] = None\n\n    #: Frame document's URL fragment including the '#'.\n    url_fragment: typing.Optional[str] = None\n\n    #: If the frame failed to load, this contains the URL that could not be loaded. Note that unlike url above, this URL may contain a fragment.\n    unreachable_url: typing.Optional[str] = None\n\n    #: Indicates whether this frame was tagged as an ad and why.\n    ad_frame_status: typing.Optional[AdFrameStatus] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"id\"] = self.id_.to_json()\n        json[\"loaderId\"] = self.loader_id.to_json()\n        json[\"url\"] = self.url\n        json[\"domainAndRegistry\"] = self.domain_and_registry\n        json[\"securityOrigin\"] = self.security_origin\n        json[\"mimeType\"] = self.mime_type\n        json[\"secureContextType\"] = self.secure_context_type.to_json()\n        json[\"crossOriginIsolatedContextType\"] = (\n            self.cross_origin_isolated_context_type.to_json()\n        )\n        json[\"gatedAPIFeatures\"] = [i.to_json() for i in self.gated_api_features]\n        if self.parent_id is not None:\n            json[\"parentId\"] = self.parent_id.to_json()\n        if self.name is not None:\n            json[\"name\"] = self.name\n        if self.url_fragment is not None:\n            json[\"urlFragment\"] = self.url_fragment\n        if self.unreachable_url is not None:\n            json[\"unreachableUrl\"] = self.unreachable_url\n        if self.ad_frame_status is not None:\n            json[\"adFrameStatus\"] = self.ad_frame_status.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Frame:\n        return cls(\n            id_=FrameId.from_json(json[\"id\"]),\n            loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n            url=str(json[\"url\"]),\n            domain_and_registry=str(json[\"domainAndRegistry\"]),\n            security_origin=str(json[\"securityOrigin\"]),\n            mime_type=str(json[\"mimeType\"]),\n            secure_context_type=SecureContextType.from_json(json[\"secureContextType\"]),\n            cross_origin_isolated_context_type=CrossOriginIsolatedContextType.from_json(\n                json[\"crossOriginIsolatedContextType\"]\n            ),\n            gated_api_features=[\n                GatedAPIFeatures.from_json(i) for i in json[\"gatedAPIFeatures\"]\n            ],\n            parent_id=(\n                FrameId.from_json(json[\"parentId\"])\n                if json.get(\"parentId\", None) is not None\n                else None\n            ),\n            name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n            url_fragment=(\n                str(json[\"urlFragment\"])\n                if json.get(\"urlFragment\", None) is not None\n                else None\n            ),\n            unreachable_url=(\n                str(json[\"unreachableUrl\"])\n                if json.get(\"unreachableUrl\", None) is not None\n                else None\n            ),\n            ad_frame_status=(\n                AdFrameStatus.from_json(json[\"adFrameStatus\"])\n                if json.get(\"adFrameStatus\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.ad_frame_status","title":"<code>ad_frame_status: typing.Optional[AdFrameStatus] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.cross_origin_isolated_context_type","title":"<code>cross_origin_isolated_context_type: CrossOriginIsolatedContextType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.domain_and_registry","title":"<code>domain_and_registry: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.gated_api_features","title":"<code>gated_api_features: typing.List[GatedAPIFeatures]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.id_","title":"<code>id_: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.loader_id","title":"<code>loader_id: network.LoaderId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.mime_type","title":"<code>mime_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.name","title":"<code>name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.parent_id","title":"<code>parent_id: typing.Optional[FrameId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.secure_context_type","title":"<code>secure_context_type: SecureContextType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.security_origin","title":"<code>security_origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.unreachable_url","title":"<code>unreachable_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.url_fragment","title":"<code>url_fragment: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.__init__","title":"<code>__init__(id_, loader_id, url, domain_and_registry, security_origin, mime_type, secure_context_type, cross_origin_isolated_context_type, gated_api_features, parent_id=None, name=None, url_fragment=None, unreachable_url=None, ad_frame_status=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Frame:\n    return cls(\n        id_=FrameId.from_json(json[\"id\"]),\n        loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n        url=str(json[\"url\"]),\n        domain_and_registry=str(json[\"domainAndRegistry\"]),\n        security_origin=str(json[\"securityOrigin\"]),\n        mime_type=str(json[\"mimeType\"]),\n        secure_context_type=SecureContextType.from_json(json[\"secureContextType\"]),\n        cross_origin_isolated_context_type=CrossOriginIsolatedContextType.from_json(\n            json[\"crossOriginIsolatedContextType\"]\n        ),\n        gated_api_features=[\n            GatedAPIFeatures.from_json(i) for i in json[\"gatedAPIFeatures\"]\n        ],\n        parent_id=(\n            FrameId.from_json(json[\"parentId\"])\n            if json.get(\"parentId\", None) is not None\n            else None\n        ),\n        name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n        url_fragment=(\n            str(json[\"urlFragment\"])\n            if json.get(\"urlFragment\", None) is not None\n            else None\n        ),\n        unreachable_url=(\n            str(json[\"unreachableUrl\"])\n            if json.get(\"unreachableUrl\", None) is not None\n            else None\n        ),\n        ad_frame_status=(\n            AdFrameStatus.from_json(json[\"adFrameStatus\"])\n            if json.get(\"adFrameStatus\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Frame.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"id\"] = self.id_.to_json()\n    json[\"loaderId\"] = self.loader_id.to_json()\n    json[\"url\"] = self.url\n    json[\"domainAndRegistry\"] = self.domain_and_registry\n    json[\"securityOrigin\"] = self.security_origin\n    json[\"mimeType\"] = self.mime_type\n    json[\"secureContextType\"] = self.secure_context_type.to_json()\n    json[\"crossOriginIsolatedContextType\"] = (\n        self.cross_origin_isolated_context_type.to_json()\n    )\n    json[\"gatedAPIFeatures\"] = [i.to_json() for i in self.gated_api_features]\n    if self.parent_id is not None:\n        json[\"parentId\"] = self.parent_id.to_json()\n    if self.name is not None:\n        json[\"name\"] = self.name\n    if self.url_fragment is not None:\n        json[\"urlFragment\"] = self.url_fragment\n    if self.unreachable_url is not None:\n        json[\"unreachableUrl\"] = self.unreachable_url\n    if self.ad_frame_status is not None:\n        json[\"adFrameStatus\"] = self.ad_frame_status.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameAttached","title":"<code>FrameAttached</code>  <code>dataclass</code>","text":"<p>Fired when frame has been attached to its parent.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.frameAttached\")\n@dataclass\nclass FrameAttached:\n    \"\"\"\n    Fired when frame has been attached to its parent.\n    \"\"\"\n\n    #: Id of the frame that has been attached.\n    frame_id: FrameId\n    #: Parent frame identifier.\n    parent_frame_id: FrameId\n    #: JavaScript stack trace of when frame was attached, only set if frame initiated from script.\n    stack: typing.Optional[runtime.StackTrace]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameAttached:\n        return cls(\n            frame_id=FrameId.from_json(json[\"frameId\"]),\n            parent_frame_id=FrameId.from_json(json[\"parentFrameId\"]),\n            stack=(\n                runtime.StackTrace.from_json(json[\"stack\"])\n                if json.get(\"stack\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameAttached.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameAttached.parent_frame_id","title":"<code>parent_frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameAttached.stack","title":"<code>stack: typing.Optional[runtime.StackTrace]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameAttached.__init__","title":"<code>__init__(frame_id, parent_frame_id, stack)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameAttached.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameAttached:\n    return cls(\n        frame_id=FrameId.from_json(json[\"frameId\"]),\n        parent_frame_id=FrameId.from_json(json[\"parentFrameId\"]),\n        stack=(\n            runtime.StackTrace.from_json(json[\"stack\"])\n            if json.get(\"stack\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameClearedScheduledNavigation","title":"<code>FrameClearedScheduledNavigation</code>  <code>dataclass</code>","text":"<p>Fired when frame no longer has a scheduled navigation.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\n@event_class(\"Page.frameClearedScheduledNavigation\")\n@dataclass\nclass FrameClearedScheduledNavigation:\n    \"\"\"\n    Fired when frame no longer has a scheduled navigation.\n    \"\"\"\n\n    #: Id of the frame that has cleared its scheduled navigation.\n    frame_id: FrameId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameClearedScheduledNavigation:\n        return cls(frame_id=FrameId.from_json(json[\"frameId\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameClearedScheduledNavigation.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameClearedScheduledNavigation.__init__","title":"<code>__init__(frame_id)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameClearedScheduledNavigation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameClearedScheduledNavigation:\n    return cls(frame_id=FrameId.from_json(json[\"frameId\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameDetached","title":"<code>FrameDetached</code>  <code>dataclass</code>","text":"<p>Fired when frame has been detached from its parent.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.frameDetached\")\n@dataclass\nclass FrameDetached:\n    \"\"\"\n    Fired when frame has been detached from its parent.\n    \"\"\"\n\n    #: Id of the frame that has been detached.\n    frame_id: FrameId\n    reason: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameDetached:\n        return cls(\n            frame_id=FrameId.from_json(json[\"frameId\"]), reason=str(json[\"reason\"])\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameDetached.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameDetached.reason","title":"<code>reason: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameDetached.__init__","title":"<code>__init__(frame_id, reason)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameDetached.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameDetached:\n    return cls(\n        frame_id=FrameId.from_json(json[\"frameId\"]), reason=str(json[\"reason\"])\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameId","title":"<code>FrameId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique frame identifier.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class FrameId(str):\n    \"\"\"\n    Unique frame identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; FrameId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"FrameId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def __repr__(self):\n    return \"FrameId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; FrameId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameNavigated","title":"<code>FrameNavigated</code>  <code>dataclass</code>","text":"<p>Fired once navigation of the frame has completed. Frame is now associated with the new loader.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.frameNavigated\")\n@dataclass\nclass FrameNavigated:\n    \"\"\"\n    Fired once navigation of the frame has completed. Frame is now associated with the new loader.\n    \"\"\"\n\n    #: Frame object.\n    frame: Frame\n    type_: NavigationType\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameNavigated:\n        return cls(\n            frame=Frame.from_json(json[\"frame\"]),\n            type_=NavigationType.from_json(json[\"type\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameNavigated.frame","title":"<code>frame: Frame</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameNavigated.type_","title":"<code>type_: NavigationType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameNavigated.__init__","title":"<code>__init__(frame, type_)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameNavigated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameNavigated:\n    return cls(\n        frame=Frame.from_json(json[\"frame\"]),\n        type_=NavigationType.from_json(json[\"type\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameRequestedNavigation","title":"<code>FrameRequestedNavigation</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when a renderer-initiated navigation is requested. Navigation may still be cancelled after the event is issued.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.frameRequestedNavigation\")\n@dataclass\nclass FrameRequestedNavigation:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when a renderer-initiated navigation is requested.\n    Navigation may still be cancelled after the event is issued.\n    \"\"\"\n\n    #: Id of the frame that is being navigated.\n    frame_id: FrameId\n    #: The reason for the navigation.\n    reason: ClientNavigationReason\n    #: The destination URL for the requested navigation.\n    url: str\n    #: The disposition for the navigation.\n    disposition: ClientNavigationDisposition\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameRequestedNavigation:\n        return cls(\n            frame_id=FrameId.from_json(json[\"frameId\"]),\n            reason=ClientNavigationReason.from_json(json[\"reason\"]),\n            url=str(json[\"url\"]),\n            disposition=ClientNavigationDisposition.from_json(json[\"disposition\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameRequestedNavigation.disposition","title":"<code>disposition: ClientNavigationDisposition</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameRequestedNavigation.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameRequestedNavigation.reason","title":"<code>reason: ClientNavigationReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameRequestedNavigation.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameRequestedNavigation.__init__","title":"<code>__init__(frame_id, reason, url, disposition)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameRequestedNavigation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameRequestedNavigation:\n    return cls(\n        frame_id=FrameId.from_json(json[\"frameId\"]),\n        reason=ClientNavigationReason.from_json(json[\"reason\"]),\n        url=str(json[\"url\"]),\n        disposition=ClientNavigationDisposition.from_json(json[\"disposition\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResized","title":"<code>FrameResized</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.frameResized\")\n@dataclass\nclass FrameResized:\n    \"\"\"\n    **EXPERIMENTAL**\n\n\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameResized:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResized.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResized.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameResized:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource","title":"<code>FrameResource</code>  <code>dataclass</code>","text":"<p>Information about the Resource on the page.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass FrameResource:\n    \"\"\"\n    Information about the Resource on the page.\n    \"\"\"\n\n    #: Resource URL.\n    url: str\n\n    #: Type of this resource.\n    type_: network.ResourceType\n\n    #: Resource mimeType as determined by the browser.\n    mime_type: str\n\n    #: last-modified timestamp as reported by server.\n    last_modified: typing.Optional[network.TimeSinceEpoch] = None\n\n    #: Resource content size.\n    content_size: typing.Optional[float] = None\n\n    #: True if the resource failed to load.\n    failed: typing.Optional[bool] = None\n\n    #: True if the resource was canceled during loading.\n    canceled: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        json[\"type\"] = self.type_.to_json()\n        json[\"mimeType\"] = self.mime_type\n        if self.last_modified is not None:\n            json[\"lastModified\"] = self.last_modified.to_json()\n        if self.content_size is not None:\n            json[\"contentSize\"] = self.content_size\n        if self.failed is not None:\n            json[\"failed\"] = self.failed\n        if self.canceled is not None:\n            json[\"canceled\"] = self.canceled\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameResource:\n        return cls(\n            url=str(json[\"url\"]),\n            type_=network.ResourceType.from_json(json[\"type\"]),\n            mime_type=str(json[\"mimeType\"]),\n            last_modified=(\n                network.TimeSinceEpoch.from_json(json[\"lastModified\"])\n                if json.get(\"lastModified\", None) is not None\n                else None\n            ),\n            content_size=(\n                float(json[\"contentSize\"])\n                if json.get(\"contentSize\", None) is not None\n                else None\n            ),\n            failed=(\n                bool(json[\"failed\"]) if json.get(\"failed\", None) is not None else None\n            ),\n            canceled=(\n                bool(json[\"canceled\"])\n                if json.get(\"canceled\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource.canceled","title":"<code>canceled: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource.content_size","title":"<code>content_size: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource.failed","title":"<code>failed: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource.last_modified","title":"<code>last_modified: typing.Optional[network.TimeSinceEpoch] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource.mime_type","title":"<code>mime_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource.type_","title":"<code>type_: network.ResourceType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource.__init__","title":"<code>__init__(url, type_, mime_type, last_modified=None, content_size=None, failed=None, canceled=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameResource:\n    return cls(\n        url=str(json[\"url\"]),\n        type_=network.ResourceType.from_json(json[\"type\"]),\n        mime_type=str(json[\"mimeType\"]),\n        last_modified=(\n            network.TimeSinceEpoch.from_json(json[\"lastModified\"])\n            if json.get(\"lastModified\", None) is not None\n            else None\n        ),\n        content_size=(\n            float(json[\"contentSize\"])\n            if json.get(\"contentSize\", None) is not None\n            else None\n        ),\n        failed=(\n            bool(json[\"failed\"]) if json.get(\"failed\", None) is not None else None\n        ),\n        canceled=(\n            bool(json[\"canceled\"])\n            if json.get(\"canceled\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResource.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    json[\"type\"] = self.type_.to_json()\n    json[\"mimeType\"] = self.mime_type\n    if self.last_modified is not None:\n        json[\"lastModified\"] = self.last_modified.to_json()\n    if self.content_size is not None:\n        json[\"contentSize\"] = self.content_size\n    if self.failed is not None:\n        json[\"failed\"] = self.failed\n    if self.canceled is not None:\n        json[\"canceled\"] = self.canceled\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResourceTree","title":"<code>FrameResourceTree</code>  <code>dataclass</code>","text":"<p>Information about the Frame hierarchy along with their cached resources.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass FrameResourceTree:\n    \"\"\"\n    Information about the Frame hierarchy along with their cached resources.\n    \"\"\"\n\n    #: Frame information for this tree item.\n    frame: Frame\n\n    #: Information about frame resources.\n    resources: typing.List[FrameResource]\n\n    #: Child frames.\n    child_frames: typing.Optional[typing.List[FrameResourceTree]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"frame\"] = self.frame.to_json()\n        json[\"resources\"] = [i.to_json() for i in self.resources]\n        if self.child_frames is not None:\n            json[\"childFrames\"] = [i.to_json() for i in self.child_frames]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameResourceTree:\n        return cls(\n            frame=Frame.from_json(json[\"frame\"]),\n            resources=[FrameResource.from_json(i) for i in json[\"resources\"]],\n            child_frames=(\n                [FrameResourceTree.from_json(i) for i in json[\"childFrames\"]]\n                if json.get(\"childFrames\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResourceTree.child_frames","title":"<code>child_frames: typing.Optional[typing.List[FrameResourceTree]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResourceTree.frame","title":"<code>frame: Frame</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResourceTree.resources","title":"<code>resources: typing.List[FrameResource]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResourceTree.__init__","title":"<code>__init__(frame, resources, child_frames=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResourceTree.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameResourceTree:\n    return cls(\n        frame=Frame.from_json(json[\"frame\"]),\n        resources=[FrameResource.from_json(i) for i in json[\"resources\"]],\n        child_frames=(\n            [FrameResourceTree.from_json(i) for i in json[\"childFrames\"]]\n            if json.get(\"childFrames\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameResourceTree.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"frame\"] = self.frame.to_json()\n    json[\"resources\"] = [i.to_json() for i in self.resources]\n    if self.child_frames is not None:\n        json[\"childFrames\"] = [i.to_json() for i in self.child_frames]\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameScheduledNavigation","title":"<code>FrameScheduledNavigation</code>  <code>dataclass</code>","text":"<p>Fired when frame schedules a potential navigation.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\n@event_class(\"Page.frameScheduledNavigation\")\n@dataclass\nclass FrameScheduledNavigation:\n    \"\"\"\n    Fired when frame schedules a potential navigation.\n    \"\"\"\n\n    #: Id of the frame that has scheduled a navigation.\n    frame_id: FrameId\n    #: Delay (in seconds) until the navigation is scheduled to begin. The navigation is not\n    #: guaranteed to start.\n    delay: float\n    #: The reason for the navigation.\n    reason: ClientNavigationReason\n    #: The destination URL for the scheduled navigation.\n    url: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameScheduledNavigation:\n        return cls(\n            frame_id=FrameId.from_json(json[\"frameId\"]),\n            delay=float(json[\"delay\"]),\n            reason=ClientNavigationReason.from_json(json[\"reason\"]),\n            url=str(json[\"url\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameScheduledNavigation.delay","title":"<code>delay: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameScheduledNavigation.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameScheduledNavigation.reason","title":"<code>reason: ClientNavigationReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameScheduledNavigation.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameScheduledNavigation.__init__","title":"<code>__init__(frame_id, delay, reason, url)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameScheduledNavigation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameScheduledNavigation:\n    return cls(\n        frame_id=FrameId.from_json(json[\"frameId\"]),\n        delay=float(json[\"delay\"]),\n        reason=ClientNavigationReason.from_json(json[\"reason\"]),\n        url=str(json[\"url\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameStartedLoading","title":"<code>FrameStartedLoading</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when frame has started loading.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.frameStartedLoading\")\n@dataclass\nclass FrameStartedLoading:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when frame has started loading.\n    \"\"\"\n\n    #: Id of the frame that has started loading.\n    frame_id: FrameId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameStartedLoading:\n        return cls(frame_id=FrameId.from_json(json[\"frameId\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameStartedLoading.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameStartedLoading.__init__","title":"<code>__init__(frame_id)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameStartedLoading.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameStartedLoading:\n    return cls(frame_id=FrameId.from_json(json[\"frameId\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameStoppedLoading","title":"<code>FrameStoppedLoading</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when frame has stopped loading.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.frameStoppedLoading\")\n@dataclass\nclass FrameStoppedLoading:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when frame has stopped loading.\n    \"\"\"\n\n    #: Id of the frame that has stopped loading.\n    frame_id: FrameId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameStoppedLoading:\n        return cls(frame_id=FrameId.from_json(json[\"frameId\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameStoppedLoading.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameStoppedLoading.__init__","title":"<code>__init__(frame_id)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameStoppedLoading.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameStoppedLoading:\n    return cls(frame_id=FrameId.from_json(json[\"frameId\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameTree","title":"<code>FrameTree</code>  <code>dataclass</code>","text":"<p>Information about the Frame hierarchy.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass FrameTree:\n    \"\"\"\n    Information about the Frame hierarchy.\n    \"\"\"\n\n    #: Frame information for this tree item.\n    frame: Frame\n\n    #: Child frames.\n    child_frames: typing.Optional[typing.List[FrameTree]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"frame\"] = self.frame.to_json()\n        if self.child_frames is not None:\n            json[\"childFrames\"] = [i.to_json() for i in self.child_frames]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FrameTree:\n        return cls(\n            frame=Frame.from_json(json[\"frame\"]),\n            child_frames=(\n                [FrameTree.from_json(i) for i in json[\"childFrames\"]]\n                if json.get(\"childFrames\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameTree.child_frames","title":"<code>child_frames: typing.Optional[typing.List[FrameTree]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameTree.frame","title":"<code>frame: Frame</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameTree.__init__","title":"<code>__init__(frame, child_frames=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameTree.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FrameTree:\n    return cls(\n        frame=Frame.from_json(json[\"frame\"]),\n        child_frames=(\n            [FrameTree.from_json(i) for i in json[\"childFrames\"]]\n            if json.get(\"childFrames\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.FrameTree.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"frame\"] = self.frame.to_json()\n    if self.child_frames is not None:\n        json[\"childFrames\"] = [i.to_json() for i in self.child_frames]\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.GatedAPIFeatures","title":"<code>GatedAPIFeatures</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class GatedAPIFeatures(enum.Enum):\n    SHARED_ARRAY_BUFFERS = \"SharedArrayBuffers\"\n    SHARED_ARRAY_BUFFERS_TRANSFER_ALLOWED = \"SharedArrayBuffersTransferAllowed\"\n    PERFORMANCE_MEASURE_MEMORY = \"PerformanceMeasureMemory\"\n    PERFORMANCE_PROFILE = \"PerformanceProfile\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; GatedAPIFeatures:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.GatedAPIFeatures.PERFORMANCE_MEASURE_MEMORY","title":"<code>PERFORMANCE_MEASURE_MEMORY = 'PerformanceMeasureMemory'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.GatedAPIFeatures.PERFORMANCE_PROFILE","title":"<code>PERFORMANCE_PROFILE = 'PerformanceProfile'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.GatedAPIFeatures.SHARED_ARRAY_BUFFERS","title":"<code>SHARED_ARRAY_BUFFERS = 'SharedArrayBuffers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.GatedAPIFeatures.SHARED_ARRAY_BUFFERS_TRANSFER_ALLOWED","title":"<code>SHARED_ARRAY_BUFFERS_TRANSFER_ALLOWED = 'SharedArrayBuffersTransferAllowed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.GatedAPIFeatures.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; GatedAPIFeatures:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.GatedAPIFeatures.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ImageResource","title":"<code>ImageResource</code>  <code>dataclass</code>","text":"<p>The image definition used in both icon and screenshot.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass ImageResource:\n    \"\"\"\n    The image definition used in both icon and screenshot.\n    \"\"\"\n\n    #: The src field in the definition, but changing to url in favor of\n    #: consistency.\n    url: str\n\n    sizes: typing.Optional[str] = None\n\n    type_: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        if self.sizes is not None:\n            json[\"sizes\"] = self.sizes\n        if self.type_ is not None:\n            json[\"type\"] = self.type_\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ImageResource:\n        return cls(\n            url=str(json[\"url\"]),\n            sizes=str(json[\"sizes\"]) if json.get(\"sizes\", None) is not None else None,\n            type_=str(json[\"type\"]) if json.get(\"type\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ImageResource.sizes","title":"<code>sizes: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ImageResource.type_","title":"<code>type_: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ImageResource.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ImageResource.__init__","title":"<code>__init__(url, sizes=None, type_=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ImageResource.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ImageResource:\n    return cls(\n        url=str(json[\"url\"]),\n        sizes=str(json[\"sizes\"]) if json.get(\"sizes\", None) is not None else None,\n        type_=str(json[\"type\"]) if json.get(\"type\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ImageResource.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    if self.sizes is not None:\n        json[\"sizes\"] = self.sizes\n    if self.type_ is not None:\n        json[\"type\"] = self.type_\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityError","title":"<code>InstallabilityError</code>  <code>dataclass</code>","text":"<p>The installability error</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass InstallabilityError:\n    \"\"\"\n    The installability error\n    \"\"\"\n\n    #: The error id (e.g. 'manifest-missing-suitable-icon').\n    error_id: str\n\n    #: The list of error arguments (e.g. {name:'minimum-icon-size-in-pixels', value:'64'}).\n    error_arguments: typing.List[InstallabilityErrorArgument]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"errorId\"] = self.error_id\n        json[\"errorArguments\"] = [i.to_json() for i in self.error_arguments]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InstallabilityError:\n        return cls(\n            error_id=str(json[\"errorId\"]),\n            error_arguments=[\n                InstallabilityErrorArgument.from_json(i) for i in json[\"errorArguments\"]\n            ],\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityError.error_arguments","title":"<code>error_arguments: typing.List[InstallabilityErrorArgument]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityError.error_id","title":"<code>error_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityError.__init__","title":"<code>__init__(error_id, error_arguments)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityError.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InstallabilityError:\n    return cls(\n        error_id=str(json[\"errorId\"]),\n        error_arguments=[\n            InstallabilityErrorArgument.from_json(i) for i in json[\"errorArguments\"]\n        ],\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityError.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"errorId\"] = self.error_id\n    json[\"errorArguments\"] = [i.to_json() for i in self.error_arguments]\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityErrorArgument","title":"<code>InstallabilityErrorArgument</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass InstallabilityErrorArgument:\n    #: Argument name (e.g. name:'minimum-icon-size-in-pixels').\n    name: str\n\n    #: Argument value (e.g. value:'64').\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InstallabilityErrorArgument:\n        return cls(\n            name=str(json[\"name\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityErrorArgument.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityErrorArgument.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityErrorArgument.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityErrorArgument.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InstallabilityErrorArgument:\n    return cls(\n        name=str(json[\"name\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.InstallabilityErrorArgument.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.InterstitialHidden","title":"<code>InterstitialHidden</code>  <code>dataclass</code>","text":"<p>Fired when interstitial page was hidden</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.interstitialHidden\")\n@dataclass\nclass InterstitialHidden:\n    \"\"\"\n    Fired when interstitial page was hidden\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InterstitialHidden:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.InterstitialHidden.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.InterstitialHidden.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InterstitialHidden:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.InterstitialShown","title":"<code>InterstitialShown</code>  <code>dataclass</code>","text":"<p>Fired when interstitial page was shown</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.interstitialShown\")\n@dataclass\nclass InterstitialShown:\n    \"\"\"\n    Fired when interstitial page was shown\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InterstitialShown:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.InterstitialShown.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.InterstitialShown.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InterstitialShown:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogClosed","title":"<code>JavascriptDialogClosed</code>  <code>dataclass</code>","text":"<p>Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.javascriptDialogClosed\")\n@dataclass\nclass JavascriptDialogClosed:\n    \"\"\"\n    Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been\n    closed.\n    \"\"\"\n\n    #: Whether dialog was confirmed.\n    result: bool\n    #: User input in case of prompt.\n    user_input: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; JavascriptDialogClosed:\n        return cls(result=bool(json[\"result\"]), user_input=str(json[\"userInput\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogClosed.result","title":"<code>result: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogClosed.user_input","title":"<code>user_input: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogClosed.__init__","title":"<code>__init__(result, user_input)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogClosed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; JavascriptDialogClosed:\n    return cls(result=bool(json[\"result\"]), user_input=str(json[\"userInput\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogOpening","title":"<code>JavascriptDialogOpening</code>  <code>dataclass</code>","text":"<p>Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.javascriptDialogOpening\")\n@dataclass\nclass JavascriptDialogOpening:\n    \"\"\"\n    Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to\n    open.\n    \"\"\"\n\n    #: Frame url.\n    url: str\n    #: Message that will be displayed by the dialog.\n    message: str\n    #: Dialog type.\n    type_: DialogType\n    #: True iff browser is capable showing or acting on the given dialog. When browser has no\n    #: dialog handler for given target, calling alert while Page domain is engaged will stall\n    #: the page execution. Execution can be resumed via calling Page.handleJavaScriptDialog.\n    has_browser_handler: bool\n    #: Default dialog prompt.\n    default_prompt: typing.Optional[str]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; JavascriptDialogOpening:\n        return cls(\n            url=str(json[\"url\"]),\n            message=str(json[\"message\"]),\n            type_=DialogType.from_json(json[\"type\"]),\n            has_browser_handler=bool(json[\"hasBrowserHandler\"]),\n            default_prompt=(\n                str(json[\"defaultPrompt\"])\n                if json.get(\"defaultPrompt\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogOpening.default_prompt","title":"<code>default_prompt: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogOpening.has_browser_handler","title":"<code>has_browser_handler: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogOpening.message","title":"<code>message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogOpening.type_","title":"<code>type_: DialogType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogOpening.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogOpening.__init__","title":"<code>__init__(url, message, type_, has_browser_handler, default_prompt)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.JavascriptDialogOpening.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; JavascriptDialogOpening:\n    return cls(\n        url=str(json[\"url\"]),\n        message=str(json[\"message\"]),\n        type_=DialogType.from_json(json[\"type\"]),\n        has_browser_handler=bool(json[\"hasBrowserHandler\"]),\n        default_prompt=(\n            str(json[\"defaultPrompt\"])\n            if json.get(\"defaultPrompt\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.LaunchHandler","title":"<code>LaunchHandler</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass LaunchHandler:\n    client_mode: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"clientMode\"] = self.client_mode\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LaunchHandler:\n        return cls(\n            client_mode=str(json[\"clientMode\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.LaunchHandler.client_mode","title":"<code>client_mode: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LaunchHandler.__init__","title":"<code>__init__(client_mode)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LaunchHandler.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LaunchHandler:\n    return cls(\n        client_mode=str(json[\"clientMode\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.LaunchHandler.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"clientMode\"] = self.client_mode\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.LayoutViewport","title":"<code>LayoutViewport</code>  <code>dataclass</code>","text":"<p>Layout viewport position and dimensions.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass LayoutViewport:\n    \"\"\"\n    Layout viewport position and dimensions.\n    \"\"\"\n\n    #: Horizontal offset relative to the document (CSS pixels).\n    page_x: int\n\n    #: Vertical offset relative to the document (CSS pixels).\n    page_y: int\n\n    #: Width (CSS pixels), excludes scrollbar if present.\n    client_width: int\n\n    #: Height (CSS pixels), excludes scrollbar if present.\n    client_height: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"pageX\"] = self.page_x\n        json[\"pageY\"] = self.page_y\n        json[\"clientWidth\"] = self.client_width\n        json[\"clientHeight\"] = self.client_height\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LayoutViewport:\n        return cls(\n            page_x=int(json[\"pageX\"]),\n            page_y=int(json[\"pageY\"]),\n            client_width=int(json[\"clientWidth\"]),\n            client_height=int(json[\"clientHeight\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.LayoutViewport.client_height","title":"<code>client_height: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LayoutViewport.client_width","title":"<code>client_width: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LayoutViewport.page_x","title":"<code>page_x: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LayoutViewport.page_y","title":"<code>page_y: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LayoutViewport.__init__","title":"<code>__init__(page_x, page_y, client_width, client_height)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LayoutViewport.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LayoutViewport:\n    return cls(\n        page_x=int(json[\"pageX\"]),\n        page_y=int(json[\"pageY\"]),\n        client_width=int(json[\"clientWidth\"]),\n        client_height=int(json[\"clientHeight\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.LayoutViewport.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"pageX\"] = self.page_x\n    json[\"pageY\"] = self.page_y\n    json[\"clientWidth\"] = self.client_width\n    json[\"clientHeight\"] = self.client_height\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.LifecycleEvent","title":"<code>LifecycleEvent</code>  <code>dataclass</code>","text":"<p>Fired for top level page lifecycle events such as navigation, load, paint, etc.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.lifecycleEvent\")\n@dataclass\nclass LifecycleEvent:\n    \"\"\"\n    Fired for top level page lifecycle events such as navigation, load, paint, etc.\n    \"\"\"\n\n    #: Id of the frame.\n    frame_id: FrameId\n    #: Loader identifier. Empty string if the request is fetched from worker.\n    loader_id: network.LoaderId\n    name: str\n    timestamp: network.MonotonicTime\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LifecycleEvent:\n        return cls(\n            frame_id=FrameId.from_json(json[\"frameId\"]),\n            loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n            name=str(json[\"name\"]),\n            timestamp=network.MonotonicTime.from_json(json[\"timestamp\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.LifecycleEvent.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LifecycleEvent.loader_id","title":"<code>loader_id: network.LoaderId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LifecycleEvent.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LifecycleEvent.timestamp","title":"<code>timestamp: network.MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LifecycleEvent.__init__","title":"<code>__init__(frame_id, loader_id, name, timestamp)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LifecycleEvent.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LifecycleEvent:\n    return cls(\n        frame_id=FrameId.from_json(json[\"frameId\"]),\n        loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n        name=str(json[\"name\"]),\n        timestamp=network.MonotonicTime.from_json(json[\"timestamp\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.LoadEventFired","title":"<code>LoadEventFired</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.loadEventFired\")\n@dataclass\nclass LoadEventFired:\n    timestamp: network.MonotonicTime\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LoadEventFired:\n        return cls(timestamp=network.MonotonicTime.from_json(json[\"timestamp\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.LoadEventFired.timestamp","title":"<code>timestamp: network.MonotonicTime</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LoadEventFired.__init__","title":"<code>__init__(timestamp)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.LoadEventFired.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LoadEventFired:\n    return cls(timestamp=network.MonotonicTime.from_json(json[\"timestamp\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigatedWithinDocument","title":"<code>NavigatedWithinDocument</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.navigatedWithinDocument\")\n@dataclass\nclass NavigatedWithinDocument:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when same-document navigation happens, e.g. due to history API usage or anchor navigation.\n    \"\"\"\n\n    #: Id of the frame.\n    frame_id: FrameId\n    #: Frame's new url.\n    url: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NavigatedWithinDocument:\n        return cls(frame_id=FrameId.from_json(json[\"frameId\"]), url=str(json[\"url\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigatedWithinDocument.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigatedWithinDocument.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigatedWithinDocument.__init__","title":"<code>__init__(frame_id, url)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigatedWithinDocument.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NavigatedWithinDocument:\n    return cls(frame_id=FrameId.from_json(json[\"frameId\"]), url=str(json[\"url\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationEntry","title":"<code>NavigationEntry</code>  <code>dataclass</code>","text":"<p>Navigation history entry.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass NavigationEntry:\n    \"\"\"\n    Navigation history entry.\n    \"\"\"\n\n    #: Unique id of the navigation history entry.\n    id_: int\n\n    #: URL of the navigation history entry.\n    url: str\n\n    #: URL that the user typed in the url bar.\n    user_typed_url: str\n\n    #: Title of the navigation history entry.\n    title: str\n\n    #: Transition type.\n    transition_type: TransitionType\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"id\"] = self.id_\n        json[\"url\"] = self.url\n        json[\"userTypedURL\"] = self.user_typed_url\n        json[\"title\"] = self.title\n        json[\"transitionType\"] = self.transition_type.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NavigationEntry:\n        return cls(\n            id_=int(json[\"id\"]),\n            url=str(json[\"url\"]),\n            user_typed_url=str(json[\"userTypedURL\"]),\n            title=str(json[\"title\"]),\n            transition_type=TransitionType.from_json(json[\"transitionType\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationEntry.id_","title":"<code>id_: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationEntry.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationEntry.transition_type","title":"<code>transition_type: TransitionType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationEntry.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationEntry.user_typed_url","title":"<code>user_typed_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationEntry.__init__","title":"<code>__init__(id_, url, user_typed_url, title, transition_type)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NavigationEntry:\n    return cls(\n        id_=int(json[\"id\"]),\n        url=str(json[\"url\"]),\n        user_typed_url=str(json[\"userTypedURL\"]),\n        title=str(json[\"title\"]),\n        transition_type=TransitionType.from_json(json[\"transitionType\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"id\"] = self.id_\n    json[\"url\"] = self.url\n    json[\"userTypedURL\"] = self.user_typed_url\n    json[\"title\"] = self.title\n    json[\"transitionType\"] = self.transition_type.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationType","title":"<code>NavigationType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The type of a frameNavigated event.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class NavigationType(enum.Enum):\n    \"\"\"\n    The type of a frameNavigated event.\n    \"\"\"\n\n    NAVIGATION = \"Navigation\"\n    BACK_FORWARD_CACHE_RESTORE = \"BackForwardCacheRestore\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; NavigationType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationType.BACK_FORWARD_CACHE_RESTORE","title":"<code>BACK_FORWARD_CACHE_RESTORE = 'BackForwardCacheRestore'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationType.NAVIGATION","title":"<code>NAVIGATION = 'Navigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; NavigationType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.NavigationType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrial","title":"<code>OriginTrial</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass OriginTrial:\n    trial_name: str\n\n    status: OriginTrialStatus\n\n    tokens_with_status: typing.List[OriginTrialTokenWithStatus]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"trialName\"] = self.trial_name\n        json[\"status\"] = self.status.to_json()\n        json[\"tokensWithStatus\"] = [i.to_json() for i in self.tokens_with_status]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; OriginTrial:\n        return cls(\n            trial_name=str(json[\"trialName\"]),\n            status=OriginTrialStatus.from_json(json[\"status\"]),\n            tokens_with_status=[\n                OriginTrialTokenWithStatus.from_json(i)\n                for i in json[\"tokensWithStatus\"]\n            ],\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrial.status","title":"<code>status: OriginTrialStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrial.tokens_with_status","title":"<code>tokens_with_status: typing.List[OriginTrialTokenWithStatus]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrial.trial_name","title":"<code>trial_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrial.__init__","title":"<code>__init__(trial_name, status, tokens_with_status)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrial.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; OriginTrial:\n    return cls(\n        trial_name=str(json[\"trialName\"]),\n        status=OriginTrialStatus.from_json(json[\"status\"]),\n        tokens_with_status=[\n            OriginTrialTokenWithStatus.from_json(i)\n            for i in json[\"tokensWithStatus\"]\n        ],\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrial.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"trialName\"] = self.trial_name\n    json[\"status\"] = self.status.to_json()\n    json[\"tokensWithStatus\"] = [i.to_json() for i in self.tokens_with_status]\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialStatus","title":"<code>OriginTrialStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Status for an Origin Trial.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class OriginTrialStatus(enum.Enum):\n    \"\"\"\n    Status for an Origin Trial.\n    \"\"\"\n\n    ENABLED = \"Enabled\"\n    VALID_TOKEN_NOT_PROVIDED = \"ValidTokenNotProvided\"\n    OS_NOT_SUPPORTED = \"OSNotSupported\"\n    TRIAL_NOT_ALLOWED = \"TrialNotAllowed\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; OriginTrialStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialStatus.ENABLED","title":"<code>ENABLED = 'Enabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialStatus.OS_NOT_SUPPORTED","title":"<code>OS_NOT_SUPPORTED = 'OSNotSupported'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialStatus.TRIAL_NOT_ALLOWED","title":"<code>TRIAL_NOT_ALLOWED = 'TrialNotAllowed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialStatus.VALID_TOKEN_NOT_PROVIDED","title":"<code>VALID_TOKEN_NOT_PROVIDED = 'ValidTokenNotProvided'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; OriginTrialStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialToken","title":"<code>OriginTrialToken</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass OriginTrialToken:\n    origin: str\n\n    match_sub_domains: bool\n\n    trial_name: str\n\n    expiry_time: network.TimeSinceEpoch\n\n    is_third_party: bool\n\n    usage_restriction: OriginTrialUsageRestriction\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"origin\"] = self.origin\n        json[\"matchSubDomains\"] = self.match_sub_domains\n        json[\"trialName\"] = self.trial_name\n        json[\"expiryTime\"] = self.expiry_time.to_json()\n        json[\"isThirdParty\"] = self.is_third_party\n        json[\"usageRestriction\"] = self.usage_restriction.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; OriginTrialToken:\n        return cls(\n            origin=str(json[\"origin\"]),\n            match_sub_domains=bool(json[\"matchSubDomains\"]),\n            trial_name=str(json[\"trialName\"]),\n            expiry_time=network.TimeSinceEpoch.from_json(json[\"expiryTime\"]),\n            is_third_party=bool(json[\"isThirdParty\"]),\n            usage_restriction=OriginTrialUsageRestriction.from_json(\n                json[\"usageRestriction\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialToken.expiry_time","title":"<code>expiry_time: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialToken.is_third_party","title":"<code>is_third_party: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialToken.match_sub_domains","title":"<code>match_sub_domains: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialToken.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialToken.trial_name","title":"<code>trial_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialToken.usage_restriction","title":"<code>usage_restriction: OriginTrialUsageRestriction</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialToken.__init__","title":"<code>__init__(origin, match_sub_domains, trial_name, expiry_time, is_third_party, usage_restriction)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialToken.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; OriginTrialToken:\n    return cls(\n        origin=str(json[\"origin\"]),\n        match_sub_domains=bool(json[\"matchSubDomains\"]),\n        trial_name=str(json[\"trialName\"]),\n        expiry_time=network.TimeSinceEpoch.from_json(json[\"expiryTime\"]),\n        is_third_party=bool(json[\"isThirdParty\"]),\n        usage_restriction=OriginTrialUsageRestriction.from_json(\n            json[\"usageRestriction\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialToken.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"origin\"] = self.origin\n    json[\"matchSubDomains\"] = self.match_sub_domains\n    json[\"trialName\"] = self.trial_name\n    json[\"expiryTime\"] = self.expiry_time.to_json()\n    json[\"isThirdParty\"] = self.is_third_party\n    json[\"usageRestriction\"] = self.usage_restriction.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus","title":"<code>OriginTrialTokenStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Origin Trial(https://www.chromium.org/blink/origin-trials) support. Status for an Origin Trial token.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class OriginTrialTokenStatus(enum.Enum):\n    \"\"\"\n    Origin Trial(https://www.chromium.org/blink/origin-trials) support.\n    Status for an Origin Trial token.\n    \"\"\"\n\n    SUCCESS = \"Success\"\n    NOT_SUPPORTED = \"NotSupported\"\n    INSECURE = \"Insecure\"\n    EXPIRED = \"Expired\"\n    WRONG_ORIGIN = \"WrongOrigin\"\n    INVALID_SIGNATURE = \"InvalidSignature\"\n    MALFORMED = \"Malformed\"\n    WRONG_VERSION = \"WrongVersion\"\n    FEATURE_DISABLED = \"FeatureDisabled\"\n    TOKEN_DISABLED = \"TokenDisabled\"\n    FEATURE_DISABLED_FOR_USER = \"FeatureDisabledForUser\"\n    UNKNOWN_TRIAL = \"UnknownTrial\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; OriginTrialTokenStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.EXPIRED","title":"<code>EXPIRED = 'Expired'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.FEATURE_DISABLED","title":"<code>FEATURE_DISABLED = 'FeatureDisabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.FEATURE_DISABLED_FOR_USER","title":"<code>FEATURE_DISABLED_FOR_USER = 'FeatureDisabledForUser'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.INSECURE","title":"<code>INSECURE = 'Insecure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.INVALID_SIGNATURE","title":"<code>INVALID_SIGNATURE = 'InvalidSignature'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.MALFORMED","title":"<code>MALFORMED = 'Malformed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.NOT_SUPPORTED","title":"<code>NOT_SUPPORTED = 'NotSupported'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.SUCCESS","title":"<code>SUCCESS = 'Success'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.TOKEN_DISABLED","title":"<code>TOKEN_DISABLED = 'TokenDisabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.UNKNOWN_TRIAL","title":"<code>UNKNOWN_TRIAL = 'UnknownTrial'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.WRONG_ORIGIN","title":"<code>WRONG_ORIGIN = 'WrongOrigin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.WRONG_VERSION","title":"<code>WRONG_VERSION = 'WrongVersion'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; OriginTrialTokenStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenWithStatus","title":"<code>OriginTrialTokenWithStatus</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass OriginTrialTokenWithStatus:\n    raw_token_text: str\n\n    status: OriginTrialTokenStatus\n\n    #: ``parsedToken`` is present only when the token is extractable and\n    #: parsable.\n    parsed_token: typing.Optional[OriginTrialToken] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"rawTokenText\"] = self.raw_token_text\n        json[\"status\"] = self.status.to_json()\n        if self.parsed_token is not None:\n            json[\"parsedToken\"] = self.parsed_token.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; OriginTrialTokenWithStatus:\n        return cls(\n            raw_token_text=str(json[\"rawTokenText\"]),\n            status=OriginTrialTokenStatus.from_json(json[\"status\"]),\n            parsed_token=(\n                OriginTrialToken.from_json(json[\"parsedToken\"])\n                if json.get(\"parsedToken\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenWithStatus.parsed_token","title":"<code>parsed_token: typing.Optional[OriginTrialToken] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenWithStatus.raw_token_text","title":"<code>raw_token_text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenWithStatus.status","title":"<code>status: OriginTrialTokenStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenWithStatus.__init__","title":"<code>__init__(raw_token_text, status, parsed_token=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenWithStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; OriginTrialTokenWithStatus:\n    return cls(\n        raw_token_text=str(json[\"rawTokenText\"]),\n        status=OriginTrialTokenStatus.from_json(json[\"status\"]),\n        parsed_token=(\n            OriginTrialToken.from_json(json[\"parsedToken\"])\n            if json.get(\"parsedToken\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialTokenWithStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"rawTokenText\"] = self.raw_token_text\n    json[\"status\"] = self.status.to_json()\n    if self.parsed_token is not None:\n        json[\"parsedToken\"] = self.parsed_token.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialUsageRestriction","title":"<code>OriginTrialUsageRestriction</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class OriginTrialUsageRestriction(enum.Enum):\n    NONE = \"None\"\n    SUBSET = \"Subset\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; OriginTrialUsageRestriction:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialUsageRestriction.NONE","title":"<code>NONE = 'None'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialUsageRestriction.SUBSET","title":"<code>SUBSET = 'Subset'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialUsageRestriction.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; OriginTrialUsageRestriction:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.OriginTrialUsageRestriction.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockLocator","title":"<code>PermissionsPolicyBlockLocator</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass PermissionsPolicyBlockLocator:\n    frame_id: FrameId\n\n    block_reason: PermissionsPolicyBlockReason\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"frameId\"] = self.frame_id.to_json()\n        json[\"blockReason\"] = self.block_reason.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PermissionsPolicyBlockLocator:\n        return cls(\n            frame_id=FrameId.from_json(json[\"frameId\"]),\n            block_reason=PermissionsPolicyBlockReason.from_json(json[\"blockReason\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockLocator.block_reason","title":"<code>block_reason: PermissionsPolicyBlockReason</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockLocator.frame_id","title":"<code>frame_id: FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockLocator.__init__","title":"<code>__init__(frame_id, block_reason)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockLocator.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PermissionsPolicyBlockLocator:\n    return cls(\n        frame_id=FrameId.from_json(json[\"frameId\"]),\n        block_reason=PermissionsPolicyBlockReason.from_json(json[\"blockReason\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockLocator.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"frameId\"] = self.frame_id.to_json()\n    json[\"blockReason\"] = self.block_reason.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockReason","title":"<code>PermissionsPolicyBlockReason</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Reason for a permissions policy feature to be disabled.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class PermissionsPolicyBlockReason(enum.Enum):\n    \"\"\"\n    Reason for a permissions policy feature to be disabled.\n    \"\"\"\n\n    HEADER = \"Header\"\n    IFRAME_ATTRIBUTE = \"IframeAttribute\"\n    IN_FENCED_FRAME_TREE = \"InFencedFrameTree\"\n    IN_ISOLATED_APP = \"InIsolatedApp\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PermissionsPolicyBlockReason:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockReason.HEADER","title":"<code>HEADER = 'Header'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockReason.IFRAME_ATTRIBUTE","title":"<code>IFRAME_ATTRIBUTE = 'IframeAttribute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockReason.IN_FENCED_FRAME_TREE","title":"<code>IN_FENCED_FRAME_TREE = 'InFencedFrameTree'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockReason.IN_ISOLATED_APP","title":"<code>IN_ISOLATED_APP = 'InIsolatedApp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockReason.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PermissionsPolicyBlockReason:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyBlockReason.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature","title":"<code>PermissionsPolicyFeature</code>","text":"<p>               Bases: <code>Enum</code></p> <p>All Permissions Policy features. This enum should match the one defined in third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class PermissionsPolicyFeature(enum.Enum):\n    \"\"\"\n    All Permissions Policy features. This enum should match the one defined\n    in third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5.\n    \"\"\"\n\n    ACCELEROMETER = \"accelerometer\"\n    AMBIENT_LIGHT_SENSOR = \"ambient-light-sensor\"\n    ATTRIBUTION_REPORTING = \"attribution-reporting\"\n    AUTOPLAY = \"autoplay\"\n    BLUETOOTH = \"bluetooth\"\n    BROWSING_TOPICS = \"browsing-topics\"\n    CAMERA = \"camera\"\n    CAPTURED_SURFACE_CONTROL = \"captured-surface-control\"\n    CH_DPR = \"ch-dpr\"\n    CH_DEVICE_MEMORY = \"ch-device-memory\"\n    CH_DOWNLINK = \"ch-downlink\"\n    CH_ECT = \"ch-ect\"\n    CH_PREFERS_COLOR_SCHEME = \"ch-prefers-color-scheme\"\n    CH_PREFERS_REDUCED_MOTION = \"ch-prefers-reduced-motion\"\n    CH_PREFERS_REDUCED_TRANSPARENCY = \"ch-prefers-reduced-transparency\"\n    CH_RTT = \"ch-rtt\"\n    CH_SAVE_DATA = \"ch-save-data\"\n    CH_UA = \"ch-ua\"\n    CH_UA_ARCH = \"ch-ua-arch\"\n    CH_UA_BITNESS = \"ch-ua-bitness\"\n    CH_UA_PLATFORM = \"ch-ua-platform\"\n    CH_UA_MODEL = \"ch-ua-model\"\n    CH_UA_MOBILE = \"ch-ua-mobile\"\n    CH_UA_FORM_FACTORS = \"ch-ua-form-factors\"\n    CH_UA_FULL_VERSION = \"ch-ua-full-version\"\n    CH_UA_FULL_VERSION_LIST = \"ch-ua-full-version-list\"\n    CH_UA_PLATFORM_VERSION = \"ch-ua-platform-version\"\n    CH_UA_WOW64 = \"ch-ua-wow64\"\n    CH_VIEWPORT_HEIGHT = \"ch-viewport-height\"\n    CH_VIEWPORT_WIDTH = \"ch-viewport-width\"\n    CH_WIDTH = \"ch-width\"\n    CLIPBOARD_READ = \"clipboard-read\"\n    CLIPBOARD_WRITE = \"clipboard-write\"\n    COMPUTE_PRESSURE = \"compute-pressure\"\n    CROSS_ORIGIN_ISOLATED = \"cross-origin-isolated\"\n    DEFERRED_FETCH = \"deferred-fetch\"\n    DIRECT_SOCKETS = \"direct-sockets\"\n    DISPLAY_CAPTURE = \"display-capture\"\n    DOCUMENT_DOMAIN = \"document-domain\"\n    ENCRYPTED_MEDIA = \"encrypted-media\"\n    EXECUTION_WHILE_OUT_OF_VIEWPORT = \"execution-while-out-of-viewport\"\n    EXECUTION_WHILE_NOT_RENDERED = \"execution-while-not-rendered\"\n    FOCUS_WITHOUT_USER_ACTIVATION = \"focus-without-user-activation\"\n    FULLSCREEN = \"fullscreen\"\n    FROBULATE = \"frobulate\"\n    GAMEPAD = \"gamepad\"\n    GEOLOCATION = \"geolocation\"\n    GYROSCOPE = \"gyroscope\"\n    HID = \"hid\"\n    IDENTITY_CREDENTIALS_GET = \"identity-credentials-get\"\n    IDLE_DETECTION = \"idle-detection\"\n    INTEREST_COHORT = \"interest-cohort\"\n    JOIN_AD_INTEREST_GROUP = \"join-ad-interest-group\"\n    KEYBOARD_MAP = \"keyboard-map\"\n    LOCAL_FONTS = \"local-fonts\"\n    MAGNETOMETER = \"magnetometer\"\n    MICROPHONE = \"microphone\"\n    MIDI = \"midi\"\n    OTP_CREDENTIALS = \"otp-credentials\"\n    PAYMENT = \"payment\"\n    PICTURE_IN_PICTURE = \"picture-in-picture\"\n    PRIVATE_AGGREGATION = \"private-aggregation\"\n    PRIVATE_STATE_TOKEN_ISSUANCE = \"private-state-token-issuance\"\n    PRIVATE_STATE_TOKEN_REDEMPTION = \"private-state-token-redemption\"\n    PUBLICKEY_CREDENTIALS_CREATE = \"publickey-credentials-create\"\n    PUBLICKEY_CREDENTIALS_GET = \"publickey-credentials-get\"\n    RUN_AD_AUCTION = \"run-ad-auction\"\n    SCREEN_WAKE_LOCK = \"screen-wake-lock\"\n    SERIAL = \"serial\"\n    SHARED_AUTOFILL = \"shared-autofill\"\n    SHARED_STORAGE = \"shared-storage\"\n    SHARED_STORAGE_SELECT_URL = \"shared-storage-select-url\"\n    SMART_CARD = \"smart-card\"\n    SPEAKER_SELECTION = \"speaker-selection\"\n    STORAGE_ACCESS = \"storage-access\"\n    SUB_APPS = \"sub-apps\"\n    SYNC_XHR = \"sync-xhr\"\n    UNLOAD = \"unload\"\n    USB = \"usb\"\n    USB_UNRESTRICTED = \"usb-unrestricted\"\n    VERTICAL_SCROLL = \"vertical-scroll\"\n    WEB_PRINTING = \"web-printing\"\n    WEB_SHARE = \"web-share\"\n    WINDOW_MANAGEMENT = \"window-management\"\n    XR_SPATIAL_TRACKING = \"xr-spatial-tracking\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PermissionsPolicyFeature:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.ACCELEROMETER","title":"<code>ACCELEROMETER = 'accelerometer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.AMBIENT_LIGHT_SENSOR","title":"<code>AMBIENT_LIGHT_SENSOR = 'ambient-light-sensor'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.ATTRIBUTION_REPORTING","title":"<code>ATTRIBUTION_REPORTING = 'attribution-reporting'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.AUTOPLAY","title":"<code>AUTOPLAY = 'autoplay'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.BLUETOOTH","title":"<code>BLUETOOTH = 'bluetooth'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.BROWSING_TOPICS","title":"<code>BROWSING_TOPICS = 'browsing-topics'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CAMERA","title":"<code>CAMERA = 'camera'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CAPTURED_SURFACE_CONTROL","title":"<code>CAPTURED_SURFACE_CONTROL = 'captured-surface-control'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_DEVICE_MEMORY","title":"<code>CH_DEVICE_MEMORY = 'ch-device-memory'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_DOWNLINK","title":"<code>CH_DOWNLINK = 'ch-downlink'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_DPR","title":"<code>CH_DPR = 'ch-dpr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_ECT","title":"<code>CH_ECT = 'ch-ect'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_PREFERS_COLOR_SCHEME","title":"<code>CH_PREFERS_COLOR_SCHEME = 'ch-prefers-color-scheme'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_PREFERS_REDUCED_MOTION","title":"<code>CH_PREFERS_REDUCED_MOTION = 'ch-prefers-reduced-motion'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_PREFERS_REDUCED_TRANSPARENCY","title":"<code>CH_PREFERS_REDUCED_TRANSPARENCY = 'ch-prefers-reduced-transparency'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_RTT","title":"<code>CH_RTT = 'ch-rtt'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_SAVE_DATA","title":"<code>CH_SAVE_DATA = 'ch-save-data'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA","title":"<code>CH_UA = 'ch-ua'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA_ARCH","title":"<code>CH_UA_ARCH = 'ch-ua-arch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA_BITNESS","title":"<code>CH_UA_BITNESS = 'ch-ua-bitness'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA_FORM_FACTORS","title":"<code>CH_UA_FORM_FACTORS = 'ch-ua-form-factors'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA_FULL_VERSION","title":"<code>CH_UA_FULL_VERSION = 'ch-ua-full-version'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA_FULL_VERSION_LIST","title":"<code>CH_UA_FULL_VERSION_LIST = 'ch-ua-full-version-list'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA_MOBILE","title":"<code>CH_UA_MOBILE = 'ch-ua-mobile'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA_MODEL","title":"<code>CH_UA_MODEL = 'ch-ua-model'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA_PLATFORM","title":"<code>CH_UA_PLATFORM = 'ch-ua-platform'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA_PLATFORM_VERSION","title":"<code>CH_UA_PLATFORM_VERSION = 'ch-ua-platform-version'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_UA_WOW64","title":"<code>CH_UA_WOW64 = 'ch-ua-wow64'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_VIEWPORT_HEIGHT","title":"<code>CH_VIEWPORT_HEIGHT = 'ch-viewport-height'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_VIEWPORT_WIDTH","title":"<code>CH_VIEWPORT_WIDTH = 'ch-viewport-width'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CH_WIDTH","title":"<code>CH_WIDTH = 'ch-width'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CLIPBOARD_READ","title":"<code>CLIPBOARD_READ = 'clipboard-read'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CLIPBOARD_WRITE","title":"<code>CLIPBOARD_WRITE = 'clipboard-write'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.COMPUTE_PRESSURE","title":"<code>COMPUTE_PRESSURE = 'compute-pressure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.CROSS_ORIGIN_ISOLATED","title":"<code>CROSS_ORIGIN_ISOLATED = 'cross-origin-isolated'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.DEFERRED_FETCH","title":"<code>DEFERRED_FETCH = 'deferred-fetch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.DIRECT_SOCKETS","title":"<code>DIRECT_SOCKETS = 'direct-sockets'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.DISPLAY_CAPTURE","title":"<code>DISPLAY_CAPTURE = 'display-capture'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.DOCUMENT_DOMAIN","title":"<code>DOCUMENT_DOMAIN = 'document-domain'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.ENCRYPTED_MEDIA","title":"<code>ENCRYPTED_MEDIA = 'encrypted-media'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.EXECUTION_WHILE_NOT_RENDERED","title":"<code>EXECUTION_WHILE_NOT_RENDERED = 'execution-while-not-rendered'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.EXECUTION_WHILE_OUT_OF_VIEWPORT","title":"<code>EXECUTION_WHILE_OUT_OF_VIEWPORT = 'execution-while-out-of-viewport'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.FOCUS_WITHOUT_USER_ACTIVATION","title":"<code>FOCUS_WITHOUT_USER_ACTIVATION = 'focus-without-user-activation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.FROBULATE","title":"<code>FROBULATE = 'frobulate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.FULLSCREEN","title":"<code>FULLSCREEN = 'fullscreen'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.GAMEPAD","title":"<code>GAMEPAD = 'gamepad'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.GEOLOCATION","title":"<code>GEOLOCATION = 'geolocation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.GYROSCOPE","title":"<code>GYROSCOPE = 'gyroscope'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.HID","title":"<code>HID = 'hid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.IDENTITY_CREDENTIALS_GET","title":"<code>IDENTITY_CREDENTIALS_GET = 'identity-credentials-get'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.IDLE_DETECTION","title":"<code>IDLE_DETECTION = 'idle-detection'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.INTEREST_COHORT","title":"<code>INTEREST_COHORT = 'interest-cohort'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.JOIN_AD_INTEREST_GROUP","title":"<code>JOIN_AD_INTEREST_GROUP = 'join-ad-interest-group'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.KEYBOARD_MAP","title":"<code>KEYBOARD_MAP = 'keyboard-map'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.LOCAL_FONTS","title":"<code>LOCAL_FONTS = 'local-fonts'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.MAGNETOMETER","title":"<code>MAGNETOMETER = 'magnetometer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.MICROPHONE","title":"<code>MICROPHONE = 'microphone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.MIDI","title":"<code>MIDI = 'midi'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.OTP_CREDENTIALS","title":"<code>OTP_CREDENTIALS = 'otp-credentials'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.PAYMENT","title":"<code>PAYMENT = 'payment'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.PICTURE_IN_PICTURE","title":"<code>PICTURE_IN_PICTURE = 'picture-in-picture'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.PRIVATE_AGGREGATION","title":"<code>PRIVATE_AGGREGATION = 'private-aggregation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.PRIVATE_STATE_TOKEN_ISSUANCE","title":"<code>PRIVATE_STATE_TOKEN_ISSUANCE = 'private-state-token-issuance'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.PRIVATE_STATE_TOKEN_REDEMPTION","title":"<code>PRIVATE_STATE_TOKEN_REDEMPTION = 'private-state-token-redemption'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.PUBLICKEY_CREDENTIALS_CREATE","title":"<code>PUBLICKEY_CREDENTIALS_CREATE = 'publickey-credentials-create'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.PUBLICKEY_CREDENTIALS_GET","title":"<code>PUBLICKEY_CREDENTIALS_GET = 'publickey-credentials-get'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.RUN_AD_AUCTION","title":"<code>RUN_AD_AUCTION = 'run-ad-auction'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.SCREEN_WAKE_LOCK","title":"<code>SCREEN_WAKE_LOCK = 'screen-wake-lock'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.SERIAL","title":"<code>SERIAL = 'serial'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.SHARED_AUTOFILL","title":"<code>SHARED_AUTOFILL = 'shared-autofill'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.SHARED_STORAGE","title":"<code>SHARED_STORAGE = 'shared-storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.SHARED_STORAGE_SELECT_URL","title":"<code>SHARED_STORAGE_SELECT_URL = 'shared-storage-select-url'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.SMART_CARD","title":"<code>SMART_CARD = 'smart-card'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.SPEAKER_SELECTION","title":"<code>SPEAKER_SELECTION = 'speaker-selection'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.STORAGE_ACCESS","title":"<code>STORAGE_ACCESS = 'storage-access'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.SUB_APPS","title":"<code>SUB_APPS = 'sub-apps'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.SYNC_XHR","title":"<code>SYNC_XHR = 'sync-xhr'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.UNLOAD","title":"<code>UNLOAD = 'unload'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.USB","title":"<code>USB = 'usb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.USB_UNRESTRICTED","title":"<code>USB_UNRESTRICTED = 'usb-unrestricted'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.VERTICAL_SCROLL","title":"<code>VERTICAL_SCROLL = 'vertical-scroll'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.WEB_PRINTING","title":"<code>WEB_PRINTING = 'web-printing'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.WEB_SHARE","title":"<code>WEB_SHARE = 'web-share'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.WINDOW_MANAGEMENT","title":"<code>WINDOW_MANAGEMENT = 'window-management'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.XR_SPATIAL_TRACKING","title":"<code>XR_SPATIAL_TRACKING = 'xr-spatial-tracking'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PermissionsPolicyFeature:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeature.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeatureState","title":"<code>PermissionsPolicyFeatureState</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass PermissionsPolicyFeatureState:\n    feature: PermissionsPolicyFeature\n\n    allowed: bool\n\n    locator: typing.Optional[PermissionsPolicyBlockLocator] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"feature\"] = self.feature.to_json()\n        json[\"allowed\"] = self.allowed\n        if self.locator is not None:\n            json[\"locator\"] = self.locator.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PermissionsPolicyFeatureState:\n        return cls(\n            feature=PermissionsPolicyFeature.from_json(json[\"feature\"]),\n            allowed=bool(json[\"allowed\"]),\n            locator=(\n                PermissionsPolicyBlockLocator.from_json(json[\"locator\"])\n                if json.get(\"locator\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeatureState.allowed","title":"<code>allowed: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeatureState.feature","title":"<code>feature: PermissionsPolicyFeature</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeatureState.locator","title":"<code>locator: typing.Optional[PermissionsPolicyBlockLocator] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeatureState.__init__","title":"<code>__init__(feature, allowed, locator=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeatureState.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PermissionsPolicyFeatureState:\n    return cls(\n        feature=PermissionsPolicyFeature.from_json(json[\"feature\"]),\n        allowed=bool(json[\"allowed\"]),\n        locator=(\n            PermissionsPolicyBlockLocator.from_json(json[\"locator\"])\n            if json.get(\"locator\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.PermissionsPolicyFeatureState.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"feature\"] = self.feature.to_json()\n    json[\"allowed\"] = self.allowed\n    if self.locator is not None:\n        json[\"locator\"] = self.locator.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ProtocolHandler","title":"<code>ProtocolHandler</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass ProtocolHandler:\n    protocol: str\n\n    url: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"protocol\"] = self.protocol\n        json[\"url\"] = self.url\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ProtocolHandler:\n        return cls(\n            protocol=str(json[\"protocol\"]),\n            url=str(json[\"url\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ProtocolHandler.protocol","title":"<code>protocol: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ProtocolHandler.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ProtocolHandler.__init__","title":"<code>__init__(protocol, url)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ProtocolHandler.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ProtocolHandler:\n    return cls(\n        protocol=str(json[\"protocol\"]),\n        url=str(json[\"url\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ProtocolHandler.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"protocol\"] = self.protocol\n    json[\"url\"] = self.url\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy","title":"<code>ReferrerPolicy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The referring-policy used for the navigation.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class ReferrerPolicy(enum.Enum):\n    \"\"\"\n    The referring-policy used for the navigation.\n    \"\"\"\n\n    NO_REFERRER = \"noReferrer\"\n    NO_REFERRER_WHEN_DOWNGRADE = \"noReferrerWhenDowngrade\"\n    ORIGIN = \"origin\"\n    ORIGIN_WHEN_CROSS_ORIGIN = \"originWhenCrossOrigin\"\n    SAME_ORIGIN = \"sameOrigin\"\n    STRICT_ORIGIN = \"strictOrigin\"\n    STRICT_ORIGIN_WHEN_CROSS_ORIGIN = \"strictOriginWhenCrossOrigin\"\n    UNSAFE_URL = \"unsafeUrl\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ReferrerPolicy:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy.NO_REFERRER","title":"<code>NO_REFERRER = 'noReferrer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy.NO_REFERRER_WHEN_DOWNGRADE","title":"<code>NO_REFERRER_WHEN_DOWNGRADE = 'noReferrerWhenDowngrade'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy.ORIGIN","title":"<code>ORIGIN = 'origin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy.ORIGIN_WHEN_CROSS_ORIGIN","title":"<code>ORIGIN_WHEN_CROSS_ORIGIN = 'originWhenCrossOrigin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy.SAME_ORIGIN","title":"<code>SAME_ORIGIN = 'sameOrigin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy.STRICT_ORIGIN","title":"<code>STRICT_ORIGIN = 'strictOrigin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN","title":"<code>STRICT_ORIGIN_WHEN_CROSS_ORIGIN = 'strictOriginWhenCrossOrigin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy.UNSAFE_URL","title":"<code>UNSAFE_URL = 'unsafeUrl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ReferrerPolicy:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ReferrerPolicy.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.RelatedApplication","title":"<code>RelatedApplication</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass RelatedApplication:\n    url: str\n\n    id_: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        if self.id_ is not None:\n            json[\"id\"] = self.id_\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RelatedApplication:\n        return cls(\n            url=str(json[\"url\"]),\n            id_=str(json[\"id\"]) if json.get(\"id\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.RelatedApplication.id_","title":"<code>id_: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.RelatedApplication.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.RelatedApplication.__init__","title":"<code>__init__(url, id_=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.RelatedApplication.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RelatedApplication:\n    return cls(\n        url=str(json[\"url\"]),\n        id_=str(json[\"id\"]) if json.get(\"id\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.RelatedApplication.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    if self.id_ is not None:\n        json[\"id\"] = self.id_\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScopeExtension","title":"<code>ScopeExtension</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass ScopeExtension:\n    #: Instead of using tuple, this field always returns the serialized string\n    #: for easy understanding and comparison.\n    origin: str\n\n    has_origin_wildcard: bool\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"origin\"] = self.origin\n        json[\"hasOriginWildcard\"] = self.has_origin_wildcard\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScopeExtension:\n        return cls(\n            origin=str(json[\"origin\"]),\n            has_origin_wildcard=bool(json[\"hasOriginWildcard\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScopeExtension.has_origin_wildcard","title":"<code>has_origin_wildcard: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScopeExtension.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScopeExtension.__init__","title":"<code>__init__(origin, has_origin_wildcard)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScopeExtension.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScopeExtension:\n    return cls(\n        origin=str(json[\"origin\"]),\n        has_origin_wildcard=bool(json[\"hasOriginWildcard\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScopeExtension.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"origin\"] = self.origin\n    json[\"hasOriginWildcard\"] = self.has_origin_wildcard\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrame","title":"<code>ScreencastFrame</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Compressed image data requested by the <code>startScreencast</code>.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.screencastFrame\")\n@dataclass\nclass ScreencastFrame:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Compressed image data requested by the ``startScreencast``.\n    \"\"\"\n\n    #: Base64-encoded compressed image. (Encoded as a base64 string when passed over JSON)\n    data: str\n    #: Screencast frame metadata.\n    metadata: ScreencastFrameMetadata\n    #: Frame number.\n    session_id: int\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScreencastFrame:\n        return cls(\n            data=str(json[\"data\"]),\n            metadata=ScreencastFrameMetadata.from_json(json[\"metadata\"]),\n            session_id=int(json[\"sessionId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrame.data","title":"<code>data: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrame.metadata","title":"<code>metadata: ScreencastFrameMetadata</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrame.session_id","title":"<code>session_id: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrame.__init__","title":"<code>__init__(data, metadata, session_id)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrame.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScreencastFrame:\n    return cls(\n        data=str(json[\"data\"]),\n        metadata=ScreencastFrameMetadata.from_json(json[\"metadata\"]),\n        session_id=int(json[\"sessionId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata","title":"<code>ScreencastFrameMetadata</code>  <code>dataclass</code>","text":"<p>Screencast frame metadata.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass ScreencastFrameMetadata:\n    \"\"\"\n    Screencast frame metadata.\n    \"\"\"\n\n    #: Top offset in DIP.\n    offset_top: float\n\n    #: Page scale factor.\n    page_scale_factor: float\n\n    #: Device screen width in DIP.\n    device_width: float\n\n    #: Device screen height in DIP.\n    device_height: float\n\n    #: Position of horizontal scroll in CSS pixels.\n    scroll_offset_x: float\n\n    #: Position of vertical scroll in CSS pixels.\n    scroll_offset_y: float\n\n    #: Frame swap timestamp.\n    timestamp: typing.Optional[network.TimeSinceEpoch] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"offsetTop\"] = self.offset_top\n        json[\"pageScaleFactor\"] = self.page_scale_factor\n        json[\"deviceWidth\"] = self.device_width\n        json[\"deviceHeight\"] = self.device_height\n        json[\"scrollOffsetX\"] = self.scroll_offset_x\n        json[\"scrollOffsetY\"] = self.scroll_offset_y\n        if self.timestamp is not None:\n            json[\"timestamp\"] = self.timestamp.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScreencastFrameMetadata:\n        return cls(\n            offset_top=float(json[\"offsetTop\"]),\n            page_scale_factor=float(json[\"pageScaleFactor\"]),\n            device_width=float(json[\"deviceWidth\"]),\n            device_height=float(json[\"deviceHeight\"]),\n            scroll_offset_x=float(json[\"scrollOffsetX\"]),\n            scroll_offset_y=float(json[\"scrollOffsetY\"]),\n            timestamp=(\n                network.TimeSinceEpoch.from_json(json[\"timestamp\"])\n                if json.get(\"timestamp\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata.device_height","title":"<code>device_height: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata.device_width","title":"<code>device_width: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata.offset_top","title":"<code>offset_top: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata.page_scale_factor","title":"<code>page_scale_factor: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata.scroll_offset_x","title":"<code>scroll_offset_x: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata.scroll_offset_y","title":"<code>scroll_offset_y: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata.timestamp","title":"<code>timestamp: typing.Optional[network.TimeSinceEpoch] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata.__init__","title":"<code>__init__(offset_top, page_scale_factor, device_width, device_height, scroll_offset_x, scroll_offset_y, timestamp=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScreencastFrameMetadata:\n    return cls(\n        offset_top=float(json[\"offsetTop\"]),\n        page_scale_factor=float(json[\"pageScaleFactor\"]),\n        device_width=float(json[\"deviceWidth\"]),\n        device_height=float(json[\"deviceHeight\"]),\n        scroll_offset_x=float(json[\"scrollOffsetX\"]),\n        scroll_offset_y=float(json[\"scrollOffsetY\"]),\n        timestamp=(\n            network.TimeSinceEpoch.from_json(json[\"timestamp\"])\n            if json.get(\"timestamp\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastFrameMetadata.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"offsetTop\"] = self.offset_top\n    json[\"pageScaleFactor\"] = self.page_scale_factor\n    json[\"deviceWidth\"] = self.device_width\n    json[\"deviceHeight\"] = self.device_height\n    json[\"scrollOffsetX\"] = self.scroll_offset_x\n    json[\"scrollOffsetY\"] = self.scroll_offset_y\n    if self.timestamp is not None:\n        json[\"timestamp\"] = self.timestamp.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastVisibilityChanged","title":"<code>ScreencastVisibilityChanged</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Fired when the page with currently enabled screencast was shown or hidden .</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.screencastVisibilityChanged\")\n@dataclass\nclass ScreencastVisibilityChanged:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Fired when the page with currently enabled screencast was shown or hidden .\n    \"\"\"\n\n    #: True if the page is visible.\n    visible: bool\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScreencastVisibilityChanged:\n        return cls(visible=bool(json[\"visible\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastVisibilityChanged.visible","title":"<code>visible: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastVisibilityChanged.__init__","title":"<code>__init__(visible)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScreencastVisibilityChanged.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScreencastVisibilityChanged:\n    return cls(visible=bool(json[\"visible\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Screenshot","title":"<code>Screenshot</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass Screenshot:\n    image: ImageResource\n\n    form_factor: str\n\n    label: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"image\"] = self.image.to_json()\n        json[\"formFactor\"] = self.form_factor\n        if self.label is not None:\n            json[\"label\"] = self.label\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Screenshot:\n        return cls(\n            image=ImageResource.from_json(json[\"image\"]),\n            form_factor=str(json[\"formFactor\"]),\n            label=str(json[\"label\"]) if json.get(\"label\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Screenshot.form_factor","title":"<code>form_factor: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Screenshot.image","title":"<code>image: ImageResource</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Screenshot.label","title":"<code>label: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Screenshot.__init__","title":"<code>__init__(image, form_factor, label=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Screenshot.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Screenshot:\n    return cls(\n        image=ImageResource.from_json(json[\"image\"]),\n        form_factor=str(json[\"formFactor\"]),\n        label=str(json[\"label\"]) if json.get(\"label\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Screenshot.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"image\"] = self.image.to_json()\n    json[\"formFactor\"] = self.form_factor\n    if self.label is not None:\n        json[\"label\"] = self.label\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScriptFontFamilies","title":"<code>ScriptFontFamilies</code>  <code>dataclass</code>","text":"<p>Font families collection for a script.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass ScriptFontFamilies:\n    \"\"\"\n    Font families collection for a script.\n    \"\"\"\n\n    #: Name of the script which these font families are defined for.\n    script: str\n\n    #: Generic font families collection for the script.\n    font_families: FontFamilies\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"script\"] = self.script\n        json[\"fontFamilies\"] = self.font_families.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScriptFontFamilies:\n        return cls(\n            script=str(json[\"script\"]),\n            font_families=FontFamilies.from_json(json[\"fontFamilies\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScriptFontFamilies.font_families","title":"<code>font_families: FontFamilies</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScriptFontFamilies.script","title":"<code>script: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScriptFontFamilies.__init__","title":"<code>__init__(script, font_families)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ScriptFontFamilies.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScriptFontFamilies:\n    return cls(\n        script=str(json[\"script\"]),\n        font_families=FontFamilies.from_json(json[\"fontFamilies\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScriptFontFamilies.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"script\"] = self.script\n    json[\"fontFamilies\"] = self.font_families.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScriptIdentifier","title":"<code>ScriptIdentifier</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique script identifier.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class ScriptIdentifier(str):\n    \"\"\"\n    Unique script identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ScriptIdentifier:\n        return cls(json)\n\n    def __repr__(self):\n        return \"ScriptIdentifier({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScriptIdentifier.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def __repr__(self):\n    return \"ScriptIdentifier({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScriptIdentifier.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ScriptIdentifier:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ScriptIdentifier.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.SecureContextType","title":"<code>SecureContextType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Indicates whether the frame is a secure context and why it is the case.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class SecureContextType(enum.Enum):\n    \"\"\"\n    Indicates whether the frame is a secure context and why it is the case.\n    \"\"\"\n\n    SECURE = \"Secure\"\n    SECURE_LOCALHOST = \"SecureLocalhost\"\n    INSECURE_SCHEME = \"InsecureScheme\"\n    INSECURE_ANCESTOR = \"InsecureAncestor\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SecureContextType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.SecureContextType.INSECURE_ANCESTOR","title":"<code>INSECURE_ANCESTOR = 'InsecureAncestor'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.SecureContextType.INSECURE_SCHEME","title":"<code>INSECURE_SCHEME = 'InsecureScheme'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.SecureContextType.SECURE","title":"<code>SECURE = 'Secure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.SecureContextType.SECURE_LOCALHOST","title":"<code>SECURE_LOCALHOST = 'SecureLocalhost'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.SecureContextType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SecureContextType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.SecureContextType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget","title":"<code>ShareTarget</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass ShareTarget:\n    action: str\n\n    method: str\n\n    enctype: str\n\n    #: Embed the ShareTargetParams\n    title: typing.Optional[str] = None\n\n    text: typing.Optional[str] = None\n\n    url: typing.Optional[str] = None\n\n    files: typing.Optional[typing.List[FileFilter]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"action\"] = self.action\n        json[\"method\"] = self.method\n        json[\"enctype\"] = self.enctype\n        if self.title is not None:\n            json[\"title\"] = self.title\n        if self.text is not None:\n            json[\"text\"] = self.text\n        if self.url is not None:\n            json[\"url\"] = self.url\n        if self.files is not None:\n            json[\"files\"] = [i.to_json() for i in self.files]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ShareTarget:\n        return cls(\n            action=str(json[\"action\"]),\n            method=str(json[\"method\"]),\n            enctype=str(json[\"enctype\"]),\n            title=str(json[\"title\"]) if json.get(\"title\", None) is not None else None,\n            text=str(json[\"text\"]) if json.get(\"text\", None) is not None else None,\n            url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n            files=(\n                [FileFilter.from_json(i) for i in json[\"files\"]]\n                if json.get(\"files\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget.action","title":"<code>action: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget.enctype","title":"<code>enctype: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget.files","title":"<code>files: typing.Optional[typing.List[FileFilter]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget.method","title":"<code>method: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget.text","title":"<code>text: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget.title","title":"<code>title: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget.url","title":"<code>url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget.__init__","title":"<code>__init__(action, method, enctype, title=None, text=None, url=None, files=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ShareTarget:\n    return cls(\n        action=str(json[\"action\"]),\n        method=str(json[\"method\"]),\n        enctype=str(json[\"enctype\"]),\n        title=str(json[\"title\"]) if json.get(\"title\", None) is not None else None,\n        text=str(json[\"text\"]) if json.get(\"text\", None) is not None else None,\n        url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n        files=(\n            [FileFilter.from_json(i) for i in json[\"files\"]]\n            if json.get(\"files\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.ShareTarget.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"action\"] = self.action\n    json[\"method\"] = self.method\n    json[\"enctype\"] = self.enctype\n    if self.title is not None:\n        json[\"title\"] = self.title\n    if self.text is not None:\n        json[\"text\"] = self.text\n    if self.url is not None:\n        json[\"url\"] = self.url\n    if self.files is not None:\n        json[\"files\"] = [i.to_json() for i in self.files]\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Shortcut","title":"<code>Shortcut</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass Shortcut:\n    name: str\n\n    url: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"url\"] = self.url\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Shortcut:\n        return cls(\n            name=str(json[\"name\"]),\n            url=str(json[\"url\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Shortcut.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Shortcut.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Shortcut.__init__","title":"<code>__init__(name, url)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Shortcut.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Shortcut:\n    return cls(\n        name=str(json[\"name\"]),\n        url=str(json[\"url\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Shortcut.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"url\"] = self.url\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType","title":"<code>TransitionType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Transition type.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>class TransitionType(enum.Enum):\n    \"\"\"\n    Transition type.\n    \"\"\"\n\n    LINK = \"link\"\n    TYPED = \"typed\"\n    ADDRESS_BAR = \"address_bar\"\n    AUTO_BOOKMARK = \"auto_bookmark\"\n    AUTO_SUBFRAME = \"auto_subframe\"\n    MANUAL_SUBFRAME = \"manual_subframe\"\n    GENERATED = \"generated\"\n    AUTO_TOPLEVEL = \"auto_toplevel\"\n    FORM_SUBMIT = \"form_submit\"\n    RELOAD = \"reload\"\n    KEYWORD = \"keyword\"\n    KEYWORD_GENERATED = \"keyword_generated\"\n    OTHER = \"other\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; TransitionType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.ADDRESS_BAR","title":"<code>ADDRESS_BAR = 'address_bar'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.AUTO_BOOKMARK","title":"<code>AUTO_BOOKMARK = 'auto_bookmark'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.AUTO_SUBFRAME","title":"<code>AUTO_SUBFRAME = 'auto_subframe'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.AUTO_TOPLEVEL","title":"<code>AUTO_TOPLEVEL = 'auto_toplevel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.FORM_SUBMIT","title":"<code>FORM_SUBMIT = 'form_submit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.GENERATED","title":"<code>GENERATED = 'generated'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.KEYWORD","title":"<code>KEYWORD = 'keyword'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.KEYWORD_GENERATED","title":"<code>KEYWORD_GENERATED = 'keyword_generated'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.LINK","title":"<code>LINK = 'link'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.MANUAL_SUBFRAME","title":"<code>MANUAL_SUBFRAME = 'manual_subframe'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.OTHER","title":"<code>OTHER = 'other'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.RELOAD","title":"<code>RELOAD = 'reload'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.TYPED","title":"<code>TYPED = 'typed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; TransitionType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.TransitionType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Viewport","title":"<code>Viewport</code>  <code>dataclass</code>","text":"<p>Viewport for capturing screenshot.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass Viewport:\n    \"\"\"\n    Viewport for capturing screenshot.\n    \"\"\"\n\n    #: X offset in device independent pixels (dip).\n    x: float\n\n    #: Y offset in device independent pixels (dip).\n    y: float\n\n    #: Rectangle width in device independent pixels (dip).\n    width: float\n\n    #: Rectangle height in device independent pixels (dip).\n    height: float\n\n    #: Page scale factor.\n    scale: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"x\"] = self.x\n        json[\"y\"] = self.y\n        json[\"width\"] = self.width\n        json[\"height\"] = self.height\n        json[\"scale\"] = self.scale\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Viewport:\n        return cls(\n            x=float(json[\"x\"]),\n            y=float(json[\"y\"]),\n            width=float(json[\"width\"]),\n            height=float(json[\"height\"]),\n            scale=float(json[\"scale\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Viewport.height","title":"<code>height: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Viewport.scale","title":"<code>scale: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Viewport.width","title":"<code>width: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Viewport.x","title":"<code>x: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Viewport.y","title":"<code>y: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Viewport.__init__","title":"<code>__init__(x, y, width, height, scale)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.Viewport.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Viewport:\n    return cls(\n        x=float(json[\"x\"]),\n        y=float(json[\"y\"]),\n        width=float(json[\"width\"]),\n        height=float(json[\"height\"]),\n        scale=float(json[\"scale\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.Viewport.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"x\"] = self.x\n    json[\"y\"] = self.y\n    json[\"width\"] = self.width\n    json[\"height\"] = self.height\n    json[\"scale\"] = self.scale\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport","title":"<code>VisualViewport</code>  <code>dataclass</code>","text":"<p>Visual viewport position, dimensions, and scale.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass VisualViewport:\n    \"\"\"\n    Visual viewport position, dimensions, and scale.\n    \"\"\"\n\n    #: Horizontal offset relative to the layout viewport (CSS pixels).\n    offset_x: float\n\n    #: Vertical offset relative to the layout viewport (CSS pixels).\n    offset_y: float\n\n    #: Horizontal offset relative to the document (CSS pixels).\n    page_x: float\n\n    #: Vertical offset relative to the document (CSS pixels).\n    page_y: float\n\n    #: Width (CSS pixels), excludes scrollbar if present.\n    client_width: float\n\n    #: Height (CSS pixels), excludes scrollbar if present.\n    client_height: float\n\n    #: Scale relative to the ideal viewport (size at width=device-width).\n    scale: float\n\n    #: Page zoom factor (CSS to device independent pixels ratio).\n    zoom: typing.Optional[float] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"offsetX\"] = self.offset_x\n        json[\"offsetY\"] = self.offset_y\n        json[\"pageX\"] = self.page_x\n        json[\"pageY\"] = self.page_y\n        json[\"clientWidth\"] = self.client_width\n        json[\"clientHeight\"] = self.client_height\n        json[\"scale\"] = self.scale\n        if self.zoom is not None:\n            json[\"zoom\"] = self.zoom\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; VisualViewport:\n        return cls(\n            offset_x=float(json[\"offsetX\"]),\n            offset_y=float(json[\"offsetY\"]),\n            page_x=float(json[\"pageX\"]),\n            page_y=float(json[\"pageY\"]),\n            client_width=float(json[\"clientWidth\"]),\n            client_height=float(json[\"clientHeight\"]),\n            scale=float(json[\"scale\"]),\n            zoom=float(json[\"zoom\"]) if json.get(\"zoom\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.client_height","title":"<code>client_height: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.client_width","title":"<code>client_width: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.offset_x","title":"<code>offset_x: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.offset_y","title":"<code>offset_y: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.page_x","title":"<code>page_x: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.page_y","title":"<code>page_y: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.scale","title":"<code>scale: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.zoom","title":"<code>zoom: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.__init__","title":"<code>__init__(offset_x, offset_y, page_x, page_y, client_width, client_height, scale, zoom=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; VisualViewport:\n    return cls(\n        offset_x=float(json[\"offsetX\"]),\n        offset_y=float(json[\"offsetY\"]),\n        page_x=float(json[\"pageX\"]),\n        page_y=float(json[\"pageY\"]),\n        client_width=float(json[\"clientWidth\"]),\n        client_height=float(json[\"clientHeight\"]),\n        scale=float(json[\"scale\"]),\n        zoom=float(json[\"zoom\"]) if json.get(\"zoom\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.VisualViewport.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"offsetX\"] = self.offset_x\n    json[\"offsetY\"] = self.offset_y\n    json[\"pageX\"] = self.page_x\n    json[\"pageY\"] = self.page_y\n    json[\"clientWidth\"] = self.client_width\n    json[\"clientHeight\"] = self.client_height\n    json[\"scale\"] = self.scale\n    if self.zoom is not None:\n        json[\"zoom\"] = self.zoom\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest","title":"<code>WebAppManifest</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@dataclass\nclass WebAppManifest:\n    background_color: typing.Optional[str] = None\n\n    #: The extra description provided by the manifest.\n    description: typing.Optional[str] = None\n\n    dir_: typing.Optional[str] = None\n\n    display: typing.Optional[str] = None\n\n    #: The overrided display mode controlled by the user.\n    display_overrides: typing.Optional[typing.List[str]] = None\n\n    #: The handlers to open files.\n    file_handlers: typing.Optional[typing.List[FileHandler]] = None\n\n    icons: typing.Optional[typing.List[ImageResource]] = None\n\n    id_: typing.Optional[str] = None\n\n    lang: typing.Optional[str] = None\n\n    #: TODO(crbug.com/1231886): This field is non-standard and part of a Chrome\n    #: experiment. See:\n    #: https://github.com/WICG/web-app-launch/blob/main/launch_handler.md\n    launch_handler: typing.Optional[LaunchHandler] = None\n\n    name: typing.Optional[str] = None\n\n    orientation: typing.Optional[str] = None\n\n    prefer_related_applications: typing.Optional[bool] = None\n\n    #: The handlers to open protocols.\n    protocol_handlers: typing.Optional[typing.List[ProtocolHandler]] = None\n\n    related_applications: typing.Optional[typing.List[RelatedApplication]] = None\n\n    scope: typing.Optional[str] = None\n\n    #: Non-standard, see\n    #: https://github.com/WICG/manifest-incubations/blob/gh-pages/scope_extensions-explainer.md\n    scope_extensions: typing.Optional[typing.List[ScopeExtension]] = None\n\n    #: The screenshots used by chromium.\n    screenshots: typing.Optional[typing.List[Screenshot]] = None\n\n    share_target: typing.Optional[ShareTarget] = None\n\n    short_name: typing.Optional[str] = None\n\n    shortcuts: typing.Optional[typing.List[Shortcut]] = None\n\n    start_url: typing.Optional[str] = None\n\n    theme_color: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.background_color is not None:\n            json[\"backgroundColor\"] = self.background_color\n        if self.description is not None:\n            json[\"description\"] = self.description\n        if self.dir_ is not None:\n            json[\"dir\"] = self.dir_\n        if self.display is not None:\n            json[\"display\"] = self.display\n        if self.display_overrides is not None:\n            json[\"displayOverrides\"] = [i for i in self.display_overrides]\n        if self.file_handlers is not None:\n            json[\"fileHandlers\"] = [i.to_json() for i in self.file_handlers]\n        if self.icons is not None:\n            json[\"icons\"] = [i.to_json() for i in self.icons]\n        if self.id_ is not None:\n            json[\"id\"] = self.id_\n        if self.lang is not None:\n            json[\"lang\"] = self.lang\n        if self.launch_handler is not None:\n            json[\"launchHandler\"] = self.launch_handler.to_json()\n        if self.name is not None:\n            json[\"name\"] = self.name\n        if self.orientation is not None:\n            json[\"orientation\"] = self.orientation\n        if self.prefer_related_applications is not None:\n            json[\"preferRelatedApplications\"] = self.prefer_related_applications\n        if self.protocol_handlers is not None:\n            json[\"protocolHandlers\"] = [i.to_json() for i in self.protocol_handlers]\n        if self.related_applications is not None:\n            json[\"relatedApplications\"] = [\n                i.to_json() for i in self.related_applications\n            ]\n        if self.scope is not None:\n            json[\"scope\"] = self.scope\n        if self.scope_extensions is not None:\n            json[\"scopeExtensions\"] = [i.to_json() for i in self.scope_extensions]\n        if self.screenshots is not None:\n            json[\"screenshots\"] = [i.to_json() for i in self.screenshots]\n        if self.share_target is not None:\n            json[\"shareTarget\"] = self.share_target.to_json()\n        if self.short_name is not None:\n            json[\"shortName\"] = self.short_name\n        if self.shortcuts is not None:\n            json[\"shortcuts\"] = [i.to_json() for i in self.shortcuts]\n        if self.start_url is not None:\n            json[\"startUrl\"] = self.start_url\n        if self.theme_color is not None:\n            json[\"themeColor\"] = self.theme_color\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WebAppManifest:\n        return cls(\n            background_color=(\n                str(json[\"backgroundColor\"])\n                if json.get(\"backgroundColor\", None) is not None\n                else None\n            ),\n            description=(\n                str(json[\"description\"])\n                if json.get(\"description\", None) is not None\n                else None\n            ),\n            dir_=str(json[\"dir\"]) if json.get(\"dir\", None) is not None else None,\n            display=(\n                str(json[\"display\"]) if json.get(\"display\", None) is not None else None\n            ),\n            display_overrides=(\n                [str(i) for i in json[\"displayOverrides\"]]\n                if json.get(\"displayOverrides\", None) is not None\n                else None\n            ),\n            file_handlers=(\n                [FileHandler.from_json(i) for i in json[\"fileHandlers\"]]\n                if json.get(\"fileHandlers\", None) is not None\n                else None\n            ),\n            icons=(\n                [ImageResource.from_json(i) for i in json[\"icons\"]]\n                if json.get(\"icons\", None) is not None\n                else None\n            ),\n            id_=str(json[\"id\"]) if json.get(\"id\", None) is not None else None,\n            lang=str(json[\"lang\"]) if json.get(\"lang\", None) is not None else None,\n            launch_handler=(\n                LaunchHandler.from_json(json[\"launchHandler\"])\n                if json.get(\"launchHandler\", None) is not None\n                else None\n            ),\n            name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n            orientation=(\n                str(json[\"orientation\"])\n                if json.get(\"orientation\", None) is not None\n                else None\n            ),\n            prefer_related_applications=(\n                bool(json[\"preferRelatedApplications\"])\n                if json.get(\"preferRelatedApplications\", None) is not None\n                else None\n            ),\n            protocol_handlers=(\n                [ProtocolHandler.from_json(i) for i in json[\"protocolHandlers\"]]\n                if json.get(\"protocolHandlers\", None) is not None\n                else None\n            ),\n            related_applications=(\n                [RelatedApplication.from_json(i) for i in json[\"relatedApplications\"]]\n                if json.get(\"relatedApplications\", None) is not None\n                else None\n            ),\n            scope=str(json[\"scope\"]) if json.get(\"scope\", None) is not None else None,\n            scope_extensions=(\n                [ScopeExtension.from_json(i) for i in json[\"scopeExtensions\"]]\n                if json.get(\"scopeExtensions\", None) is not None\n                else None\n            ),\n            screenshots=(\n                [Screenshot.from_json(i) for i in json[\"screenshots\"]]\n                if json.get(\"screenshots\", None) is not None\n                else None\n            ),\n            share_target=(\n                ShareTarget.from_json(json[\"shareTarget\"])\n                if json.get(\"shareTarget\", None) is not None\n                else None\n            ),\n            short_name=(\n                str(json[\"shortName\"])\n                if json.get(\"shortName\", None) is not None\n                else None\n            ),\n            shortcuts=(\n                [Shortcut.from_json(i) for i in json[\"shortcuts\"]]\n                if json.get(\"shortcuts\", None) is not None\n                else None\n            ),\n            start_url=(\n                str(json[\"startUrl\"])\n                if json.get(\"startUrl\", None) is not None\n                else None\n            ),\n            theme_color=(\n                str(json[\"themeColor\"])\n                if json.get(\"themeColor\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.background_color","title":"<code>background_color: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.description","title":"<code>description: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.dir_","title":"<code>dir_: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.display","title":"<code>display: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.display_overrides","title":"<code>display_overrides: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.file_handlers","title":"<code>file_handlers: typing.Optional[typing.List[FileHandler]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.icons","title":"<code>icons: typing.Optional[typing.List[ImageResource]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.id_","title":"<code>id_: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.lang","title":"<code>lang: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.launch_handler","title":"<code>launch_handler: typing.Optional[LaunchHandler] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.name","title":"<code>name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.orientation","title":"<code>orientation: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.prefer_related_applications","title":"<code>prefer_related_applications: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.protocol_handlers","title":"<code>protocol_handlers: typing.Optional[typing.List[ProtocolHandler]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.related_applications","title":"<code>related_applications: typing.Optional[typing.List[RelatedApplication]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.scope","title":"<code>scope: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.scope_extensions","title":"<code>scope_extensions: typing.Optional[typing.List[ScopeExtension]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.screenshots","title":"<code>screenshots: typing.Optional[typing.List[Screenshot]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.share_target","title":"<code>share_target: typing.Optional[ShareTarget] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.short_name","title":"<code>short_name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.shortcuts","title":"<code>shortcuts: typing.Optional[typing.List[Shortcut]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.start_url","title":"<code>start_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.theme_color","title":"<code>theme_color: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.__init__","title":"<code>__init__(background_color=None, description=None, dir_=None, display=None, display_overrides=None, file_handlers=None, icons=None, id_=None, lang=None, launch_handler=None, name=None, orientation=None, prefer_related_applications=None, protocol_handlers=None, related_applications=None, scope=None, scope_extensions=None, screenshots=None, share_target=None, short_name=None, shortcuts=None, start_url=None, theme_color=None)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WebAppManifest:\n    return cls(\n        background_color=(\n            str(json[\"backgroundColor\"])\n            if json.get(\"backgroundColor\", None) is not None\n            else None\n        ),\n        description=(\n            str(json[\"description\"])\n            if json.get(\"description\", None) is not None\n            else None\n        ),\n        dir_=str(json[\"dir\"]) if json.get(\"dir\", None) is not None else None,\n        display=(\n            str(json[\"display\"]) if json.get(\"display\", None) is not None else None\n        ),\n        display_overrides=(\n            [str(i) for i in json[\"displayOverrides\"]]\n            if json.get(\"displayOverrides\", None) is not None\n            else None\n        ),\n        file_handlers=(\n            [FileHandler.from_json(i) for i in json[\"fileHandlers\"]]\n            if json.get(\"fileHandlers\", None) is not None\n            else None\n        ),\n        icons=(\n            [ImageResource.from_json(i) for i in json[\"icons\"]]\n            if json.get(\"icons\", None) is not None\n            else None\n        ),\n        id_=str(json[\"id\"]) if json.get(\"id\", None) is not None else None,\n        lang=str(json[\"lang\"]) if json.get(\"lang\", None) is not None else None,\n        launch_handler=(\n            LaunchHandler.from_json(json[\"launchHandler\"])\n            if json.get(\"launchHandler\", None) is not None\n            else None\n        ),\n        name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n        orientation=(\n            str(json[\"orientation\"])\n            if json.get(\"orientation\", None) is not None\n            else None\n        ),\n        prefer_related_applications=(\n            bool(json[\"preferRelatedApplications\"])\n            if json.get(\"preferRelatedApplications\", None) is not None\n            else None\n        ),\n        protocol_handlers=(\n            [ProtocolHandler.from_json(i) for i in json[\"protocolHandlers\"]]\n            if json.get(\"protocolHandlers\", None) is not None\n            else None\n        ),\n        related_applications=(\n            [RelatedApplication.from_json(i) for i in json[\"relatedApplications\"]]\n            if json.get(\"relatedApplications\", None) is not None\n            else None\n        ),\n        scope=str(json[\"scope\"]) if json.get(\"scope\", None) is not None else None,\n        scope_extensions=(\n            [ScopeExtension.from_json(i) for i in json[\"scopeExtensions\"]]\n            if json.get(\"scopeExtensions\", None) is not None\n            else None\n        ),\n        screenshots=(\n            [Screenshot.from_json(i) for i in json[\"screenshots\"]]\n            if json.get(\"screenshots\", None) is not None\n            else None\n        ),\n        share_target=(\n            ShareTarget.from_json(json[\"shareTarget\"])\n            if json.get(\"shareTarget\", None) is not None\n            else None\n        ),\n        short_name=(\n            str(json[\"shortName\"])\n            if json.get(\"shortName\", None) is not None\n            else None\n        ),\n        shortcuts=(\n            [Shortcut.from_json(i) for i in json[\"shortcuts\"]]\n            if json.get(\"shortcuts\", None) is not None\n            else None\n        ),\n        start_url=(\n            str(json[\"startUrl\"])\n            if json.get(\"startUrl\", None) is not None\n            else None\n        ),\n        theme_color=(\n            str(json[\"themeColor\"])\n            if json.get(\"themeColor\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.WebAppManifest.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.background_color is not None:\n        json[\"backgroundColor\"] = self.background_color\n    if self.description is not None:\n        json[\"description\"] = self.description\n    if self.dir_ is not None:\n        json[\"dir\"] = self.dir_\n    if self.display is not None:\n        json[\"display\"] = self.display\n    if self.display_overrides is not None:\n        json[\"displayOverrides\"] = [i for i in self.display_overrides]\n    if self.file_handlers is not None:\n        json[\"fileHandlers\"] = [i.to_json() for i in self.file_handlers]\n    if self.icons is not None:\n        json[\"icons\"] = [i.to_json() for i in self.icons]\n    if self.id_ is not None:\n        json[\"id\"] = self.id_\n    if self.lang is not None:\n        json[\"lang\"] = self.lang\n    if self.launch_handler is not None:\n        json[\"launchHandler\"] = self.launch_handler.to_json()\n    if self.name is not None:\n        json[\"name\"] = self.name\n    if self.orientation is not None:\n        json[\"orientation\"] = self.orientation\n    if self.prefer_related_applications is not None:\n        json[\"preferRelatedApplications\"] = self.prefer_related_applications\n    if self.protocol_handlers is not None:\n        json[\"protocolHandlers\"] = [i.to_json() for i in self.protocol_handlers]\n    if self.related_applications is not None:\n        json[\"relatedApplications\"] = [\n            i.to_json() for i in self.related_applications\n        ]\n    if self.scope is not None:\n        json[\"scope\"] = self.scope\n    if self.scope_extensions is not None:\n        json[\"scopeExtensions\"] = [i.to_json() for i in self.scope_extensions]\n    if self.screenshots is not None:\n        json[\"screenshots\"] = [i.to_json() for i in self.screenshots]\n    if self.share_target is not None:\n        json[\"shareTarget\"] = self.share_target.to_json()\n    if self.short_name is not None:\n        json[\"shortName\"] = self.short_name\n    if self.shortcuts is not None:\n        json[\"shortcuts\"] = [i.to_json() for i in self.shortcuts]\n    if self.start_url is not None:\n        json[\"startUrl\"] = self.start_url\n    if self.theme_color is not None:\n        json[\"themeColor\"] = self.theme_color\n    return json\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.WindowOpen","title":"<code>WindowOpen</code>  <code>dataclass</code>","text":"<p>Fired when a new window is going to be opened, via window.open(), link click, form submission, etc.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@event_class(\"Page.windowOpen\")\n@dataclass\nclass WindowOpen:\n    \"\"\"\n    Fired when a new window is going to be opened, via window.open(), link click, form submission,\n    etc.\n    \"\"\"\n\n    #: The URL for the new window.\n    url: str\n    #: Window name.\n    window_name: str\n    #: An array of enabled window features.\n    window_features: typing.List[str]\n    #: Whether or not it was triggered by user gesture.\n    user_gesture: bool\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WindowOpen:\n        return cls(\n            url=str(json[\"url\"]),\n            window_name=str(json[\"windowName\"]),\n            window_features=[str(i) for i in json[\"windowFeatures\"]],\n            user_gesture=bool(json[\"userGesture\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.WindowOpen.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WindowOpen.user_gesture","title":"<code>user_gesture: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WindowOpen.window_features","title":"<code>window_features: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WindowOpen.window_name","title":"<code>window_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WindowOpen.__init__","title":"<code>__init__(url, window_name, window_features, user_gesture)</code>","text":""},{"location":"reference/cdp/page/#zendriver.cdp.page.WindowOpen.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/page.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WindowOpen:\n    return cls(\n        url=str(json[\"url\"]),\n        window_name=str(json[\"windowName\"]),\n        window_features=[str(i) for i in json[\"windowFeatures\"]],\n        user_gesture=bool(json[\"userGesture\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.add_compilation_cache","title":"<code>add_compilation_cache(url, data)</code>","text":"<p>Seeds compilation cache for given url. Compilation cache does not survive cross-process navigation.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> required <code>data</code> <code>str</code> <p>Base64-encoded data (Encoded as a base64 string when passed over JSON)</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def add_compilation_cache(\n    url: str, data: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Seeds compilation cache for given url. Compilation cache does not survive\n    cross-process navigation.\n\n    **EXPERIMENTAL**\n\n    :param url:\n    :param data: Base64-encoded data (Encoded as a base64 string when passed over JSON)\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"url\"] = url\n    params[\"data\"] = data\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.addCompilationCache\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.add_script_to_evaluate_on_load","title":"<code>add_script_to_evaluate_on_load(script_source)</code>","text":"<p>Deprecated, please use addScriptToEvaluateOnNewDocument instead.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>script_source</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, ScriptIdentifier]</code> <p>Identifier of the added script.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef add_script_to_evaluate_on_load(\n    script_source: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, ScriptIdentifier]:\n    \"\"\"\n    Deprecated, please use addScriptToEvaluateOnNewDocument instead.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param script_source:\n    :returns: Identifier of the added script.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scriptSource\"] = script_source\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.addScriptToEvaluateOnLoad\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return ScriptIdentifier.from_json(json[\"identifier\"])\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.add_script_to_evaluate_on_new_document","title":"<code>add_script_to_evaluate_on_new_document(source, world_name=None, include_command_line_api=None, run_immediately=None)</code>","text":"<p>Evaluates given script in every frame upon creation (before loading frame's scripts).</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> required <code>world_name</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) If specified, creates an isolated world with the given name and evaluates given script in it. This world name will be used as the ExecutionContextDescription::name when the corresponding event is emitted.</p> <code>None</code> <code>include_command_line_api</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Specifies whether command line API should be available to the script, defaults to false.</p> <code>None</code> <code>run_immediately</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) If true, runs the script immediately on existing execution contexts or worlds. Default: false.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, ScriptIdentifier]</code> <p>Identifier of the added script.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def add_script_to_evaluate_on_new_document(\n    source: str,\n    world_name: typing.Optional[str] = None,\n    include_command_line_api: typing.Optional[bool] = None,\n    run_immediately: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, ScriptIdentifier]:\n    \"\"\"\n    Evaluates given script in every frame upon creation (before loading frame's scripts).\n\n    :param source:\n    :param world_name: **(EXPERIMENTAL)** *(Optional)* If specified, creates an isolated world with the given name and evaluates given script in it. This world name will be used as the ExecutionContextDescription::name when the corresponding event is emitted.\n    :param include_command_line_api: **(EXPERIMENTAL)** *(Optional)* Specifies whether command line API should be available to the script, defaults to false.\n    :param run_immediately: **(EXPERIMENTAL)** *(Optional)* If true, runs the script immediately on existing execution contexts or worlds. Default: false.\n    :returns: Identifier of the added script.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"source\"] = source\n    if world_name is not None:\n        params[\"worldName\"] = world_name\n    if include_command_line_api is not None:\n        params[\"includeCommandLineAPI\"] = include_command_line_api\n    if run_immediately is not None:\n        params[\"runImmediately\"] = run_immediately\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.addScriptToEvaluateOnNewDocument\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return ScriptIdentifier.from_json(json[\"identifier\"])\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.bring_to_front","title":"<code>bring_to_front()</code>","text":"<p>Brings page to front (activates tab).</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def bring_to_front() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Brings page to front (activates tab).\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.bringToFront\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.capture_screenshot","title":"<code>capture_screenshot(format_=None, quality=None, clip=None, from_surface=None, capture_beyond_viewport=None, optimize_for_speed=None)</code>","text":"<p>Capture page screenshot.</p> <p>Parameters:</p> Name Type Description Default <code>format_</code> <code>Optional[str]</code> <p>(Optional) Image compression format (defaults to png).</p> <code>None</code> <code>quality</code> <code>Optional[int]</code> <p>(Optional) Compression quality from range [0..100] (jpeg only).</p> <code>None</code> <code>clip</code> <code>Optional[Viewport]</code> <p>(Optional) Capture the screenshot of a given region only.</p> <code>None</code> <code>from_surface</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Capture the screenshot from the surface, rather than the view. Defaults to true.</p> <code>None</code> <code>capture_beyond_viewport</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Capture the screenshot beyond the viewport. Defaults to false.</p> <code>None</code> <code>optimize_for_speed</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Optimize image encoding for speed, not for resulting size (defaults to false)</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>Base64-encoded image data. (Encoded as a base64 string when passed over JSON)</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def capture_screenshot(\n    format_: typing.Optional[str] = None,\n    quality: typing.Optional[int] = None,\n    clip: typing.Optional[Viewport] = None,\n    from_surface: typing.Optional[bool] = None,\n    capture_beyond_viewport: typing.Optional[bool] = None,\n    optimize_for_speed: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Capture page screenshot.\n\n    :param format_: *(Optional)* Image compression format (defaults to png).\n    :param quality: *(Optional)* Compression quality from range [0..100] (jpeg only).\n    :param clip: *(Optional)* Capture the screenshot of a given region only.\n    :param from_surface: **(EXPERIMENTAL)** *(Optional)* Capture the screenshot from the surface, rather than the view. Defaults to true.\n    :param capture_beyond_viewport: **(EXPERIMENTAL)** *(Optional)* Capture the screenshot beyond the viewport. Defaults to false.\n    :param optimize_for_speed: **(EXPERIMENTAL)** *(Optional)* Optimize image encoding for speed, not for resulting size (defaults to false)\n    :returns: Base64-encoded image data. (Encoded as a base64 string when passed over JSON)\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if format_ is not None:\n        params[\"format\"] = format_\n    if quality is not None:\n        params[\"quality\"] = quality\n    if clip is not None:\n        params[\"clip\"] = clip.to_json()\n    if from_surface is not None:\n        params[\"fromSurface\"] = from_surface\n    if capture_beyond_viewport is not None:\n        params[\"captureBeyondViewport\"] = capture_beyond_viewport\n    if optimize_for_speed is not None:\n        params[\"optimizeForSpeed\"] = optimize_for_speed\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.captureScreenshot\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"data\"])\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.capture_snapshot","title":"<code>capture_snapshot(format_=None)</code>","text":"<p>Returns a snapshot of the page as a string. For MHTML format, the serialization includes iframes, shadow DOM, external resources, and element-inline styles.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>format_</code> <code>Optional[str]</code> <p>(Optional) Format (defaults to mhtml).</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>Serialized page data.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def capture_snapshot(\n    format_: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Returns a snapshot of the page as a string. For MHTML format, the serialization includes\n    iframes, shadow DOM, external resources, and element-inline styles.\n\n    **EXPERIMENTAL**\n\n    :param format_: *(Optional)* Format (defaults to mhtml).\n    :returns: Serialized page data.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if format_ is not None:\n        params[\"format\"] = format_\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.captureSnapshot\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return str(json[\"data\"])\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.clear_compilation_cache","title":"<code>clear_compilation_cache()</code>","text":"<p>Clears seeded compilation cache.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def clear_compilation_cache() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears seeded compilation cache.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.clearCompilationCache\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.clear_device_metrics_override","title":"<code>clear_device_metrics_override()</code>","text":"<p>Clears the overridden device metrics.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef clear_device_metrics_override() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears the overridden device metrics.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.clearDeviceMetricsOverride\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.clear_device_orientation_override","title":"<code>clear_device_orientation_override()</code>","text":"<p>Clears the overridden Device Orientation.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef clear_device_orientation_override() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, None]\n):\n    \"\"\"\n    Clears the overridden Device Orientation.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.clearDeviceOrientationOverride\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.clear_geolocation_override","title":"<code>clear_geolocation_override()</code>","text":"<p>Clears the overridden Geolocation Position and Error.</p> <p>.. deprecated:: 1.3</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef clear_geolocation_override() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears the overridden Geolocation Position and Error.\n\n    .. deprecated:: 1.3\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.clearGeolocationOverride\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.close","title":"<code>close()</code>","text":"<p>Tries to close page, running its beforeunload hooks, if any.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def close() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Tries to close page, running its beforeunload hooks, if any.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.close\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.crash","title":"<code>crash()</code>","text":"<p>Crashes renderer on the IO thread, generates minidumps.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def crash() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Crashes renderer on the IO thread, generates minidumps.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.crash\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.create_isolated_world","title":"<code>create_isolated_world(frame_id, world_name=None, grant_univeral_access=None)</code>","text":"<p>Creates an isolated world for the given frame.</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> <p>Id of the frame in which the isolated world should be created.</p> required <code>world_name</code> <code>Optional[str]</code> <p>(Optional) An optional name which is reported in the Execution Context.</p> <code>None</code> <code>grant_univeral_access</code> <code>Optional[bool]</code> <p>(Optional) Whether or not universal access should be granted to the isolated world. This is a powerful option, use with caution.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, ExecutionContextId]</code> <p>Execution context of the isolated world.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def create_isolated_world(\n    frame_id: FrameId,\n    world_name: typing.Optional[str] = None,\n    grant_univeral_access: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, runtime.ExecutionContextId]:\n    \"\"\"\n    Creates an isolated world for the given frame.\n\n    :param frame_id: Id of the frame in which the isolated world should be created.\n    :param world_name: *(Optional)* An optional name which is reported in the Execution Context.\n    :param grant_univeral_access: *(Optional)* Whether or not universal access should be granted to the isolated world. This is a powerful option, use with caution.\n    :returns: Execution context of the isolated world.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    if world_name is not None:\n        params[\"worldName\"] = world_name\n    if grant_univeral_access is not None:\n        params[\"grantUniveralAccess\"] = grant_univeral_access\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.createIsolatedWorld\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return runtime.ExecutionContextId.from_json(json[\"executionContextId\"])\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.delete_cookie","title":"<code>delete_cookie(cookie_name, url)</code>","text":"<p>Deletes browser cookie with given name, domain and path.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>cookie_name</code> <code>str</code> <p>Name of the cookie to remove.</p> required <code>url</code> <code>str</code> <p>URL to match cooke domain and path.</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef delete_cookie(\n    cookie_name: str, url: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Deletes browser cookie with given name, domain and path.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param cookie_name: Name of the cookie to remove.\n    :param url: URL to match cooke domain and path.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"cookieName\"] = cookie_name\n    params[\"url\"] = url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.deleteCookie\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.disable","title":"<code>disable()</code>","text":"<p>Disables page domain notifications.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables page domain notifications.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.enable","title":"<code>enable()</code>","text":"<p>Enables page domain notifications.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables page domain notifications.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.generate_test_report","title":"<code>generate_test_report(message, group=None)</code>","text":"<p>Generates a report for testing.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Message to be displayed in the report.</p> required <code>group</code> <code>Optional[str]</code> <p>(Optional) Specifies the endpoint group to deliver the report to.</p> <code>None</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def generate_test_report(\n    message: str, group: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Generates a report for testing.\n\n    **EXPERIMENTAL**\n\n    :param message: Message to be displayed in the report.\n    :param group: *(Optional)* Specifies the endpoint group to deliver the report to.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"message\"] = message\n    if group is not None:\n        params[\"group\"] = group\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.generateTestReport\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_ad_script_id","title":"<code>get_ad_script_id(frame_id)</code>","text":"<p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Optional[AdScriptId]]</code> <p>(Optional) Identifies the bottom-most script which caused the frame to be labelled as an ad. Only sent if frame is labelled as an ad and id is available.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_ad_script_id(\n    frame_id: FrameId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Optional[AdScriptId]]:\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :param frame_id:\n    :returns: *(Optional)* Identifies the bottom-most script which caused the frame to be labelled as an ad. Only sent if frame is labelled as an ad and id is available.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getAdScriptId\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        AdScriptId.from_json(json[\"adScriptId\"])\n        if json.get(\"adScriptId\", None) is not None\n        else None\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_app_id","title":"<code>get_app_id()</code>","text":"<p>Returns the unique (PWA) app id. Only returns values if the feature flag 'WebAppEnableManifestId' is enabled</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[Optional[str], Optional[str]]]</code> <p>A tuple with the following items:  0. appId - (Optional) App id, either from manifest's id attribute or computed from start_url 1. recommendedId - (Optional) Recommendation for manifest's id attribute to match current id computed from start_url</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_app_id() -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[typing.Optional[str], typing.Optional[str]],\n]:\n    \"\"\"\n    Returns the unique (PWA) app id.\n    Only returns values if the feature flag 'WebAppEnableManifestId' is enabled\n\n    **EXPERIMENTAL**\n\n    :returns: A tuple with the following items:\n\n        0. **appId** - *(Optional)* App id, either from manifest's id attribute or computed from start_url\n        1. **recommendedId** - *(Optional)* Recommendation for manifest's id attribute to match current id computed from start_url\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getAppId\",\n    }\n    json = yield cmd_dict\n    return (\n        str(json[\"appId\"]) if json.get(\"appId\", None) is not None else None,\n        (\n            str(json[\"recommendedId\"])\n            if json.get(\"recommendedId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_app_manifest","title":"<code>get_app_manifest(manifest_id=None)</code>","text":"<p>Gets the processed manifest for this current document.   This API always waits for the manifest to be loaded.   If manifestId is provided, and it does not match the manifest of the     current document, this API errors out.   If there is not a loaded page, this API errors out immediately.</p> <p>Parameters:</p> Name Type Description Default <code>manifest_id</code> <code>Optional[str]</code> <p>(Optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[str, List[AppManifestError], Optional[str], Optional[AppManifestParsedProperties], WebAppManifest]]</code> <p>A tuple with the following items:  0. url - Manifest location. 1. errors - 2. data - (Optional) Manifest content. 3. parsed - (Optional) Parsed manifest properties. Deprecated, use manifest instead. 4. manifest -</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_app_manifest(\n    manifest_id: typing.Optional[str] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[\n        str,\n        typing.List[AppManifestError],\n        typing.Optional[str],\n        typing.Optional[AppManifestParsedProperties],\n        WebAppManifest,\n    ],\n]:\n    \"\"\"\n    Gets the processed manifest for this current document.\n      This API always waits for the manifest to be loaded.\n      If manifestId is provided, and it does not match the manifest of the\n        current document, this API errors out.\n      If there is not a loaded page, this API errors out immediately.\n\n    :param manifest_id: *(Optional)*\n    :returns: A tuple with the following items:\n\n        0. **url** - Manifest location.\n        1. **errors** -\n        2. **data** - *(Optional)* Manifest content.\n        3. **parsed** - *(Optional)* Parsed manifest properties. Deprecated, use manifest instead.\n        4. **manifest** -\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if manifest_id is not None:\n        params[\"manifestId\"] = manifest_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getAppManifest\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        str(json[\"url\"]),\n        [AppManifestError.from_json(i) for i in json[\"errors\"]],\n        str(json[\"data\"]) if json.get(\"data\", None) is not None else None,\n        (\n            AppManifestParsedProperties.from_json(json[\"parsed\"])\n            if json.get(\"parsed\", None) is not None\n            else None\n        ),\n        WebAppManifest.from_json(json[\"manifest\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_frame_tree","title":"<code>get_frame_tree()</code>","text":"<p>Returns present frame tree structure.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, FrameTree]</code> <p>Present frame tree structure.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_frame_tree() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, FrameTree]:\n    \"\"\"\n    Returns present frame tree structure.\n\n    :returns: Present frame tree structure.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getFrameTree\",\n    }\n    json = yield cmd_dict\n    return FrameTree.from_json(json[\"frameTree\"])\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_installability_errors","title":"<code>get_installability_errors()</code>","text":"<p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[InstallabilityError]]</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_installability_errors() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[InstallabilityError]]\n):\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getInstallabilityErrors\",\n    }\n    json = yield cmd_dict\n    return [InstallabilityError.from_json(i) for i in json[\"installabilityErrors\"]]\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_layout_metrics","title":"<code>get_layout_metrics()</code>","text":"<p>Returns metrics relating to the layouting of the page, such as viewport bounds/scale.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[LayoutViewport, VisualViewport, Rect, LayoutViewport, VisualViewport, Rect]]</code> <p>A tuple with the following items:  0. layoutViewport - Deprecated metrics relating to the layout viewport. Is in device pixels. Use <code>cssLayoutViewport</code> instead. 1. visualViewport - Deprecated metrics relating to the visual viewport. Is in device pixels. Use <code>cssVisualViewport</code> instead. 2. contentSize - Deprecated size of scrollable area. Is in DP. Use <code>cssContentSize</code> instead. 3. cssLayoutViewport - Metrics relating to the layout viewport in CSS pixels. 4. cssVisualViewport - Metrics relating to the visual viewport in CSS pixels. 5. cssContentSize - Size of scrollable area in CSS pixels.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_layout_metrics() -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[\n        LayoutViewport,\n        VisualViewport,\n        dom.Rect,\n        LayoutViewport,\n        VisualViewport,\n        dom.Rect,\n    ],\n]:\n    \"\"\"\n    Returns metrics relating to the layouting of the page, such as viewport bounds/scale.\n\n    :returns: A tuple with the following items:\n\n        0. **layoutViewport** - Deprecated metrics relating to the layout viewport. Is in device pixels. Use ``cssLayoutViewport`` instead.\n        1. **visualViewport** - Deprecated metrics relating to the visual viewport. Is in device pixels. Use ``cssVisualViewport`` instead.\n        2. **contentSize** - Deprecated size of scrollable area. Is in DP. Use ``cssContentSize`` instead.\n        3. **cssLayoutViewport** - Metrics relating to the layout viewport in CSS pixels.\n        4. **cssVisualViewport** - Metrics relating to the visual viewport in CSS pixels.\n        5. **cssContentSize** - Size of scrollable area in CSS pixels.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getLayoutMetrics\",\n    }\n    json = yield cmd_dict\n    return (\n        LayoutViewport.from_json(json[\"layoutViewport\"]),\n        VisualViewport.from_json(json[\"visualViewport\"]),\n        dom.Rect.from_json(json[\"contentSize\"]),\n        LayoutViewport.from_json(json[\"cssLayoutViewport\"]),\n        VisualViewport.from_json(json[\"cssVisualViewport\"]),\n        dom.Rect.from_json(json[\"cssContentSize\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_manifest_icons","title":"<code>get_manifest_icons()</code>","text":"<p>Deprecated because it's not guaranteed that the returned icon is in fact the one used for PWA installation.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Optional[str]]</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef get_manifest_icons() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Optional[str]]\n):\n    \"\"\"\n    Deprecated because it's not guaranteed that the returned icon is in fact the one used for PWA installation.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getManifestIcons\",\n    }\n    json = yield cmd_dict\n    return (\n        str(json[\"primaryIcon\"]) if json.get(\"primaryIcon\", None) is not None else None\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_navigation_history","title":"<code>get_navigation_history()</code>","text":"<p>Returns navigation history for the current page.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[int, List[NavigationEntry]]]</code> <p>A tuple with the following items:  0. currentIndex - Index of the current navigation history entry. 1. entries - Array of navigation history entries.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_navigation_history() -&gt; (\n    typing.Generator[\n        T_JSON_DICT, T_JSON_DICT, typing.Tuple[int, typing.List[NavigationEntry]]\n    ]\n):\n    \"\"\"\n    Returns navigation history for the current page.\n\n    :returns: A tuple with the following items:\n\n        0. **currentIndex** - Index of the current navigation history entry.\n        1. **entries** - Array of navigation history entries.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getNavigationHistory\",\n    }\n    json = yield cmd_dict\n    return (\n        int(json[\"currentIndex\"]),\n        [NavigationEntry.from_json(i) for i in json[\"entries\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_origin_trials","title":"<code>get_origin_trials(frame_id)</code>","text":"<p>Get Origin Trials on given frame.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[OriginTrial]]</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_origin_trials(\n    frame_id: FrameId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[OriginTrial]]:\n    \"\"\"\n    Get Origin Trials on given frame.\n\n    **EXPERIMENTAL**\n\n    :param frame_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getOriginTrials\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [OriginTrial.from_json(i) for i in json[\"originTrials\"]]\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_permissions_policy_state","title":"<code>get_permissions_policy_state(frame_id)</code>","text":"<p>Get Permissions Policy state on given frame.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[PermissionsPolicyFeatureState]]</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_permissions_policy_state(\n    frame_id: FrameId,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.List[PermissionsPolicyFeatureState]\n]:\n    \"\"\"\n    Get Permissions Policy state on given frame.\n\n    **EXPERIMENTAL**\n\n    :param frame_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getPermissionsPolicyState\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [PermissionsPolicyFeatureState.from_json(i) for i in json[\"states\"]]\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_resource_content","title":"<code>get_resource_content(frame_id, url)</code>","text":"<p>Returns content of the given resource.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> <p>Frame id to get resource for.</p> required <code>url</code> <code>str</code> <p>URL of the resource to get content for.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[str, bool]]</code> <p>A tuple with the following items:  0. content - Resource content. 1. base64Encoded - True, if content was served as base64.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_resource_content(\n    frame_id: FrameId, url: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, bool]]:\n    \"\"\"\n    Returns content of the given resource.\n\n    **EXPERIMENTAL**\n\n    :param frame_id: Frame id to get resource for.\n    :param url: URL of the resource to get content for.\n    :returns: A tuple with the following items:\n\n        0. **content** - Resource content.\n        1. **base64Encoded** - True, if content was served as base64.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    params[\"url\"] = url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getResourceContent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (str(json[\"content\"]), bool(json[\"base64Encoded\"]))\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.get_resource_tree","title":"<code>get_resource_tree()</code>","text":"<p>Returns present frame / resource tree structure.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, FrameResourceTree]</code> <p>Present frame / resource tree structure.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def get_resource_tree() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, FrameResourceTree]\n):\n    \"\"\"\n    Returns present frame / resource tree structure.\n\n    **EXPERIMENTAL**\n\n    :returns: Present frame / resource tree structure.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.getResourceTree\",\n    }\n    json = yield cmd_dict\n    return FrameResourceTree.from_json(json[\"frameTree\"])\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.handle_java_script_dialog","title":"<code>handle_java_script_dialog(accept, prompt_text=None)</code>","text":"<p>Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).</p> <p>Parameters:</p> Name Type Description Default <code>accept</code> <code>bool</code> <p>Whether to accept or dismiss the dialog.</p> required <code>prompt_text</code> <code>Optional[str]</code> <p>(Optional) The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.</p> <code>None</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def handle_java_script_dialog(\n    accept: bool, prompt_text: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).\n\n    :param accept: Whether to accept or dismiss the dialog.\n    :param prompt_text: *(Optional)* The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"accept\"] = accept\n    if prompt_text is not None:\n        params[\"promptText\"] = prompt_text\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.handleJavaScriptDialog\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.navigate","title":"<code>navigate(url, referrer=None, transition_type=None, frame_id=None, referrer_policy=None)</code>","text":"<p>Navigates current page to the given URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to navigate the page to.</p> required <code>referrer</code> <code>Optional[str]</code> <p>(Optional) Referrer URL.</p> <code>None</code> <code>transition_type</code> <code>Optional[TransitionType]</code> <p>(Optional) Intended transition type.</p> <code>None</code> <code>frame_id</code> <code>Optional[FrameId]</code> <p>(Optional) Frame id to navigate, if not specified navigates the top frame.</p> <code>None</code> <code>referrer_policy</code> <code>Optional[ReferrerPolicy]</code> <p>(EXPERIMENTAL) (Optional) Referrer-policy used for the navigation.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[FrameId, Optional[LoaderId], Optional[str]]]</code> <p>A tuple with the following items:  0. frameId - Frame id that has navigated (or failed to navigate) 1. loaderId - (Optional) Loader identifier. This is omitted in case of same-document navigation, as the previously committed loaderId would not change. 2. errorText - (Optional) User friendly error message, present if and only if navigation has failed.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def navigate(\n    url: str,\n    referrer: typing.Optional[str] = None,\n    transition_type: typing.Optional[TransitionType] = None,\n    frame_id: typing.Optional[FrameId] = None,\n    referrer_policy: typing.Optional[ReferrerPolicy] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[FrameId, typing.Optional[network.LoaderId], typing.Optional[str]],\n]:\n    \"\"\"\n    Navigates current page to the given URL.\n\n    :param url: URL to navigate the page to.\n    :param referrer: *(Optional)* Referrer URL.\n    :param transition_type: *(Optional)* Intended transition type.\n    :param frame_id: *(Optional)* Frame id to navigate, if not specified navigates the top frame.\n    :param referrer_policy: **(EXPERIMENTAL)** *(Optional)* Referrer-policy used for the navigation.\n    :returns: A tuple with the following items:\n\n        0. **frameId** - Frame id that has navigated (or failed to navigate)\n        1. **loaderId** - *(Optional)* Loader identifier. This is omitted in case of same-document navigation, as the previously committed loaderId would not change.\n        2. **errorText** - *(Optional)* User friendly error message, present if and only if navigation has failed.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"url\"] = url\n    if referrer is not None:\n        params[\"referrer\"] = referrer\n    if transition_type is not None:\n        params[\"transitionType\"] = transition_type.to_json()\n    if frame_id is not None:\n        params[\"frameId\"] = frame_id.to_json()\n    if referrer_policy is not None:\n        params[\"referrerPolicy\"] = referrer_policy.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.navigate\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        FrameId.from_json(json[\"frameId\"]),\n        (\n            network.LoaderId.from_json(json[\"loaderId\"])\n            if json.get(\"loaderId\", None) is not None\n            else None\n        ),\n        str(json[\"errorText\"]) if json.get(\"errorText\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.navigate_to_history_entry","title":"<code>navigate_to_history_entry(entry_id)</code>","text":"<p>Navigates current page to the given history entry.</p> <p>Parameters:</p> Name Type Description Default <code>entry_id</code> <code>int</code> <p>Unique id of the entry to navigate to.</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def navigate_to_history_entry(\n    entry_id: int,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Navigates current page to the given history entry.\n\n    :param entry_id: Unique id of the entry to navigate to.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"entryId\"] = entry_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.navigateToHistoryEntry\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.print_to_pdf","title":"<code>print_to_pdf(landscape=None, display_header_footer=None, print_background=None, scale=None, paper_width=None, paper_height=None, margin_top=None, margin_bottom=None, margin_left=None, margin_right=None, page_ranges=None, header_template=None, footer_template=None, prefer_css_page_size=None, transfer_mode=None, generate_tagged_pdf=None, generate_document_outline=None)</code>","text":"<p>Print page as PDF.</p> <p>Parameters:</p> Name Type Description Default <code>landscape</code> <code>Optional[bool]</code> <p>(Optional) Paper orientation. Defaults to false.</p> <code>None</code> <code>display_header_footer</code> <code>Optional[bool]</code> <p>(Optional) Display header and footer. Defaults to false.</p> <code>None</code> <code>print_background</code> <code>Optional[bool]</code> <p>(Optional) Print background graphics. Defaults to false.</p> <code>None</code> <code>scale</code> <code>Optional[float]</code> <p>(Optional) Scale of the webpage rendering. Defaults to 1.</p> <code>None</code> <code>paper_width</code> <code>Optional[float]</code> <p>(Optional) Paper width in inches. Defaults to 8.5 inches.</p> <code>None</code> <code>paper_height</code> <code>Optional[float]</code> <p>(Optional) Paper height in inches. Defaults to 11 inches.</p> <code>None</code> <code>margin_top</code> <code>Optional[float]</code> <p>(Optional) Top margin in inches. Defaults to 1cm (~0.4 inches).</p> <code>None</code> <code>margin_bottom</code> <code>Optional[float]</code> <p>(Optional) Bottom margin in inches. Defaults to 1cm (~0.4 inches).</p> <code>None</code> <code>margin_left</code> <code>Optional[float]</code> <p>(Optional) Left margin in inches. Defaults to 1cm (~0.4 inches).</p> <code>None</code> <code>margin_right</code> <code>Optional[float]</code> <p>(Optional) Right margin in inches. Defaults to 1cm (~0.4 inches).</p> <code>None</code> <code>page_ranges</code> <code>Optional[str]</code> <p>(Optional) Paper ranges to print, one based, e.g., '1-5, 8, 11-13'. Pages are printed in the document order, not in the order specified, and no more than once. Defaults to empty string, which implies the entire document is printed. The page numbers are quietly capped to actual page count of the document, and ranges beyond the end of the document are ignored. If this results in no pages to print, an error is reported. It is an error to specify a range with start greater than end.</p> <code>None</code> <code>header_template</code> <code>Optional[str]</code> <p>(Optional) HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: - ```date<code>: formatted print date -</code>title<code>: document title -</code>url<code>: document location -</code>pageNumber<code>: current page number -</code>totalPages<code>: total pages in the document  For example,</code>```` would generate span containing the title.</p> <code>None</code> <code>footer_template</code> <code>Optional[str]</code> <p>(Optional) HTML template for the print footer. Should use the same format as the <code>headerTemplate</code>.</p> <code>None</code> <code>prefer_css_page_size</code> <code>Optional[bool]</code> <p>(Optional) Whether or not to prefer page size as defined by css. Defaults to false, in which case the content will be scaled to fit the paper size.</p> <code>None</code> <code>transfer_mode</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) return as stream</p> <code>None</code> <code>generate_tagged_pdf</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether or not to generate tagged (accessible) PDF. Defaults to embedder choice.</p> <code>None</code> <code>generate_document_outline</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether or not to embed the document outline into the PDF.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[str, Optional[StreamHandle]]]</code> <p>A tuple with the following items:  0. data - Base64-encoded pdf data. Empty if <code>` returnAsStream</code> is specified. (Encoded as a base64 string when passed over JSON) 1. stream - (Optional) A handle of the stream that holds resulting PDF data.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def print_to_pdf(\n    landscape: typing.Optional[bool] = None,\n    display_header_footer: typing.Optional[bool] = None,\n    print_background: typing.Optional[bool] = None,\n    scale: typing.Optional[float] = None,\n    paper_width: typing.Optional[float] = None,\n    paper_height: typing.Optional[float] = None,\n    margin_top: typing.Optional[float] = None,\n    margin_bottom: typing.Optional[float] = None,\n    margin_left: typing.Optional[float] = None,\n    margin_right: typing.Optional[float] = None,\n    page_ranges: typing.Optional[str] = None,\n    header_template: typing.Optional[str] = None,\n    footer_template: typing.Optional[str] = None,\n    prefer_css_page_size: typing.Optional[bool] = None,\n    transfer_mode: typing.Optional[str] = None,\n    generate_tagged_pdf: typing.Optional[bool] = None,\n    generate_document_outline: typing.Optional[bool] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, typing.Optional[io.StreamHandle]]\n]:\n    \"\"\"\n    Print page as PDF.\n\n    :param landscape: *(Optional)* Paper orientation. Defaults to false.\n    :param display_header_footer: *(Optional)* Display header and footer. Defaults to false.\n    :param print_background: *(Optional)* Print background graphics. Defaults to false.\n    :param scale: *(Optional)* Scale of the webpage rendering. Defaults to 1.\n    :param paper_width: *(Optional)* Paper width in inches. Defaults to 8.5 inches.\n    :param paper_height: *(Optional)* Paper height in inches. Defaults to 11 inches.\n    :param margin_top: *(Optional)* Top margin in inches. Defaults to 1cm (~0.4 inches).\n    :param margin_bottom: *(Optional)* Bottom margin in inches. Defaults to 1cm (~0.4 inches).\n    :param margin_left: *(Optional)* Left margin in inches. Defaults to 1cm (~0.4 inches).\n    :param margin_right: *(Optional)* Right margin in inches. Defaults to 1cm (~0.4 inches).\n    :param page_ranges: *(Optional)* Paper ranges to print, one based, e.g., '1-5, 8, 11-13'. Pages are printed in the document order, not in the order specified, and no more than once. Defaults to empty string, which implies the entire document is printed. The page numbers are quietly capped to actual page count of the document, and ranges beyond the end of the document are ignored. If this results in no pages to print, an error is reported. It is an error to specify a range with start greater than end.\n    :param header_template: *(Optional)* HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: - ```date````: formatted print date - ````title````: document title - ````url````: document location - ````pageNumber````: current page number - ````totalPages````: total pages in the document  For example, ````&lt;span class=title&gt;&lt;/span&gt;```` would generate span containing the title.\n    :param footer_template: *(Optional)* HTML template for the print footer. Should use the same format as the ````headerTemplate````.\n    :param prefer_css_page_size: *(Optional)* Whether or not to prefer page size as defined by css. Defaults to false, in which case the content will be scaled to fit the paper size.\n    :param transfer_mode: **(EXPERIMENTAL)** *(Optional)* return as stream\n    :param generate_tagged_pdf: **(EXPERIMENTAL)** *(Optional)* Whether or not to generate tagged (accessible) PDF. Defaults to embedder choice.\n    :param generate_document_outline: **(EXPERIMENTAL)** *(Optional)* Whether or not to embed the document outline into the PDF.\n    :returns: A tuple with the following items:\n\n        0. **data** - Base64-encoded pdf data. Empty if `` returnAsStream` is specified. (Encoded as a base64 string when passed over JSON)\n        1. **stream** - *(Optional)* A handle of the stream that holds resulting PDF data.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if landscape is not None:\n        params[\"landscape\"] = landscape\n    if display_header_footer is not None:\n        params[\"displayHeaderFooter\"] = display_header_footer\n    if print_background is not None:\n        params[\"printBackground\"] = print_background\n    if scale is not None:\n        params[\"scale\"] = scale\n    if paper_width is not None:\n        params[\"paperWidth\"] = paper_width\n    if paper_height is not None:\n        params[\"paperHeight\"] = paper_height\n    if margin_top is not None:\n        params[\"marginTop\"] = margin_top\n    if margin_bottom is not None:\n        params[\"marginBottom\"] = margin_bottom\n    if margin_left is not None:\n        params[\"marginLeft\"] = margin_left\n    if margin_right is not None:\n        params[\"marginRight\"] = margin_right\n    if page_ranges is not None:\n        params[\"pageRanges\"] = page_ranges\n    if header_template is not None:\n        params[\"headerTemplate\"] = header_template\n    if footer_template is not None:\n        params[\"footerTemplate\"] = footer_template\n    if prefer_css_page_size is not None:\n        params[\"preferCSSPageSize\"] = prefer_css_page_size\n    if transfer_mode is not None:\n        params[\"transferMode\"] = transfer_mode\n    if generate_tagged_pdf is not None:\n        params[\"generateTaggedPDF\"] = generate_tagged_pdf\n    if generate_document_outline is not None:\n        params[\"generateDocumentOutline\"] = generate_document_outline\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.printToPDF\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        str(json[\"data\"]),\n        (\n            io.StreamHandle.from_json(json[\"stream\"])\n            if json.get(\"stream\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.produce_compilation_cache","title":"<code>produce_compilation_cache(scripts)</code>","text":"<p>Requests backend to produce compilation cache for the specified scripts. <code>scripts</code> are appended to the list of scripts for which the cache would be produced. The list may be reset during page navigation. When script with a matching URL is encountered, the cache is optionally produced upon backend discretion, based on internal heuristics. See also: <code>Page.compilationCacheProduced</code>.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>scripts</code> <code>List[CompilationCacheParams]</code> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def produce_compilation_cache(\n    scripts: typing.List[CompilationCacheParams],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Requests backend to produce compilation cache for the specified scripts.\n    ``scripts`` are appended to the list of scripts for which the cache\n    would be produced. The list may be reset during page navigation.\n    When script with a matching URL is encountered, the cache is optionally\n    produced upon backend discretion, based on internal heuristics.\n    See also: ``Page.compilationCacheProduced``.\n\n    **EXPERIMENTAL**\n\n    :param scripts:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scripts\"] = [i.to_json() for i in scripts]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.produceCompilationCache\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.reload","title":"<code>reload(ignore_cache=None, script_to_evaluate_on_load=None, loader_id=None)</code>","text":"<p>Reloads given page optionally ignoring the cache.</p> <p>Parameters:</p> Name Type Description Default <code>ignore_cache</code> <code>Optional[bool]</code> <p>(Optional) If true, browser cache is ignored (as if the user pressed Shift+refresh).</p> <code>None</code> <code>script_to_evaluate_on_load</code> <code>Optional[str]</code> <p>(Optional) If set, the script will be injected into all frames of the inspected page after reload. Argument will be ignored if reloading dataURL origin.</p> <code>None</code> <code>loader_id</code> <code>Optional[LoaderId]</code> <p>(EXPERIMENTAL) (Optional) If set, an error will be thrown if the target page's main frame's loader id does not match the provided id. This prevents accidentally reloading an unintended target in case there's a racing navigation.</p> <code>None</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def reload(\n    ignore_cache: typing.Optional[bool] = None,\n    script_to_evaluate_on_load: typing.Optional[str] = None,\n    loader_id: typing.Optional[network.LoaderId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Reloads given page optionally ignoring the cache.\n\n    :param ignore_cache: *(Optional)* If true, browser cache is ignored (as if the user pressed Shift+refresh).\n    :param script_to_evaluate_on_load: *(Optional)* If set, the script will be injected into all frames of the inspected page after reload. Argument will be ignored if reloading dataURL origin.\n    :param loader_id: **(EXPERIMENTAL)** *(Optional)* If set, an error will be thrown if the target page's main frame's loader id does not match the provided id. This prevents accidentally reloading an unintended target in case there's a racing navigation.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if ignore_cache is not None:\n        params[\"ignoreCache\"] = ignore_cache\n    if script_to_evaluate_on_load is not None:\n        params[\"scriptToEvaluateOnLoad\"] = script_to_evaluate_on_load\n    if loader_id is not None:\n        params[\"loaderId\"] = loader_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.reload\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.remove_script_to_evaluate_on_load","title":"<code>remove_script_to_evaluate_on_load(identifier)</code>","text":"<p>Deprecated, please use removeScriptToEvaluateOnNewDocument instead.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>ScriptIdentifier</code> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef remove_script_to_evaluate_on_load(\n    identifier: ScriptIdentifier,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Deprecated, please use removeScriptToEvaluateOnNewDocument instead.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param identifier:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"identifier\"] = identifier.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.removeScriptToEvaluateOnLoad\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.remove_script_to_evaluate_on_new_document","title":"<code>remove_script_to_evaluate_on_new_document(identifier)</code>","text":"<p>Removes given script from the list.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>ScriptIdentifier</code> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def remove_script_to_evaluate_on_new_document(\n    identifier: ScriptIdentifier,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes given script from the list.\n\n    :param identifier:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"identifier\"] = identifier.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.removeScriptToEvaluateOnNewDocument\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.reset_navigation_history","title":"<code>reset_navigation_history()</code>","text":"<p>Resets navigation history for the current page.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def reset_navigation_history() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Resets navigation history for the current page.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.resetNavigationHistory\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.screencast_frame_ack","title":"<code>screencast_frame_ack(session_id)</code>","text":"<p>Acknowledges that a screencast frame has been received by the frontend.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>int</code> <p>Frame number.</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def screencast_frame_ack(\n    session_id: int,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Acknowledges that a screencast frame has been received by the frontend.\n\n    **EXPERIMENTAL**\n\n    :param session_id: Frame number.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"sessionId\"] = session_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.screencastFrameAck\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.search_in_resource","title":"<code>search_in_resource(frame_id, url, query, case_sensitive=None, is_regex=None)</code>","text":"<p>Searches for given string in resource content.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> <p>Frame id for resource to search in.</p> required <code>url</code> <code>str</code> <p>URL of the resource to search in.</p> required <code>query</code> <code>str</code> <p>String to search for.</p> required <code>case_sensitive</code> <code>Optional[bool]</code> <p>(Optional) If true, search is case sensitive.</p> <code>None</code> <code>is_regex</code> <code>Optional[bool]</code> <p>(Optional) If true, treats string parameter as regex.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[SearchMatch]]</code> <p>List of search matches.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def search_in_resource(\n    frame_id: FrameId,\n    url: str,\n    query: str,\n    case_sensitive: typing.Optional[bool] = None,\n    is_regex: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[debugger.SearchMatch]]:\n    \"\"\"\n    Searches for given string in resource content.\n\n    **EXPERIMENTAL**\n\n    :param frame_id: Frame id for resource to search in.\n    :param url: URL of the resource to search in.\n    :param query: String to search for.\n    :param case_sensitive: *(Optional)* If true, search is case sensitive.\n    :param is_regex: *(Optional)* If true, treats string parameter as regex.\n    :returns: List of search matches.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    params[\"url\"] = url\n    params[\"query\"] = query\n    if case_sensitive is not None:\n        params[\"caseSensitive\"] = case_sensitive\n    if is_regex is not None:\n        params[\"isRegex\"] = is_regex\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.searchInResource\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [debugger.SearchMatch.from_json(i) for i in json[\"result\"]]\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_ad_blocking_enabled","title":"<code>set_ad_blocking_enabled(enabled)</code>","text":"<p>Enable Chrome's experimental ad filter on all sites.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to block ads.</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_ad_blocking_enabled(\n    enabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enable Chrome's experimental ad filter on all sites.\n\n    **EXPERIMENTAL**\n\n    :param enabled: Whether to block ads.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setAdBlockingEnabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_bypass_csp","title":"<code>set_bypass_csp(enabled)</code>","text":"<p>Enable page Content Security Policy by-passing.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to bypass page CSP.</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_bypass_csp(enabled: bool) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enable page Content Security Policy by-passing.\n\n    :param enabled: Whether to bypass page CSP.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setBypassCSP\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_device_metrics_override","title":"<code>set_device_metrics_override(width, height, device_scale_factor, mobile, scale=None, screen_width=None, screen_height=None, position_x=None, position_y=None, dont_set_visible_size=None, screen_orientation=None, viewport=None)</code>","text":"<p>Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and \"device-width\"/\"device-height\"-related CSS media query results).</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.</p> required <code>height</code> <code>int</code> <p>Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.</p> required <code>device_scale_factor</code> <code>float</code> <p>Overriding device scale factor value. 0 disables the override.</p> required <code>mobile</code> <code>bool</code> <p>Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.</p> required <code>scale</code> <code>Optional[float]</code> <p>(Optional) Scale to apply to resulting view image.</p> <code>None</code> <code>screen_width</code> <code>Optional[int]</code> <p>(Optional) Overriding screen width value in pixels (minimum 0, maximum 10000000).</p> <code>None</code> <code>screen_height</code> <code>Optional[int]</code> <p>(Optional) Overriding screen height value in pixels (minimum 0, maximum 10000000).</p> <code>None</code> <code>position_x</code> <code>Optional[int]</code> <p>(Optional) Overriding view X position on screen in pixels (minimum 0, maximum 10000000).</p> <code>None</code> <code>position_y</code> <code>Optional[int]</code> <p>(Optional) Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).</p> <code>None</code> <code>dont_set_visible_size</code> <code>Optional[bool]</code> <p>(Optional) Do not set visible view size, rely upon explicit setVisibleSize call.</p> <code>None</code> <code>screen_orientation</code> <code>Optional[ScreenOrientation]</code> <p>(Optional) Screen orientation override.</p> <code>None</code> <code>viewport</code> <code>Optional[Viewport]</code> <p>(Optional) The viewport dimensions and scale. If not set, the override is cleared.</p> <code>None</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_device_metrics_override(\n    width: int,\n    height: int,\n    device_scale_factor: float,\n    mobile: bool,\n    scale: typing.Optional[float] = None,\n    screen_width: typing.Optional[int] = None,\n    screen_height: typing.Optional[int] = None,\n    position_x: typing.Optional[int] = None,\n    position_y: typing.Optional[int] = None,\n    dont_set_visible_size: typing.Optional[bool] = None,\n    screen_orientation: typing.Optional[emulation.ScreenOrientation] = None,\n    viewport: typing.Optional[Viewport] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides the values of device screen dimensions (window.screen.width, window.screen.height,\n    window.innerWidth, window.innerHeight, and \"device-width\"/\"device-height\"-related CSS media\n    query results).\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param width: Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.\n    :param height: Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.\n    :param device_scale_factor: Overriding device scale factor value. 0 disables the override.\n    :param mobile: Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.\n    :param scale: *(Optional)* Scale to apply to resulting view image.\n    :param screen_width: *(Optional)* Overriding screen width value in pixels (minimum 0, maximum 10000000).\n    :param screen_height: *(Optional)* Overriding screen height value in pixels (minimum 0, maximum 10000000).\n    :param position_x: *(Optional)* Overriding view X position on screen in pixels (minimum 0, maximum 10000000).\n    :param position_y: *(Optional)* Overriding view Y position on screen in pixels (minimum 0, maximum 10000000).\n    :param dont_set_visible_size: *(Optional)* Do not set visible view size, rely upon explicit setVisibleSize call.\n    :param screen_orientation: *(Optional)* Screen orientation override.\n    :param viewport: *(Optional)* The viewport dimensions and scale. If not set, the override is cleared.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"width\"] = width\n    params[\"height\"] = height\n    params[\"deviceScaleFactor\"] = device_scale_factor\n    params[\"mobile\"] = mobile\n    if scale is not None:\n        params[\"scale\"] = scale\n    if screen_width is not None:\n        params[\"screenWidth\"] = screen_width\n    if screen_height is not None:\n        params[\"screenHeight\"] = screen_height\n    if position_x is not None:\n        params[\"positionX\"] = position_x\n    if position_y is not None:\n        params[\"positionY\"] = position_y\n    if dont_set_visible_size is not None:\n        params[\"dontSetVisibleSize\"] = dont_set_visible_size\n    if screen_orientation is not None:\n        params[\"screenOrientation\"] = screen_orientation.to_json()\n    if viewport is not None:\n        params[\"viewport\"] = viewport.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setDeviceMetricsOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_device_orientation_override","title":"<code>set_device_orientation_override(alpha, beta, gamma)</code>","text":"<p>Overrides the Device Orientation.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>alpha</code> <code>float</code> <p>Mock alpha</p> required <code>beta</code> <code>float</code> <p>Mock beta</p> required <code>gamma</code> <code>float</code> <p>Mock gamma</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_device_orientation_override(\n    alpha: float, beta: float, gamma: float\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides the Device Orientation.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param alpha: Mock alpha\n    :param beta: Mock beta\n    :param gamma: Mock gamma\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"alpha\"] = alpha\n    params[\"beta\"] = beta\n    params[\"gamma\"] = gamma\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setDeviceOrientationOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_document_content","title":"<code>set_document_content(frame_id, html)</code>","text":"<p>Sets given markup as the document's HTML.</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> <p>Frame id to set HTML for.</p> required <code>html</code> <code>str</code> <p>HTML content to set.</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_document_content(\n    frame_id: FrameId, html: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets given markup as the document's HTML.\n\n    :param frame_id: Frame id to set HTML for.\n    :param html: HTML content to set.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    params[\"html\"] = html\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setDocumentContent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_download_behavior","title":"<code>set_download_behavior(behavior, download_path=None)</code>","text":"<p>Set the behavior when downloading a file.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>behavior</code> <code>str</code> <p>Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny).</p> required <code>download_path</code> <code>Optional[str]</code> <p>(Optional) The default path to save downloaded files to. This is required if behavior is set to 'allow'</p> <code>None</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_download_behavior(\n    behavior: str, download_path: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Set the behavior when downloading a file.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param behavior: Whether to allow all or deny all download requests, or use default Chrome behavior if available (otherwise deny).\n    :param download_path: *(Optional)* The default path to save downloaded files to. This is required if behavior is set to 'allow'\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"behavior\"] = behavior\n    if download_path is not None:\n        params[\"downloadPath\"] = download_path\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setDownloadBehavior\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_font_families","title":"<code>set_font_families(font_families, for_scripts=None)</code>","text":"<p>Set generic font families.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>font_families</code> <code>FontFamilies</code> <p>Specifies font families to set. If a font family is not specified, it won't be changed.</p> required <code>for_scripts</code> <code>Optional[List[ScriptFontFamilies]]</code> <p>(Optional) Specifies font families to set for individual scripts.</p> <code>None</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_font_families(\n    font_families: FontFamilies,\n    for_scripts: typing.Optional[typing.List[ScriptFontFamilies]] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Set generic font families.\n\n    **EXPERIMENTAL**\n\n    :param font_families: Specifies font families to set. If a font family is not specified, it won't be changed.\n    :param for_scripts: *(Optional)* Specifies font families to set for individual scripts.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"fontFamilies\"] = font_families.to_json()\n    if for_scripts is not None:\n        params[\"forScripts\"] = [i.to_json() for i in for_scripts]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setFontFamilies\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_font_sizes","title":"<code>set_font_sizes(font_sizes)</code>","text":"<p>Set default font sizes.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>font_sizes</code> <code>FontSizes</code> <p>Specifies font sizes to set. If a font size is not specified, it won't be changed.</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_font_sizes(\n    font_sizes: FontSizes,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Set default font sizes.\n\n    **EXPERIMENTAL**\n\n    :param font_sizes: Specifies font sizes to set. If a font size is not specified, it won't be changed.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"fontSizes\"] = font_sizes.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setFontSizes\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_geolocation_override","title":"<code>set_geolocation_override(latitude=None, longitude=None, accuracy=None)</code>","text":"<p>Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.</p> <p>.. deprecated:: 1.3</p> <p>Parameters:</p> Name Type Description Default <code>latitude</code> <code>Optional[float]</code> <p>(Optional) Mock latitude</p> <code>None</code> <code>longitude</code> <code>Optional[float]</code> <p>(Optional) Mock longitude</p> <code>None</code> <code>accuracy</code> <code>Optional[float]</code> <p>(Optional) Mock accuracy</p> <code>None</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_geolocation_override(\n    latitude: typing.Optional[float] = None,\n    longitude: typing.Optional[float] = None,\n    accuracy: typing.Optional[float] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position\n    unavailable.\n\n    .. deprecated:: 1.3\n\n    :param latitude: *(Optional)* Mock latitude\n    :param longitude: *(Optional)* Mock longitude\n    :param accuracy: *(Optional)* Mock accuracy\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if latitude is not None:\n        params[\"latitude\"] = latitude\n    if longitude is not None:\n        params[\"longitude\"] = longitude\n    if accuracy is not None:\n        params[\"accuracy\"] = accuracy\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setGeolocationOverride\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_intercept_file_chooser_dialog","title":"<code>set_intercept_file_chooser_dialog(enabled)</code>","text":"<p>Intercept file chooser requests and transfer control to protocol clients. When file chooser interception is enabled, native file chooser dialog is not shown. Instead, a protocol event <code>Page.fileChooserOpened</code> is emitted.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_intercept_file_chooser_dialog(\n    enabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Intercept file chooser requests and transfer control to protocol clients.\n    When file chooser interception is enabled, native file chooser dialog is not shown.\n    Instead, a protocol event ``Page.fileChooserOpened`` is emitted.\n\n    :param enabled:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setInterceptFileChooserDialog\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_lifecycle_events_enabled","title":"<code>set_lifecycle_events_enabled(enabled)</code>","text":"<p>Controls whether page will emit lifecycle events.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>If true, starts emitting lifecycle events.</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_lifecycle_events_enabled(\n    enabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Controls whether page will emit lifecycle events.\n\n    :param enabled: If true, starts emitting lifecycle events.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setLifecycleEventsEnabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_prerendering_allowed","title":"<code>set_prerendering_allowed(is_allowed)</code>","text":"<p>Enable/disable prerendering manually.</p> <p>This command is a short-term solution for https://crbug.com/1440085. See https://docs.google.com/document/d/12HVmFxYj5Jc-eJr5OmWsa2bqTJsbgGLKI6ZIyx0_wpA for more details.</p> <p>TODO(https://crbug.com/1440085): Remove this once Puppeteer supports tab targets.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>is_allowed</code> <code>bool</code> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_prerendering_allowed(\n    is_allowed: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enable/disable prerendering manually.\n\n    This command is a short-term solution for https://crbug.com/1440085.\n    See https://docs.google.com/document/d/12HVmFxYj5Jc-eJr5OmWsa2bqTJsbgGLKI6ZIyx0_wpA\n    for more details.\n\n    TODO(https://crbug.com/1440085): Remove this once Puppeteer supports tab targets.\n\n    **EXPERIMENTAL**\n\n    :param is_allowed:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"isAllowed\"] = is_allowed\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setPrerenderingAllowed\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_rph_registration_mode","title":"<code>set_rph_registration_mode(mode)</code>","text":"<p>Extensions for Custom Handlers API: https://html.spec.whatwg.org/multipage/system-state.html#rph-automation</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>AutoResponseMode</code> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_rph_registration_mode(\n    mode: AutoResponseMode,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Extensions for Custom Handlers API:\n    https://html.spec.whatwg.org/multipage/system-state.html#rph-automation\n\n    **EXPERIMENTAL**\n\n    :param mode:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"mode\"] = mode.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setRPHRegistrationMode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_spc_transaction_mode","title":"<code>set_spc_transaction_mode(mode)</code>","text":"<p>Sets the Secure Payment Confirmation transaction mode. https://w3c.github.io/secure-payment-confirmation/#sctn-automation-set-spc-transaction-mode</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>AutoResponseMode</code> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_spc_transaction_mode(\n    mode: AutoResponseMode,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets the Secure Payment Confirmation transaction mode.\n    https://w3c.github.io/secure-payment-confirmation/#sctn-automation-set-spc-transaction-mode\n\n    **EXPERIMENTAL**\n\n    :param mode:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"mode\"] = mode.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setSPCTransactionMode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_touch_emulation_enabled","title":"<code>set_touch_emulation_enabled(enabled, configuration=None)</code>","text":"<p>Toggles mouse event-based touch event emulation.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether the touch event emulation should be enabled.</p> required <code>configuration</code> <code>Optional[str]</code> <p>(Optional) Touch/gesture events configuration. Default: current platform.</p> <code>None</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_touch_emulation_enabled(\n    enabled: bool, configuration: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Toggles mouse event-based touch event emulation.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param enabled: Whether the touch event emulation should be enabled.\n    :param configuration: *(Optional)* Touch/gesture events configuration. Default: current platform.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    if configuration is not None:\n        params[\"configuration\"] = configuration\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setTouchEmulationEnabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.set_web_lifecycle_state","title":"<code>set_web_lifecycle_state(state)</code>","text":"<p>Tries to update the web lifecycle state of the page. It will transition the page to the given state according to: https://github.com/WICG/web-lifecycle/</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>str</code> <p>Target lifecycle state</p> required Source code in <code>zendriver/cdp/page.py</code> <pre><code>def set_web_lifecycle_state(\n    state: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Tries to update the web lifecycle state of the page.\n    It will transition the page to the given state according to:\n    https://github.com/WICG/web-lifecycle/\n\n    **EXPERIMENTAL**\n\n    :param state: Target lifecycle state\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"state\"] = state\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.setWebLifecycleState\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.start_screencast","title":"<code>start_screencast(format_=None, quality=None, max_width=None, max_height=None, every_nth_frame=None)</code>","text":"<p>Starts sending each frame using the <code>screencastFrame</code> event.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>format_</code> <code>Optional[str]</code> <p>(Optional) Image compression format.</p> <code>None</code> <code>quality</code> <code>Optional[int]</code> <p>(Optional) Compression quality from range [0..100].</p> <code>None</code> <code>max_width</code> <code>Optional[int]</code> <p>(Optional) Maximum screenshot width.</p> <code>None</code> <code>max_height</code> <code>Optional[int]</code> <p>(Optional) Maximum screenshot height.</p> <code>None</code> <code>every_nth_frame</code> <code>Optional[int]</code> <p>(Optional) Send every n-th frame.</p> <code>None</code> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def start_screencast(\n    format_: typing.Optional[str] = None,\n    quality: typing.Optional[int] = None,\n    max_width: typing.Optional[int] = None,\n    max_height: typing.Optional[int] = None,\n    every_nth_frame: typing.Optional[int] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Starts sending each frame using the ``screencastFrame`` event.\n\n    **EXPERIMENTAL**\n\n    :param format_: *(Optional)* Image compression format.\n    :param quality: *(Optional)* Compression quality from range [0..100].\n    :param max_width: *(Optional)* Maximum screenshot width.\n    :param max_height: *(Optional)* Maximum screenshot height.\n    :param every_nth_frame: *(Optional)* Send every n-th frame.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if format_ is not None:\n        params[\"format\"] = format_\n    if quality is not None:\n        params[\"quality\"] = quality\n    if max_width is not None:\n        params[\"maxWidth\"] = max_width\n    if max_height is not None:\n        params[\"maxHeight\"] = max_height\n    if every_nth_frame is not None:\n        params[\"everyNthFrame\"] = every_nth_frame\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.startScreencast\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.stop_loading","title":"<code>stop_loading()</code>","text":"<p>Force the page stop all navigations and pending resource fetches.</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def stop_loading() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Force the page stop all navigations and pending resource fetches.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.stopLoading\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.stop_screencast","title":"<code>stop_screencast()</code>","text":"<p>Stops sending each frame in the <code>screencastFrame</code>.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def stop_screencast() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Stops sending each frame in the ``screencastFrame``.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.stopScreencast\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/page/#zendriver.cdp.page.wait_for_debugger","title":"<code>wait_for_debugger()</code>","text":"<p>Pauses page execution. Can be resumed using generic Runtime.runIfWaitingForDebugger.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/page.py</code> <pre><code>def wait_for_debugger() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Pauses page execution. Can be resumed using generic Runtime.runIfWaitingForDebugger.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Page.waitForDebugger\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/performance/","title":"performance","text":""},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metric","title":"<code>Metric</code>  <code>dataclass</code>","text":"<p>Run-time execution metric.</p> Source code in <code>zendriver/cdp/performance.py</code> <pre><code>@dataclass\nclass Metric:\n    \"\"\"\n    Run-time execution metric.\n    \"\"\"\n\n    #: Metric name.\n    name: str\n\n    #: Metric value.\n    value: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Metric:\n        return cls(\n            name=str(json[\"name\"]),\n            value=float(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metric.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metric.value","title":"<code>value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metric.__init__","title":"<code>__init__(name, value)</code>","text":""},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metric.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/performance.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Metric:\n    return cls(\n        name=str(json[\"name\"]),\n        value=float(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metric.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/performance.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metrics","title":"<code>Metrics</code>  <code>dataclass</code>","text":"<p>Current values of the metrics.</p> Source code in <code>zendriver/cdp/performance.py</code> <pre><code>@event_class(\"Performance.metrics\")\n@dataclass\nclass Metrics:\n    \"\"\"\n    Current values of the metrics.\n    \"\"\"\n\n    #: Current values of the metrics.\n    metrics: typing.List[Metric]\n    #: Timestamp title.\n    title: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Metrics:\n        return cls(\n            metrics=[Metric.from_json(i) for i in json[\"metrics\"]],\n            title=str(json[\"title\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metrics.metrics","title":"<code>metrics: typing.List[Metric]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metrics.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metrics.__init__","title":"<code>__init__(metrics, title)</code>","text":""},{"location":"reference/cdp/performance/#zendriver.cdp.performance.Metrics.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/performance.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Metrics:\n    return cls(\n        metrics=[Metric.from_json(i) for i in json[\"metrics\"]],\n        title=str(json[\"title\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/performance/#zendriver.cdp.performance.disable","title":"<code>disable()</code>","text":"<p>Disable collecting and reporting metrics.</p> Source code in <code>zendriver/cdp/performance.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disable collecting and reporting metrics.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Performance.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/performance/#zendriver.cdp.performance.enable","title":"<code>enable(time_domain=None)</code>","text":"<p>Enable collecting and reporting metrics.</p> <p>Parameters:</p> Name Type Description Default <code>time_domain</code> <code>Optional[str]</code> <p>(Optional) Time domain to use for collecting and reporting duration metrics.</p> <code>None</code> Source code in <code>zendriver/cdp/performance.py</code> <pre><code>def enable(\n    time_domain: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enable collecting and reporting metrics.\n\n    :param time_domain: *(Optional)* Time domain to use for collecting and reporting duration metrics.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if time_domain is not None:\n        params[\"timeDomain\"] = time_domain\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Performance.enable\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/performance/#zendriver.cdp.performance.get_metrics","title":"<code>get_metrics()</code>","text":"<p>Retrieve current values of run-time metrics.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Metric]]</code> <p>Current values for run-time metrics.</p> Source code in <code>zendriver/cdp/performance.py</code> <pre><code>def get_metrics() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Metric]]:\n    \"\"\"\n    Retrieve current values of run-time metrics.\n\n    :returns: Current values for run-time metrics.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Performance.getMetrics\",\n    }\n    json = yield cmd_dict\n    return [Metric.from_json(i) for i in json[\"metrics\"]]\n</code></pre>"},{"location":"reference/cdp/performance/#zendriver.cdp.performance.set_time_domain","title":"<code>set_time_domain(time_domain)</code>","text":"<p>Sets time domain to use for collecting and reporting duration metrics. Note that this must be called before enabling metrics collection. Calling this method while metrics collection is enabled returns an error.</p> <p>.. deprecated:: 1.3</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>time_domain</code> <code>str</code> <p>Time domain</p> required Source code in <code>zendriver/cdp/performance.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_time_domain(\n    time_domain: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets time domain to use for collecting and reporting duration metrics.\n    Note that this must be called before enabling metrics collection. Calling\n    this method while metrics collection is enabled returns an error.\n\n    .. deprecated:: 1.3\n\n    **EXPERIMENTAL**\n\n    :param time_domain: Time domain\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"timeDomain\"] = time_domain\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Performance.setTimeDomain\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/performance_timeline/","title":"performance_timeline","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LargestContentfulPaint","title":"<code>LargestContentfulPaint</code>  <code>dataclass</code>","text":"<p>See https://github.com/WICG/LargestContentfulPaint and largest_contentful_paint.idl</p> Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>@dataclass\nclass LargestContentfulPaint:\n    \"\"\"\n    See https://github.com/WICG/LargestContentfulPaint and largest_contentful_paint.idl\n    \"\"\"\n\n    render_time: network.TimeSinceEpoch\n\n    load_time: network.TimeSinceEpoch\n\n    #: The number of pixels being painted.\n    size: float\n\n    #: The id attribute of the element, if available.\n    element_id: typing.Optional[str] = None\n\n    #: The URL of the image (may be trimmed).\n    url: typing.Optional[str] = None\n\n    node_id: typing.Optional[dom.BackendNodeId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"renderTime\"] = self.render_time.to_json()\n        json[\"loadTime\"] = self.load_time.to_json()\n        json[\"size\"] = self.size\n        if self.element_id is not None:\n            json[\"elementId\"] = self.element_id\n        if self.url is not None:\n            json[\"url\"] = self.url\n        if self.node_id is not None:\n            json[\"nodeId\"] = self.node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LargestContentfulPaint:\n        return cls(\n            render_time=network.TimeSinceEpoch.from_json(json[\"renderTime\"]),\n            load_time=network.TimeSinceEpoch.from_json(json[\"loadTime\"]),\n            size=float(json[\"size\"]),\n            element_id=(\n                str(json[\"elementId\"])\n                if json.get(\"elementId\", None) is not None\n                else None\n            ),\n            url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n            node_id=(\n                dom.BackendNodeId.from_json(json[\"nodeId\"])\n                if json.get(\"nodeId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LargestContentfulPaint.element_id","title":"<code>element_id: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LargestContentfulPaint.load_time","title":"<code>load_time: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LargestContentfulPaint.node_id","title":"<code>node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LargestContentfulPaint.render_time","title":"<code>render_time: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LargestContentfulPaint.size","title":"<code>size: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LargestContentfulPaint.url","title":"<code>url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LargestContentfulPaint.__init__","title":"<code>__init__(render_time, load_time, size, element_id=None, url=None, node_id=None)</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LargestContentfulPaint.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LargestContentfulPaint:\n    return cls(\n        render_time=network.TimeSinceEpoch.from_json(json[\"renderTime\"]),\n        load_time=network.TimeSinceEpoch.from_json(json[\"loadTime\"]),\n        size=float(json[\"size\"]),\n        element_id=(\n            str(json[\"elementId\"])\n            if json.get(\"elementId\", None) is not None\n            else None\n        ),\n        url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n        node_id=(\n            dom.BackendNodeId.from_json(json[\"nodeId\"])\n            if json.get(\"nodeId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LargestContentfulPaint.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"renderTime\"] = self.render_time.to_json()\n    json[\"loadTime\"] = self.load_time.to_json()\n    json[\"size\"] = self.size\n    if self.element_id is not None:\n        json[\"elementId\"] = self.element_id\n    if self.url is not None:\n        json[\"url\"] = self.url\n    if self.node_id is not None:\n        json[\"nodeId\"] = self.node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShift","title":"<code>LayoutShift</code>  <code>dataclass</code>","text":"<p>See https://wicg.github.io/layout-instability/#sec-layout-shift and layout_shift.idl</p> Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>@dataclass\nclass LayoutShift:\n    \"\"\"\n    See https://wicg.github.io/layout-instability/#sec-layout-shift and layout_shift.idl\n    \"\"\"\n\n    #: Score increment produced by this event.\n    value: float\n\n    had_recent_input: bool\n\n    last_input_time: network.TimeSinceEpoch\n\n    sources: typing.List[LayoutShiftAttribution]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"value\"] = self.value\n        json[\"hadRecentInput\"] = self.had_recent_input\n        json[\"lastInputTime\"] = self.last_input_time.to_json()\n        json[\"sources\"] = [i.to_json() for i in self.sources]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LayoutShift:\n        return cls(\n            value=float(json[\"value\"]),\n            had_recent_input=bool(json[\"hadRecentInput\"]),\n            last_input_time=network.TimeSinceEpoch.from_json(json[\"lastInputTime\"]),\n            sources=[LayoutShiftAttribution.from_json(i) for i in json[\"sources\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShift.had_recent_input","title":"<code>had_recent_input: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShift.last_input_time","title":"<code>last_input_time: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShift.sources","title":"<code>sources: typing.List[LayoutShiftAttribution]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShift.value","title":"<code>value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShift.__init__","title":"<code>__init__(value, had_recent_input, last_input_time, sources)</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShift.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LayoutShift:\n    return cls(\n        value=float(json[\"value\"]),\n        had_recent_input=bool(json[\"hadRecentInput\"]),\n        last_input_time=network.TimeSinceEpoch.from_json(json[\"lastInputTime\"]),\n        sources=[LayoutShiftAttribution.from_json(i) for i in json[\"sources\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShift.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"value\"] = self.value\n    json[\"hadRecentInput\"] = self.had_recent_input\n    json[\"lastInputTime\"] = self.last_input_time.to_json()\n    json[\"sources\"] = [i.to_json() for i in self.sources]\n    return json\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShiftAttribution","title":"<code>LayoutShiftAttribution</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>@dataclass\nclass LayoutShiftAttribution:\n    previous_rect: dom.Rect\n\n    current_rect: dom.Rect\n\n    node_id: typing.Optional[dom.BackendNodeId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"previousRect\"] = self.previous_rect.to_json()\n        json[\"currentRect\"] = self.current_rect.to_json()\n        if self.node_id is not None:\n            json[\"nodeId\"] = self.node_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; LayoutShiftAttribution:\n        return cls(\n            previous_rect=dom.Rect.from_json(json[\"previousRect\"]),\n            current_rect=dom.Rect.from_json(json[\"currentRect\"]),\n            node_id=(\n                dom.BackendNodeId.from_json(json[\"nodeId\"])\n                if json.get(\"nodeId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShiftAttribution.current_rect","title":"<code>current_rect: dom.Rect</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShiftAttribution.node_id","title":"<code>node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShiftAttribution.previous_rect","title":"<code>previous_rect: dom.Rect</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShiftAttribution.__init__","title":"<code>__init__(previous_rect, current_rect, node_id=None)</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShiftAttribution.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; LayoutShiftAttribution:\n    return cls(\n        previous_rect=dom.Rect.from_json(json[\"previousRect\"]),\n        current_rect=dom.Rect.from_json(json[\"currentRect\"]),\n        node_id=(\n            dom.BackendNodeId.from_json(json[\"nodeId\"])\n            if json.get(\"nodeId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.LayoutShiftAttribution.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"previousRect\"] = self.previous_rect.to_json()\n    json[\"currentRect\"] = self.current_rect.to_json()\n    if self.node_id is not None:\n        json[\"nodeId\"] = self.node_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent","title":"<code>TimelineEvent</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>@dataclass\nclass TimelineEvent:\n    #: Identifies the frame that this event is related to. Empty for non-frame targets.\n    frame_id: page.FrameId\n\n    #: The event type, as specified in https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype\n    #: This determines which of the optional \"details\" fields is present.\n    type_: str\n\n    #: Name may be empty depending on the type.\n    name: str\n\n    #: Time in seconds since Epoch, monotonically increasing within document lifetime.\n    time: network.TimeSinceEpoch\n\n    #: Event duration, if applicable.\n    duration: typing.Optional[float] = None\n\n    lcp_details: typing.Optional[LargestContentfulPaint] = None\n\n    layout_shift_details: typing.Optional[LayoutShift] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"frameId\"] = self.frame_id.to_json()\n        json[\"type\"] = self.type_\n        json[\"name\"] = self.name\n        json[\"time\"] = self.time.to_json()\n        if self.duration is not None:\n            json[\"duration\"] = self.duration\n        if self.lcp_details is not None:\n            json[\"lcpDetails\"] = self.lcp_details.to_json()\n        if self.layout_shift_details is not None:\n            json[\"layoutShiftDetails\"] = self.layout_shift_details.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TimelineEvent:\n        return cls(\n            frame_id=page.FrameId.from_json(json[\"frameId\"]),\n            type_=str(json[\"type\"]),\n            name=str(json[\"name\"]),\n            time=network.TimeSinceEpoch.from_json(json[\"time\"]),\n            duration=(\n                float(json[\"duration\"])\n                if json.get(\"duration\", None) is not None\n                else None\n            ),\n            lcp_details=(\n                LargestContentfulPaint.from_json(json[\"lcpDetails\"])\n                if json.get(\"lcpDetails\", None) is not None\n                else None\n            ),\n            layout_shift_details=(\n                LayoutShift.from_json(json[\"layoutShiftDetails\"])\n                if json.get(\"layoutShiftDetails\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent.duration","title":"<code>duration: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent.frame_id","title":"<code>frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent.layout_shift_details","title":"<code>layout_shift_details: typing.Optional[LayoutShift] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent.lcp_details","title":"<code>lcp_details: typing.Optional[LargestContentfulPaint] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent.time","title":"<code>time: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent.__init__","title":"<code>__init__(frame_id, type_, name, time, duration=None, lcp_details=None, layout_shift_details=None)</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TimelineEvent:\n    return cls(\n        frame_id=page.FrameId.from_json(json[\"frameId\"]),\n        type_=str(json[\"type\"]),\n        name=str(json[\"name\"]),\n        time=network.TimeSinceEpoch.from_json(json[\"time\"]),\n        duration=(\n            float(json[\"duration\"])\n            if json.get(\"duration\", None) is not None\n            else None\n        ),\n        lcp_details=(\n            LargestContentfulPaint.from_json(json[\"lcpDetails\"])\n            if json.get(\"lcpDetails\", None) is not None\n            else None\n        ),\n        layout_shift_details=(\n            LayoutShift.from_json(json[\"layoutShiftDetails\"])\n            if json.get(\"layoutShiftDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEvent.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"frameId\"] = self.frame_id.to_json()\n    json[\"type\"] = self.type_\n    json[\"name\"] = self.name\n    json[\"time\"] = self.time.to_json()\n    if self.duration is not None:\n        json[\"duration\"] = self.duration\n    if self.lcp_details is not None:\n        json[\"lcpDetails\"] = self.lcp_details.to_json()\n    if self.layout_shift_details is not None:\n        json[\"layoutShiftDetails\"] = self.layout_shift_details.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEventAdded","title":"<code>TimelineEventAdded</code>  <code>dataclass</code>","text":"<p>Sent when a performance timeline event is added. See reportPerformanceTimeline method.</p> Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>@event_class(\"PerformanceTimeline.timelineEventAdded\")\n@dataclass\nclass TimelineEventAdded:\n    \"\"\"\n    Sent when a performance timeline event is added. See reportPerformanceTimeline method.\n    \"\"\"\n\n    event: TimelineEvent\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TimelineEventAdded:\n        return cls(event=TimelineEvent.from_json(json[\"event\"]))\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEventAdded.event","title":"<code>event: TimelineEvent</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEventAdded.__init__","title":"<code>__init__(event)</code>","text":""},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.TimelineEventAdded.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TimelineEventAdded:\n    return cls(event=TimelineEvent.from_json(json[\"event\"]))\n</code></pre>"},{"location":"reference/cdp/performance_timeline/#zendriver.cdp.performance_timeline.enable","title":"<code>enable(event_types)</code>","text":"<p>Previously buffered events would be reported before method returns. See also: timelineEventAdded</p> <p>Parameters:</p> Name Type Description Default <code>event_types</code> <code>List[str]</code> <p>The types of event to report, as specified in https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype The specified filter overrides any previous filters, passing empty filter disables recording. Note that not all types exposed to the web platform are currently supported.</p> required Source code in <code>zendriver/cdp/performance_timeline.py</code> <pre><code>def enable(\n    event_types: typing.List[str],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Previously buffered events would be reported before method returns.\n    See also: timelineEventAdded\n\n    :param event_types: The types of event to report, as specified in https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype The specified filter overrides any previous filters, passing empty filter disables recording. Note that not all types exposed to the web platform are currently supported.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"eventTypes\"] = [i for i in event_types]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"PerformanceTimeline.enable\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/preload/","title":"preload","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus","title":"<code>PrefetchStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and filter out the ones that aren't necessary to the developers.</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>class PrefetchStatus(enum.Enum):\n    \"\"\"\n    TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and\n    filter out the ones that aren't necessary to the developers.\n    \"\"\"\n\n    PREFETCH_ALLOWED = \"PrefetchAllowed\"\n    PREFETCH_FAILED_INELIGIBLE_REDIRECT = \"PrefetchFailedIneligibleRedirect\"\n    PREFETCH_FAILED_INVALID_REDIRECT = \"PrefetchFailedInvalidRedirect\"\n    PREFETCH_FAILED_MIME_NOT_SUPPORTED = \"PrefetchFailedMIMENotSupported\"\n    PREFETCH_FAILED_NET_ERROR = \"PrefetchFailedNetError\"\n    PREFETCH_FAILED_NON2_XX = \"PrefetchFailedNon2XX\"\n    PREFETCH_FAILED_PER_PAGE_LIMIT_EXCEEDED = \"PrefetchFailedPerPageLimitExceeded\"\n    PREFETCH_EVICTED_AFTER_CANDIDATE_REMOVED = \"PrefetchEvictedAfterCandidateRemoved\"\n    PREFETCH_EVICTED_FOR_NEWER_PREFETCH = \"PrefetchEvictedForNewerPrefetch\"\n    PREFETCH_HELDBACK = \"PrefetchHeldback\"\n    PREFETCH_INELIGIBLE_RETRY_AFTER = \"PrefetchIneligibleRetryAfter\"\n    PREFETCH_IS_PRIVACY_DECOY = \"PrefetchIsPrivacyDecoy\"\n    PREFETCH_IS_STALE = \"PrefetchIsStale\"\n    PREFETCH_NOT_ELIGIBLE_BROWSER_CONTEXT_OFF_THE_RECORD = (\n        \"PrefetchNotEligibleBrowserContextOffTheRecord\"\n    )\n    PREFETCH_NOT_ELIGIBLE_DATA_SAVER_ENABLED = \"PrefetchNotEligibleDataSaverEnabled\"\n    PREFETCH_NOT_ELIGIBLE_EXISTING_PROXY = \"PrefetchNotEligibleExistingProxy\"\n    PREFETCH_NOT_ELIGIBLE_HOST_IS_NON_UNIQUE = \"PrefetchNotEligibleHostIsNonUnique\"\n    PREFETCH_NOT_ELIGIBLE_NON_DEFAULT_STORAGE_PARTITION = (\n        \"PrefetchNotEligibleNonDefaultStoragePartition\"\n    )\n    PREFETCH_NOT_ELIGIBLE_SAME_SITE_CROSS_ORIGIN_PREFETCH_REQUIRED_PROXY = (\n        \"PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy\"\n    )\n    PREFETCH_NOT_ELIGIBLE_SCHEME_IS_NOT_HTTPS = \"PrefetchNotEligibleSchemeIsNotHttps\"\n    PREFETCH_NOT_ELIGIBLE_USER_HAS_COOKIES = \"PrefetchNotEligibleUserHasCookies\"\n    PREFETCH_NOT_ELIGIBLE_USER_HAS_SERVICE_WORKER = (\n        \"PrefetchNotEligibleUserHasServiceWorker\"\n    )\n    PREFETCH_NOT_ELIGIBLE_BATTERY_SAVER_ENABLED = (\n        \"PrefetchNotEligibleBatterySaverEnabled\"\n    )\n    PREFETCH_NOT_ELIGIBLE_PRELOADING_DISABLED = \"PrefetchNotEligiblePreloadingDisabled\"\n    PREFETCH_NOT_FINISHED_IN_TIME = \"PrefetchNotFinishedInTime\"\n    PREFETCH_NOT_STARTED = \"PrefetchNotStarted\"\n    PREFETCH_NOT_USED_COOKIES_CHANGED = \"PrefetchNotUsedCookiesChanged\"\n    PREFETCH_PROXY_NOT_AVAILABLE = \"PrefetchProxyNotAvailable\"\n    PREFETCH_RESPONSE_USED = \"PrefetchResponseUsed\"\n    PREFETCH_SUCCESSFUL_BUT_NOT_USED = \"PrefetchSuccessfulButNotUsed\"\n    PREFETCH_NOT_USED_PROBE_FAILED = \"PrefetchNotUsedProbeFailed\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PrefetchStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_ALLOWED","title":"<code>PREFETCH_ALLOWED = 'PrefetchAllowed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_EVICTED_AFTER_CANDIDATE_REMOVED","title":"<code>PREFETCH_EVICTED_AFTER_CANDIDATE_REMOVED = 'PrefetchEvictedAfterCandidateRemoved'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_EVICTED_FOR_NEWER_PREFETCH","title":"<code>PREFETCH_EVICTED_FOR_NEWER_PREFETCH = 'PrefetchEvictedForNewerPrefetch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_FAILED_INELIGIBLE_REDIRECT","title":"<code>PREFETCH_FAILED_INELIGIBLE_REDIRECT = 'PrefetchFailedIneligibleRedirect'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_FAILED_INVALID_REDIRECT","title":"<code>PREFETCH_FAILED_INVALID_REDIRECT = 'PrefetchFailedInvalidRedirect'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_FAILED_MIME_NOT_SUPPORTED","title":"<code>PREFETCH_FAILED_MIME_NOT_SUPPORTED = 'PrefetchFailedMIMENotSupported'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_FAILED_NET_ERROR","title":"<code>PREFETCH_FAILED_NET_ERROR = 'PrefetchFailedNetError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_FAILED_NON2_XX","title":"<code>PREFETCH_FAILED_NON2_XX = 'PrefetchFailedNon2XX'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_FAILED_PER_PAGE_LIMIT_EXCEEDED","title":"<code>PREFETCH_FAILED_PER_PAGE_LIMIT_EXCEEDED = 'PrefetchFailedPerPageLimitExceeded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_HELDBACK","title":"<code>PREFETCH_HELDBACK = 'PrefetchHeldback'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_INELIGIBLE_RETRY_AFTER","title":"<code>PREFETCH_INELIGIBLE_RETRY_AFTER = 'PrefetchIneligibleRetryAfter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_IS_PRIVACY_DECOY","title":"<code>PREFETCH_IS_PRIVACY_DECOY = 'PrefetchIsPrivacyDecoy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_IS_STALE","title":"<code>PREFETCH_IS_STALE = 'PrefetchIsStale'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_BATTERY_SAVER_ENABLED","title":"<code>PREFETCH_NOT_ELIGIBLE_BATTERY_SAVER_ENABLED = 'PrefetchNotEligibleBatterySaverEnabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_BROWSER_CONTEXT_OFF_THE_RECORD","title":"<code>PREFETCH_NOT_ELIGIBLE_BROWSER_CONTEXT_OFF_THE_RECORD = 'PrefetchNotEligibleBrowserContextOffTheRecord'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_DATA_SAVER_ENABLED","title":"<code>PREFETCH_NOT_ELIGIBLE_DATA_SAVER_ENABLED = 'PrefetchNotEligibleDataSaverEnabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_EXISTING_PROXY","title":"<code>PREFETCH_NOT_ELIGIBLE_EXISTING_PROXY = 'PrefetchNotEligibleExistingProxy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_HOST_IS_NON_UNIQUE","title":"<code>PREFETCH_NOT_ELIGIBLE_HOST_IS_NON_UNIQUE = 'PrefetchNotEligibleHostIsNonUnique'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_NON_DEFAULT_STORAGE_PARTITION","title":"<code>PREFETCH_NOT_ELIGIBLE_NON_DEFAULT_STORAGE_PARTITION = 'PrefetchNotEligibleNonDefaultStoragePartition'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_PRELOADING_DISABLED","title":"<code>PREFETCH_NOT_ELIGIBLE_PRELOADING_DISABLED = 'PrefetchNotEligiblePreloadingDisabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_SAME_SITE_CROSS_ORIGIN_PREFETCH_REQUIRED_PROXY","title":"<code>PREFETCH_NOT_ELIGIBLE_SAME_SITE_CROSS_ORIGIN_PREFETCH_REQUIRED_PROXY = 'PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_SCHEME_IS_NOT_HTTPS","title":"<code>PREFETCH_NOT_ELIGIBLE_SCHEME_IS_NOT_HTTPS = 'PrefetchNotEligibleSchemeIsNotHttps'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_USER_HAS_COOKIES","title":"<code>PREFETCH_NOT_ELIGIBLE_USER_HAS_COOKIES = 'PrefetchNotEligibleUserHasCookies'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_ELIGIBLE_USER_HAS_SERVICE_WORKER","title":"<code>PREFETCH_NOT_ELIGIBLE_USER_HAS_SERVICE_WORKER = 'PrefetchNotEligibleUserHasServiceWorker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_FINISHED_IN_TIME","title":"<code>PREFETCH_NOT_FINISHED_IN_TIME = 'PrefetchNotFinishedInTime'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_STARTED","title":"<code>PREFETCH_NOT_STARTED = 'PrefetchNotStarted'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_USED_COOKIES_CHANGED","title":"<code>PREFETCH_NOT_USED_COOKIES_CHANGED = 'PrefetchNotUsedCookiesChanged'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_NOT_USED_PROBE_FAILED","title":"<code>PREFETCH_NOT_USED_PROBE_FAILED = 'PrefetchNotUsedProbeFailed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_PROXY_NOT_AVAILABLE","title":"<code>PREFETCH_PROXY_NOT_AVAILABLE = 'PrefetchProxyNotAvailable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_RESPONSE_USED","title":"<code>PREFETCH_RESPONSE_USED = 'PrefetchResponseUsed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.PREFETCH_SUCCESSFUL_BUT_NOT_USED","title":"<code>PREFETCH_SUCCESSFUL_BUT_NOT_USED = 'PrefetchSuccessfulButNotUsed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PrefetchStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatusUpdated","title":"<code>PrefetchStatusUpdated</code>  <code>dataclass</code>","text":"<p>Fired when a prefetch attempt is updated.</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@event_class(\"Preload.prefetchStatusUpdated\")\n@dataclass\nclass PrefetchStatusUpdated:\n    \"\"\"\n    Fired when a prefetch attempt is updated.\n    \"\"\"\n\n    key: PreloadingAttemptKey\n    #: The frame id of the frame initiating prefetch.\n    initiating_frame_id: page.FrameId\n    prefetch_url: str\n    status: PreloadingStatus\n    prefetch_status: PrefetchStatus\n    request_id: network.RequestId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PrefetchStatusUpdated:\n        return cls(\n            key=PreloadingAttemptKey.from_json(json[\"key\"]),\n            initiating_frame_id=page.FrameId.from_json(json[\"initiatingFrameId\"]),\n            prefetch_url=str(json[\"prefetchUrl\"]),\n            status=PreloadingStatus.from_json(json[\"status\"]),\n            prefetch_status=PrefetchStatus.from_json(json[\"prefetchStatus\"]),\n            request_id=network.RequestId.from_json(json[\"requestId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatusUpdated.initiating_frame_id","title":"<code>initiating_frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatusUpdated.key","title":"<code>key: PreloadingAttemptKey</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatusUpdated.prefetch_status","title":"<code>prefetch_status: PrefetchStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatusUpdated.prefetch_url","title":"<code>prefetch_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatusUpdated.request_id","title":"<code>request_id: network.RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatusUpdated.status","title":"<code>status: PreloadingStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatusUpdated.__init__","title":"<code>__init__(key, initiating_frame_id, prefetch_url, status, prefetch_status, request_id)</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrefetchStatusUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PrefetchStatusUpdated:\n    return cls(\n        key=PreloadingAttemptKey.from_json(json[\"key\"]),\n        initiating_frame_id=page.FrameId.from_json(json[\"initiatingFrameId\"]),\n        prefetch_url=str(json[\"prefetchUrl\"]),\n        status=PreloadingStatus.from_json(json[\"status\"]),\n        prefetch_status=PrefetchStatus.from_json(json[\"prefetchStatus\"]),\n        request_id=network.RequestId.from_json(json[\"requestId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadEnabledStateUpdated","title":"<code>PreloadEnabledStateUpdated</code>  <code>dataclass</code>","text":"<p>Fired when a preload enabled state is updated.</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@event_class(\"Preload.preloadEnabledStateUpdated\")\n@dataclass\nclass PreloadEnabledStateUpdated:\n    \"\"\"\n    Fired when a preload enabled state is updated.\n    \"\"\"\n\n    disabled_by_preference: bool\n    disabled_by_data_saver: bool\n    disabled_by_battery_saver: bool\n    disabled_by_holdback_prefetch_speculation_rules: bool\n    disabled_by_holdback_prerender_speculation_rules: bool\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PreloadEnabledStateUpdated:\n        return cls(\n            disabled_by_preference=bool(json[\"disabledByPreference\"]),\n            disabled_by_data_saver=bool(json[\"disabledByDataSaver\"]),\n            disabled_by_battery_saver=bool(json[\"disabledByBatterySaver\"]),\n            disabled_by_holdback_prefetch_speculation_rules=bool(\n                json[\"disabledByHoldbackPrefetchSpeculationRules\"]\n            ),\n            disabled_by_holdback_prerender_speculation_rules=bool(\n                json[\"disabledByHoldbackPrerenderSpeculationRules\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadEnabledStateUpdated.disabled_by_battery_saver","title":"<code>disabled_by_battery_saver: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadEnabledStateUpdated.disabled_by_data_saver","title":"<code>disabled_by_data_saver: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadEnabledStateUpdated.disabled_by_holdback_prefetch_speculation_rules","title":"<code>disabled_by_holdback_prefetch_speculation_rules: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadEnabledStateUpdated.disabled_by_holdback_prerender_speculation_rules","title":"<code>disabled_by_holdback_prerender_speculation_rules: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadEnabledStateUpdated.disabled_by_preference","title":"<code>disabled_by_preference: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadEnabledStateUpdated.__init__","title":"<code>__init__(disabled_by_preference, disabled_by_data_saver, disabled_by_battery_saver, disabled_by_holdback_prefetch_speculation_rules, disabled_by_holdback_prerender_speculation_rules)</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadEnabledStateUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PreloadEnabledStateUpdated:\n    return cls(\n        disabled_by_preference=bool(json[\"disabledByPreference\"]),\n        disabled_by_data_saver=bool(json[\"disabledByDataSaver\"]),\n        disabled_by_battery_saver=bool(json[\"disabledByBatterySaver\"]),\n        disabled_by_holdback_prefetch_speculation_rules=bool(\n            json[\"disabledByHoldbackPrefetchSpeculationRules\"]\n        ),\n        disabled_by_holdback_prerender_speculation_rules=bool(\n            json[\"disabledByHoldbackPrerenderSpeculationRules\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptKey","title":"<code>PreloadingAttemptKey</code>  <code>dataclass</code>","text":"<p>A key that identifies a preloading attempt.</p> <p>The url used is the url specified by the trigger (i.e. the initial URL), and not the final url that is navigated to. For example, prerendering allows same-origin main frame navigations during the attempt, but the attempt is still keyed with the initial URL.</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@dataclass\nclass PreloadingAttemptKey:\n    \"\"\"\n    A key that identifies a preloading attempt.\n\n    The url used is the url specified by the trigger (i.e. the initial URL), and\n    not the final url that is navigated to. For example, prerendering allows\n    same-origin main frame navigations during the attempt, but the attempt is\n    still keyed with the initial URL.\n    \"\"\"\n\n    loader_id: network.LoaderId\n\n    action: SpeculationAction\n\n    url: str\n\n    target_hint: typing.Optional[SpeculationTargetHint] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"loaderId\"] = self.loader_id.to_json()\n        json[\"action\"] = self.action.to_json()\n        json[\"url\"] = self.url\n        if self.target_hint is not None:\n            json[\"targetHint\"] = self.target_hint.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PreloadingAttemptKey:\n        return cls(\n            loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n            action=SpeculationAction.from_json(json[\"action\"]),\n            url=str(json[\"url\"]),\n            target_hint=(\n                SpeculationTargetHint.from_json(json[\"targetHint\"])\n                if json.get(\"targetHint\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptKey.action","title":"<code>action: SpeculationAction</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptKey.loader_id","title":"<code>loader_id: network.LoaderId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptKey.target_hint","title":"<code>target_hint: typing.Optional[SpeculationTargetHint] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptKey.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptKey.__init__","title":"<code>__init__(loader_id, action, url, target_hint=None)</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptKey.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PreloadingAttemptKey:\n    return cls(\n        loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n        action=SpeculationAction.from_json(json[\"action\"]),\n        url=str(json[\"url\"]),\n        target_hint=(\n            SpeculationTargetHint.from_json(json[\"targetHint\"])\n            if json.get(\"targetHint\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptKey.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"loaderId\"] = self.loader_id.to_json()\n    json[\"action\"] = self.action.to_json()\n    json[\"url\"] = self.url\n    if self.target_hint is not None:\n        json[\"targetHint\"] = self.target_hint.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSource","title":"<code>PreloadingAttemptSource</code>  <code>dataclass</code>","text":"<p>Lists sources for a preloading attempt, specifically the ids of rule sets that had a speculation rule that triggered the attempt, and the BackendNodeIds of  or  elements that triggered the attempt (in the case of attempts triggered by a document rule). It is possible for multiple rule sets and links to trigger a single attempt. Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@dataclass\nclass PreloadingAttemptSource:\n    \"\"\"\n    Lists sources for a preloading attempt, specifically the ids of rule sets\n    that had a speculation rule that triggered the attempt, and the\n    BackendNodeIds of &lt;a href&gt; or &lt;area href&gt; elements that triggered the\n    attempt (in the case of attempts triggered by a document rule). It is\n    possible for multiple rule sets and links to trigger a single attempt.\n    \"\"\"\n\n    key: PreloadingAttemptKey\n\n    rule_set_ids: typing.List[RuleSetId]\n\n    node_ids: typing.List[dom.BackendNodeId]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"key\"] = self.key.to_json()\n        json[\"ruleSetIds\"] = [i.to_json() for i in self.rule_set_ids]\n        json[\"nodeIds\"] = [i.to_json() for i in self.node_ids]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PreloadingAttemptSource:\n        return cls(\n            key=PreloadingAttemptKey.from_json(json[\"key\"]),\n            rule_set_ids=[RuleSetId.from_json(i) for i in json[\"ruleSetIds\"]],\n            node_ids=[dom.BackendNodeId.from_json(i) for i in json[\"nodeIds\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSource.key","title":"<code>key: PreloadingAttemptKey</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSource.node_ids","title":"<code>node_ids: typing.List[dom.BackendNodeId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSource.rule_set_ids","title":"<code>rule_set_ids: typing.List[RuleSetId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSource.__init__","title":"<code>__init__(key, rule_set_ids, node_ids)</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSource.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PreloadingAttemptSource:\n    return cls(\n        key=PreloadingAttemptKey.from_json(json[\"key\"]),\n        rule_set_ids=[RuleSetId.from_json(i) for i in json[\"ruleSetIds\"]],\n        node_ids=[dom.BackendNodeId.from_json(i) for i in json[\"nodeIds\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSource.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"key\"] = self.key.to_json()\n    json[\"ruleSetIds\"] = [i.to_json() for i in self.rule_set_ids]\n    json[\"nodeIds\"] = [i.to_json() for i in self.node_ids]\n    return json\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSourcesUpdated","title":"<code>PreloadingAttemptSourcesUpdated</code>  <code>dataclass</code>","text":"<p>Send a list of sources for all preloading attempts in a document.</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@event_class(\"Preload.preloadingAttemptSourcesUpdated\")\n@dataclass\nclass PreloadingAttemptSourcesUpdated:\n    \"\"\"\n    Send a list of sources for all preloading attempts in a document.\n    \"\"\"\n\n    loader_id: network.LoaderId\n    preloading_attempt_sources: typing.List[PreloadingAttemptSource]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PreloadingAttemptSourcesUpdated:\n        return cls(\n            loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n            preloading_attempt_sources=[\n                PreloadingAttemptSource.from_json(i)\n                for i in json[\"preloadingAttemptSources\"]\n            ],\n        )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSourcesUpdated.loader_id","title":"<code>loader_id: network.LoaderId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSourcesUpdated.preloading_attempt_sources","title":"<code>preloading_attempt_sources: typing.List[PreloadingAttemptSource]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSourcesUpdated.__init__","title":"<code>__init__(loader_id, preloading_attempt_sources)</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingAttemptSourcesUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PreloadingAttemptSourcesUpdated:\n    return cls(\n        loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n        preloading_attempt_sources=[\n            PreloadingAttemptSource.from_json(i)\n            for i in json[\"preloadingAttemptSources\"]\n        ],\n    )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingStatus","title":"<code>PreloadingStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Preloading status values, see also PreloadingTriggeringOutcome. This status is shared by prefetchStatusUpdated and prerenderStatusUpdated.</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>class PreloadingStatus(enum.Enum):\n    \"\"\"\n    Preloading status values, see also PreloadingTriggeringOutcome. This\n    status is shared by prefetchStatusUpdated and prerenderStatusUpdated.\n    \"\"\"\n\n    PENDING = \"Pending\"\n    RUNNING = \"Running\"\n    READY = \"Ready\"\n    SUCCESS = \"Success\"\n    FAILURE = \"Failure\"\n    NOT_SUPPORTED = \"NotSupported\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PreloadingStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingStatus.FAILURE","title":"<code>FAILURE = 'Failure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingStatus.NOT_SUPPORTED","title":"<code>NOT_SUPPORTED = 'NotSupported'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingStatus.PENDING","title":"<code>PENDING = 'Pending'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingStatus.READY","title":"<code>READY = 'Ready'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingStatus.RUNNING","title":"<code>RUNNING = 'Running'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingStatus.SUCCESS","title":"<code>SUCCESS = 'Success'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PreloadingStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PreloadingStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus","title":"<code>PrerenderFinalStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>List of FinalStatus reasons for Prerender2.</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>class PrerenderFinalStatus(enum.Enum):\n    \"\"\"\n    List of FinalStatus reasons for Prerender2.\n    \"\"\"\n\n    ACTIVATED = \"Activated\"\n    DESTROYED = \"Destroyed\"\n    LOW_END_DEVICE = \"LowEndDevice\"\n    INVALID_SCHEME_REDIRECT = \"InvalidSchemeRedirect\"\n    INVALID_SCHEME_NAVIGATION = \"InvalidSchemeNavigation\"\n    NAVIGATION_REQUEST_BLOCKED_BY_CSP = \"NavigationRequestBlockedByCsp\"\n    MAIN_FRAME_NAVIGATION = \"MainFrameNavigation\"\n    MOJO_BINDER_POLICY = \"MojoBinderPolicy\"\n    RENDERER_PROCESS_CRASHED = \"RendererProcessCrashed\"\n    RENDERER_PROCESS_KILLED = \"RendererProcessKilled\"\n    DOWNLOAD = \"Download\"\n    TRIGGER_DESTROYED = \"TriggerDestroyed\"\n    NAVIGATION_NOT_COMMITTED = \"NavigationNotCommitted\"\n    NAVIGATION_BAD_HTTP_STATUS = \"NavigationBadHttpStatus\"\n    CLIENT_CERT_REQUESTED = \"ClientCertRequested\"\n    NAVIGATION_REQUEST_NETWORK_ERROR = \"NavigationRequestNetworkError\"\n    CANCEL_ALL_HOSTS_FOR_TESTING = \"CancelAllHostsForTesting\"\n    DID_FAIL_LOAD = \"DidFailLoad\"\n    STOP = \"Stop\"\n    SSL_CERTIFICATE_ERROR = \"SslCertificateError\"\n    LOGIN_AUTH_REQUESTED = \"LoginAuthRequested\"\n    UA_CHANGE_REQUIRES_RELOAD = \"UaChangeRequiresReload\"\n    BLOCKED_BY_CLIENT = \"BlockedByClient\"\n    AUDIO_OUTPUT_DEVICE_REQUESTED = \"AudioOutputDeviceRequested\"\n    MIXED_CONTENT = \"MixedContent\"\n    TRIGGER_BACKGROUNDED = \"TriggerBackgrounded\"\n    MEMORY_LIMIT_EXCEEDED = \"MemoryLimitExceeded\"\n    DATA_SAVER_ENABLED = \"DataSaverEnabled\"\n    TRIGGER_URL_HAS_EFFECTIVE_URL = \"TriggerUrlHasEffectiveUrl\"\n    ACTIVATED_BEFORE_STARTED = \"ActivatedBeforeStarted\"\n    INACTIVE_PAGE_RESTRICTION = \"InactivePageRestriction\"\n    START_FAILED = \"StartFailed\"\n    TIMEOUT_BACKGROUNDED = \"TimeoutBackgrounded\"\n    CROSS_SITE_REDIRECT_IN_INITIAL_NAVIGATION = \"CrossSiteRedirectInInitialNavigation\"\n    CROSS_SITE_NAVIGATION_IN_INITIAL_NAVIGATION = (\n        \"CrossSiteNavigationInInitialNavigation\"\n    )\n    SAME_SITE_CROSS_ORIGIN_REDIRECT_NOT_OPT_IN_IN_INITIAL_NAVIGATION = (\n        \"SameSiteCrossOriginRedirectNotOptInInInitialNavigation\"\n    )\n    SAME_SITE_CROSS_ORIGIN_NAVIGATION_NOT_OPT_IN_IN_INITIAL_NAVIGATION = (\n        \"SameSiteCrossOriginNavigationNotOptInInInitialNavigation\"\n    )\n    ACTIVATION_NAVIGATION_PARAMETER_MISMATCH = \"ActivationNavigationParameterMismatch\"\n    ACTIVATED_IN_BACKGROUND = \"ActivatedInBackground\"\n    EMBEDDER_HOST_DISALLOWED = \"EmbedderHostDisallowed\"\n    ACTIVATION_NAVIGATION_DESTROYED_BEFORE_SUCCESS = (\n        \"ActivationNavigationDestroyedBeforeSuccess\"\n    )\n    TAB_CLOSED_BY_USER_GESTURE = \"TabClosedByUserGesture\"\n    TAB_CLOSED_WITHOUT_USER_GESTURE = \"TabClosedWithoutUserGesture\"\n    PRIMARY_MAIN_FRAME_RENDERER_PROCESS_CRASHED = (\n        \"PrimaryMainFrameRendererProcessCrashed\"\n    )\n    PRIMARY_MAIN_FRAME_RENDERER_PROCESS_KILLED = \"PrimaryMainFrameRendererProcessKilled\"\n    ACTIVATION_FRAME_POLICY_NOT_COMPATIBLE = \"ActivationFramePolicyNotCompatible\"\n    PRELOADING_DISABLED = \"PreloadingDisabled\"\n    BATTERY_SAVER_ENABLED = \"BatterySaverEnabled\"\n    ACTIVATED_DURING_MAIN_FRAME_NAVIGATION = \"ActivatedDuringMainFrameNavigation\"\n    PRELOADING_UNSUPPORTED_BY_WEB_CONTENTS = \"PreloadingUnsupportedByWebContents\"\n    CROSS_SITE_REDIRECT_IN_MAIN_FRAME_NAVIGATION = (\n        \"CrossSiteRedirectInMainFrameNavigation\"\n    )\n    CROSS_SITE_NAVIGATION_IN_MAIN_FRAME_NAVIGATION = (\n        \"CrossSiteNavigationInMainFrameNavigation\"\n    )\n    SAME_SITE_CROSS_ORIGIN_REDIRECT_NOT_OPT_IN_IN_MAIN_FRAME_NAVIGATION = (\n        \"SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation\"\n    )\n    SAME_SITE_CROSS_ORIGIN_NAVIGATION_NOT_OPT_IN_IN_MAIN_FRAME_NAVIGATION = (\n        \"SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation\"\n    )\n    MEMORY_PRESSURE_ON_TRIGGER = \"MemoryPressureOnTrigger\"\n    MEMORY_PRESSURE_AFTER_TRIGGERED = \"MemoryPressureAfterTriggered\"\n    PRERENDERING_DISABLED_BY_DEV_TOOLS = \"PrerenderingDisabledByDevTools\"\n    SPECULATION_RULE_REMOVED = \"SpeculationRuleRemoved\"\n    ACTIVATED_WITH_AUXILIARY_BROWSING_CONTEXTS = (\n        \"ActivatedWithAuxiliaryBrowsingContexts\"\n    )\n    MAX_NUM_OF_RUNNING_EAGER_PRERENDERS_EXCEEDED = (\n        \"MaxNumOfRunningEagerPrerendersExceeded\"\n    )\n    MAX_NUM_OF_RUNNING_NON_EAGER_PRERENDERS_EXCEEDED = (\n        \"MaxNumOfRunningNonEagerPrerendersExceeded\"\n    )\n    MAX_NUM_OF_RUNNING_EMBEDDER_PRERENDERS_EXCEEDED = (\n        \"MaxNumOfRunningEmbedderPrerendersExceeded\"\n    )\n    PRERENDERING_URL_HAS_EFFECTIVE_URL = \"PrerenderingUrlHasEffectiveUrl\"\n    REDIRECTED_PRERENDERING_URL_HAS_EFFECTIVE_URL = (\n        \"RedirectedPrerenderingUrlHasEffectiveUrl\"\n    )\n    ACTIVATION_URL_HAS_EFFECTIVE_URL = \"ActivationUrlHasEffectiveUrl\"\n    JAVA_SCRIPT_INTERFACE_ADDED = \"JavaScriptInterfaceAdded\"\n    JAVA_SCRIPT_INTERFACE_REMOVED = \"JavaScriptInterfaceRemoved\"\n    ALL_PRERENDERING_CANCELED = \"AllPrerenderingCanceled\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; PrerenderFinalStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.ACTIVATED","title":"<code>ACTIVATED = 'Activated'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.ACTIVATED_BEFORE_STARTED","title":"<code>ACTIVATED_BEFORE_STARTED = 'ActivatedBeforeStarted'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.ACTIVATED_DURING_MAIN_FRAME_NAVIGATION","title":"<code>ACTIVATED_DURING_MAIN_FRAME_NAVIGATION = 'ActivatedDuringMainFrameNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.ACTIVATED_IN_BACKGROUND","title":"<code>ACTIVATED_IN_BACKGROUND = 'ActivatedInBackground'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.ACTIVATED_WITH_AUXILIARY_BROWSING_CONTEXTS","title":"<code>ACTIVATED_WITH_AUXILIARY_BROWSING_CONTEXTS = 'ActivatedWithAuxiliaryBrowsingContexts'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.ACTIVATION_FRAME_POLICY_NOT_COMPATIBLE","title":"<code>ACTIVATION_FRAME_POLICY_NOT_COMPATIBLE = 'ActivationFramePolicyNotCompatible'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.ACTIVATION_NAVIGATION_DESTROYED_BEFORE_SUCCESS","title":"<code>ACTIVATION_NAVIGATION_DESTROYED_BEFORE_SUCCESS = 'ActivationNavigationDestroyedBeforeSuccess'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.ACTIVATION_NAVIGATION_PARAMETER_MISMATCH","title":"<code>ACTIVATION_NAVIGATION_PARAMETER_MISMATCH = 'ActivationNavigationParameterMismatch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.ACTIVATION_URL_HAS_EFFECTIVE_URL","title":"<code>ACTIVATION_URL_HAS_EFFECTIVE_URL = 'ActivationUrlHasEffectiveUrl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.ALL_PRERENDERING_CANCELED","title":"<code>ALL_PRERENDERING_CANCELED = 'AllPrerenderingCanceled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.AUDIO_OUTPUT_DEVICE_REQUESTED","title":"<code>AUDIO_OUTPUT_DEVICE_REQUESTED = 'AudioOutputDeviceRequested'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.BATTERY_SAVER_ENABLED","title":"<code>BATTERY_SAVER_ENABLED = 'BatterySaverEnabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.BLOCKED_BY_CLIENT","title":"<code>BLOCKED_BY_CLIENT = 'BlockedByClient'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.CANCEL_ALL_HOSTS_FOR_TESTING","title":"<code>CANCEL_ALL_HOSTS_FOR_TESTING = 'CancelAllHostsForTesting'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.CLIENT_CERT_REQUESTED","title":"<code>CLIENT_CERT_REQUESTED = 'ClientCertRequested'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.CROSS_SITE_NAVIGATION_IN_INITIAL_NAVIGATION","title":"<code>CROSS_SITE_NAVIGATION_IN_INITIAL_NAVIGATION = 'CrossSiteNavigationInInitialNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.CROSS_SITE_NAVIGATION_IN_MAIN_FRAME_NAVIGATION","title":"<code>CROSS_SITE_NAVIGATION_IN_MAIN_FRAME_NAVIGATION = 'CrossSiteNavigationInMainFrameNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.CROSS_SITE_REDIRECT_IN_INITIAL_NAVIGATION","title":"<code>CROSS_SITE_REDIRECT_IN_INITIAL_NAVIGATION = 'CrossSiteRedirectInInitialNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.CROSS_SITE_REDIRECT_IN_MAIN_FRAME_NAVIGATION","title":"<code>CROSS_SITE_REDIRECT_IN_MAIN_FRAME_NAVIGATION = 'CrossSiteRedirectInMainFrameNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.DATA_SAVER_ENABLED","title":"<code>DATA_SAVER_ENABLED = 'DataSaverEnabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.DESTROYED","title":"<code>DESTROYED = 'Destroyed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.DID_FAIL_LOAD","title":"<code>DID_FAIL_LOAD = 'DidFailLoad'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.DOWNLOAD","title":"<code>DOWNLOAD = 'Download'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.EMBEDDER_HOST_DISALLOWED","title":"<code>EMBEDDER_HOST_DISALLOWED = 'EmbedderHostDisallowed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.INACTIVE_PAGE_RESTRICTION","title":"<code>INACTIVE_PAGE_RESTRICTION = 'InactivePageRestriction'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.INVALID_SCHEME_NAVIGATION","title":"<code>INVALID_SCHEME_NAVIGATION = 'InvalidSchemeNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.INVALID_SCHEME_REDIRECT","title":"<code>INVALID_SCHEME_REDIRECT = 'InvalidSchemeRedirect'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.JAVA_SCRIPT_INTERFACE_ADDED","title":"<code>JAVA_SCRIPT_INTERFACE_ADDED = 'JavaScriptInterfaceAdded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.JAVA_SCRIPT_INTERFACE_REMOVED","title":"<code>JAVA_SCRIPT_INTERFACE_REMOVED = 'JavaScriptInterfaceRemoved'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.LOGIN_AUTH_REQUESTED","title":"<code>LOGIN_AUTH_REQUESTED = 'LoginAuthRequested'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.LOW_END_DEVICE","title":"<code>LOW_END_DEVICE = 'LowEndDevice'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.MAIN_FRAME_NAVIGATION","title":"<code>MAIN_FRAME_NAVIGATION = 'MainFrameNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.MAX_NUM_OF_RUNNING_EAGER_PRERENDERS_EXCEEDED","title":"<code>MAX_NUM_OF_RUNNING_EAGER_PRERENDERS_EXCEEDED = 'MaxNumOfRunningEagerPrerendersExceeded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.MAX_NUM_OF_RUNNING_EMBEDDER_PRERENDERS_EXCEEDED","title":"<code>MAX_NUM_OF_RUNNING_EMBEDDER_PRERENDERS_EXCEEDED = 'MaxNumOfRunningEmbedderPrerendersExceeded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.MAX_NUM_OF_RUNNING_NON_EAGER_PRERENDERS_EXCEEDED","title":"<code>MAX_NUM_OF_RUNNING_NON_EAGER_PRERENDERS_EXCEEDED = 'MaxNumOfRunningNonEagerPrerendersExceeded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.MEMORY_LIMIT_EXCEEDED","title":"<code>MEMORY_LIMIT_EXCEEDED = 'MemoryLimitExceeded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.MEMORY_PRESSURE_AFTER_TRIGGERED","title":"<code>MEMORY_PRESSURE_AFTER_TRIGGERED = 'MemoryPressureAfterTriggered'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.MEMORY_PRESSURE_ON_TRIGGER","title":"<code>MEMORY_PRESSURE_ON_TRIGGER = 'MemoryPressureOnTrigger'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.MIXED_CONTENT","title":"<code>MIXED_CONTENT = 'MixedContent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.MOJO_BINDER_POLICY","title":"<code>MOJO_BINDER_POLICY = 'MojoBinderPolicy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.NAVIGATION_BAD_HTTP_STATUS","title":"<code>NAVIGATION_BAD_HTTP_STATUS = 'NavigationBadHttpStatus'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.NAVIGATION_NOT_COMMITTED","title":"<code>NAVIGATION_NOT_COMMITTED = 'NavigationNotCommitted'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.NAVIGATION_REQUEST_BLOCKED_BY_CSP","title":"<code>NAVIGATION_REQUEST_BLOCKED_BY_CSP = 'NavigationRequestBlockedByCsp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.NAVIGATION_REQUEST_NETWORK_ERROR","title":"<code>NAVIGATION_REQUEST_NETWORK_ERROR = 'NavigationRequestNetworkError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.PRELOADING_DISABLED","title":"<code>PRELOADING_DISABLED = 'PreloadingDisabled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.PRELOADING_UNSUPPORTED_BY_WEB_CONTENTS","title":"<code>PRELOADING_UNSUPPORTED_BY_WEB_CONTENTS = 'PreloadingUnsupportedByWebContents'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.PRERENDERING_DISABLED_BY_DEV_TOOLS","title":"<code>PRERENDERING_DISABLED_BY_DEV_TOOLS = 'PrerenderingDisabledByDevTools'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.PRERENDERING_URL_HAS_EFFECTIVE_URL","title":"<code>PRERENDERING_URL_HAS_EFFECTIVE_URL = 'PrerenderingUrlHasEffectiveUrl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.PRIMARY_MAIN_FRAME_RENDERER_PROCESS_CRASHED","title":"<code>PRIMARY_MAIN_FRAME_RENDERER_PROCESS_CRASHED = 'PrimaryMainFrameRendererProcessCrashed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.PRIMARY_MAIN_FRAME_RENDERER_PROCESS_KILLED","title":"<code>PRIMARY_MAIN_FRAME_RENDERER_PROCESS_KILLED = 'PrimaryMainFrameRendererProcessKilled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.REDIRECTED_PRERENDERING_URL_HAS_EFFECTIVE_URL","title":"<code>REDIRECTED_PRERENDERING_URL_HAS_EFFECTIVE_URL = 'RedirectedPrerenderingUrlHasEffectiveUrl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.RENDERER_PROCESS_CRASHED","title":"<code>RENDERER_PROCESS_CRASHED = 'RendererProcessCrashed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.RENDERER_PROCESS_KILLED","title":"<code>RENDERER_PROCESS_KILLED = 'RendererProcessKilled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.SAME_SITE_CROSS_ORIGIN_NAVIGATION_NOT_OPT_IN_IN_INITIAL_NAVIGATION","title":"<code>SAME_SITE_CROSS_ORIGIN_NAVIGATION_NOT_OPT_IN_IN_INITIAL_NAVIGATION = 'SameSiteCrossOriginNavigationNotOptInInInitialNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.SAME_SITE_CROSS_ORIGIN_NAVIGATION_NOT_OPT_IN_IN_MAIN_FRAME_NAVIGATION","title":"<code>SAME_SITE_CROSS_ORIGIN_NAVIGATION_NOT_OPT_IN_IN_MAIN_FRAME_NAVIGATION = 'SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.SAME_SITE_CROSS_ORIGIN_REDIRECT_NOT_OPT_IN_IN_INITIAL_NAVIGATION","title":"<code>SAME_SITE_CROSS_ORIGIN_REDIRECT_NOT_OPT_IN_IN_INITIAL_NAVIGATION = 'SameSiteCrossOriginRedirectNotOptInInInitialNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.SAME_SITE_CROSS_ORIGIN_REDIRECT_NOT_OPT_IN_IN_MAIN_FRAME_NAVIGATION","title":"<code>SAME_SITE_CROSS_ORIGIN_REDIRECT_NOT_OPT_IN_IN_MAIN_FRAME_NAVIGATION = 'SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.SPECULATION_RULE_REMOVED","title":"<code>SPECULATION_RULE_REMOVED = 'SpeculationRuleRemoved'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.SSL_CERTIFICATE_ERROR","title":"<code>SSL_CERTIFICATE_ERROR = 'SslCertificateError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.START_FAILED","title":"<code>START_FAILED = 'StartFailed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.STOP","title":"<code>STOP = 'Stop'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.TAB_CLOSED_BY_USER_GESTURE","title":"<code>TAB_CLOSED_BY_USER_GESTURE = 'TabClosedByUserGesture'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.TAB_CLOSED_WITHOUT_USER_GESTURE","title":"<code>TAB_CLOSED_WITHOUT_USER_GESTURE = 'TabClosedWithoutUserGesture'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.TIMEOUT_BACKGROUNDED","title":"<code>TIMEOUT_BACKGROUNDED = 'TimeoutBackgrounded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.TRIGGER_BACKGROUNDED","title":"<code>TRIGGER_BACKGROUNDED = 'TriggerBackgrounded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.TRIGGER_DESTROYED","title":"<code>TRIGGER_DESTROYED = 'TriggerDestroyed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.TRIGGER_URL_HAS_EFFECTIVE_URL","title":"<code>TRIGGER_URL_HAS_EFFECTIVE_URL = 'TriggerUrlHasEffectiveUrl'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.UA_CHANGE_REQUIRES_RELOAD","title":"<code>UA_CHANGE_REQUIRES_RELOAD = 'UaChangeRequiresReload'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; PrerenderFinalStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderFinalStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderMismatchedHeaders","title":"<code>PrerenderMismatchedHeaders</code>  <code>dataclass</code>","text":"<p>Information of headers to be displayed when the header mismatch occurred.</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@dataclass\nclass PrerenderMismatchedHeaders:\n    \"\"\"\n    Information of headers to be displayed when the header mismatch occurred.\n    \"\"\"\n\n    header_name: str\n\n    initial_value: typing.Optional[str] = None\n\n    activation_value: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"headerName\"] = self.header_name\n        if self.initial_value is not None:\n            json[\"initialValue\"] = self.initial_value\n        if self.activation_value is not None:\n            json[\"activationValue\"] = self.activation_value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PrerenderMismatchedHeaders:\n        return cls(\n            header_name=str(json[\"headerName\"]),\n            initial_value=(\n                str(json[\"initialValue\"])\n                if json.get(\"initialValue\", None) is not None\n                else None\n            ),\n            activation_value=(\n                str(json[\"activationValue\"])\n                if json.get(\"activationValue\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderMismatchedHeaders.activation_value","title":"<code>activation_value: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderMismatchedHeaders.header_name","title":"<code>header_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderMismatchedHeaders.initial_value","title":"<code>initial_value: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderMismatchedHeaders.__init__","title":"<code>__init__(header_name, initial_value=None, activation_value=None)</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderMismatchedHeaders.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PrerenderMismatchedHeaders:\n    return cls(\n        header_name=str(json[\"headerName\"]),\n        initial_value=(\n            str(json[\"initialValue\"])\n            if json.get(\"initialValue\", None) is not None\n            else None\n        ),\n        activation_value=(\n            str(json[\"activationValue\"])\n            if json.get(\"activationValue\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderMismatchedHeaders.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"headerName\"] = self.header_name\n    if self.initial_value is not None:\n        json[\"initialValue\"] = self.initial_value\n    if self.activation_value is not None:\n        json[\"activationValue\"] = self.activation_value\n    return json\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderStatusUpdated","title":"<code>PrerenderStatusUpdated</code>  <code>dataclass</code>","text":"<p>Fired when a prerender attempt is updated.</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@event_class(\"Preload.prerenderStatusUpdated\")\n@dataclass\nclass PrerenderStatusUpdated:\n    \"\"\"\n    Fired when a prerender attempt is updated.\n    \"\"\"\n\n    key: PreloadingAttemptKey\n    status: PreloadingStatus\n    prerender_status: typing.Optional[PrerenderFinalStatus]\n    #: This is used to give users more information about the name of Mojo interface\n    #: that is incompatible with prerender and has caused the cancellation of the attempt.\n    disallowed_mojo_interface: typing.Optional[str]\n    mismatched_headers: typing.Optional[typing.List[PrerenderMismatchedHeaders]]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PrerenderStatusUpdated:\n        return cls(\n            key=PreloadingAttemptKey.from_json(json[\"key\"]),\n            status=PreloadingStatus.from_json(json[\"status\"]),\n            prerender_status=(\n                PrerenderFinalStatus.from_json(json[\"prerenderStatus\"])\n                if json.get(\"prerenderStatus\", None) is not None\n                else None\n            ),\n            disallowed_mojo_interface=(\n                str(json[\"disallowedMojoInterface\"])\n                if json.get(\"disallowedMojoInterface\", None) is not None\n                else None\n            ),\n            mismatched_headers=(\n                [\n                    PrerenderMismatchedHeaders.from_json(i)\n                    for i in json[\"mismatchedHeaders\"]\n                ]\n                if json.get(\"mismatchedHeaders\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderStatusUpdated.disallowed_mojo_interface","title":"<code>disallowed_mojo_interface: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderStatusUpdated.key","title":"<code>key: PreloadingAttemptKey</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderStatusUpdated.mismatched_headers","title":"<code>mismatched_headers: typing.Optional[typing.List[PrerenderMismatchedHeaders]]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderStatusUpdated.prerender_status","title":"<code>prerender_status: typing.Optional[PrerenderFinalStatus]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderStatusUpdated.status","title":"<code>status: PreloadingStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderStatusUpdated.__init__","title":"<code>__init__(key, status, prerender_status, disallowed_mojo_interface, mismatched_headers)</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.PrerenderStatusUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PrerenderStatusUpdated:\n    return cls(\n        key=PreloadingAttemptKey.from_json(json[\"key\"]),\n        status=PreloadingStatus.from_json(json[\"status\"]),\n        prerender_status=(\n            PrerenderFinalStatus.from_json(json[\"prerenderStatus\"])\n            if json.get(\"prerenderStatus\", None) is not None\n            else None\n        ),\n        disallowed_mojo_interface=(\n            str(json[\"disallowedMojoInterface\"])\n            if json.get(\"disallowedMojoInterface\", None) is not None\n            else None\n        ),\n        mismatched_headers=(\n            [\n                PrerenderMismatchedHeaders.from_json(i)\n                for i in json[\"mismatchedHeaders\"]\n            ]\n            if json.get(\"mismatchedHeaders\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet","title":"<code>RuleSet</code>  <code>dataclass</code>","text":"<p>Corresponds to SpeculationRuleSet</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@dataclass\nclass RuleSet:\n    \"\"\"\n    Corresponds to SpeculationRuleSet\n    \"\"\"\n\n    id_: RuleSetId\n\n    #: Identifies a document which the rule set is associated with.\n    loader_id: network.LoaderId\n\n    #: Source text of JSON representing the rule set. If it comes from\n    #: ``&lt;script&gt;`` tag, it is the textContent of the node. Note that it is\n    #: a JSON for valid case.\n    #:\n    #: See also:\n    #: - https://wicg.github.io/nav-speculation/speculation-rules.html\n    #: - https://github.com/WICG/nav-speculation/blob/main/triggers.md\n    source_text: str\n\n    #: A speculation rule set is either added through an inline\n    #: ``&lt;script&gt;`` tag or through an external resource via the\n    #: 'Speculation-Rules' HTTP header. For the first case, we include\n    #: the BackendNodeId of the relevant ``&lt;script&gt;`` tag. For the second\n    #: case, we include the external URL where the rule set was loaded\n    #: from, and also RequestId if Network domain is enabled.\n    #:\n    #: See also:\n    #: - https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script\n    #: - https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header\n    backend_node_id: typing.Optional[dom.BackendNodeId] = None\n\n    url: typing.Optional[str] = None\n\n    request_id: typing.Optional[network.RequestId] = None\n\n    #: Error information\n    #: ``errorMessage`` is null iff ``errorType`` is null.\n    error_type: typing.Optional[RuleSetErrorType] = None\n\n    #: TODO(https://crbug.com/1425354): Replace this property with structured error.\n    error_message: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"id\"] = self.id_.to_json()\n        json[\"loaderId\"] = self.loader_id.to_json()\n        json[\"sourceText\"] = self.source_text\n        if self.backend_node_id is not None:\n            json[\"backendNodeId\"] = self.backend_node_id.to_json()\n        if self.url is not None:\n            json[\"url\"] = self.url\n        if self.request_id is not None:\n            json[\"requestId\"] = self.request_id.to_json()\n        if self.error_type is not None:\n            json[\"errorType\"] = self.error_type.to_json()\n        if self.error_message is not None:\n            json[\"errorMessage\"] = self.error_message\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RuleSet:\n        return cls(\n            id_=RuleSetId.from_json(json[\"id\"]),\n            loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n            source_text=str(json[\"sourceText\"]),\n            backend_node_id=(\n                dom.BackendNodeId.from_json(json[\"backendNodeId\"])\n                if json.get(\"backendNodeId\", None) is not None\n                else None\n            ),\n            url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n            request_id=(\n                network.RequestId.from_json(json[\"requestId\"])\n                if json.get(\"requestId\", None) is not None\n                else None\n            ),\n            error_type=(\n                RuleSetErrorType.from_json(json[\"errorType\"])\n                if json.get(\"errorType\", None) is not None\n                else None\n            ),\n            error_message=(\n                str(json[\"errorMessage\"])\n                if json.get(\"errorMessage\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.backend_node_id","title":"<code>backend_node_id: typing.Optional[dom.BackendNodeId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.error_message","title":"<code>error_message: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.error_type","title":"<code>error_type: typing.Optional[RuleSetErrorType] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.id_","title":"<code>id_: RuleSetId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.loader_id","title":"<code>loader_id: network.LoaderId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.request_id","title":"<code>request_id: typing.Optional[network.RequestId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.source_text","title":"<code>source_text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.url","title":"<code>url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.__init__","title":"<code>__init__(id_, loader_id, source_text, backend_node_id=None, url=None, request_id=None, error_type=None, error_message=None)</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RuleSet:\n    return cls(\n        id_=RuleSetId.from_json(json[\"id\"]),\n        loader_id=network.LoaderId.from_json(json[\"loaderId\"]),\n        source_text=str(json[\"sourceText\"]),\n        backend_node_id=(\n            dom.BackendNodeId.from_json(json[\"backendNodeId\"])\n            if json.get(\"backendNodeId\", None) is not None\n            else None\n        ),\n        url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n        request_id=(\n            network.RequestId.from_json(json[\"requestId\"])\n            if json.get(\"requestId\", None) is not None\n            else None\n        ),\n        error_type=(\n            RuleSetErrorType.from_json(json[\"errorType\"])\n            if json.get(\"errorType\", None) is not None\n            else None\n        ),\n        error_message=(\n            str(json[\"errorMessage\"])\n            if json.get(\"errorMessage\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSet.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"id\"] = self.id_.to_json()\n    json[\"loaderId\"] = self.loader_id.to_json()\n    json[\"sourceText\"] = self.source_text\n    if self.backend_node_id is not None:\n        json[\"backendNodeId\"] = self.backend_node_id.to_json()\n    if self.url is not None:\n        json[\"url\"] = self.url\n    if self.request_id is not None:\n        json[\"requestId\"] = self.request_id.to_json()\n    if self.error_type is not None:\n        json[\"errorType\"] = self.error_type.to_json()\n    if self.error_message is not None:\n        json[\"errorMessage\"] = self.error_message\n    return json\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetErrorType","title":"<code>RuleSetErrorType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>class RuleSetErrorType(enum.Enum):\n    SOURCE_IS_NOT_JSON_OBJECT = \"SourceIsNotJsonObject\"\n    INVALID_RULES_SKIPPED = \"InvalidRulesSkipped\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; RuleSetErrorType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetErrorType.INVALID_RULES_SKIPPED","title":"<code>INVALID_RULES_SKIPPED = 'InvalidRulesSkipped'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetErrorType.SOURCE_IS_NOT_JSON_OBJECT","title":"<code>SOURCE_IS_NOT_JSON_OBJECT = 'SourceIsNotJsonObject'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetErrorType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; RuleSetErrorType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetErrorType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetId","title":"<code>RuleSetId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique id</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>class RuleSetId(str):\n    \"\"\"\n    Unique id\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; RuleSetId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"RuleSetId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def __repr__(self):\n    return \"RuleSetId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; RuleSetId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetRemoved","title":"<code>RuleSetRemoved</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@event_class(\"Preload.ruleSetRemoved\")\n@dataclass\nclass RuleSetRemoved:\n    id_: RuleSetId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RuleSetRemoved:\n        return cls(id_=RuleSetId.from_json(json[\"id\"]))\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetRemoved.id_","title":"<code>id_: RuleSetId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetRemoved.__init__","title":"<code>__init__(id_)</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetRemoved.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RuleSetRemoved:\n    return cls(id_=RuleSetId.from_json(json[\"id\"]))\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetUpdated","title":"<code>RuleSetUpdated</code>  <code>dataclass</code>","text":"<p>Upsert. Currently, it is only emitted when a rule set added.</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@event_class(\"Preload.ruleSetUpdated\")\n@dataclass\nclass RuleSetUpdated:\n    \"\"\"\n    Upsert. Currently, it is only emitted when a rule set added.\n    \"\"\"\n\n    rule_set: RuleSet\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RuleSetUpdated:\n        return cls(rule_set=RuleSet.from_json(json[\"ruleSet\"]))\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetUpdated.rule_set","title":"<code>rule_set: RuleSet</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetUpdated.__init__","title":"<code>__init__(rule_set)</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.RuleSetUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RuleSetUpdated:\n    return cls(rule_set=RuleSet.from_json(json[\"ruleSet\"]))\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.SpeculationAction","title":"<code>SpeculationAction</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The type of preloading attempted. It corresponds to mojom::SpeculationAction (although PrefetchWithSubresources is omitted as it isn't being used by clients).</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>class SpeculationAction(enum.Enum):\n    \"\"\"\n    The type of preloading attempted. It corresponds to\n    mojom::SpeculationAction (although PrefetchWithSubresources is omitted as it\n    isn't being used by clients).\n    \"\"\"\n\n    PREFETCH = \"Prefetch\"\n    PRERENDER = \"Prerender\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SpeculationAction:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.SpeculationAction.PREFETCH","title":"<code>PREFETCH = 'Prefetch'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.SpeculationAction.PRERENDER","title":"<code>PRERENDER = 'Prerender'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.SpeculationAction.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SpeculationAction:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.SpeculationAction.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.SpeculationTargetHint","title":"<code>SpeculationTargetHint</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Corresponds to mojom::SpeculationTargetHint. See https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints</p> Source code in <code>zendriver/cdp/preload.py</code> <pre><code>class SpeculationTargetHint(enum.Enum):\n    \"\"\"\n    Corresponds to mojom::SpeculationTargetHint.\n    See https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints\n    \"\"\"\n\n    BLANK = \"Blank\"\n    SELF = \"Self\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SpeculationTargetHint:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.SpeculationTargetHint.BLANK","title":"<code>BLANK = 'Blank'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.SpeculationTargetHint.SELF","title":"<code>SELF = 'Self'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/preload/#zendriver.cdp.preload.SpeculationTargetHint.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SpeculationTargetHint:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.SpeculationTargetHint.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.disable","title":"<code>disable()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Preload.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/preload/#zendriver.cdp.preload.enable","title":"<code>enable()</code>","text":"Source code in <code>zendriver/cdp/preload.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Preload.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/profiler/","title":"profiler","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileFinished","title":"<code>ConsoleProfileFinished</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@event_class(\"Profiler.consoleProfileFinished\")\n@dataclass\nclass ConsoleProfileFinished:\n    id_: str\n    #: Location of console.profileEnd().\n    location: debugger.Location\n    profile: Profile\n    #: Profile title passed as an argument to console.profile().\n    title: typing.Optional[str]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ConsoleProfileFinished:\n        return cls(\n            id_=str(json[\"id\"]),\n            location=debugger.Location.from_json(json[\"location\"]),\n            profile=Profile.from_json(json[\"profile\"]),\n            title=str(json[\"title\"]) if json.get(\"title\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileFinished.id_","title":"<code>id_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileFinished.location","title":"<code>location: debugger.Location</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileFinished.profile","title":"<code>profile: Profile</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileFinished.title","title":"<code>title: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileFinished.__init__","title":"<code>__init__(id_, location, profile, title)</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileFinished.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ConsoleProfileFinished:\n    return cls(\n        id_=str(json[\"id\"]),\n        location=debugger.Location.from_json(json[\"location\"]),\n        profile=Profile.from_json(json[\"profile\"]),\n        title=str(json[\"title\"]) if json.get(\"title\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileStarted","title":"<code>ConsoleProfileStarted</code>  <code>dataclass</code>","text":"<p>Sent when new profile recording is started using console.profile() call.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@event_class(\"Profiler.consoleProfileStarted\")\n@dataclass\nclass ConsoleProfileStarted:\n    \"\"\"\n    Sent when new profile recording is started using console.profile() call.\n    \"\"\"\n\n    id_: str\n    #: Location of console.profile().\n    location: debugger.Location\n    #: Profile title passed as an argument to console.profile().\n    title: typing.Optional[str]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ConsoleProfileStarted:\n        return cls(\n            id_=str(json[\"id\"]),\n            location=debugger.Location.from_json(json[\"location\"]),\n            title=str(json[\"title\"]) if json.get(\"title\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileStarted.id_","title":"<code>id_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileStarted.location","title":"<code>location: debugger.Location</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileStarted.title","title":"<code>title: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileStarted.__init__","title":"<code>__init__(id_, location, title)</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ConsoleProfileStarted.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ConsoleProfileStarted:\n    return cls(\n        id_=str(json[\"id\"]),\n        location=debugger.Location.from_json(json[\"location\"]),\n        title=str(json[\"title\"]) if json.get(\"title\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.CoverageRange","title":"<code>CoverageRange</code>  <code>dataclass</code>","text":"<p>Coverage data for a source range.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@dataclass\nclass CoverageRange:\n    \"\"\"\n    Coverage data for a source range.\n    \"\"\"\n\n    #: JavaScript script source offset for the range start.\n    start_offset: int\n\n    #: JavaScript script source offset for the range end.\n    end_offset: int\n\n    #: Collected execution count of the source range.\n    count: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"startOffset\"] = self.start_offset\n        json[\"endOffset\"] = self.end_offset\n        json[\"count\"] = self.count\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CoverageRange:\n        return cls(\n            start_offset=int(json[\"startOffset\"]),\n            end_offset=int(json[\"endOffset\"]),\n            count=int(json[\"count\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.CoverageRange.count","title":"<code>count: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.CoverageRange.end_offset","title":"<code>end_offset: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.CoverageRange.start_offset","title":"<code>start_offset: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.CoverageRange.__init__","title":"<code>__init__(start_offset, end_offset, count)</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.CoverageRange.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CoverageRange:\n    return cls(\n        start_offset=int(json[\"startOffset\"]),\n        end_offset=int(json[\"endOffset\"]),\n        count=int(json[\"count\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.CoverageRange.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"startOffset\"] = self.start_offset\n    json[\"endOffset\"] = self.end_offset\n    json[\"count\"] = self.count\n    return json\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.FunctionCoverage","title":"<code>FunctionCoverage</code>  <code>dataclass</code>","text":"<p>Coverage data for a JavaScript function.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@dataclass\nclass FunctionCoverage:\n    \"\"\"\n    Coverage data for a JavaScript function.\n    \"\"\"\n\n    #: JavaScript function name.\n    function_name: str\n\n    #: Source ranges inside the function with coverage data.\n    ranges: typing.List[CoverageRange]\n\n    #: Whether coverage data for this function has block granularity.\n    is_block_coverage: bool\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"functionName\"] = self.function_name\n        json[\"ranges\"] = [i.to_json() for i in self.ranges]\n        json[\"isBlockCoverage\"] = self.is_block_coverage\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FunctionCoverage:\n        return cls(\n            function_name=str(json[\"functionName\"]),\n            ranges=[CoverageRange.from_json(i) for i in json[\"ranges\"]],\n            is_block_coverage=bool(json[\"isBlockCoverage\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.FunctionCoverage.function_name","title":"<code>function_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.FunctionCoverage.is_block_coverage","title":"<code>is_block_coverage: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.FunctionCoverage.ranges","title":"<code>ranges: typing.List[CoverageRange]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.FunctionCoverage.__init__","title":"<code>__init__(function_name, ranges, is_block_coverage)</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.FunctionCoverage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FunctionCoverage:\n    return cls(\n        function_name=str(json[\"functionName\"]),\n        ranges=[CoverageRange.from_json(i) for i in json[\"ranges\"]],\n        is_block_coverage=bool(json[\"isBlockCoverage\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.FunctionCoverage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"functionName\"] = self.function_name\n    json[\"ranges\"] = [i.to_json() for i in self.ranges]\n    json[\"isBlockCoverage\"] = self.is_block_coverage\n    return json\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PositionTickInfo","title":"<code>PositionTickInfo</code>  <code>dataclass</code>","text":"<p>Specifies a number of samples attributed to a certain source position.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@dataclass\nclass PositionTickInfo:\n    \"\"\"\n    Specifies a number of samples attributed to a certain source position.\n    \"\"\"\n\n    #: Source line number (1-based).\n    line: int\n\n    #: Number of samples attributed to the source line.\n    ticks: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"line\"] = self.line\n        json[\"ticks\"] = self.ticks\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PositionTickInfo:\n        return cls(\n            line=int(json[\"line\"]),\n            ticks=int(json[\"ticks\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PositionTickInfo.line","title":"<code>line: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PositionTickInfo.ticks","title":"<code>ticks: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PositionTickInfo.__init__","title":"<code>__init__(line, ticks)</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PositionTickInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PositionTickInfo:\n    return cls(\n        line=int(json[\"line\"]),\n        ticks=int(json[\"ticks\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PositionTickInfo.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"line\"] = self.line\n    json[\"ticks\"] = self.ticks\n    return json\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PreciseCoverageDeltaUpdate","title":"<code>PreciseCoverageDeltaUpdate</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Reports coverage delta since the last poll (either from an event like this, or from <code>takePreciseCoverage</code> for the current isolate. May only be sent if precise code coverage has been started. This event can be trigged by the embedder to, for example, trigger collection of coverage data immediately at a certain point in time.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@event_class(\"Profiler.preciseCoverageDeltaUpdate\")\n@dataclass\nclass PreciseCoverageDeltaUpdate:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Reports coverage delta since the last poll (either from an event like this, or from\n    ``takePreciseCoverage`` for the current isolate. May only be sent if precise code\n    coverage has been started. This event can be trigged by the embedder to, for example,\n    trigger collection of coverage data immediately at a certain point in time.\n    \"\"\"\n\n    #: Monotonically increasing time (in seconds) when the coverage update was taken in the backend.\n    timestamp: float\n    #: Identifier for distinguishing coverage events.\n    occasion: str\n    #: Coverage data for the current isolate.\n    result: typing.List[ScriptCoverage]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PreciseCoverageDeltaUpdate:\n        return cls(\n            timestamp=float(json[\"timestamp\"]),\n            occasion=str(json[\"occasion\"]),\n            result=[ScriptCoverage.from_json(i) for i in json[\"result\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PreciseCoverageDeltaUpdate.occasion","title":"<code>occasion: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PreciseCoverageDeltaUpdate.result","title":"<code>result: typing.List[ScriptCoverage]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PreciseCoverageDeltaUpdate.timestamp","title":"<code>timestamp: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PreciseCoverageDeltaUpdate.__init__","title":"<code>__init__(timestamp, occasion, result)</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.PreciseCoverageDeltaUpdate.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PreciseCoverageDeltaUpdate:\n    return cls(\n        timestamp=float(json[\"timestamp\"]),\n        occasion=str(json[\"occasion\"]),\n        result=[ScriptCoverage.from_json(i) for i in json[\"result\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.Profile","title":"<code>Profile</code>  <code>dataclass</code>","text":"<p>Profile.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@dataclass\nclass Profile:\n    \"\"\"\n    Profile.\n    \"\"\"\n\n    #: The list of profile nodes. First item is the root node.\n    nodes: typing.List[ProfileNode]\n\n    #: Profiling start timestamp in microseconds.\n    start_time: float\n\n    #: Profiling end timestamp in microseconds.\n    end_time: float\n\n    #: Ids of samples top nodes.\n    samples: typing.Optional[typing.List[int]] = None\n\n    #: Time intervals between adjacent samples in microseconds. The first delta is relative to the\n    #: profile startTime.\n    time_deltas: typing.Optional[typing.List[int]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"nodes\"] = [i.to_json() for i in self.nodes]\n        json[\"startTime\"] = self.start_time\n        json[\"endTime\"] = self.end_time\n        if self.samples is not None:\n            json[\"samples\"] = [i for i in self.samples]\n        if self.time_deltas is not None:\n            json[\"timeDeltas\"] = [i for i in self.time_deltas]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Profile:\n        return cls(\n            nodes=[ProfileNode.from_json(i) for i in json[\"nodes\"]],\n            start_time=float(json[\"startTime\"]),\n            end_time=float(json[\"endTime\"]),\n            samples=(\n                [int(i) for i in json[\"samples\"]]\n                if json.get(\"samples\", None) is not None\n                else None\n            ),\n            time_deltas=(\n                [int(i) for i in json[\"timeDeltas\"]]\n                if json.get(\"timeDeltas\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.Profile.end_time","title":"<code>end_time: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.Profile.nodes","title":"<code>nodes: typing.List[ProfileNode]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.Profile.samples","title":"<code>samples: typing.Optional[typing.List[int]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.Profile.start_time","title":"<code>start_time: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.Profile.time_deltas","title":"<code>time_deltas: typing.Optional[typing.List[int]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.Profile.__init__","title":"<code>__init__(nodes, start_time, end_time, samples=None, time_deltas=None)</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.Profile.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Profile:\n    return cls(\n        nodes=[ProfileNode.from_json(i) for i in json[\"nodes\"]],\n        start_time=float(json[\"startTime\"]),\n        end_time=float(json[\"endTime\"]),\n        samples=(\n            [int(i) for i in json[\"samples\"]]\n            if json.get(\"samples\", None) is not None\n            else None\n        ),\n        time_deltas=(\n            [int(i) for i in json[\"timeDeltas\"]]\n            if json.get(\"timeDeltas\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.Profile.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"nodes\"] = [i.to_json() for i in self.nodes]\n    json[\"startTime\"] = self.start_time\n    json[\"endTime\"] = self.end_time\n    if self.samples is not None:\n        json[\"samples\"] = [i for i in self.samples]\n    if self.time_deltas is not None:\n        json[\"timeDeltas\"] = [i for i in self.time_deltas]\n    return json\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ProfileNode","title":"<code>ProfileNode</code>  <code>dataclass</code>","text":"<p>Profile node. Holds callsite information, execution statistics and child nodes.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@dataclass\nclass ProfileNode:\n    \"\"\"\n    Profile node. Holds callsite information, execution statistics and child nodes.\n    \"\"\"\n\n    #: Unique id of the node.\n    id_: int\n\n    #: Function location.\n    call_frame: runtime.CallFrame\n\n    #: Number of samples where this node was on top of the call stack.\n    hit_count: typing.Optional[int] = None\n\n    #: Child node ids.\n    children: typing.Optional[typing.List[int]] = None\n\n    #: The reason of being not optimized. The function may be deoptimized or marked as don't\n    #: optimize.\n    deopt_reason: typing.Optional[str] = None\n\n    #: An array of source position ticks.\n    position_ticks: typing.Optional[typing.List[PositionTickInfo]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"id\"] = self.id_\n        json[\"callFrame\"] = self.call_frame.to_json()\n        if self.hit_count is not None:\n            json[\"hitCount\"] = self.hit_count\n        if self.children is not None:\n            json[\"children\"] = [i for i in self.children]\n        if self.deopt_reason is not None:\n            json[\"deoptReason\"] = self.deopt_reason\n        if self.position_ticks is not None:\n            json[\"positionTicks\"] = [i.to_json() for i in self.position_ticks]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ProfileNode:\n        return cls(\n            id_=int(json[\"id\"]),\n            call_frame=runtime.CallFrame.from_json(json[\"callFrame\"]),\n            hit_count=(\n                int(json[\"hitCount\"])\n                if json.get(\"hitCount\", None) is not None\n                else None\n            ),\n            children=(\n                [int(i) for i in json[\"children\"]]\n                if json.get(\"children\", None) is not None\n                else None\n            ),\n            deopt_reason=(\n                str(json[\"deoptReason\"])\n                if json.get(\"deoptReason\", None) is not None\n                else None\n            ),\n            position_ticks=(\n                [PositionTickInfo.from_json(i) for i in json[\"positionTicks\"]]\n                if json.get(\"positionTicks\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ProfileNode.call_frame","title":"<code>call_frame: runtime.CallFrame</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ProfileNode.children","title":"<code>children: typing.Optional[typing.List[int]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ProfileNode.deopt_reason","title":"<code>deopt_reason: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ProfileNode.hit_count","title":"<code>hit_count: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ProfileNode.id_","title":"<code>id_: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ProfileNode.position_ticks","title":"<code>position_ticks: typing.Optional[typing.List[PositionTickInfo]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ProfileNode.__init__","title":"<code>__init__(id_, call_frame, hit_count=None, children=None, deopt_reason=None, position_ticks=None)</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ProfileNode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ProfileNode:\n    return cls(\n        id_=int(json[\"id\"]),\n        call_frame=runtime.CallFrame.from_json(json[\"callFrame\"]),\n        hit_count=(\n            int(json[\"hitCount\"])\n            if json.get(\"hitCount\", None) is not None\n            else None\n        ),\n        children=(\n            [int(i) for i in json[\"children\"]]\n            if json.get(\"children\", None) is not None\n            else None\n        ),\n        deopt_reason=(\n            str(json[\"deoptReason\"])\n            if json.get(\"deoptReason\", None) is not None\n            else None\n        ),\n        position_ticks=(\n            [PositionTickInfo.from_json(i) for i in json[\"positionTicks\"]]\n            if json.get(\"positionTicks\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ProfileNode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"id\"] = self.id_\n    json[\"callFrame\"] = self.call_frame.to_json()\n    if self.hit_count is not None:\n        json[\"hitCount\"] = self.hit_count\n    if self.children is not None:\n        json[\"children\"] = [i for i in self.children]\n    if self.deopt_reason is not None:\n        json[\"deoptReason\"] = self.deopt_reason\n    if self.position_ticks is not None:\n        json[\"positionTicks\"] = [i.to_json() for i in self.position_ticks]\n    return json\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ScriptCoverage","title":"<code>ScriptCoverage</code>  <code>dataclass</code>","text":"<p>Coverage data for a JavaScript script.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@dataclass\nclass ScriptCoverage:\n    \"\"\"\n    Coverage data for a JavaScript script.\n    \"\"\"\n\n    #: JavaScript script id.\n    script_id: runtime.ScriptId\n\n    #: JavaScript script name or url.\n    url: str\n\n    #: Functions contained in the script that has coverage data.\n    functions: typing.List[FunctionCoverage]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"scriptId\"] = self.script_id.to_json()\n        json[\"url\"] = self.url\n        json[\"functions\"] = [i.to_json() for i in self.functions]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ScriptCoverage:\n        return cls(\n            script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n            url=str(json[\"url\"]),\n            functions=[FunctionCoverage.from_json(i) for i in json[\"functions\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ScriptCoverage.functions","title":"<code>functions: typing.List[FunctionCoverage]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ScriptCoverage.script_id","title":"<code>script_id: runtime.ScriptId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ScriptCoverage.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ScriptCoverage.__init__","title":"<code>__init__(script_id, url, functions)</code>","text":""},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ScriptCoverage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ScriptCoverage:\n    return cls(\n        script_id=runtime.ScriptId.from_json(json[\"scriptId\"]),\n        url=str(json[\"url\"]),\n        functions=[FunctionCoverage.from_json(i) for i in json[\"functions\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.ScriptCoverage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"scriptId\"] = self.script_id.to_json()\n    json[\"url\"] = self.url\n    json[\"functions\"] = [i.to_json() for i in self.functions]\n    return json\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.disable","title":"<code>disable()</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Profiler.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.enable","title":"<code>enable()</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Profiler.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.get_best_effort_coverage","title":"<code>get_best_effort_coverage()</code>","text":"<p>Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[ScriptCoverage]]</code> <p>Coverage data for the current isolate.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def get_best_effort_coverage() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[ScriptCoverage]]\n):\n    \"\"\"\n    Collect coverage data for the current isolate. The coverage data may be incomplete due to\n    garbage collection.\n\n    :returns: Coverage data for the current isolate.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Profiler.getBestEffortCoverage\",\n    }\n    json = yield cmd_dict\n    return [ScriptCoverage.from_json(i) for i in json[\"result\"]]\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.set_sampling_interval","title":"<code>set_sampling_interval(interval)</code>","text":"<p>Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>int</code> <p>New sampling interval in microseconds.</p> required Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def set_sampling_interval(\n    interval: int,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.\n\n    :param interval: New sampling interval in microseconds.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"interval\"] = interval\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Profiler.setSamplingInterval\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.start","title":"<code>start()</code>","text":"Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def start() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Profiler.start\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.start_precise_coverage","title":"<code>start_precise_coverage(call_count=None, detailed=None, allow_triggered_updates=None)</code>","text":"<p>Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.</p> <p>Parameters:</p> Name Type Description Default <code>call_count</code> <code>Optional[bool]</code> <p>(Optional) Collect accurate call counts beyond simple 'covered' or 'not covered'.</p> <code>None</code> <code>detailed</code> <code>Optional[bool]</code> <p>(Optional) Collect block-based coverage.</p> <code>None</code> <code>allow_triggered_updates</code> <code>Optional[bool]</code> <p>(Optional) Allow the backend to send updates on its own initiative</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, float]</code> <p>Monotonically increasing time (in seconds) when the coverage update was taken in the backend.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def start_precise_coverage(\n    call_count: typing.Optional[bool] = None,\n    detailed: typing.Optional[bool] = None,\n    allow_triggered_updates: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, float]:\n    \"\"\"\n    Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code\n    coverage may be incomplete. Enabling prevents running optimized code and resets execution\n    counters.\n\n    :param call_count: *(Optional)* Collect accurate call counts beyond simple 'covered' or 'not covered'.\n    :param detailed: *(Optional)* Collect block-based coverage.\n    :param allow_triggered_updates: *(Optional)* Allow the backend to send updates on its own initiative\n    :returns: Monotonically increasing time (in seconds) when the coverage update was taken in the backend.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if call_count is not None:\n        params[\"callCount\"] = call_count\n    if detailed is not None:\n        params[\"detailed\"] = detailed\n    if allow_triggered_updates is not None:\n        params[\"allowTriggeredUpdates\"] = allow_triggered_updates\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Profiler.startPreciseCoverage\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return float(json[\"timestamp\"])\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.stop","title":"<code>stop()</code>","text":"<p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Profile]</code> <p>Recorded profile.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def stop() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, Profile]:\n    \"\"\"\n\n\n    :returns: Recorded profile.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Profiler.stop\",\n    }\n    json = yield cmd_dict\n    return Profile.from_json(json[\"profile\"])\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.stop_precise_coverage","title":"<code>stop_precise_coverage()</code>","text":"<p>Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def stop_precise_coverage() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disable precise code coverage. Disabling releases unnecessary execution count records and allows\n    executing optimized code.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Profiler.stopPreciseCoverage\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/profiler/#zendriver.cdp.profiler.take_precise_coverage","title":"<code>take_precise_coverage()</code>","text":"<p>Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[List[ScriptCoverage], float]]</code> <p>A tuple with the following items:  0. result - Coverage data for the current isolate. 1. timestamp - Monotonically increasing time (in seconds) when the coverage update was taken in the backend.</p> Source code in <code>zendriver/cdp/profiler.py</code> <pre><code>def take_precise_coverage() -&gt; (\n    typing.Generator[\n        T_JSON_DICT, T_JSON_DICT, typing.Tuple[typing.List[ScriptCoverage], float]\n    ]\n):\n    \"\"\"\n    Collect coverage data for the current isolate, and resets execution counters. Precise code\n    coverage needs to have started.\n\n    :returns: A tuple with the following items:\n\n        0. **result** - Coverage data for the current isolate.\n        1. **timestamp** - Monotonically increasing time (in seconds) when the coverage update was taken in the backend.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Profiler.takePreciseCoverage\",\n    }\n    json = yield cmd_dict\n    return (\n        [ScriptCoverage.from_json(i) for i in json[\"result\"]],\n        float(json[\"timestamp\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/pwa/","title":"pwa","text":""},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.DisplayMode","title":"<code>DisplayMode</code>","text":"<p>               Bases: <code>Enum</code></p> <p>If user prefers opening the app in browser or an app window.</p> Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>class DisplayMode(enum.Enum):\n    \"\"\"\n    If user prefers opening the app in browser or an app window.\n    \"\"\"\n\n    STANDALONE = \"standalone\"\n    BROWSER = \"browser\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; DisplayMode:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.DisplayMode.BROWSER","title":"<code>BROWSER = 'browser'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.DisplayMode.STANDALONE","title":"<code>STANDALONE = 'standalone'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.DisplayMode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; DisplayMode:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.DisplayMode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandler","title":"<code>FileHandler</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>@dataclass\nclass FileHandler:\n    action: str\n\n    accepts: typing.List[FileHandlerAccept]\n\n    display_name: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"action\"] = self.action\n        json[\"accepts\"] = [i.to_json() for i in self.accepts]\n        json[\"displayName\"] = self.display_name\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FileHandler:\n        return cls(\n            action=str(json[\"action\"]),\n            accepts=[FileHandlerAccept.from_json(i) for i in json[\"accepts\"]],\n            display_name=str(json[\"displayName\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandler.accepts","title":"<code>accepts: typing.List[FileHandlerAccept]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandler.action","title":"<code>action: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandler.display_name","title":"<code>display_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandler.__init__","title":"<code>__init__(action, accepts, display_name)</code>","text":""},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandler.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FileHandler:\n    return cls(\n        action=str(json[\"action\"]),\n        accepts=[FileHandlerAccept.from_json(i) for i in json[\"accepts\"]],\n        display_name=str(json[\"displayName\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandler.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"action\"] = self.action\n    json[\"accepts\"] = [i.to_json() for i in self.accepts]\n    json[\"displayName\"] = self.display_name\n    return json\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandlerAccept","title":"<code>FileHandlerAccept</code>  <code>dataclass</code>","text":"<p>The following types are the replica of https://crsrc.org/c/chrome/browser/web_applications/proto/web_app_os_integration_state.proto;drc=9910d3be894c8f142c977ba1023f30a656bc13fc;l=67</p> Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>@dataclass\nclass FileHandlerAccept:\n    \"\"\"\n    The following types are the replica of\n    https://crsrc.org/c/chrome/browser/web_applications/proto/web_app_os_integration_state.proto;drc=9910d3be894c8f142c977ba1023f30a656bc13fc;l=67\n    \"\"\"\n\n    #: New name of the mimetype according to\n    #: https://www.iana.org/assignments/media-types/media-types.xhtml\n    media_type: str\n\n    file_extensions: typing.List[str]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"mediaType\"] = self.media_type\n        json[\"fileExtensions\"] = [i for i in self.file_extensions]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FileHandlerAccept:\n        return cls(\n            media_type=str(json[\"mediaType\"]),\n            file_extensions=[str(i) for i in json[\"fileExtensions\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandlerAccept.file_extensions","title":"<code>file_extensions: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandlerAccept.media_type","title":"<code>media_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandlerAccept.__init__","title":"<code>__init__(media_type, file_extensions)</code>","text":""},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandlerAccept.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FileHandlerAccept:\n    return cls(\n        media_type=str(json[\"mediaType\"]),\n        file_extensions=[str(i) for i in json[\"fileExtensions\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.FileHandlerAccept.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"mediaType\"] = self.media_type\n    json[\"fileExtensions\"] = [i for i in self.file_extensions]\n    return json\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.change_app_user_settings","title":"<code>change_app_user_settings(manifest_id, link_capturing=None, display_mode=None)</code>","text":"<p>Changes user settings of the web app identified by its manifestId. If the app was not installed, this command returns an error. Unset parameters will be ignored; unrecognized values will cause an error.</p> <p>Unlike the ones defined in the manifest files of the web apps, these settings are provided by the browser and controlled by the users, they impact the way the browser handling the web apps.</p> <p>See the comment of each parameter.</p> <p>Parameters:</p> Name Type Description Default <code>manifest_id</code> <code>str</code> required <code>link_capturing</code> <code>Optional[bool]</code> <p>(Optional) If user allows the links clicked on by the user in the app's scope, or extended scope if the manifest has scope extensions and the flags <code>DesktopPWAsLinkCapturingWithScopeExtensions```` and ````WebAppEnableScopeExtensions</code> are enabled.  Note, the API does not support resetting the linkCapturing to the initial value, uninstalling and installing the web app again will reset it.  TODO(crbug.com/339453269): Setting this value on ChromeOS is not supported yet.</p> <code>None</code> <code>display_mode</code> <code>Optional[DisplayMode]</code> <p>(Optional)</p> <code>None</code> Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>def change_app_user_settings(\n    manifest_id: str,\n    link_capturing: typing.Optional[bool] = None,\n    display_mode: typing.Optional[DisplayMode] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Changes user settings of the web app identified by its manifestId. If the\n    app was not installed, this command returns an error. Unset parameters will\n    be ignored; unrecognized values will cause an error.\n\n    Unlike the ones defined in the manifest files of the web apps, these\n    settings are provided by the browser and controlled by the users, they\n    impact the way the browser handling the web apps.\n\n    See the comment of each parameter.\n\n    :param manifest_id:\n    :param link_capturing: *(Optional)* If user allows the links clicked on by the user in the app's scope, or extended scope if the manifest has scope extensions and the flags ```DesktopPWAsLinkCapturingWithScopeExtensions```` and ````WebAppEnableScopeExtensions``` are enabled.  Note, the API does not support resetting the linkCapturing to the initial value, uninstalling and installing the web app again will reset it.  TODO(crbug.com/339453269): Setting this value on ChromeOS is not supported yet.\n    :param display_mode: *(Optional)*\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"manifestId\"] = manifest_id\n    if link_capturing is not None:\n        params[\"linkCapturing\"] = link_capturing\n    if display_mode is not None:\n        params[\"displayMode\"] = display_mode.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"PWA.changeAppUserSettings\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.get_os_app_state","title":"<code>get_os_app_state(manifest_id)</code>","text":"<p>Returns the following OS state for the given manifest id.</p> <p>Parameters:</p> Name Type Description Default <code>manifest_id</code> <code>str</code> <p>The id from the webapp's manifest file, commonly it's the url of the site installing the webapp. See https://web.dev/learn/pwa/web-app-manifest.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[int, List[FileHandler]]]</code> <p>A tuple with the following items:  0. badgeCount - 1. fileHandlers -</p> Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>def get_os_app_state(\n    manifest_id: str,\n) -&gt; typing.Generator[\n    T_JSON_DICT, T_JSON_DICT, typing.Tuple[int, typing.List[FileHandler]]\n]:\n    \"\"\"\n    Returns the following OS state for the given manifest id.\n\n    :param manifest_id: The id from the webapp's manifest file, commonly it's the url of the site installing the webapp. See https://web.dev/learn/pwa/web-app-manifest.\n    :returns: A tuple with the following items:\n\n        0. **badgeCount** -\n        1. **fileHandlers** -\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"manifestId\"] = manifest_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"PWA.getOsAppState\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        int(json[\"badgeCount\"]),\n        [FileHandler.from_json(i) for i in json[\"fileHandlers\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.install","title":"<code>install(manifest_id, install_url_or_bundle_url=None)</code>","text":"<p>Installs the given manifest identity, optionally using the given install_url or IWA bundle location.</p> <p>TODO(crbug.com/337872319) Support IWA to meet the following specific requirement. IWA-specific install description: If the manifest_id is isolated-app://, install_url_or_bundle_url is required, and can be either an http(s) URL or file:// URL pointing to a signed web bundle (.swbn). The .swbn file's signing key must correspond to manifest_id. If Chrome is not in IWA dev mode, the installation will fail, regardless of the state of the allowlist.</p> <p>Parameters:</p> Name Type Description Default <code>manifest_id</code> <code>str</code> required <code>install_url_or_bundle_url</code> <code>Optional[str]</code> <p>(Optional) The location of the app or bundle overriding the one derived from the manifestId.</p> <code>None</code> Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>def install(\n    manifest_id: str, install_url_or_bundle_url: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Installs the given manifest identity, optionally using the given install_url\n    or IWA bundle location.\n\n    TODO(crbug.com/337872319) Support IWA to meet the following specific\n    requirement.\n    IWA-specific install description: If the manifest_id is isolated-app://,\n    install_url_or_bundle_url is required, and can be either an http(s) URL or\n    file:// URL pointing to a signed web bundle (.swbn). The .swbn file's\n    signing key must correspond to manifest_id. If Chrome is not in IWA dev\n    mode, the installation will fail, regardless of the state of the allowlist.\n\n    :param manifest_id:\n    :param install_url_or_bundle_url: *(Optional)* The location of the app or bundle overriding the one derived from the manifestId.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"manifestId\"] = manifest_id\n    if install_url_or_bundle_url is not None:\n        params[\"installUrlOrBundleUrl\"] = install_url_or_bundle_url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"PWA.install\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.launch","title":"<code>launch(manifest_id, url=None)</code>","text":"<p>Launches the installed web app, or an url in the same web app instead of the default start url if it is provided. Returns a page Target.TargetID which can be used to attach to via Target.attachToTarget or similar APIs.</p> <p>Parameters:</p> Name Type Description Default <code>manifest_id</code> <code>str</code> required <code>url</code> <code>Optional[str]</code> <p>(Optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, TargetID]</code> <p>ID of the tab target created as a result.</p> Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>def launch(\n    manifest_id: str, url: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, target.TargetID]:\n    \"\"\"\n    Launches the installed web app, or an url in the same web app instead of the\n    default start url if it is provided. Returns a page Target.TargetID which\n    can be used to attach to via Target.attachToTarget or similar APIs.\n\n    :param manifest_id:\n    :param url: *(Optional)*\n    :returns: ID of the tab target created as a result.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"manifestId\"] = manifest_id\n    if url is not None:\n        params[\"url\"] = url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"PWA.launch\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return target.TargetID.from_json(json[\"targetId\"])\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.launch_files_in_app","title":"<code>launch_files_in_app(manifest_id, files)</code>","text":"<p>Opens one or more local files from an installed web app identified by its manifestId. The web app needs to have file handlers registered to process the files. The API returns one or more page Target.TargetIDs which can be used to attach to via Target.attachToTarget or similar APIs. If some files in the parameters cannot be handled by the web app, they will be ignored. If none of the files can be handled, this API returns an error. If no files are provided as the parameter, this API also returns an error.</p> <p>According to the definition of the file handlers in the manifest file, one Target.TargetID may represent a page handling one or more files. The order of the returned Target.TargetIDs is not guaranteed.</p> <p>TODO(crbug.com/339454034): Check the existences of the input files.</p> <p>Parameters:</p> Name Type Description Default <code>manifest_id</code> <code>str</code> required <code>files</code> <code>List[str]</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[TargetID]]</code> <p>IDs of the tab targets created as the result.</p> Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>def launch_files_in_app(\n    manifest_id: str, files: typing.List[str]\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[target.TargetID]]:\n    \"\"\"\n    Opens one or more local files from an installed web app identified by its\n    manifestId. The web app needs to have file handlers registered to process\n    the files. The API returns one or more page Target.TargetIDs which can be\n    used to attach to via Target.attachToTarget or similar APIs.\n    If some files in the parameters cannot be handled by the web app, they will\n    be ignored. If none of the files can be handled, this API returns an error.\n    If no files are provided as the parameter, this API also returns an error.\n\n    According to the definition of the file handlers in the manifest file, one\n    Target.TargetID may represent a page handling one or more files. The order\n    of the returned Target.TargetIDs is not guaranteed.\n\n    TODO(crbug.com/339454034): Check the existences of the input files.\n\n    :param manifest_id:\n    :param files:\n    :returns: IDs of the tab targets created as the result.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"manifestId\"] = manifest_id\n    params[\"files\"] = [i for i in files]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"PWA.launchFilesInApp\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [target.TargetID.from_json(i) for i in json[\"targetIds\"]]\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.open_current_page_in_app","title":"<code>open_current_page_in_app(manifest_id)</code>","text":"<p>Opens the current page in its web app identified by the manifest id, needs to be called on a page target. This function returns immediately without waiting for the app to finish loading.</p> <p>Parameters:</p> Name Type Description Default <code>manifest_id</code> <code>str</code> required Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>def open_current_page_in_app(\n    manifest_id: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Opens the current page in its web app identified by the manifest id, needs\n    to be called on a page target. This function returns immediately without\n    waiting for the app to finish loading.\n\n    :param manifest_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"manifestId\"] = manifest_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"PWA.openCurrentPageInApp\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/pwa/#zendriver.cdp.pwa.uninstall","title":"<code>uninstall(manifest_id)</code>","text":"<p>Uninstalls the given manifest_id and closes any opened app windows.</p> <p>Parameters:</p> Name Type Description Default <code>manifest_id</code> <code>str</code> required Source code in <code>zendriver/cdp/pwa.py</code> <pre><code>def uninstall(manifest_id: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Uninstalls the given manifest_id and closes any opened app windows.\n\n    :param manifest_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"manifestId\"] = manifest_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"PWA.uninstall\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/","title":"runtime","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.BindingCalled","title":"<code>BindingCalled</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Notification is issued every time when binding is called.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@event_class(\"Runtime.bindingCalled\")\n@dataclass\nclass BindingCalled:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Notification is issued every time when binding is called.\n    \"\"\"\n\n    name: str\n    payload: str\n    #: Identifier of the context where the call was made.\n    execution_context_id: ExecutionContextId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BindingCalled:\n        return cls(\n            name=str(json[\"name\"]),\n            payload=str(json[\"payload\"]),\n            execution_context_id=ExecutionContextId.from_json(\n                json[\"executionContextId\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.BindingCalled.execution_context_id","title":"<code>execution_context_id: ExecutionContextId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.BindingCalled.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.BindingCalled.payload","title":"<code>payload: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.BindingCalled.__init__","title":"<code>__init__(name, payload, execution_context_id)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.BindingCalled.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BindingCalled:\n    return cls(\n        name=str(json[\"name\"]),\n        payload=str(json[\"payload\"]),\n        execution_context_id=ExecutionContextId.from_json(\n            json[\"executionContextId\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallArgument","title":"<code>CallArgument</code>  <code>dataclass</code>","text":"<p>Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass CallArgument:\n    \"\"\"\n    Represents function call argument. Either remote object id ``objectId``, primitive ``value``,\n    unserializable primitive value or neither of (for undefined) them should be specified.\n    \"\"\"\n\n    #: Primitive value or serializable javascript object.\n    value: typing.Optional[typing.Any] = None\n\n    #: Primitive value which can not be JSON-stringified.\n    unserializable_value: typing.Optional[UnserializableValue] = None\n\n    #: Remote object handle.\n    object_id: typing.Optional[RemoteObjectId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.value is not None:\n            json[\"value\"] = self.value\n        if self.unserializable_value is not None:\n            json[\"unserializableValue\"] = self.unserializable_value.to_json()\n        if self.object_id is not None:\n            json[\"objectId\"] = self.object_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CallArgument:\n        return cls(\n            value=json[\"value\"] if json.get(\"value\", None) is not None else None,\n            unserializable_value=(\n                UnserializableValue.from_json(json[\"unserializableValue\"])\n                if json.get(\"unserializableValue\", None) is not None\n                else None\n            ),\n            object_id=(\n                RemoteObjectId.from_json(json[\"objectId\"])\n                if json.get(\"objectId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallArgument.object_id","title":"<code>object_id: typing.Optional[RemoteObjectId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallArgument.unserializable_value","title":"<code>unserializable_value: typing.Optional[UnserializableValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallArgument.value","title":"<code>value: typing.Optional[typing.Any] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallArgument.__init__","title":"<code>__init__(value=None, unserializable_value=None, object_id=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallArgument.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CallArgument:\n    return cls(\n        value=json[\"value\"] if json.get(\"value\", None) is not None else None,\n        unserializable_value=(\n            UnserializableValue.from_json(json[\"unserializableValue\"])\n            if json.get(\"unserializableValue\", None) is not None\n            else None\n        ),\n        object_id=(\n            RemoteObjectId.from_json(json[\"objectId\"])\n            if json.get(\"objectId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallArgument.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.value is not None:\n        json[\"value\"] = self.value\n    if self.unserializable_value is not None:\n        json[\"unserializableValue\"] = self.unserializable_value.to_json()\n    if self.object_id is not None:\n        json[\"objectId\"] = self.object_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallFrame","title":"<code>CallFrame</code>  <code>dataclass</code>","text":"<p>Stack entry for runtime errors and assertions.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass CallFrame:\n    \"\"\"\n    Stack entry for runtime errors and assertions.\n    \"\"\"\n\n    #: JavaScript function name.\n    function_name: str\n\n    #: JavaScript script id.\n    script_id: ScriptId\n\n    #: JavaScript script name or url.\n    url: str\n\n    #: JavaScript script line number (0-based).\n    line_number: int\n\n    #: JavaScript script column number (0-based).\n    column_number: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"functionName\"] = self.function_name\n        json[\"scriptId\"] = self.script_id.to_json()\n        json[\"url\"] = self.url\n        json[\"lineNumber\"] = self.line_number\n        json[\"columnNumber\"] = self.column_number\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CallFrame:\n        return cls(\n            function_name=str(json[\"functionName\"]),\n            script_id=ScriptId.from_json(json[\"scriptId\"]),\n            url=str(json[\"url\"]),\n            line_number=int(json[\"lineNumber\"]),\n            column_number=int(json[\"columnNumber\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallFrame.column_number","title":"<code>column_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallFrame.function_name","title":"<code>function_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallFrame.line_number","title":"<code>line_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallFrame.script_id","title":"<code>script_id: ScriptId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallFrame.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallFrame.__init__","title":"<code>__init__(function_name, script_id, url, line_number, column_number)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallFrame.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CallFrame:\n    return cls(\n        function_name=str(json[\"functionName\"]),\n        script_id=ScriptId.from_json(json[\"scriptId\"]),\n        url=str(json[\"url\"]),\n        line_number=int(json[\"lineNumber\"]),\n        column_number=int(json[\"columnNumber\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CallFrame.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"functionName\"] = self.function_name\n    json[\"scriptId\"] = self.script_id.to_json()\n    json[\"url\"] = self.url\n    json[\"lineNumber\"] = self.line_number\n    json[\"columnNumber\"] = self.column_number\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ConsoleAPICalled","title":"<code>ConsoleAPICalled</code>  <code>dataclass</code>","text":"<p>Issued when console API was called.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@event_class(\"Runtime.consoleAPICalled\")\n@dataclass\nclass ConsoleAPICalled:\n    \"\"\"\n    Issued when console API was called.\n    \"\"\"\n\n    #: Type of the call.\n    type_: str\n    #: Call arguments.\n    args: typing.List[RemoteObject]\n    #: Identifier of the context where the call was made.\n    execution_context_id: ExecutionContextId\n    #: Call timestamp.\n    timestamp: Timestamp\n    #: Stack trace captured when the call was made. The async stack chain is automatically reported for\n    #: the following call types: ``assert``, ``error``, ``trace``, ``warning``. For other types the async call\n    #: chain can be retrieved using ``Debugger.getStackTrace`` and ``stackTrace.parentId`` field.\n    stack_trace: typing.Optional[StackTrace]\n    #: Console context descriptor for calls on non-default console context (not console.*):\n    #: 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call\n    #: on named context.\n    context: typing.Optional[str]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ConsoleAPICalled:\n        return cls(\n            type_=str(json[\"type\"]),\n            args=[RemoteObject.from_json(i) for i in json[\"args\"]],\n            execution_context_id=ExecutionContextId.from_json(\n                json[\"executionContextId\"]\n            ),\n            timestamp=Timestamp.from_json(json[\"timestamp\"]),\n            stack_trace=(\n                StackTrace.from_json(json[\"stackTrace\"])\n                if json.get(\"stackTrace\", None) is not None\n                else None\n            ),\n            context=(\n                str(json[\"context\"]) if json.get(\"context\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ConsoleAPICalled.args","title":"<code>args: typing.List[RemoteObject]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ConsoleAPICalled.context","title":"<code>context: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ConsoleAPICalled.execution_context_id","title":"<code>execution_context_id: ExecutionContextId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ConsoleAPICalled.stack_trace","title":"<code>stack_trace: typing.Optional[StackTrace]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ConsoleAPICalled.timestamp","title":"<code>timestamp: Timestamp</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ConsoleAPICalled.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ConsoleAPICalled.__init__","title":"<code>__init__(type_, args, execution_context_id, timestamp, stack_trace, context)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ConsoleAPICalled.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ConsoleAPICalled:\n    return cls(\n        type_=str(json[\"type\"]),\n        args=[RemoteObject.from_json(i) for i in json[\"args\"]],\n        execution_context_id=ExecutionContextId.from_json(\n            json[\"executionContextId\"]\n        ),\n        timestamp=Timestamp.from_json(json[\"timestamp\"]),\n        stack_trace=(\n            StackTrace.from_json(json[\"stackTrace\"])\n            if json.get(\"stackTrace\", None) is not None\n            else None\n        ),\n        context=(\n            str(json[\"context\"]) if json.get(\"context\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CustomPreview","title":"<code>CustomPreview</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass CustomPreview:\n    #: The JSON-stringified result of formatter.header(object, config) call.\n    #: It contains json ML array that represents RemoteObject.\n    header: str\n\n    #: If formatter returns true as a result of formatter.hasBody call then bodyGetterId will\n    #: contain RemoteObjectId for the function that returns result of formatter.body(object, config) call.\n    #: The result value is json ML array.\n    body_getter_id: typing.Optional[RemoteObjectId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"header\"] = self.header\n        if self.body_getter_id is not None:\n            json[\"bodyGetterId\"] = self.body_getter_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CustomPreview:\n        return cls(\n            header=str(json[\"header\"]),\n            body_getter_id=(\n                RemoteObjectId.from_json(json[\"bodyGetterId\"])\n                if json.get(\"bodyGetterId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CustomPreview.body_getter_id","title":"<code>body_getter_id: typing.Optional[RemoteObjectId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CustomPreview.header","title":"<code>header: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CustomPreview.__init__","title":"<code>__init__(header, body_getter_id=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CustomPreview.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CustomPreview:\n    return cls(\n        header=str(json[\"header\"]),\n        body_getter_id=(\n            RemoteObjectId.from_json(json[\"bodyGetterId\"])\n            if json.get(\"bodyGetterId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.CustomPreview.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"header\"] = self.header\n    if self.body_getter_id is not None:\n        json[\"bodyGetterId\"] = self.body_getter_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.DeepSerializedValue","title":"<code>DeepSerializedValue</code>  <code>dataclass</code>","text":"<p>Represents deep serialized value.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass DeepSerializedValue:\n    \"\"\"\n    Represents deep serialized value.\n    \"\"\"\n\n    type_: str\n\n    value: typing.Optional[typing.Any] = None\n\n    object_id: typing.Optional[str] = None\n\n    #: Set if value reference met more then once during serialization. In such\n    #: case, value is provided only to one of the serialized values. Unique\n    #: per value in the scope of one CDP call.\n    weak_local_object_reference: typing.Optional[int] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        if self.value is not None:\n            json[\"value\"] = self.value\n        if self.object_id is not None:\n            json[\"objectId\"] = self.object_id\n        if self.weak_local_object_reference is not None:\n            json[\"weakLocalObjectReference\"] = self.weak_local_object_reference\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DeepSerializedValue:\n        return cls(\n            type_=str(json[\"type\"]),\n            value=json[\"value\"] if json.get(\"value\", None) is not None else None,\n            object_id=(\n                str(json[\"objectId\"])\n                if json.get(\"objectId\", None) is not None\n                else None\n            ),\n            weak_local_object_reference=(\n                int(json[\"weakLocalObjectReference\"])\n                if json.get(\"weakLocalObjectReference\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.DeepSerializedValue.object_id","title":"<code>object_id: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.DeepSerializedValue.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.DeepSerializedValue.value","title":"<code>value: typing.Optional[typing.Any] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.DeepSerializedValue.weak_local_object_reference","title":"<code>weak_local_object_reference: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.DeepSerializedValue.__init__","title":"<code>__init__(type_, value=None, object_id=None, weak_local_object_reference=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.DeepSerializedValue.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DeepSerializedValue:\n    return cls(\n        type_=str(json[\"type\"]),\n        value=json[\"value\"] if json.get(\"value\", None) is not None else None,\n        object_id=(\n            str(json[\"objectId\"])\n            if json.get(\"objectId\", None) is not None\n            else None\n        ),\n        weak_local_object_reference=(\n            int(json[\"weakLocalObjectReference\"])\n            if json.get(\"weakLocalObjectReference\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.DeepSerializedValue.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    if self.value is not None:\n        json[\"value\"] = self.value\n    if self.object_id is not None:\n        json[\"objectId\"] = self.object_id\n    if self.weak_local_object_reference is not None:\n        json[\"weakLocalObjectReference\"] = self.weak_local_object_reference\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.EntryPreview","title":"<code>EntryPreview</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass EntryPreview:\n    #: Preview of the value.\n    value: ObjectPreview\n\n    #: Preview of the key. Specified for map-like collection entries.\n    key: typing.Optional[ObjectPreview] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"value\"] = self.value.to_json()\n        if self.key is not None:\n            json[\"key\"] = self.key.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; EntryPreview:\n        return cls(\n            value=ObjectPreview.from_json(json[\"value\"]),\n            key=(\n                ObjectPreview.from_json(json[\"key\"])\n                if json.get(\"key\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.EntryPreview.key","title":"<code>key: typing.Optional[ObjectPreview] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.EntryPreview.value","title":"<code>value: ObjectPreview</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.EntryPreview.__init__","title":"<code>__init__(value, key=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.EntryPreview.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; EntryPreview:\n    return cls(\n        value=ObjectPreview.from_json(json[\"value\"]),\n        key=(\n            ObjectPreview.from_json(json[\"key\"])\n            if json.get(\"key\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.EntryPreview.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"value\"] = self.value.to_json()\n    if self.key is not None:\n        json[\"key\"] = self.key.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails","title":"<code>ExceptionDetails</code>  <code>dataclass</code>","text":"<p>Detailed information about exception (or error) that was thrown during script compilation or execution.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass ExceptionDetails:\n    \"\"\"\n    Detailed information about exception (or error) that was thrown during script compilation or\n    execution.\n    \"\"\"\n\n    #: Exception id.\n    exception_id: int\n\n    #: Exception text, which should be used together with exception object when available.\n    text: str\n\n    #: Line number of the exception location (0-based).\n    line_number: int\n\n    #: Column number of the exception location (0-based).\n    column_number: int\n\n    #: Script ID of the exception location.\n    script_id: typing.Optional[ScriptId] = None\n\n    #: URL of the exception location, to be used when the script was not reported.\n    url: typing.Optional[str] = None\n\n    #: JavaScript stack trace if available.\n    stack_trace: typing.Optional[StackTrace] = None\n\n    #: Exception object if available.\n    exception: typing.Optional[RemoteObject] = None\n\n    #: Identifier of the context where exception happened.\n    execution_context_id: typing.Optional[ExecutionContextId] = None\n\n    #: Dictionary with entries of meta data that the client associated\n    #: with this exception, such as information about associated network\n    #: requests, etc.\n    exception_meta_data: typing.Optional[dict] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"exceptionId\"] = self.exception_id\n        json[\"text\"] = self.text\n        json[\"lineNumber\"] = self.line_number\n        json[\"columnNumber\"] = self.column_number\n        if self.script_id is not None:\n            json[\"scriptId\"] = self.script_id.to_json()\n        if self.url is not None:\n            json[\"url\"] = self.url\n        if self.stack_trace is not None:\n            json[\"stackTrace\"] = self.stack_trace.to_json()\n        if self.exception is not None:\n            json[\"exception\"] = self.exception.to_json()\n        if self.execution_context_id is not None:\n            json[\"executionContextId\"] = self.execution_context_id.to_json()\n        if self.exception_meta_data is not None:\n            json[\"exceptionMetaData\"] = self.exception_meta_data\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ExceptionDetails:\n        return cls(\n            exception_id=int(json[\"exceptionId\"]),\n            text=str(json[\"text\"]),\n            line_number=int(json[\"lineNumber\"]),\n            column_number=int(json[\"columnNumber\"]),\n            script_id=(\n                ScriptId.from_json(json[\"scriptId\"])\n                if json.get(\"scriptId\", None) is not None\n                else None\n            ),\n            url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n            stack_trace=(\n                StackTrace.from_json(json[\"stackTrace\"])\n                if json.get(\"stackTrace\", None) is not None\n                else None\n            ),\n            exception=(\n                RemoteObject.from_json(json[\"exception\"])\n                if json.get(\"exception\", None) is not None\n                else None\n            ),\n            execution_context_id=(\n                ExecutionContextId.from_json(json[\"executionContextId\"])\n                if json.get(\"executionContextId\", None) is not None\n                else None\n            ),\n            exception_meta_data=(\n                dict(json[\"exceptionMetaData\"])\n                if json.get(\"exceptionMetaData\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.column_number","title":"<code>column_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.exception","title":"<code>exception: typing.Optional[RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.exception_id","title":"<code>exception_id: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.exception_meta_data","title":"<code>exception_meta_data: typing.Optional[dict] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.execution_context_id","title":"<code>execution_context_id: typing.Optional[ExecutionContextId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.line_number","title":"<code>line_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.script_id","title":"<code>script_id: typing.Optional[ScriptId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.stack_trace","title":"<code>stack_trace: typing.Optional[StackTrace] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.text","title":"<code>text: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.url","title":"<code>url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.__init__","title":"<code>__init__(exception_id, text, line_number, column_number, script_id=None, url=None, stack_trace=None, exception=None, execution_context_id=None, exception_meta_data=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ExceptionDetails:\n    return cls(\n        exception_id=int(json[\"exceptionId\"]),\n        text=str(json[\"text\"]),\n        line_number=int(json[\"lineNumber\"]),\n        column_number=int(json[\"columnNumber\"]),\n        script_id=(\n            ScriptId.from_json(json[\"scriptId\"])\n            if json.get(\"scriptId\", None) is not None\n            else None\n        ),\n        url=str(json[\"url\"]) if json.get(\"url\", None) is not None else None,\n        stack_trace=(\n            StackTrace.from_json(json[\"stackTrace\"])\n            if json.get(\"stackTrace\", None) is not None\n            else None\n        ),\n        exception=(\n            RemoteObject.from_json(json[\"exception\"])\n            if json.get(\"exception\", None) is not None\n            else None\n        ),\n        execution_context_id=(\n            ExecutionContextId.from_json(json[\"executionContextId\"])\n            if json.get(\"executionContextId\", None) is not None\n            else None\n        ),\n        exception_meta_data=(\n            dict(json[\"exceptionMetaData\"])\n            if json.get(\"exceptionMetaData\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionDetails.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"exceptionId\"] = self.exception_id\n    json[\"text\"] = self.text\n    json[\"lineNumber\"] = self.line_number\n    json[\"columnNumber\"] = self.column_number\n    if self.script_id is not None:\n        json[\"scriptId\"] = self.script_id.to_json()\n    if self.url is not None:\n        json[\"url\"] = self.url\n    if self.stack_trace is not None:\n        json[\"stackTrace\"] = self.stack_trace.to_json()\n    if self.exception is not None:\n        json[\"exception\"] = self.exception.to_json()\n    if self.execution_context_id is not None:\n        json[\"executionContextId\"] = self.execution_context_id.to_json()\n    if self.exception_meta_data is not None:\n        json[\"exceptionMetaData\"] = self.exception_meta_data\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionRevoked","title":"<code>ExceptionRevoked</code>  <code>dataclass</code>","text":"<p>Issued when unhandled exception was revoked.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@event_class(\"Runtime.exceptionRevoked\")\n@dataclass\nclass ExceptionRevoked:\n    \"\"\"\n    Issued when unhandled exception was revoked.\n    \"\"\"\n\n    #: Reason describing why exception was revoked.\n    reason: str\n    #: The id of revoked exception, as reported in ``exceptionThrown``.\n    exception_id: int\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ExceptionRevoked:\n        return cls(reason=str(json[\"reason\"]), exception_id=int(json[\"exceptionId\"]))\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionRevoked.exception_id","title":"<code>exception_id: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionRevoked.reason","title":"<code>reason: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionRevoked.__init__","title":"<code>__init__(reason, exception_id)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionRevoked.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ExceptionRevoked:\n    return cls(reason=str(json[\"reason\"]), exception_id=int(json[\"exceptionId\"]))\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionThrown","title":"<code>ExceptionThrown</code>  <code>dataclass</code>","text":"<p>Issued when exception was thrown and unhandled.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@event_class(\"Runtime.exceptionThrown\")\n@dataclass\nclass ExceptionThrown:\n    \"\"\"\n    Issued when exception was thrown and unhandled.\n    \"\"\"\n\n    #: Timestamp of the exception.\n    timestamp: Timestamp\n    exception_details: ExceptionDetails\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ExceptionThrown:\n        return cls(\n            timestamp=Timestamp.from_json(json[\"timestamp\"]),\n            exception_details=ExceptionDetails.from_json(json[\"exceptionDetails\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionThrown.exception_details","title":"<code>exception_details: ExceptionDetails</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionThrown.timestamp","title":"<code>timestamp: Timestamp</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionThrown.__init__","title":"<code>__init__(timestamp, exception_details)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExceptionThrown.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ExceptionThrown:\n    return cls(\n        timestamp=Timestamp.from_json(json[\"timestamp\"]),\n        exception_details=ExceptionDetails.from_json(json[\"exceptionDetails\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextCreated","title":"<code>ExecutionContextCreated</code>  <code>dataclass</code>","text":"<p>Issued when new execution context is created.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@event_class(\"Runtime.executionContextCreated\")\n@dataclass\nclass ExecutionContextCreated:\n    \"\"\"\n    Issued when new execution context is created.\n    \"\"\"\n\n    #: A newly created execution context.\n    context: ExecutionContextDescription\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ExecutionContextCreated:\n        return cls(context=ExecutionContextDescription.from_json(json[\"context\"]))\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextCreated.context","title":"<code>context: ExecutionContextDescription</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextCreated.__init__","title":"<code>__init__(context)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ExecutionContextCreated:\n    return cls(context=ExecutionContextDescription.from_json(json[\"context\"]))\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDescription","title":"<code>ExecutionContextDescription</code>  <code>dataclass</code>","text":"<p>Description of an isolated world.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass ExecutionContextDescription:\n    \"\"\"\n    Description of an isolated world.\n    \"\"\"\n\n    #: Unique id of the execution context. It can be used to specify in which execution context\n    #: script evaluation should be performed.\n    id_: ExecutionContextId\n\n    #: Execution context origin.\n    origin: str\n\n    #: Human readable name describing given context.\n    name: str\n\n    #: A system-unique execution context identifier. Unlike the id, this is unique across\n    #: multiple processes, so can be reliably used to identify specific context while backend\n    #: performs a cross-process navigation.\n    unique_id: str\n\n    #: Embedder-specific auxiliary data likely matching {isDefault: boolean, type: 'default'``'isolated'``'worker', frameId: string}\n    aux_data: typing.Optional[dict] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"id\"] = self.id_.to_json()\n        json[\"origin\"] = self.origin\n        json[\"name\"] = self.name\n        json[\"uniqueId\"] = self.unique_id\n        if self.aux_data is not None:\n            json[\"auxData\"] = self.aux_data\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ExecutionContextDescription:\n        return cls(\n            id_=ExecutionContextId.from_json(json[\"id\"]),\n            origin=str(json[\"origin\"]),\n            name=str(json[\"name\"]),\n            unique_id=str(json[\"uniqueId\"]),\n            aux_data=(\n                dict(json[\"auxData\"]) if json.get(\"auxData\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDescription.aux_data","title":"<code>aux_data: typing.Optional[dict] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDescription.id_","title":"<code>id_: ExecutionContextId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDescription.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDescription.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDescription.unique_id","title":"<code>unique_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDescription.__init__","title":"<code>__init__(id_, origin, name, unique_id, aux_data=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDescription.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ExecutionContextDescription:\n    return cls(\n        id_=ExecutionContextId.from_json(json[\"id\"]),\n        origin=str(json[\"origin\"]),\n        name=str(json[\"name\"]),\n        unique_id=str(json[\"uniqueId\"]),\n        aux_data=(\n            dict(json[\"auxData\"]) if json.get(\"auxData\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDescription.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"id\"] = self.id_.to_json()\n    json[\"origin\"] = self.origin\n    json[\"name\"] = self.name\n    json[\"uniqueId\"] = self.unique_id\n    if self.aux_data is not None:\n        json[\"auxData\"] = self.aux_data\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDestroyed","title":"<code>ExecutionContextDestroyed</code>  <code>dataclass</code>","text":"<p>Issued when execution context is destroyed.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@event_class(\"Runtime.executionContextDestroyed\")\n@dataclass\nclass ExecutionContextDestroyed:\n    \"\"\"\n    Issued when execution context is destroyed.\n    \"\"\"\n\n    #: Id of the destroyed context\n    execution_context_id: ExecutionContextId\n    #: Unique Id of the destroyed context\n    execution_context_unique_id: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ExecutionContextDestroyed:\n        return cls(\n            execution_context_id=ExecutionContextId.from_json(\n                json[\"executionContextId\"]\n            ),\n            execution_context_unique_id=str(json[\"executionContextUniqueId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDestroyed.execution_context_id","title":"<code>execution_context_id: ExecutionContextId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDestroyed.execution_context_unique_id","title":"<code>execution_context_unique_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDestroyed.__init__","title":"<code>__init__(execution_context_id, execution_context_unique_id)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextDestroyed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ExecutionContextDestroyed:\n    return cls(\n        execution_context_id=ExecutionContextId.from_json(\n            json[\"executionContextId\"]\n        ),\n        execution_context_unique_id=str(json[\"executionContextUniqueId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextId","title":"<code>ExecutionContextId</code>","text":"<p>               Bases: <code>int</code></p> <p>Id of an execution context.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>class ExecutionContextId(int):\n    \"\"\"\n    Id of an execution context.\n    \"\"\"\n\n    def to_json(self) -&gt; int:\n        return self\n\n    @classmethod\n    def from_json(cls, json: int) -&gt; ExecutionContextId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"ExecutionContextId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def __repr__(self):\n    return \"ExecutionContextId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: int) -&gt; ExecutionContextId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; int:\n    return self\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextsCleared","title":"<code>ExecutionContextsCleared</code>  <code>dataclass</code>","text":"<p>Issued when all executionContexts were cleared in browser</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@event_class(\"Runtime.executionContextsCleared\")\n@dataclass\nclass ExecutionContextsCleared:\n    \"\"\"\n    Issued when all executionContexts were cleared in browser\n    \"\"\"\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ExecutionContextsCleared:\n        return cls()\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextsCleared.__init__","title":"<code>__init__()</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ExecutionContextsCleared.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ExecutionContextsCleared:\n    return cls()\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InspectRequested","title":"<code>InspectRequested</code>  <code>dataclass</code>","text":"<p>Issued when object should be inspected (for example, as a result of inspect() command line API call).</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@event_class(\"Runtime.inspectRequested\")\n@dataclass\nclass InspectRequested:\n    \"\"\"\n    Issued when object should be inspected (for example, as a result of inspect() command line API\n    call).\n    \"\"\"\n\n    object_: RemoteObject\n    hints: dict\n    #: Identifier of the context where the call was made.\n    execution_context_id: typing.Optional[ExecutionContextId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InspectRequested:\n        return cls(\n            object_=RemoteObject.from_json(json[\"object\"]),\n            hints=dict(json[\"hints\"]),\n            execution_context_id=(\n                ExecutionContextId.from_json(json[\"executionContextId\"])\n                if json.get(\"executionContextId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InspectRequested.execution_context_id","title":"<code>execution_context_id: typing.Optional[ExecutionContextId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InspectRequested.hints","title":"<code>hints: dict</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InspectRequested.object_","title":"<code>object_: RemoteObject</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InspectRequested.__init__","title":"<code>__init__(object_, hints, execution_context_id)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InspectRequested.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InspectRequested:\n    return cls(\n        object_=RemoteObject.from_json(json[\"object\"]),\n        hints=dict(json[\"hints\"]),\n        execution_context_id=(\n            ExecutionContextId.from_json(json[\"executionContextId\"])\n            if json.get(\"executionContextId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InternalPropertyDescriptor","title":"<code>InternalPropertyDescriptor</code>  <code>dataclass</code>","text":"<p>Object internal property descriptor. This property isn't normally visible in JavaScript code.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass InternalPropertyDescriptor:\n    \"\"\"\n    Object internal property descriptor. This property isn't normally visible in JavaScript code.\n    \"\"\"\n\n    #: Conventional property name.\n    name: str\n\n    #: The value associated with the property.\n    value: typing.Optional[RemoteObject] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        if self.value is not None:\n            json[\"value\"] = self.value.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InternalPropertyDescriptor:\n        return cls(\n            name=str(json[\"name\"]),\n            value=(\n                RemoteObject.from_json(json[\"value\"])\n                if json.get(\"value\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InternalPropertyDescriptor.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InternalPropertyDescriptor.value","title":"<code>value: typing.Optional[RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InternalPropertyDescriptor.__init__","title":"<code>__init__(name, value=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InternalPropertyDescriptor.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InternalPropertyDescriptor:\n    return cls(\n        name=str(json[\"name\"]),\n        value=(\n            RemoteObject.from_json(json[\"value\"])\n            if json.get(\"value\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.InternalPropertyDescriptor.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    if self.value is not None:\n        json[\"value\"] = self.value.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ObjectPreview","title":"<code>ObjectPreview</code>  <code>dataclass</code>","text":"<p>Object containing abbreviated remote object value.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass ObjectPreview:\n    \"\"\"\n    Object containing abbreviated remote object value.\n    \"\"\"\n\n    #: Object type.\n    type_: str\n\n    #: True iff some of the properties or entries of the original object did not fit.\n    overflow: bool\n\n    #: List of the properties.\n    properties: typing.List[PropertyPreview]\n\n    #: Object subtype hint. Specified for ``object`` type values only.\n    subtype: typing.Optional[str] = None\n\n    #: String representation of the object.\n    description: typing.Optional[str] = None\n\n    #: List of the entries. Specified for ``map`` and ``set`` subtype values only.\n    entries: typing.Optional[typing.List[EntryPreview]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        json[\"overflow\"] = self.overflow\n        json[\"properties\"] = [i.to_json() for i in self.properties]\n        if self.subtype is not None:\n            json[\"subtype\"] = self.subtype\n        if self.description is not None:\n            json[\"description\"] = self.description\n        if self.entries is not None:\n            json[\"entries\"] = [i.to_json() for i in self.entries]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ObjectPreview:\n        return cls(\n            type_=str(json[\"type\"]),\n            overflow=bool(json[\"overflow\"]),\n            properties=[PropertyPreview.from_json(i) for i in json[\"properties\"]],\n            subtype=(\n                str(json[\"subtype\"]) if json.get(\"subtype\", None) is not None else None\n            ),\n            description=(\n                str(json[\"description\"])\n                if json.get(\"description\", None) is not None\n                else None\n            ),\n            entries=(\n                [EntryPreview.from_json(i) for i in json[\"entries\"]]\n                if json.get(\"entries\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ObjectPreview.description","title":"<code>description: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ObjectPreview.entries","title":"<code>entries: typing.Optional[typing.List[EntryPreview]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ObjectPreview.overflow","title":"<code>overflow: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ObjectPreview.properties","title":"<code>properties: typing.List[PropertyPreview]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ObjectPreview.subtype","title":"<code>subtype: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ObjectPreview.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ObjectPreview.__init__","title":"<code>__init__(type_, overflow, properties, subtype=None, description=None, entries=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ObjectPreview.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ObjectPreview:\n    return cls(\n        type_=str(json[\"type\"]),\n        overflow=bool(json[\"overflow\"]),\n        properties=[PropertyPreview.from_json(i) for i in json[\"properties\"]],\n        subtype=(\n            str(json[\"subtype\"]) if json.get(\"subtype\", None) is not None else None\n        ),\n        description=(\n            str(json[\"description\"])\n            if json.get(\"description\", None) is not None\n            else None\n        ),\n        entries=(\n            [EntryPreview.from_json(i) for i in json[\"entries\"]]\n            if json.get(\"entries\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ObjectPreview.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    json[\"overflow\"] = self.overflow\n    json[\"properties\"] = [i.to_json() for i in self.properties]\n    if self.subtype is not None:\n        json[\"subtype\"] = self.subtype\n    if self.description is not None:\n        json[\"description\"] = self.description\n    if self.entries is not None:\n        json[\"entries\"] = [i.to_json() for i in self.entries]\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PrivatePropertyDescriptor","title":"<code>PrivatePropertyDescriptor</code>  <code>dataclass</code>","text":"<p>Object private field descriptor.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass PrivatePropertyDescriptor:\n    \"\"\"\n    Object private field descriptor.\n    \"\"\"\n\n    #: Private property name.\n    name: str\n\n    #: The value associated with the private property.\n    value: typing.Optional[RemoteObject] = None\n\n    #: A function which serves as a getter for the private property,\n    #: or ``undefined`` if there is no getter (accessor descriptors only).\n    get: typing.Optional[RemoteObject] = None\n\n    #: A function which serves as a setter for the private property,\n    #: or ``undefined`` if there is no setter (accessor descriptors only).\n    set_: typing.Optional[RemoteObject] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        if self.value is not None:\n            json[\"value\"] = self.value.to_json()\n        if self.get is not None:\n            json[\"get\"] = self.get.to_json()\n        if self.set_ is not None:\n            json[\"set\"] = self.set_.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PrivatePropertyDescriptor:\n        return cls(\n            name=str(json[\"name\"]),\n            value=(\n                RemoteObject.from_json(json[\"value\"])\n                if json.get(\"value\", None) is not None\n                else None\n            ),\n            get=(\n                RemoteObject.from_json(json[\"get\"])\n                if json.get(\"get\", None) is not None\n                else None\n            ),\n            set_=(\n                RemoteObject.from_json(json[\"set\"])\n                if json.get(\"set\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PrivatePropertyDescriptor.get","title":"<code>get: typing.Optional[RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PrivatePropertyDescriptor.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PrivatePropertyDescriptor.set_","title":"<code>set_: typing.Optional[RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PrivatePropertyDescriptor.value","title":"<code>value: typing.Optional[RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PrivatePropertyDescriptor.__init__","title":"<code>__init__(name, value=None, get=None, set_=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PrivatePropertyDescriptor.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PrivatePropertyDescriptor:\n    return cls(\n        name=str(json[\"name\"]),\n        value=(\n            RemoteObject.from_json(json[\"value\"])\n            if json.get(\"value\", None) is not None\n            else None\n        ),\n        get=(\n            RemoteObject.from_json(json[\"get\"])\n            if json.get(\"get\", None) is not None\n            else None\n        ),\n        set_=(\n            RemoteObject.from_json(json[\"set\"])\n            if json.get(\"set\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PrivatePropertyDescriptor.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    if self.value is not None:\n        json[\"value\"] = self.value.to_json()\n    if self.get is not None:\n        json[\"get\"] = self.get.to_json()\n    if self.set_ is not None:\n        json[\"set\"] = self.set_.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor","title":"<code>PropertyDescriptor</code>  <code>dataclass</code>","text":"<p>Object property descriptor.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass PropertyDescriptor:\n    \"\"\"\n    Object property descriptor.\n    \"\"\"\n\n    #: Property name or symbol description.\n    name: str\n\n    #: True if the type of this property descriptor may be changed and if the property may be\n    #: deleted from the corresponding object.\n    configurable: bool\n\n    #: True if this property shows up during enumeration of the properties on the corresponding\n    #: object.\n    enumerable: bool\n\n    #: The value associated with the property.\n    value: typing.Optional[RemoteObject] = None\n\n    #: True if the value associated with the property may be changed (data descriptors only).\n    writable: typing.Optional[bool] = None\n\n    #: A function which serves as a getter for the property, or ``undefined`` if there is no getter\n    #: (accessor descriptors only).\n    get: typing.Optional[RemoteObject] = None\n\n    #: A function which serves as a setter for the property, or ``undefined`` if there is no setter\n    #: (accessor descriptors only).\n    set_: typing.Optional[RemoteObject] = None\n\n    #: True if the result was thrown during the evaluation.\n    was_thrown: typing.Optional[bool] = None\n\n    #: True if the property is owned for the object.\n    is_own: typing.Optional[bool] = None\n\n    #: Property symbol object, if the property is of the ``symbol`` type.\n    symbol: typing.Optional[RemoteObject] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"configurable\"] = self.configurable\n        json[\"enumerable\"] = self.enumerable\n        if self.value is not None:\n            json[\"value\"] = self.value.to_json()\n        if self.writable is not None:\n            json[\"writable\"] = self.writable\n        if self.get is not None:\n            json[\"get\"] = self.get.to_json()\n        if self.set_ is not None:\n            json[\"set\"] = self.set_.to_json()\n        if self.was_thrown is not None:\n            json[\"wasThrown\"] = self.was_thrown\n        if self.is_own is not None:\n            json[\"isOwn\"] = self.is_own\n        if self.symbol is not None:\n            json[\"symbol\"] = self.symbol.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PropertyDescriptor:\n        return cls(\n            name=str(json[\"name\"]),\n            configurable=bool(json[\"configurable\"]),\n            enumerable=bool(json[\"enumerable\"]),\n            value=(\n                RemoteObject.from_json(json[\"value\"])\n                if json.get(\"value\", None) is not None\n                else None\n            ),\n            writable=(\n                bool(json[\"writable\"])\n                if json.get(\"writable\", None) is not None\n                else None\n            ),\n            get=(\n                RemoteObject.from_json(json[\"get\"])\n                if json.get(\"get\", None) is not None\n                else None\n            ),\n            set_=(\n                RemoteObject.from_json(json[\"set\"])\n                if json.get(\"set\", None) is not None\n                else None\n            ),\n            was_thrown=(\n                bool(json[\"wasThrown\"])\n                if json.get(\"wasThrown\", None) is not None\n                else None\n            ),\n            is_own=bool(json[\"isOwn\"]) if json.get(\"isOwn\", None) is not None else None,\n            symbol=(\n                RemoteObject.from_json(json[\"symbol\"])\n                if json.get(\"symbol\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.configurable","title":"<code>configurable: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.enumerable","title":"<code>enumerable: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.get","title":"<code>get: typing.Optional[RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.is_own","title":"<code>is_own: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.set_","title":"<code>set_: typing.Optional[RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.symbol","title":"<code>symbol: typing.Optional[RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.value","title":"<code>value: typing.Optional[RemoteObject] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.was_thrown","title":"<code>was_thrown: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.writable","title":"<code>writable: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.__init__","title":"<code>__init__(name, configurable, enumerable, value=None, writable=None, get=None, set_=None, was_thrown=None, is_own=None, symbol=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PropertyDescriptor:\n    return cls(\n        name=str(json[\"name\"]),\n        configurable=bool(json[\"configurable\"]),\n        enumerable=bool(json[\"enumerable\"]),\n        value=(\n            RemoteObject.from_json(json[\"value\"])\n            if json.get(\"value\", None) is not None\n            else None\n        ),\n        writable=(\n            bool(json[\"writable\"])\n            if json.get(\"writable\", None) is not None\n            else None\n        ),\n        get=(\n            RemoteObject.from_json(json[\"get\"])\n            if json.get(\"get\", None) is not None\n            else None\n        ),\n        set_=(\n            RemoteObject.from_json(json[\"set\"])\n            if json.get(\"set\", None) is not None\n            else None\n        ),\n        was_thrown=(\n            bool(json[\"wasThrown\"])\n            if json.get(\"wasThrown\", None) is not None\n            else None\n        ),\n        is_own=bool(json[\"isOwn\"]) if json.get(\"isOwn\", None) is not None else None,\n        symbol=(\n            RemoteObject.from_json(json[\"symbol\"])\n            if json.get(\"symbol\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyDescriptor.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"configurable\"] = self.configurable\n    json[\"enumerable\"] = self.enumerable\n    if self.value is not None:\n        json[\"value\"] = self.value.to_json()\n    if self.writable is not None:\n        json[\"writable\"] = self.writable\n    if self.get is not None:\n        json[\"get\"] = self.get.to_json()\n    if self.set_ is not None:\n        json[\"set\"] = self.set_.to_json()\n    if self.was_thrown is not None:\n        json[\"wasThrown\"] = self.was_thrown\n    if self.is_own is not None:\n        json[\"isOwn\"] = self.is_own\n    if self.symbol is not None:\n        json[\"symbol\"] = self.symbol.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyPreview","title":"<code>PropertyPreview</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass PropertyPreview:\n    #: Property name.\n    name: str\n\n    #: Object type. Accessor means that the property itself is an accessor property.\n    type_: str\n\n    #: User-friendly property value string.\n    value: typing.Optional[str] = None\n\n    #: Nested value preview.\n    value_preview: typing.Optional[ObjectPreview] = None\n\n    #: Object subtype hint. Specified for ``object`` type values only.\n    subtype: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"type\"] = self.type_\n        if self.value is not None:\n            json[\"value\"] = self.value\n        if self.value_preview is not None:\n            json[\"valuePreview\"] = self.value_preview.to_json()\n        if self.subtype is not None:\n            json[\"subtype\"] = self.subtype\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; PropertyPreview:\n        return cls(\n            name=str(json[\"name\"]),\n            type_=str(json[\"type\"]),\n            value=str(json[\"value\"]) if json.get(\"value\", None) is not None else None,\n            value_preview=(\n                ObjectPreview.from_json(json[\"valuePreview\"])\n                if json.get(\"valuePreview\", None) is not None\n                else None\n            ),\n            subtype=(\n                str(json[\"subtype\"]) if json.get(\"subtype\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyPreview.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyPreview.subtype","title":"<code>subtype: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyPreview.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyPreview.value","title":"<code>value: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyPreview.value_preview","title":"<code>value_preview: typing.Optional[ObjectPreview] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyPreview.__init__","title":"<code>__init__(name, type_, value=None, value_preview=None, subtype=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyPreview.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; PropertyPreview:\n    return cls(\n        name=str(json[\"name\"]),\n        type_=str(json[\"type\"]),\n        value=str(json[\"value\"]) if json.get(\"value\", None) is not None else None,\n        value_preview=(\n            ObjectPreview.from_json(json[\"valuePreview\"])\n            if json.get(\"valuePreview\", None) is not None\n            else None\n        ),\n        subtype=(\n            str(json[\"subtype\"]) if json.get(\"subtype\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.PropertyPreview.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"type\"] = self.type_\n    if self.value is not None:\n        json[\"value\"] = self.value\n    if self.value_preview is not None:\n        json[\"valuePreview\"] = self.value_preview.to_json()\n    if self.subtype is not None:\n        json[\"subtype\"] = self.subtype\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject","title":"<code>RemoteObject</code>  <code>dataclass</code>","text":"<p>Mirror object referencing original JavaScript object.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass RemoteObject:\n    \"\"\"\n    Mirror object referencing original JavaScript object.\n    \"\"\"\n\n    #: Object type.\n    type_: str\n\n    #: Object subtype hint. Specified for ``object`` type values only.\n    #: NOTE: If you change anything here, make sure to also update\n    #: ``subtype`` in ``ObjectPreview`` and ``PropertyPreview`` below.\n    subtype: typing.Optional[str] = None\n\n    #: Object class (constructor) name. Specified for ``object`` type values only.\n    class_name: typing.Optional[str] = None\n\n    #: Remote object value in case of primitive values or JSON values (if it was requested).\n    value: typing.Optional[typing.Any] = None\n\n    #: Primitive value which can not be JSON-stringified does not have ``value``, but gets this\n    #: property.\n    unserializable_value: typing.Optional[UnserializableValue] = None\n\n    #: String representation of the object.\n    description: typing.Optional[str] = None\n\n    #: Deep serialized value.\n    deep_serialized_value: typing.Optional[DeepSerializedValue] = None\n\n    #: Unique object identifier (for non-primitive values).\n    object_id: typing.Optional[RemoteObjectId] = None\n\n    #: Preview containing abbreviated property values. Specified for ``object`` type values only.\n    preview: typing.Optional[ObjectPreview] = None\n\n    custom_preview: typing.Optional[CustomPreview] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        if self.subtype is not None:\n            json[\"subtype\"] = self.subtype\n        if self.class_name is not None:\n            json[\"className\"] = self.class_name\n        if self.value is not None:\n            json[\"value\"] = self.value\n        if self.unserializable_value is not None:\n            json[\"unserializableValue\"] = self.unserializable_value.to_json()\n        if self.description is not None:\n            json[\"description\"] = self.description\n        if self.deep_serialized_value is not None:\n            json[\"deepSerializedValue\"] = self.deep_serialized_value.to_json()\n        if self.object_id is not None:\n            json[\"objectId\"] = self.object_id.to_json()\n        if self.preview is not None:\n            json[\"preview\"] = self.preview.to_json()\n        if self.custom_preview is not None:\n            json[\"customPreview\"] = self.custom_preview.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RemoteObject:\n        return cls(\n            type_=str(json[\"type\"]),\n            subtype=(\n                str(json[\"subtype\"]) if json.get(\"subtype\", None) is not None else None\n            ),\n            class_name=(\n                str(json[\"className\"])\n                if json.get(\"className\", None) is not None\n                else None\n            ),\n            value=json[\"value\"] if json.get(\"value\", None) is not None else None,\n            unserializable_value=(\n                UnserializableValue.from_json(json[\"unserializableValue\"])\n                if json.get(\"unserializableValue\", None) is not None\n                else None\n            ),\n            description=(\n                str(json[\"description\"])\n                if json.get(\"description\", None) is not None\n                else None\n            ),\n            deep_serialized_value=(\n                DeepSerializedValue.from_json(json[\"deepSerializedValue\"])\n                if json.get(\"deepSerializedValue\", None) is not None\n                else None\n            ),\n            object_id=(\n                RemoteObjectId.from_json(json[\"objectId\"])\n                if json.get(\"objectId\", None) is not None\n                else None\n            ),\n            preview=(\n                ObjectPreview.from_json(json[\"preview\"])\n                if json.get(\"preview\", None) is not None\n                else None\n            ),\n            custom_preview=(\n                CustomPreview.from_json(json[\"customPreview\"])\n                if json.get(\"customPreview\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.class_name","title":"<code>class_name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.custom_preview","title":"<code>custom_preview: typing.Optional[CustomPreview] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.deep_serialized_value","title":"<code>deep_serialized_value: typing.Optional[DeepSerializedValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.description","title":"<code>description: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.object_id","title":"<code>object_id: typing.Optional[RemoteObjectId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.preview","title":"<code>preview: typing.Optional[ObjectPreview] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.subtype","title":"<code>subtype: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.unserializable_value","title":"<code>unserializable_value: typing.Optional[UnserializableValue] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.value","title":"<code>value: typing.Optional[typing.Any] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.__init__","title":"<code>__init__(type_, subtype=None, class_name=None, value=None, unserializable_value=None, description=None, deep_serialized_value=None, object_id=None, preview=None, custom_preview=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RemoteObject:\n    return cls(\n        type_=str(json[\"type\"]),\n        subtype=(\n            str(json[\"subtype\"]) if json.get(\"subtype\", None) is not None else None\n        ),\n        class_name=(\n            str(json[\"className\"])\n            if json.get(\"className\", None) is not None\n            else None\n        ),\n        value=json[\"value\"] if json.get(\"value\", None) is not None else None,\n        unserializable_value=(\n            UnserializableValue.from_json(json[\"unserializableValue\"])\n            if json.get(\"unserializableValue\", None) is not None\n            else None\n        ),\n        description=(\n            str(json[\"description\"])\n            if json.get(\"description\", None) is not None\n            else None\n        ),\n        deep_serialized_value=(\n            DeepSerializedValue.from_json(json[\"deepSerializedValue\"])\n            if json.get(\"deepSerializedValue\", None) is not None\n            else None\n        ),\n        object_id=(\n            RemoteObjectId.from_json(json[\"objectId\"])\n            if json.get(\"objectId\", None) is not None\n            else None\n        ),\n        preview=(\n            ObjectPreview.from_json(json[\"preview\"])\n            if json.get(\"preview\", None) is not None\n            else None\n        ),\n        custom_preview=(\n            CustomPreview.from_json(json[\"customPreview\"])\n            if json.get(\"customPreview\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObject.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    if self.subtype is not None:\n        json[\"subtype\"] = self.subtype\n    if self.class_name is not None:\n        json[\"className\"] = self.class_name\n    if self.value is not None:\n        json[\"value\"] = self.value\n    if self.unserializable_value is not None:\n        json[\"unserializableValue\"] = self.unserializable_value.to_json()\n    if self.description is not None:\n        json[\"description\"] = self.description\n    if self.deep_serialized_value is not None:\n        json[\"deepSerializedValue\"] = self.deep_serialized_value.to_json()\n    if self.object_id is not None:\n        json[\"objectId\"] = self.object_id.to_json()\n    if self.preview is not None:\n        json[\"preview\"] = self.preview.to_json()\n    if self.custom_preview is not None:\n        json[\"customPreview\"] = self.custom_preview.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObjectId","title":"<code>RemoteObjectId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique object identifier.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>class RemoteObjectId(str):\n    \"\"\"\n    Unique object identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; RemoteObjectId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"RemoteObjectId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObjectId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def __repr__(self):\n    return \"RemoteObjectId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObjectId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; RemoteObjectId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.RemoteObjectId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ScriptId","title":"<code>ScriptId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique script identifier.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>class ScriptId(str):\n    \"\"\"\n    Unique script identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ScriptId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"ScriptId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ScriptId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def __repr__(self):\n    return \"ScriptId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ScriptId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ScriptId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.ScriptId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.SerializationOptions","title":"<code>SerializationOptions</code>  <code>dataclass</code>","text":"<p>Represents options for serialization. Overrides <code>generatePreview</code> and <code>returnByValue</code>.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass SerializationOptions:\n    \"\"\"\n    Represents options for serialization. Overrides ``generatePreview`` and ``returnByValue``.\n    \"\"\"\n\n    serialization: str\n\n    #: Deep serialization depth. Default is full depth. Respected only in ``deep`` serialization mode.\n    max_depth: typing.Optional[int] = None\n\n    #: Embedder-specific parameters. For example if connected to V8 in Chrome these control DOM\n    #: serialization via ``maxNodeDepth: integer`` and ``includeShadowTree: \"none\" `` \"open\" `` \"all\"``.\n    #: Values can be only of type string or integer.\n    additional_parameters: typing.Optional[dict] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"serialization\"] = self.serialization\n        if self.max_depth is not None:\n            json[\"maxDepth\"] = self.max_depth\n        if self.additional_parameters is not None:\n            json[\"additionalParameters\"] = self.additional_parameters\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SerializationOptions:\n        return cls(\n            serialization=str(json[\"serialization\"]),\n            max_depth=(\n                int(json[\"maxDepth\"])\n                if json.get(\"maxDepth\", None) is not None\n                else None\n            ),\n            additional_parameters=(\n                dict(json[\"additionalParameters\"])\n                if json.get(\"additionalParameters\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.SerializationOptions.additional_parameters","title":"<code>additional_parameters: typing.Optional[dict] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.SerializationOptions.max_depth","title":"<code>max_depth: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.SerializationOptions.serialization","title":"<code>serialization: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.SerializationOptions.__init__","title":"<code>__init__(serialization, max_depth=None, additional_parameters=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.SerializationOptions.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SerializationOptions:\n    return cls(\n        serialization=str(json[\"serialization\"]),\n        max_depth=(\n            int(json[\"maxDepth\"])\n            if json.get(\"maxDepth\", None) is not None\n            else None\n        ),\n        additional_parameters=(\n            dict(json[\"additionalParameters\"])\n            if json.get(\"additionalParameters\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.SerializationOptions.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"serialization\"] = self.serialization\n    if self.max_depth is not None:\n        json[\"maxDepth\"] = self.max_depth\n    if self.additional_parameters is not None:\n        json[\"additionalParameters\"] = self.additional_parameters\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTrace","title":"<code>StackTrace</code>  <code>dataclass</code>","text":"<p>Call frames for assertions or error messages.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass StackTrace:\n    \"\"\"\n    Call frames for assertions or error messages.\n    \"\"\"\n\n    #: JavaScript function name.\n    call_frames: typing.List[CallFrame]\n\n    #: String label of this stack trace. For async traces this may be a name of the function that\n    #: initiated the async call.\n    description: typing.Optional[str] = None\n\n    #: Asynchronous JavaScript stack trace that preceded this stack, if available.\n    parent: typing.Optional[StackTrace] = None\n\n    #: Asynchronous JavaScript stack trace that preceded this stack, if available.\n    parent_id: typing.Optional[StackTraceId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"callFrames\"] = [i.to_json() for i in self.call_frames]\n        if self.description is not None:\n            json[\"description\"] = self.description\n        if self.parent is not None:\n            json[\"parent\"] = self.parent.to_json()\n        if self.parent_id is not None:\n            json[\"parentId\"] = self.parent_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StackTrace:\n        return cls(\n            call_frames=[CallFrame.from_json(i) for i in json[\"callFrames\"]],\n            description=(\n                str(json[\"description\"])\n                if json.get(\"description\", None) is not None\n                else None\n            ),\n            parent=(\n                StackTrace.from_json(json[\"parent\"])\n                if json.get(\"parent\", None) is not None\n                else None\n            ),\n            parent_id=(\n                StackTraceId.from_json(json[\"parentId\"])\n                if json.get(\"parentId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTrace.call_frames","title":"<code>call_frames: typing.List[CallFrame]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTrace.description","title":"<code>description: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTrace.parent","title":"<code>parent: typing.Optional[StackTrace] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTrace.parent_id","title":"<code>parent_id: typing.Optional[StackTraceId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTrace.__init__","title":"<code>__init__(call_frames, description=None, parent=None, parent_id=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTrace.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StackTrace:\n    return cls(\n        call_frames=[CallFrame.from_json(i) for i in json[\"callFrames\"]],\n        description=(\n            str(json[\"description\"])\n            if json.get(\"description\", None) is not None\n            else None\n        ),\n        parent=(\n            StackTrace.from_json(json[\"parent\"])\n            if json.get(\"parent\", None) is not None\n            else None\n        ),\n        parent_id=(\n            StackTraceId.from_json(json[\"parentId\"])\n            if json.get(\"parentId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTrace.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"callFrames\"] = [i.to_json() for i in self.call_frames]\n    if self.description is not None:\n        json[\"description\"] = self.description\n    if self.parent is not None:\n        json[\"parent\"] = self.parent.to_json()\n    if self.parent_id is not None:\n        json[\"parentId\"] = self.parent_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTraceId","title":"<code>StackTraceId</code>  <code>dataclass</code>","text":"<p>If <code>debuggerId</code> is set stack trace comes from another debugger and can be resolved there. This allows to track cross-debugger calls. See <code>Runtime.StackTrace</code> and <code>Debugger.paused</code> for usages.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@dataclass\nclass StackTraceId:\n    \"\"\"\n    If ``debuggerId`` is set stack trace comes from another debugger and can be resolved there. This\n    allows to track cross-debugger calls. See ``Runtime.StackTrace`` and ``Debugger.paused`` for usages.\n    \"\"\"\n\n    id_: str\n\n    debugger_id: typing.Optional[UniqueDebuggerId] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"id\"] = self.id_\n        if self.debugger_id is not None:\n            json[\"debuggerId\"] = self.debugger_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StackTraceId:\n        return cls(\n            id_=str(json[\"id\"]),\n            debugger_id=(\n                UniqueDebuggerId.from_json(json[\"debuggerId\"])\n                if json.get(\"debuggerId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTraceId.debugger_id","title":"<code>debugger_id: typing.Optional[UniqueDebuggerId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTraceId.id_","title":"<code>id_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTraceId.__init__","title":"<code>__init__(id_, debugger_id=None)</code>","text":""},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTraceId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StackTraceId:\n    return cls(\n        id_=str(json[\"id\"]),\n        debugger_id=(\n            UniqueDebuggerId.from_json(json[\"debuggerId\"])\n            if json.get(\"debuggerId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.StackTraceId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"id\"] = self.id_\n    if self.debugger_id is not None:\n        json[\"debuggerId\"] = self.debugger_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.TimeDelta","title":"<code>TimeDelta</code>","text":"<p>               Bases: <code>float</code></p> <p>Number of milliseconds.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>class TimeDelta(float):\n    \"\"\"\n    Number of milliseconds.\n    \"\"\"\n\n    def to_json(self) -&gt; float:\n        return self\n\n    @classmethod\n    def from_json(cls, json: float) -&gt; TimeDelta:\n        return cls(json)\n\n    def __repr__(self):\n        return \"TimeDelta({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.TimeDelta.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def __repr__(self):\n    return \"TimeDelta({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.TimeDelta.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: float) -&gt; TimeDelta:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.TimeDelta.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; float:\n    return self\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.Timestamp","title":"<code>Timestamp</code>","text":"<p>               Bases: <code>float</code></p> <p>Number of milliseconds since epoch.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>class Timestamp(float):\n    \"\"\"\n    Number of milliseconds since epoch.\n    \"\"\"\n\n    def to_json(self) -&gt; float:\n        return self\n\n    @classmethod\n    def from_json(cls, json: float) -&gt; Timestamp:\n        return cls(json)\n\n    def __repr__(self):\n        return \"Timestamp({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.Timestamp.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def __repr__(self):\n    return \"Timestamp({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.Timestamp.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: float) -&gt; Timestamp:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.Timestamp.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; float:\n    return self\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.UniqueDebuggerId","title":"<code>UniqueDebuggerId</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique identifier of current debugger.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>class UniqueDebuggerId(str):\n    \"\"\"\n    Unique identifier of current debugger.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; UniqueDebuggerId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"UniqueDebuggerId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.UniqueDebuggerId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def __repr__(self):\n    return \"UniqueDebuggerId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.UniqueDebuggerId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; UniqueDebuggerId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.UniqueDebuggerId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.UnserializableValue","title":"<code>UnserializableValue</code>","text":"<p>               Bases: <code>str</code></p> <p>Primitive value which cannot be JSON-stringified. Includes values <code>-0</code>, <code>NaN</code>, <code>Infinity</code>, <code>-Infinity</code>, and bigint literals.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>class UnserializableValue(str):\n    \"\"\"\n    Primitive value which cannot be JSON-stringified. Includes values ``-0``, ``NaN``, ``Infinity``,\n    ``-Infinity``, and bigint literals.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; UnserializableValue:\n        return cls(json)\n\n    def __repr__(self):\n        return \"UnserializableValue({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.UnserializableValue.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def __repr__(self):\n    return \"UnserializableValue({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.UnserializableValue.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; UnserializableValue:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.UnserializableValue.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.add_binding","title":"<code>add_binding(name, execution_context_id=None, execution_context_name=None)</code>","text":"<p>If executionContextId is empty, adds binding with the given name on the global objects of all inspected contexts, including those created later, bindings survive reloads. Binding function takes exactly one argument, this argument should be string, in case of any other input, function throws an exception. Each binding function call produces Runtime.bindingCalled notification.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> required <code>execution_context_id</code> <code>Optional[ExecutionContextId]</code> <p>(DEPRECATED) (EXPERIMENTAL) (Optional) If specified, the binding would only be exposed to the specified execution context. If omitted and ```executionContextName<code>is not set, the binding is exposed to all execution contexts of the target. This parameter is mutually exclusive with</code>executionContextName<code>. Deprecated in favor of</code>executionContextName<code>due to an unclear use case and bugs in implementation (crbug.com/1169639).</code>executionContextId```` will be removed in the future.</p> <code>None</code> <code>execution_context_name</code> <code>Optional[str]</code> <p>(Optional) If specified, the binding is exposed to the executionContext with matching name, even for contexts created after the binding is added. See also <code>ExecutionContext.name</code> and <code>worldName</code> parameter to <code>Page.addScriptToEvaluateOnNewDocument</code>. This parameter is mutually exclusive with <code>`executionContextId</code>.</p> <code>None</code> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def add_binding(\n    name: str,\n    execution_context_id: typing.Optional[ExecutionContextId] = None,\n    execution_context_name: typing.Optional[str] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    If executionContextId is empty, adds binding with the given name on the\n    global objects of all inspected contexts, including those created later,\n    bindings survive reloads.\n    Binding function takes exactly one argument, this argument should be string,\n    in case of any other input, function throws an exception.\n    Each binding function call produces Runtime.bindingCalled notification.\n\n    :param name:\n    :param execution_context_id: **(DEPRECATED)** **(EXPERIMENTAL)** *(Optional)* If specified, the binding would only be exposed to the specified execution context. If omitted and ```executionContextName```` is not set, the binding is exposed to all execution contexts of the target. This parameter is mutually exclusive with ````executionContextName````. Deprecated in favor of ````executionContextName```` due to an unclear use case and bugs in implementation (crbug.com/1169639). ````executionContextId```` will be removed in the future.\n    :param execution_context_name: *(Optional)* If specified, the binding is exposed to the executionContext with matching name, even for contexts created after the binding is added. See also ````ExecutionContext.name```` and ````worldName```` parameter to ````Page.addScriptToEvaluateOnNewDocument````. This parameter is mutually exclusive with ````executionContextId```.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"name\"] = name\n    if execution_context_id is not None:\n        params[\"executionContextId\"] = execution_context_id.to_json()\n    if execution_context_name is not None:\n        params[\"executionContextName\"] = execution_context_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.addBinding\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.await_promise","title":"<code>await_promise(promise_object_id, return_by_value=None, generate_preview=None)</code>","text":"<p>Add handler to promise with given promise object id.</p> <p>Parameters:</p> Name Type Description Default <code>promise_object_id</code> <code>RemoteObjectId</code> <p>Identifier of the promise.</p> required <code>return_by_value</code> <code>Optional[bool]</code> <p>(Optional) Whether the result is expected to be a JSON object that should be sent by value.</p> <code>None</code> <code>generate_preview</code> <code>Optional[bool]</code> <p>(Optional) Whether preview should be generated for the result.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[RemoteObject, Optional[ExceptionDetails]]]</code> <p>A tuple with the following items:  0. result - Promise result. Will contain rejected value if promise was rejected. 1. exceptionDetails - (Optional) Exception details if stack strace is available.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def await_promise(\n    promise_object_id: RemoteObjectId,\n    return_by_value: typing.Optional[bool] = None,\n    generate_preview: typing.Optional[bool] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[RemoteObject, typing.Optional[ExceptionDetails]],\n]:\n    \"\"\"\n    Add handler to promise with given promise object id.\n\n    :param promise_object_id: Identifier of the promise.\n    :param return_by_value: *(Optional)* Whether the result is expected to be a JSON object that should be sent by value.\n    :param generate_preview: *(Optional)* Whether preview should be generated for the result.\n    :returns: A tuple with the following items:\n\n        0. **result** - Promise result. Will contain rejected value if promise was rejected.\n        1. **exceptionDetails** - *(Optional)* Exception details if stack strace is available.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"promiseObjectId\"] = promise_object_id.to_json()\n    if return_by_value is not None:\n        params[\"returnByValue\"] = return_by_value\n    if generate_preview is not None:\n        params[\"generatePreview\"] = generate_preview\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.awaitPromise\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        RemoteObject.from_json(json[\"result\"]),\n        (\n            ExceptionDetails.from_json(json[\"exceptionDetails\"])\n            if json.get(\"exceptionDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.call_function_on","title":"<code>call_function_on(function_declaration, object_id=None, arguments=None, silent=None, return_by_value=None, generate_preview=None, user_gesture=None, await_promise=None, execution_context_id=None, object_group=None, throw_on_side_effect=None, unique_context_id=None, serialization_options=None)</code>","text":"<p>Calls function with given declaration on the given object. Object group of the result is inherited from the target object.</p> <p>Parameters:</p> Name Type Description Default <code>function_declaration</code> <code>str</code> <p>Declaration of the function to call.</p> required <code>object_id</code> <code>Optional[RemoteObjectId]</code> <p>(Optional) Identifier of the object to call function on. Either objectId or executionContextId should be specified.</p> <code>None</code> <code>arguments</code> <code>Optional[List[CallArgument]]</code> <p>(Optional) Call arguments. All call arguments must belong to the same JavaScript world as the target object.</p> <code>None</code> <code>silent</code> <code>Optional[bool]</code> <p>(Optional) In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ```setPauseOnException```` state.</p> <code>None</code> <code>return_by_value</code> <code>Optional[bool]</code> <p>(Optional) Whether the result is expected to be a JSON object which should be sent by value. Can be overriden by <code>serializationOptions</code>.</p> <code>None</code> <code>generate_preview</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether preview should be generated for the result.</p> <code>None</code> <code>user_gesture</code> <code>Optional[bool]</code> <p>(Optional) Whether execution should be treated as initiated by user in the UI.</p> <code>None</code> <code>await_promise</code> <code>Optional[bool]</code> <p>(Optional) Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.</p> <code>None</code> <code>execution_context_id</code> <code>Optional[ExecutionContextId]</code> <p>(Optional) Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified.</p> <code>None</code> <code>object_group</code> <code>Optional[str]</code> <p>(Optional) Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object.</p> <code>None</code> <code>throw_on_side_effect</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether to throw an exception if side effect cannot be ruled out during evaluation.</p> <code>None</code> <code>unique_context_id</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) An alternative way to specify the execution context to call function on. Compared to contextId that may be reused across processes, this is guaranteed to be system-unique, so it can be used to prevent accidental function call in context different than intended (e.g. as a result of navigation across process boundaries). This is mutually exclusive with <code>executionContextId</code>.</p> <code>None</code> <code>serialization_options</code> <code>Optional[SerializationOptions]</code> <p>(EXPERIMENTAL) (Optional) Specifies the result serialization. If provided, overrides <code>generatePreview</code> and <code>`returnByValue</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[RemoteObject, Optional[ExceptionDetails]]]</code> <p>A tuple with the following items:  0. result - Call result. 1. exceptionDetails - (Optional) Exception details.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def call_function_on(\n    function_declaration: str,\n    object_id: typing.Optional[RemoteObjectId] = None,\n    arguments: typing.Optional[typing.List[CallArgument]] = None,\n    silent: typing.Optional[bool] = None,\n    return_by_value: typing.Optional[bool] = None,\n    generate_preview: typing.Optional[bool] = None,\n    user_gesture: typing.Optional[bool] = None,\n    await_promise: typing.Optional[bool] = None,\n    execution_context_id: typing.Optional[ExecutionContextId] = None,\n    object_group: typing.Optional[str] = None,\n    throw_on_side_effect: typing.Optional[bool] = None,\n    unique_context_id: typing.Optional[str] = None,\n    serialization_options: typing.Optional[SerializationOptions] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[RemoteObject, typing.Optional[ExceptionDetails]],\n]:\n    \"\"\"\n    Calls function with given declaration on the given object. Object group of the result is\n    inherited from the target object.\n\n    :param function_declaration: Declaration of the function to call.\n    :param object_id: *(Optional)* Identifier of the object to call function on. Either objectId or executionContextId should be specified.\n    :param arguments: *(Optional)* Call arguments. All call arguments must belong to the same JavaScript world as the target object.\n    :param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ```setPauseOnException```` state.\n    :param return_by_value: *(Optional)* Whether the result is expected to be a JSON object which should be sent by value. Can be overriden by ````serializationOptions````.\n    :param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the result.\n    :param user_gesture: *(Optional)* Whether execution should be treated as initiated by user in the UI.\n    :param await_promise: *(Optional)* Whether execution should ````await```` for resulting value and return once awaited promise is resolved.\n    :param execution_context_id: *(Optional)* Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified.\n    :param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object.\n    :param throw_on_side_effect: **(EXPERIMENTAL)** *(Optional)* Whether to throw an exception if side effect cannot be ruled out during evaluation.\n    :param unique_context_id: **(EXPERIMENTAL)** *(Optional)* An alternative way to specify the execution context to call function on. Compared to contextId that may be reused across processes, this is guaranteed to be system-unique, so it can be used to prevent accidental function call in context different than intended (e.g. as a result of navigation across process boundaries). This is mutually exclusive with ````executionContextId````.\n    :param serialization_options: **(EXPERIMENTAL)** *(Optional)* Specifies the result serialization. If provided, overrides ````generatePreview```` and ````returnByValue```.\n    :returns: A tuple with the following items:\n\n        0. **result** - Call result.\n        1. **exceptionDetails** - *(Optional)* Exception details.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"functionDeclaration\"] = function_declaration\n    if object_id is not None:\n        params[\"objectId\"] = object_id.to_json()\n    if arguments is not None:\n        params[\"arguments\"] = [i.to_json() for i in arguments]\n    if silent is not None:\n        params[\"silent\"] = silent\n    if return_by_value is not None:\n        params[\"returnByValue\"] = return_by_value\n    if generate_preview is not None:\n        params[\"generatePreview\"] = generate_preview\n    if user_gesture is not None:\n        params[\"userGesture\"] = user_gesture\n    if await_promise is not None:\n        params[\"awaitPromise\"] = await_promise\n    if execution_context_id is not None:\n        params[\"executionContextId\"] = execution_context_id.to_json()\n    if object_group is not None:\n        params[\"objectGroup\"] = object_group\n    if throw_on_side_effect is not None:\n        params[\"throwOnSideEffect\"] = throw_on_side_effect\n    if unique_context_id is not None:\n        params[\"uniqueContextId\"] = unique_context_id\n    if serialization_options is not None:\n        params[\"serializationOptions\"] = serialization_options.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.callFunctionOn\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        RemoteObject.from_json(json[\"result\"]),\n        (\n            ExceptionDetails.from_json(json[\"exceptionDetails\"])\n            if json.get(\"exceptionDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.compile_script","title":"<code>compile_script(expression, source_url, persist_script, execution_context_id=None)</code>","text":"<p>Compiles expression.</p> <p>Parameters:</p> Name Type Description Default <code>expression</code> <code>str</code> <p>Expression to compile.</p> required <code>source_url</code> <code>str</code> <p>Source url to be set for the script.</p> required <code>persist_script</code> <code>bool</code> <p>Specifies whether the compiled script should be persisted.</p> required <code>execution_context_id</code> <code>Optional[ExecutionContextId]</code> <p>(Optional) Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[Optional[ScriptId], Optional[ExceptionDetails]]]</code> <p>A tuple with the following items:  0. scriptId - (Optional) Id of the script. 1. exceptionDetails - (Optional) Exception details.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def compile_script(\n    expression: str,\n    source_url: str,\n    persist_script: bool,\n    execution_context_id: typing.Optional[ExecutionContextId] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[typing.Optional[ScriptId], typing.Optional[ExceptionDetails]],\n]:\n    \"\"\"\n    Compiles expression.\n\n    :param expression: Expression to compile.\n    :param source_url: Source url to be set for the script.\n    :param persist_script: Specifies whether the compiled script should be persisted.\n    :param execution_context_id: *(Optional)* Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\n    :returns: A tuple with the following items:\n\n        0. **scriptId** - *(Optional)* Id of the script.\n        1. **exceptionDetails** - *(Optional)* Exception details.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"expression\"] = expression\n    params[\"sourceURL\"] = source_url\n    params[\"persistScript\"] = persist_script\n    if execution_context_id is not None:\n        params[\"executionContextId\"] = execution_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.compileScript\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        (\n            ScriptId.from_json(json[\"scriptId\"])\n            if json.get(\"scriptId\", None) is not None\n            else None\n        ),\n        (\n            ExceptionDetails.from_json(json[\"exceptionDetails\"])\n            if json.get(\"exceptionDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.disable","title":"<code>disable()</code>","text":"<p>Disables reporting of execution contexts creation.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables reporting of execution contexts creation.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.discard_console_entries","title":"<code>discard_console_entries()</code>","text":"<p>Discards collected exceptions and console API calls.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def discard_console_entries() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Discards collected exceptions and console API calls.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.discardConsoleEntries\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.enable","title":"<code>enable()</code>","text":"<p>Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables reporting of execution contexts creation by means of ``executionContextCreated`` event.\n    When the reporting gets enabled the event will be sent immediately for each existing execution\n    context.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.evaluate","title":"<code>evaluate(expression, object_group=None, include_command_line_api=None, silent=None, context_id=None, return_by_value=None, generate_preview=None, user_gesture=None, await_promise=None, throw_on_side_effect=None, timeout=None, disable_breaks=None, repl_mode=None, allow_unsafe_eval_blocked_by_csp=None, unique_context_id=None, serialization_options=None)</code>","text":"<p>Evaluates expression on global object.</p> <p>Parameters:</p> Name Type Description Default <code>expression</code> <code>str</code> <p>Expression to evaluate.</p> required <code>object_group</code> <code>Optional[str]</code> <p>(Optional) Symbolic group name that can be used to release multiple objects.</p> <code>None</code> <code>include_command_line_api</code> <code>Optional[bool]</code> <p>(Optional) Determines whether Command Line API should be available during the evaluation.</p> <code>None</code> <code>silent</code> <code>Optional[bool]</code> <p>(Optional) In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ```setPauseOnException```` state.</p> <code>None</code> <code>context_id</code> <code>Optional[ExecutionContextId]</code> <p>(Optional) Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page. This is mutually exclusive with <code>uniqueContextId</code>, which offers an alternative way to identify the execution context that is more reliable in a multi-process environment.</p> <code>None</code> <code>return_by_value</code> <code>Optional[bool]</code> <p>(Optional) Whether the result is expected to be a JSON object that should be sent by value.</p> <code>None</code> <code>generate_preview</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether preview should be generated for the result.</p> <code>None</code> <code>user_gesture</code> <code>Optional[bool]</code> <p>(Optional) Whether execution should be treated as initiated by user in the UI.</p> <code>None</code> <code>await_promise</code> <code>Optional[bool]</code> <p>(Optional) Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.</p> <code>None</code> <code>throw_on_side_effect</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether to throw an exception if side effect cannot be ruled out during evaluation. This implies <code>disableBreaks</code> below.</p> <code>None</code> <code>timeout</code> <code>Optional[TimeDelta]</code> <p>(EXPERIMENTAL) (Optional) Terminate execution after timing out (number of milliseconds).</p> <code>None</code> <code>disable_breaks</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Disable breakpoints during execution.</p> <code>None</code> <code>repl_mode</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Setting this flag to true enables <code>let</code> re-declaration and top-level <code>await</code>. Note that <code>let</code> variables can only be re-declared if they originate from <code>replMode</code> themselves.</p> <code>None</code> <code>allow_unsafe_eval_blocked_by_csp</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) The Content Security Policy (CSP) for the target might block 'unsafe-eval' which includes eval(), Function(), setTimeout() and setInterval() when called with non-callable arguments. This flag bypasses CSP for this evaluation and allows unsafe-eval. Defaults to true.</p> <code>None</code> <code>unique_context_id</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) An alternative way to specify the execution context to evaluate in. Compared to contextId that may be reused across processes, this is guaranteed to be system-unique, so it can be used to prevent accidental evaluation of the expression in context different than intended (e.g. as a result of navigation across process boundaries). This is mutually exclusive with <code>contextId</code>.</p> <code>None</code> <code>serialization_options</code> <code>Optional[SerializationOptions]</code> <p>(EXPERIMENTAL) (Optional) Specifies the result serialization. If provided, overrides <code>generatePreview</code> and <code>`returnByValue</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[RemoteObject, Optional[ExceptionDetails]]]</code> <p>A tuple with the following items:  0. result - Evaluation result. 1. exceptionDetails - (Optional) Exception details.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def evaluate(\n    expression: str,\n    object_group: typing.Optional[str] = None,\n    include_command_line_api: typing.Optional[bool] = None,\n    silent: typing.Optional[bool] = None,\n    context_id: typing.Optional[ExecutionContextId] = None,\n    return_by_value: typing.Optional[bool] = None,\n    generate_preview: typing.Optional[bool] = None,\n    user_gesture: typing.Optional[bool] = None,\n    await_promise: typing.Optional[bool] = None,\n    throw_on_side_effect: typing.Optional[bool] = None,\n    timeout: typing.Optional[TimeDelta] = None,\n    disable_breaks: typing.Optional[bool] = None,\n    repl_mode: typing.Optional[bool] = None,\n    allow_unsafe_eval_blocked_by_csp: typing.Optional[bool] = None,\n    unique_context_id: typing.Optional[str] = None,\n    serialization_options: typing.Optional[SerializationOptions] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[RemoteObject, typing.Optional[ExceptionDetails]],\n]:\n    \"\"\"\n    Evaluates expression on global object.\n\n    :param expression: Expression to evaluate.\n    :param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects.\n    :param include_command_line_api: *(Optional)* Determines whether Command Line API should be available during the evaluation.\n    :param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ```setPauseOnException```` state.\n    :param context_id: *(Optional)* Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page. This is mutually exclusive with ````uniqueContextId````, which offers an alternative way to identify the execution context that is more reliable in a multi-process environment.\n    :param return_by_value: *(Optional)* Whether the result is expected to be a JSON object that should be sent by value.\n    :param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the result.\n    :param user_gesture: *(Optional)* Whether execution should be treated as initiated by user in the UI.\n    :param await_promise: *(Optional)* Whether execution should ````await```` for resulting value and return once awaited promise is resolved.\n    :param throw_on_side_effect: **(EXPERIMENTAL)** *(Optional)* Whether to throw an exception if side effect cannot be ruled out during evaluation. This implies ````disableBreaks```` below.\n    :param timeout: **(EXPERIMENTAL)** *(Optional)* Terminate execution after timing out (number of milliseconds).\n    :param disable_breaks: **(EXPERIMENTAL)** *(Optional)* Disable breakpoints during execution.\n    :param repl_mode: **(EXPERIMENTAL)** *(Optional)* Setting this flag to true enables ````let```` re-declaration and top-level ````await````. Note that ````let```` variables can only be re-declared if they originate from ````replMode```` themselves.\n    :param allow_unsafe_eval_blocked_by_csp: **(EXPERIMENTAL)** *(Optional)* The Content Security Policy (CSP) for the target might block 'unsafe-eval' which includes eval(), Function(), setTimeout() and setInterval() when called with non-callable arguments. This flag bypasses CSP for this evaluation and allows unsafe-eval. Defaults to true.\n    :param unique_context_id: **(EXPERIMENTAL)** *(Optional)* An alternative way to specify the execution context to evaluate in. Compared to contextId that may be reused across processes, this is guaranteed to be system-unique, so it can be used to prevent accidental evaluation of the expression in context different than intended (e.g. as a result of navigation across process boundaries). This is mutually exclusive with ````contextId````.\n    :param serialization_options: **(EXPERIMENTAL)** *(Optional)* Specifies the result serialization. If provided, overrides ````generatePreview```` and ````returnByValue```.\n    :returns: A tuple with the following items:\n\n        0. **result** - Evaluation result.\n        1. **exceptionDetails** - *(Optional)* Exception details.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"expression\"] = expression\n    if object_group is not None:\n        params[\"objectGroup\"] = object_group\n    if include_command_line_api is not None:\n        params[\"includeCommandLineAPI\"] = include_command_line_api\n    if silent is not None:\n        params[\"silent\"] = silent\n    if context_id is not None:\n        params[\"contextId\"] = context_id.to_json()\n    if return_by_value is not None:\n        params[\"returnByValue\"] = return_by_value\n    if generate_preview is not None:\n        params[\"generatePreview\"] = generate_preview\n    if user_gesture is not None:\n        params[\"userGesture\"] = user_gesture\n    if await_promise is not None:\n        params[\"awaitPromise\"] = await_promise\n    if throw_on_side_effect is not None:\n        params[\"throwOnSideEffect\"] = throw_on_side_effect\n    if timeout is not None:\n        params[\"timeout\"] = timeout.to_json()\n    if disable_breaks is not None:\n        params[\"disableBreaks\"] = disable_breaks\n    if repl_mode is not None:\n        params[\"replMode\"] = repl_mode\n    if allow_unsafe_eval_blocked_by_csp is not None:\n        params[\"allowUnsafeEvalBlockedByCSP\"] = allow_unsafe_eval_blocked_by_csp\n    if unique_context_id is not None:\n        params[\"uniqueContextId\"] = unique_context_id\n    if serialization_options is not None:\n        params[\"serializationOptions\"] = serialization_options.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.evaluate\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        RemoteObject.from_json(json[\"result\"]),\n        (\n            ExceptionDetails.from_json(json[\"exceptionDetails\"])\n            if json.get(\"exceptionDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.get_exception_details","title":"<code>get_exception_details(error_object_id)</code>","text":"<p>This method tries to lookup and populate exception details for a JavaScript Error object. Note that the stackTrace portion of the resulting exceptionDetails will only be populated if the Runtime domain was enabled at the time when the Error was thrown.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>error_object_id</code> <code>RemoteObjectId</code> <p>The error object for which to resolve the exception details.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Optional[ExceptionDetails]]</code> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def get_exception_details(\n    error_object_id: RemoteObjectId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Optional[ExceptionDetails]]:\n    \"\"\"\n    This method tries to lookup and populate exception details for a\n    JavaScript Error object.\n    Note that the stackTrace portion of the resulting exceptionDetails will\n    only be populated if the Runtime domain was enabled at the time when the\n    Error was thrown.\n\n    **EXPERIMENTAL**\n\n    :param error_object_id: The error object for which to resolve the exception details.\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"errorObjectId\"] = error_object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.getExceptionDetails\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        ExceptionDetails.from_json(json[\"exceptionDetails\"])\n        if json.get(\"exceptionDetails\", None) is not None\n        else None\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.get_heap_usage","title":"<code>get_heap_usage()</code>","text":"<p>Returns the JavaScript heap usage. It is the total usage of the corresponding isolate not scoped to a particular Runtime.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[float, float]]</code> <p>A tuple with the following items:  0. usedSize - Used heap size in bytes. 1. totalSize - Allocated heap size in bytes.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def get_heap_usage() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[float, float]]\n):\n    \"\"\"\n    Returns the JavaScript heap usage.\n    It is the total usage of the corresponding isolate not scoped to a particular Runtime.\n\n    **EXPERIMENTAL**\n\n    :returns: A tuple with the following items:\n\n        0. **usedSize** - Used heap size in bytes.\n        1. **totalSize** - Allocated heap size in bytes.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.getHeapUsage\",\n    }\n    json = yield cmd_dict\n    return (float(json[\"usedSize\"]), float(json[\"totalSize\"]))\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.get_isolate_id","title":"<code>get_isolate_id()</code>","text":"<p>Returns the isolate id.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, str]</code> <p>The isolate id.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def get_isolate_id() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, str]:\n    \"\"\"\n    Returns the isolate id.\n\n    **EXPERIMENTAL**\n\n    :returns: The isolate id.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.getIsolateId\",\n    }\n    json = yield cmd_dict\n    return str(json[\"id\"])\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.get_properties","title":"<code>get_properties(object_id, own_properties=None, accessor_properties_only=None, generate_preview=None, non_indexed_properties_only=None)</code>","text":"<p>Returns properties of a given object. Object group of the result is inherited from the target object.</p> <p>Parameters:</p> Name Type Description Default <code>object_id</code> <code>RemoteObjectId</code> <p>Identifier of the object to return properties for.</p> required <code>own_properties</code> <code>Optional[bool]</code> <p>(Optional) If true, returns properties belonging only to the element itself, not to its prototype chain.</p> <code>None</code> <code>accessor_properties_only</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.</p> <code>None</code> <code>generate_preview</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether preview should be generated for the results.</p> <code>None</code> <code>non_indexed_properties_only</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) If true, returns non-indexed properties only.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[List[PropertyDescriptor], Optional[List[InternalPropertyDescriptor]], Optional[List[PrivatePropertyDescriptor]], Optional[ExceptionDetails]]]</code> <p>A tuple with the following items:  0. result - Object properties. 1. internalProperties - (Optional) Internal object properties (only of the element itself). 2. privateProperties - (Optional) Object private properties. 3. exceptionDetails - (Optional) Exception details.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def get_properties(\n    object_id: RemoteObjectId,\n    own_properties: typing.Optional[bool] = None,\n    accessor_properties_only: typing.Optional[bool] = None,\n    generate_preview: typing.Optional[bool] = None,\n    non_indexed_properties_only: typing.Optional[bool] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[\n        typing.List[PropertyDescriptor],\n        typing.Optional[typing.List[InternalPropertyDescriptor]],\n        typing.Optional[typing.List[PrivatePropertyDescriptor]],\n        typing.Optional[ExceptionDetails],\n    ],\n]:\n    \"\"\"\n    Returns properties of a given object. Object group of the result is inherited from the target\n    object.\n\n    :param object_id: Identifier of the object to return properties for.\n    :param own_properties: *(Optional)* If true, returns properties belonging only to the element itself, not to its prototype chain.\n    :param accessor_properties_only: **(EXPERIMENTAL)** *(Optional)* If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.\n    :param generate_preview: **(EXPERIMENTAL)** *(Optional)* Whether preview should be generated for the results.\n    :param non_indexed_properties_only: **(EXPERIMENTAL)** *(Optional)* If true, returns non-indexed properties only.\n    :returns: A tuple with the following items:\n\n        0. **result** - Object properties.\n        1. **internalProperties** - *(Optional)* Internal object properties (only of the element itself).\n        2. **privateProperties** - *(Optional)* Object private properties.\n        3. **exceptionDetails** - *(Optional)* Exception details.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"objectId\"] = object_id.to_json()\n    if own_properties is not None:\n        params[\"ownProperties\"] = own_properties\n    if accessor_properties_only is not None:\n        params[\"accessorPropertiesOnly\"] = accessor_properties_only\n    if generate_preview is not None:\n        params[\"generatePreview\"] = generate_preview\n    if non_indexed_properties_only is not None:\n        params[\"nonIndexedPropertiesOnly\"] = non_indexed_properties_only\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.getProperties\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        [PropertyDescriptor.from_json(i) for i in json[\"result\"]],\n        (\n            [\n                InternalPropertyDescriptor.from_json(i)\n                for i in json[\"internalProperties\"]\n            ]\n            if json.get(\"internalProperties\", None) is not None\n            else None\n        ),\n        (\n            [PrivatePropertyDescriptor.from_json(i) for i in json[\"privateProperties\"]]\n            if json.get(\"privateProperties\", None) is not None\n            else None\n        ),\n        (\n            ExceptionDetails.from_json(json[\"exceptionDetails\"])\n            if json.get(\"exceptionDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.global_lexical_scope_names","title":"<code>global_lexical_scope_names(execution_context_id=None)</code>","text":"<p>Returns all let, const and class variables from global scope.</p> <p>Parameters:</p> Name Type Description Default <code>execution_context_id</code> <code>Optional[ExecutionContextId]</code> <p>(Optional) Specifies in which execution context to lookup global scope variables.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[str]]</code> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def global_lexical_scope_names(\n    execution_context_id: typing.Optional[ExecutionContextId] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]:\n    \"\"\"\n    Returns all let, const and class variables from global scope.\n\n    :param execution_context_id: *(Optional)* Specifies in which execution context to lookup global scope variables.\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if execution_context_id is not None:\n        params[\"executionContextId\"] = execution_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.globalLexicalScopeNames\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [str(i) for i in json[\"names\"]]\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.query_objects","title":"<code>query_objects(prototype_object_id, object_group=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>prototype_object_id</code> <code>RemoteObjectId</code> <p>Identifier of the prototype to return objects for.</p> required <code>object_group</code> <code>Optional[str]</code> <p>(Optional) Symbolic group name that can be used to release the results.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, RemoteObject]</code> <p>Array with objects.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def query_objects(\n    prototype_object_id: RemoteObjectId, object_group: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, RemoteObject]:\n    \"\"\"\n    :param prototype_object_id: Identifier of the prototype to return objects for.\n    :param object_group: *(Optional)* Symbolic group name that can be used to release the results.\n    :returns: Array with objects.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"prototypeObjectId\"] = prototype_object_id.to_json()\n    if object_group is not None:\n        params[\"objectGroup\"] = object_group\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.queryObjects\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return RemoteObject.from_json(json[\"objects\"])\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.release_object","title":"<code>release_object(object_id)</code>","text":"<p>Releases remote object with given id.</p> <p>Parameters:</p> Name Type Description Default <code>object_id</code> <code>RemoteObjectId</code> <p>Identifier of the object to release.</p> required Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def release_object(\n    object_id: RemoteObjectId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Releases remote object with given id.\n\n    :param object_id: Identifier of the object to release.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"objectId\"] = object_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.releaseObject\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.release_object_group","title":"<code>release_object_group(object_group)</code>","text":"<p>Releases all remote objects that belong to a given group.</p> <p>Parameters:</p> Name Type Description Default <code>object_group</code> <code>str</code> <p>Symbolic object group name.</p> required Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def release_object_group(\n    object_group: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Releases all remote objects that belong to a given group.\n\n    :param object_group: Symbolic object group name.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"objectGroup\"] = object_group\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.releaseObjectGroup\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.remove_binding","title":"<code>remove_binding(name)</code>","text":"<p>This method does not remove binding function from global object but unsubscribes current runtime agent from Runtime.bindingCalled notifications.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> required Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def remove_binding(name: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    This method does not remove binding function from global object but\n    unsubscribes current runtime agent from Runtime.bindingCalled notifications.\n\n    :param name:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"name\"] = name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.removeBinding\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.run_if_waiting_for_debugger","title":"<code>run_if_waiting_for_debugger()</code>","text":"<p>Tells inspected instance to run if it was waiting for debugger to attach.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def run_if_waiting_for_debugger() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Tells inspected instance to run if it was waiting for debugger to attach.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.runIfWaitingForDebugger\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.run_script","title":"<code>run_script(script_id, execution_context_id=None, object_group=None, silent=None, include_command_line_api=None, return_by_value=None, generate_preview=None, await_promise=None)</code>","text":"<p>Runs script with given id in a given context.</p> <p>Parameters:</p> Name Type Description Default <code>script_id</code> <code>ScriptId</code> <p>Id of the script to run.</p> required <code>execution_context_id</code> <code>Optional[ExecutionContextId]</code> <p>(Optional) Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.</p> <code>None</code> <code>object_group</code> <code>Optional[str]</code> <p>(Optional) Symbolic group name that can be used to release multiple objects.</p> <code>None</code> <code>silent</code> <code>Optional[bool]</code> <p>(Optional) In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ```setPauseOnException```` state.</p> <code>None</code> <code>include_command_line_api</code> <code>Optional[bool]</code> <p>(Optional) Determines whether Command Line API should be available during the evaluation.</p> <code>None</code> <code>return_by_value</code> <code>Optional[bool]</code> <p>(Optional) Whether the result is expected to be a JSON object which should be sent by value.</p> <code>None</code> <code>generate_preview</code> <code>Optional[bool]</code> <p>(Optional) Whether preview should be generated for the result.</p> <code>None</code> <code>await_promise</code> <code>Optional[bool]</code> <p>(Optional) Whether execution should <code>`await</code> for resulting value and return once awaited promise is resolved.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[RemoteObject, Optional[ExceptionDetails]]]</code> <p>A tuple with the following items:  0. result - Run result. 1. exceptionDetails - (Optional) Exception details.</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def run_script(\n    script_id: ScriptId,\n    execution_context_id: typing.Optional[ExecutionContextId] = None,\n    object_group: typing.Optional[str] = None,\n    silent: typing.Optional[bool] = None,\n    include_command_line_api: typing.Optional[bool] = None,\n    return_by_value: typing.Optional[bool] = None,\n    generate_preview: typing.Optional[bool] = None,\n    await_promise: typing.Optional[bool] = None,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[RemoteObject, typing.Optional[ExceptionDetails]],\n]:\n    \"\"\"\n    Runs script with given id in a given context.\n\n    :param script_id: Id of the script to run.\n    :param execution_context_id: *(Optional)* Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\n    :param object_group: *(Optional)* Symbolic group name that can be used to release multiple objects.\n    :param silent: *(Optional)* In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides ```setPauseOnException```` state.\n    :param include_command_line_api: *(Optional)* Determines whether Command Line API should be available during the evaluation.\n    :param return_by_value: *(Optional)* Whether the result is expected to be a JSON object which should be sent by value.\n    :param generate_preview: *(Optional)* Whether preview should be generated for the result.\n    :param await_promise: *(Optional)* Whether execution should ````await``` for resulting value and return once awaited promise is resolved.\n    :returns: A tuple with the following items:\n\n        0. **result** - Run result.\n        1. **exceptionDetails** - *(Optional)* Exception details.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scriptId\"] = script_id.to_json()\n    if execution_context_id is not None:\n        params[\"executionContextId\"] = execution_context_id.to_json()\n    if object_group is not None:\n        params[\"objectGroup\"] = object_group\n    if silent is not None:\n        params[\"silent\"] = silent\n    if include_command_line_api is not None:\n        params[\"includeCommandLineAPI\"] = include_command_line_api\n    if return_by_value is not None:\n        params[\"returnByValue\"] = return_by_value\n    if generate_preview is not None:\n        params[\"generatePreview\"] = generate_preview\n    if await_promise is not None:\n        params[\"awaitPromise\"] = await_promise\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.runScript\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        RemoteObject.from_json(json[\"result\"]),\n        (\n            ExceptionDetails.from_json(json[\"exceptionDetails\"])\n            if json.get(\"exceptionDetails\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.set_async_call_stack_depth","title":"<code>set_async_call_stack_depth(max_depth)</code>","text":"<p>Enables or disables async call stacks tracking.</p> <p>Parameters:</p> Name Type Description Default <code>max_depth</code> <code>int</code> <p>Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default).</p> required Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def set_async_call_stack_depth(\n    max_depth: int,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables or disables async call stacks tracking.\n\n    :param max_depth: Maximum depth of async call stacks. Setting to ```0``` will effectively disable collecting async call stacks (default).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"maxDepth\"] = max_depth\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.setAsyncCallStackDepth\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.set_custom_object_formatter_enabled","title":"<code>set_custom_object_formatter_enabled(enabled)</code>","text":"<p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> required Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def set_custom_object_formatter_enabled(\n    enabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :param enabled:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.setCustomObjectFormatterEnabled\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.set_max_call_stack_size_to_capture","title":"<code>set_max_call_stack_size_to_capture(size)</code>","text":"<p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>int</code> required Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def set_max_call_stack_size_to_capture(\n    size: int,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n\n\n    **EXPERIMENTAL**\n\n    :param size:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"size\"] = size\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.setMaxCallStackSizeToCapture\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/runtime/#zendriver.cdp.runtime.terminate_execution","title":"<code>terminate_execution()</code>","text":"<p>Terminate current or next JavaScript execution. Will cancel the termination when the outer-most script execution ends.</p> <p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/runtime.py</code> <pre><code>def terminate_execution() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Terminate current or next JavaScript execution.\n    Will cancel the termination when the outer-most script execution ends.\n\n    **EXPERIMENTAL**\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Runtime.terminateExecution\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/schema/","title":"schema","text":""},{"location":"reference/cdp/schema/#zendriver.cdp.schema.Domain","title":"<code>Domain</code>  <code>dataclass</code>","text":"<p>Description of the protocol domain.</p> Source code in <code>zendriver/cdp/schema.py</code> <pre><code>@dataclass\nclass Domain:\n    \"\"\"\n    Description of the protocol domain.\n    \"\"\"\n\n    #: Domain name.\n    name: str\n\n    #: Domain version.\n    version: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"name\"] = self.name\n        json[\"version\"] = self.version\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Domain:\n        return cls(\n            name=str(json[\"name\"]),\n            version=str(json[\"version\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/schema/#zendriver.cdp.schema.Domain.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/schema/#zendriver.cdp.schema.Domain.version","title":"<code>version: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/schema/#zendriver.cdp.schema.Domain.__init__","title":"<code>__init__(name, version)</code>","text":""},{"location":"reference/cdp/schema/#zendriver.cdp.schema.Domain.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/schema.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Domain:\n    return cls(\n        name=str(json[\"name\"]),\n        version=str(json[\"version\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/schema/#zendriver.cdp.schema.Domain.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/schema.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"name\"] = self.name\n    json[\"version\"] = self.version\n    return json\n</code></pre>"},{"location":"reference/cdp/schema/#zendriver.cdp.schema.get_domains","title":"<code>get_domains()</code>","text":"<p>Returns supported domains.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Domain]]</code> <p>List of supported domains.</p> Source code in <code>zendriver/cdp/schema.py</code> <pre><code>def get_domains() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Domain]]:\n    \"\"\"\n    Returns supported domains.\n\n    :returns: List of supported domains.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Schema.getDomains\",\n    }\n    json = yield cmd_dict\n    return [Domain.from_json(i) for i in json[\"domains\"]]\n</code></pre>"},{"location":"reference/cdp/security/","title":"security","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateError","title":"<code>CertificateError</code>  <code>dataclass</code>","text":"<p>There is a certificate error. If overriding certificate errors is enabled, then it should be handled with the <code>handleCertificateError</code> command. Note: this event does not fire if the certificate error has been allowed internally. Only one client per target should override certificate errors at the same time.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>@deprecated(version=\"1.3\")\n@event_class(\"Security.certificateError\")\n@dataclass\nclass CertificateError:\n    \"\"\"\n    There is a certificate error. If overriding certificate errors is enabled, then it should be\n    handled with the ``handleCertificateError`` command. Note: this event does not fire if the\n    certificate error has been allowed internally. Only one client per target should override\n    certificate errors at the same time.\n    \"\"\"\n\n    #: The ID of the event.\n    event_id: int\n    #: The type of the error.\n    error_type: str\n    #: The url that was requested.\n    request_url: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CertificateError:\n        return cls(\n            event_id=int(json[\"eventId\"]),\n            error_type=str(json[\"errorType\"]),\n            request_url=str(json[\"requestURL\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateError.error_type","title":"<code>error_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateError.event_id","title":"<code>event_id: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateError.request_url","title":"<code>request_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateError.__init__","title":"<code>__init__(event_id, error_type, request_url)</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateError.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CertificateError:\n    return cls(\n        event_id=int(json[\"eventId\"]),\n        error_type=str(json[\"errorType\"]),\n        request_url=str(json[\"requestURL\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateErrorAction","title":"<code>CertificateErrorAction</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The action to take when a certificate error occurs. continue will continue processing the request and cancel will cancel the request.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>class CertificateErrorAction(enum.Enum):\n    \"\"\"\n    The action to take when a certificate error occurs. continue will continue processing the\n    request and cancel will cancel the request.\n    \"\"\"\n\n    CONTINUE = \"continue\"\n    CANCEL = \"cancel\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; CertificateErrorAction:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateErrorAction.CANCEL","title":"<code>CANCEL = 'cancel'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateErrorAction.CONTINUE","title":"<code>CONTINUE = 'continue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateErrorAction.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; CertificateErrorAction:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateErrorAction.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateId","title":"<code>CertificateId</code>","text":"<p>               Bases: <code>int</code></p> <p>An internal certificate ID value.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>class CertificateId(int):\n    \"\"\"\n    An internal certificate ID value.\n    \"\"\"\n\n    def to_json(self) -&gt; int:\n        return self\n\n    @classmethod\n    def from_json(cls, json: int) -&gt; CertificateId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"CertificateId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def __repr__(self):\n    return \"CertificateId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: int) -&gt; CertificateId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def to_json(self) -&gt; int:\n    return self\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState","title":"<code>CertificateSecurityState</code>  <code>dataclass</code>","text":"<p>Details about the security state of the page certificate.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>@dataclass\nclass CertificateSecurityState:\n    \"\"\"\n    Details about the security state of the page certificate.\n    \"\"\"\n\n    #: Protocol name (e.g. \"TLS 1.2\" or \"QUIC\").\n    protocol: str\n\n    #: Key Exchange used by the connection, or the empty string if not applicable.\n    key_exchange: str\n\n    #: Cipher name.\n    cipher: str\n\n    #: Page certificate.\n    certificate: typing.List[str]\n\n    #: Certificate subject name.\n    subject_name: str\n\n    #: Name of the issuing CA.\n    issuer: str\n\n    #: Certificate valid from date.\n    valid_from: network.TimeSinceEpoch\n\n    #: Certificate valid to (expiration) date\n    valid_to: network.TimeSinceEpoch\n\n    #: True if the certificate uses a weak signature algorithm.\n    certificate_has_weak_signature: bool\n\n    #: True if the certificate has a SHA1 signature in the chain.\n    certificate_has_sha1_signature: bool\n\n    #: True if modern SSL\n    modern_ssl: bool\n\n    #: True if the connection is using an obsolete SSL protocol.\n    obsolete_ssl_protocol: bool\n\n    #: True if the connection is using an obsolete SSL key exchange.\n    obsolete_ssl_key_exchange: bool\n\n    #: True if the connection is using an obsolete SSL cipher.\n    obsolete_ssl_cipher: bool\n\n    #: True if the connection is using an obsolete SSL signature.\n    obsolete_ssl_signature: bool\n\n    #: (EC)DH group used by the connection, if applicable.\n    key_exchange_group: typing.Optional[str] = None\n\n    #: TLS MAC. Note that AEAD ciphers do not have separate MACs.\n    mac: typing.Optional[str] = None\n\n    #: The highest priority network error code, if the certificate has an error.\n    certificate_network_error: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"protocol\"] = self.protocol\n        json[\"keyExchange\"] = self.key_exchange\n        json[\"cipher\"] = self.cipher\n        json[\"certificate\"] = [i for i in self.certificate]\n        json[\"subjectName\"] = self.subject_name\n        json[\"issuer\"] = self.issuer\n        json[\"validFrom\"] = self.valid_from.to_json()\n        json[\"validTo\"] = self.valid_to.to_json()\n        json[\"certificateHasWeakSignature\"] = self.certificate_has_weak_signature\n        json[\"certificateHasSha1Signature\"] = self.certificate_has_sha1_signature\n        json[\"modernSSL\"] = self.modern_ssl\n        json[\"obsoleteSslProtocol\"] = self.obsolete_ssl_protocol\n        json[\"obsoleteSslKeyExchange\"] = self.obsolete_ssl_key_exchange\n        json[\"obsoleteSslCipher\"] = self.obsolete_ssl_cipher\n        json[\"obsoleteSslSignature\"] = self.obsolete_ssl_signature\n        if self.key_exchange_group is not None:\n            json[\"keyExchangeGroup\"] = self.key_exchange_group\n        if self.mac is not None:\n            json[\"mac\"] = self.mac\n        if self.certificate_network_error is not None:\n            json[\"certificateNetworkError\"] = self.certificate_network_error\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CertificateSecurityState:\n        return cls(\n            protocol=str(json[\"protocol\"]),\n            key_exchange=str(json[\"keyExchange\"]),\n            cipher=str(json[\"cipher\"]),\n            certificate=[str(i) for i in json[\"certificate\"]],\n            subject_name=str(json[\"subjectName\"]),\n            issuer=str(json[\"issuer\"]),\n            valid_from=network.TimeSinceEpoch.from_json(json[\"validFrom\"]),\n            valid_to=network.TimeSinceEpoch.from_json(json[\"validTo\"]),\n            certificate_has_weak_signature=bool(json[\"certificateHasWeakSignature\"]),\n            certificate_has_sha1_signature=bool(json[\"certificateHasSha1Signature\"]),\n            modern_ssl=bool(json[\"modernSSL\"]),\n            obsolete_ssl_protocol=bool(json[\"obsoleteSslProtocol\"]),\n            obsolete_ssl_key_exchange=bool(json[\"obsoleteSslKeyExchange\"]),\n            obsolete_ssl_cipher=bool(json[\"obsoleteSslCipher\"]),\n            obsolete_ssl_signature=bool(json[\"obsoleteSslSignature\"]),\n            key_exchange_group=(\n                str(json[\"keyExchangeGroup\"])\n                if json.get(\"keyExchangeGroup\", None) is not None\n                else None\n            ),\n            mac=str(json[\"mac\"]) if json.get(\"mac\", None) is not None else None,\n            certificate_network_error=(\n                str(json[\"certificateNetworkError\"])\n                if json.get(\"certificateNetworkError\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.certificate","title":"<code>certificate: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.certificate_has_sha1_signature","title":"<code>certificate_has_sha1_signature: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.certificate_has_weak_signature","title":"<code>certificate_has_weak_signature: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.certificate_network_error","title":"<code>certificate_network_error: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.cipher","title":"<code>cipher: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.issuer","title":"<code>issuer: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.key_exchange","title":"<code>key_exchange: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.key_exchange_group","title":"<code>key_exchange_group: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.mac","title":"<code>mac: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.modern_ssl","title":"<code>modern_ssl: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.obsolete_ssl_cipher","title":"<code>obsolete_ssl_cipher: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.obsolete_ssl_key_exchange","title":"<code>obsolete_ssl_key_exchange: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.obsolete_ssl_protocol","title":"<code>obsolete_ssl_protocol: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.obsolete_ssl_signature","title":"<code>obsolete_ssl_signature: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.protocol","title":"<code>protocol: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.subject_name","title":"<code>subject_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.valid_from","title":"<code>valid_from: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.valid_to","title":"<code>valid_to: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.__init__","title":"<code>__init__(protocol, key_exchange, cipher, certificate, subject_name, issuer, valid_from, valid_to, certificate_has_weak_signature, certificate_has_sha1_signature, modern_ssl, obsolete_ssl_protocol, obsolete_ssl_key_exchange, obsolete_ssl_cipher, obsolete_ssl_signature, key_exchange_group=None, mac=None, certificate_network_error=None)</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CertificateSecurityState:\n    return cls(\n        protocol=str(json[\"protocol\"]),\n        key_exchange=str(json[\"keyExchange\"]),\n        cipher=str(json[\"cipher\"]),\n        certificate=[str(i) for i in json[\"certificate\"]],\n        subject_name=str(json[\"subjectName\"]),\n        issuer=str(json[\"issuer\"]),\n        valid_from=network.TimeSinceEpoch.from_json(json[\"validFrom\"]),\n        valid_to=network.TimeSinceEpoch.from_json(json[\"validTo\"]),\n        certificate_has_weak_signature=bool(json[\"certificateHasWeakSignature\"]),\n        certificate_has_sha1_signature=bool(json[\"certificateHasSha1Signature\"]),\n        modern_ssl=bool(json[\"modernSSL\"]),\n        obsolete_ssl_protocol=bool(json[\"obsoleteSslProtocol\"]),\n        obsolete_ssl_key_exchange=bool(json[\"obsoleteSslKeyExchange\"]),\n        obsolete_ssl_cipher=bool(json[\"obsoleteSslCipher\"]),\n        obsolete_ssl_signature=bool(json[\"obsoleteSslSignature\"]),\n        key_exchange_group=(\n            str(json[\"keyExchangeGroup\"])\n            if json.get(\"keyExchangeGroup\", None) is not None\n            else None\n        ),\n        mac=str(json[\"mac\"]) if json.get(\"mac\", None) is not None else None,\n        certificate_network_error=(\n            str(json[\"certificateNetworkError\"])\n            if json.get(\"certificateNetworkError\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.CertificateSecurityState.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"protocol\"] = self.protocol\n    json[\"keyExchange\"] = self.key_exchange\n    json[\"cipher\"] = self.cipher\n    json[\"certificate\"] = [i for i in self.certificate]\n    json[\"subjectName\"] = self.subject_name\n    json[\"issuer\"] = self.issuer\n    json[\"validFrom\"] = self.valid_from.to_json()\n    json[\"validTo\"] = self.valid_to.to_json()\n    json[\"certificateHasWeakSignature\"] = self.certificate_has_weak_signature\n    json[\"certificateHasSha1Signature\"] = self.certificate_has_sha1_signature\n    json[\"modernSSL\"] = self.modern_ssl\n    json[\"obsoleteSslProtocol\"] = self.obsolete_ssl_protocol\n    json[\"obsoleteSslKeyExchange\"] = self.obsolete_ssl_key_exchange\n    json[\"obsoleteSslCipher\"] = self.obsolete_ssl_cipher\n    json[\"obsoleteSslSignature\"] = self.obsolete_ssl_signature\n    if self.key_exchange_group is not None:\n        json[\"keyExchangeGroup\"] = self.key_exchange_group\n    if self.mac is not None:\n        json[\"mac\"] = self.mac\n    if self.certificate_network_error is not None:\n        json[\"certificateNetworkError\"] = self.certificate_network_error\n    return json\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus","title":"<code>InsecureContentStatus</code>  <code>dataclass</code>","text":"<p>Information about insecure content on the page.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>@dataclass\nclass InsecureContentStatus:\n    \"\"\"\n    Information about insecure content on the page.\n    \"\"\"\n\n    #: Always false.\n    ran_mixed_content: bool\n\n    #: Always false.\n    displayed_mixed_content: bool\n\n    #: Always false.\n    contained_mixed_form: bool\n\n    #: Always false.\n    ran_content_with_cert_errors: bool\n\n    #: Always false.\n    displayed_content_with_cert_errors: bool\n\n    #: Always set to unknown.\n    ran_insecure_content_style: SecurityState\n\n    #: Always set to unknown.\n    displayed_insecure_content_style: SecurityState\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"ranMixedContent\"] = self.ran_mixed_content\n        json[\"displayedMixedContent\"] = self.displayed_mixed_content\n        json[\"containedMixedForm\"] = self.contained_mixed_form\n        json[\"ranContentWithCertErrors\"] = self.ran_content_with_cert_errors\n        json[\"displayedContentWithCertErrors\"] = self.displayed_content_with_cert_errors\n        json[\"ranInsecureContentStyle\"] = self.ran_insecure_content_style.to_json()\n        json[\"displayedInsecureContentStyle\"] = (\n            self.displayed_insecure_content_style.to_json()\n        )\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InsecureContentStatus:\n        return cls(\n            ran_mixed_content=bool(json[\"ranMixedContent\"]),\n            displayed_mixed_content=bool(json[\"displayedMixedContent\"]),\n            contained_mixed_form=bool(json[\"containedMixedForm\"]),\n            ran_content_with_cert_errors=bool(json[\"ranContentWithCertErrors\"]),\n            displayed_content_with_cert_errors=bool(\n                json[\"displayedContentWithCertErrors\"]\n            ),\n            ran_insecure_content_style=SecurityState.from_json(\n                json[\"ranInsecureContentStyle\"]\n            ),\n            displayed_insecure_content_style=SecurityState.from_json(\n                json[\"displayedInsecureContentStyle\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus.contained_mixed_form","title":"<code>contained_mixed_form: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus.displayed_content_with_cert_errors","title":"<code>displayed_content_with_cert_errors: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus.displayed_insecure_content_style","title":"<code>displayed_insecure_content_style: SecurityState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus.displayed_mixed_content","title":"<code>displayed_mixed_content: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus.ran_content_with_cert_errors","title":"<code>ran_content_with_cert_errors: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus.ran_insecure_content_style","title":"<code>ran_insecure_content_style: SecurityState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus.ran_mixed_content","title":"<code>ran_mixed_content: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus.__init__","title":"<code>__init__(ran_mixed_content, displayed_mixed_content, contained_mixed_form, ran_content_with_cert_errors, displayed_content_with_cert_errors, ran_insecure_content_style, displayed_insecure_content_style)</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InsecureContentStatus:\n    return cls(\n        ran_mixed_content=bool(json[\"ranMixedContent\"]),\n        displayed_mixed_content=bool(json[\"displayedMixedContent\"]),\n        contained_mixed_form=bool(json[\"containedMixedForm\"]),\n        ran_content_with_cert_errors=bool(json[\"ranContentWithCertErrors\"]),\n        displayed_content_with_cert_errors=bool(\n            json[\"displayedContentWithCertErrors\"]\n        ),\n        ran_insecure_content_style=SecurityState.from_json(\n            json[\"ranInsecureContentStyle\"]\n        ),\n        displayed_insecure_content_style=SecurityState.from_json(\n            json[\"displayedInsecureContentStyle\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.InsecureContentStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"ranMixedContent\"] = self.ran_mixed_content\n    json[\"displayedMixedContent\"] = self.displayed_mixed_content\n    json[\"containedMixedForm\"] = self.contained_mixed_form\n    json[\"ranContentWithCertErrors\"] = self.ran_content_with_cert_errors\n    json[\"displayedContentWithCertErrors\"] = self.displayed_content_with_cert_errors\n    json[\"ranInsecureContentStyle\"] = self.ran_insecure_content_style.to_json()\n    json[\"displayedInsecureContentStyle\"] = (\n        self.displayed_insecure_content_style.to_json()\n    )\n    return json\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.MixedContentType","title":"<code>MixedContentType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>A description of mixed content (HTTP resources on HTTPS pages), as defined by https://www.w3.org/TR/mixed-content/#categories</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>class MixedContentType(enum.Enum):\n    \"\"\"\n    A description of mixed content (HTTP resources on HTTPS pages), as defined by\n    https://www.w3.org/TR/mixed-content/#categories\n    \"\"\"\n\n    BLOCKABLE = \"blockable\"\n    OPTIONALLY_BLOCKABLE = \"optionally-blockable\"\n    NONE = \"none\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; MixedContentType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.MixedContentType.BLOCKABLE","title":"<code>BLOCKABLE = 'blockable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.MixedContentType.NONE","title":"<code>NONE = 'none'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.MixedContentType.OPTIONALLY_BLOCKABLE","title":"<code>OPTIONALLY_BLOCKABLE = 'optionally-blockable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.MixedContentType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; MixedContentType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.MixedContentType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipInfo","title":"<code>SafetyTipInfo</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@dataclass\nclass SafetyTipInfo:\n    #: Describes whether the page triggers any safety tips or reputation warnings. Default is unknown.\n    safety_tip_status: SafetyTipStatus\n\n    #: The URL the safety tip suggested (\"Did you mean?\"). Only filled in for lookalike matches.\n    safe_url: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"safetyTipStatus\"] = self.safety_tip_status.to_json()\n        if self.safe_url is not None:\n            json[\"safeUrl\"] = self.safe_url\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SafetyTipInfo:\n        return cls(\n            safety_tip_status=SafetyTipStatus.from_json(json[\"safetyTipStatus\"]),\n            safe_url=(\n                str(json[\"safeUrl\"]) if json.get(\"safeUrl\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipInfo.safe_url","title":"<code>safe_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipInfo.safety_tip_status","title":"<code>safety_tip_status: SafetyTipStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipInfo.__init__","title":"<code>__init__(safety_tip_status, safe_url=None)</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SafetyTipInfo:\n    return cls(\n        safety_tip_status=SafetyTipStatus.from_json(json[\"safetyTipStatus\"]),\n        safe_url=(\n            str(json[\"safeUrl\"]) if json.get(\"safeUrl\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipInfo.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"safetyTipStatus\"] = self.safety_tip_status.to_json()\n    if self.safe_url is not None:\n        json[\"safeUrl\"] = self.safe_url\n    return json\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipStatus","title":"<code>SafetyTipStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>class SafetyTipStatus(enum.Enum):\n    BAD_REPUTATION = \"badReputation\"\n    LOOKALIKE = \"lookalike\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SafetyTipStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipStatus.BAD_REPUTATION","title":"<code>BAD_REPUTATION = 'badReputation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipStatus.LOOKALIKE","title":"<code>LOOKALIKE = 'lookalike'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SafetyTipStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SafetyTipStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityState","title":"<code>SecurityState</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The security level of a page or resource.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>class SecurityState(enum.Enum):\n    \"\"\"\n    The security level of a page or resource.\n    \"\"\"\n\n    UNKNOWN = \"unknown\"\n    NEUTRAL = \"neutral\"\n    INSECURE = \"insecure\"\n    SECURE = \"secure\"\n    INFO = \"info\"\n    INSECURE_BROKEN = \"insecure-broken\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SecurityState:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityState.INFO","title":"<code>INFO = 'info'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityState.INSECURE","title":"<code>INSECURE = 'insecure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityState.INSECURE_BROKEN","title":"<code>INSECURE_BROKEN = 'insecure-broken'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityState.NEUTRAL","title":"<code>NEUTRAL = 'neutral'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityState.SECURE","title":"<code>SECURE = 'secure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityState.UNKNOWN","title":"<code>UNKNOWN = 'unknown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityState.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SecurityState:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityState.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateChanged","title":"<code>SecurityStateChanged</code>  <code>dataclass</code>","text":"<p>The security state of the page changed. No longer being sent.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>@deprecated(version=\"1.3\")\n@event_class(\"Security.securityStateChanged\")\n@dataclass\nclass SecurityStateChanged:\n    \"\"\"\n    The security state of the page changed. No longer being sent.\n    \"\"\"\n\n    #: Security state.\n    security_state: SecurityState\n    #: True if the page was loaded over cryptographic transport such as HTTPS.\n    scheme_is_cryptographic: bool\n    #: Previously a list of explanations for the security state. Now always\n    #: empty.\n    explanations: typing.List[SecurityStateExplanation]\n    #: Information about insecure content on the page.\n    insecure_content_status: InsecureContentStatus\n    #: Overrides user-visible description of the state. Always omitted.\n    summary: typing.Optional[str]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SecurityStateChanged:\n        return cls(\n            security_state=SecurityState.from_json(json[\"securityState\"]),\n            scheme_is_cryptographic=bool(json[\"schemeIsCryptographic\"]),\n            explanations=[\n                SecurityStateExplanation.from_json(i) for i in json[\"explanations\"]\n            ],\n            insecure_content_status=InsecureContentStatus.from_json(\n                json[\"insecureContentStatus\"]\n            ),\n            summary=(\n                str(json[\"summary\"]) if json.get(\"summary\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateChanged.explanations","title":"<code>explanations: typing.List[SecurityStateExplanation]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateChanged.insecure_content_status","title":"<code>insecure_content_status: InsecureContentStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateChanged.scheme_is_cryptographic","title":"<code>scheme_is_cryptographic: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateChanged.security_state","title":"<code>security_state: SecurityState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateChanged.summary","title":"<code>summary: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateChanged.__init__","title":"<code>__init__(security_state, scheme_is_cryptographic, explanations, insecure_content_status, summary)</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateChanged.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SecurityStateChanged:\n    return cls(\n        security_state=SecurityState.from_json(json[\"securityState\"]),\n        scheme_is_cryptographic=bool(json[\"schemeIsCryptographic\"]),\n        explanations=[\n            SecurityStateExplanation.from_json(i) for i in json[\"explanations\"]\n        ],\n        insecure_content_status=InsecureContentStatus.from_json(\n            json[\"insecureContentStatus\"]\n        ),\n        summary=(\n            str(json[\"summary\"]) if json.get(\"summary\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation","title":"<code>SecurityStateExplanation</code>  <code>dataclass</code>","text":"<p>An explanation of an factor contributing to the security state.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>@dataclass\nclass SecurityStateExplanation:\n    \"\"\"\n    An explanation of an factor contributing to the security state.\n    \"\"\"\n\n    #: Security state representing the severity of the factor being explained.\n    security_state: SecurityState\n\n    #: Title describing the type of factor.\n    title: str\n\n    #: Short phrase describing the type of factor.\n    summary: str\n\n    #: Full text explanation of the factor.\n    description: str\n\n    #: The type of mixed content described by the explanation.\n    mixed_content_type: MixedContentType\n\n    #: Page certificate.\n    certificate: typing.List[str]\n\n    #: Recommendations to fix any issues.\n    recommendations: typing.Optional[typing.List[str]] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"securityState\"] = self.security_state.to_json()\n        json[\"title\"] = self.title\n        json[\"summary\"] = self.summary\n        json[\"description\"] = self.description\n        json[\"mixedContentType\"] = self.mixed_content_type.to_json()\n        json[\"certificate\"] = [i for i in self.certificate]\n        if self.recommendations is not None:\n            json[\"recommendations\"] = [i for i in self.recommendations]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SecurityStateExplanation:\n        return cls(\n            security_state=SecurityState.from_json(json[\"securityState\"]),\n            title=str(json[\"title\"]),\n            summary=str(json[\"summary\"]),\n            description=str(json[\"description\"]),\n            mixed_content_type=MixedContentType.from_json(json[\"mixedContentType\"]),\n            certificate=[str(i) for i in json[\"certificate\"]],\n            recommendations=(\n                [str(i) for i in json[\"recommendations\"]]\n                if json.get(\"recommendations\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation.certificate","title":"<code>certificate: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation.description","title":"<code>description: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation.mixed_content_type","title":"<code>mixed_content_type: MixedContentType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation.recommendations","title":"<code>recommendations: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation.security_state","title":"<code>security_state: SecurityState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation.summary","title":"<code>summary: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation.__init__","title":"<code>__init__(security_state, title, summary, description, mixed_content_type, certificate, recommendations=None)</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SecurityStateExplanation:\n    return cls(\n        security_state=SecurityState.from_json(json[\"securityState\"]),\n        title=str(json[\"title\"]),\n        summary=str(json[\"summary\"]),\n        description=str(json[\"description\"]),\n        mixed_content_type=MixedContentType.from_json(json[\"mixedContentType\"]),\n        certificate=[str(i) for i in json[\"certificate\"]],\n        recommendations=(\n            [str(i) for i in json[\"recommendations\"]]\n            if json.get(\"recommendations\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.SecurityStateExplanation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"securityState\"] = self.security_state.to_json()\n    json[\"title\"] = self.title\n    json[\"summary\"] = self.summary\n    json[\"description\"] = self.description\n    json[\"mixedContentType\"] = self.mixed_content_type.to_json()\n    json[\"certificate\"] = [i for i in self.certificate]\n    if self.recommendations is not None:\n        json[\"recommendations\"] = [i for i in self.recommendations]\n    return json\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityState","title":"<code>VisibleSecurityState</code>  <code>dataclass</code>","text":"<p>Security state information about the page.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>@dataclass\nclass VisibleSecurityState:\n    \"\"\"\n    Security state information about the page.\n    \"\"\"\n\n    #: The security level of the page.\n    security_state: SecurityState\n\n    #: Array of security state issues ids.\n    security_state_issue_ids: typing.List[str]\n\n    #: Security state details about the page certificate.\n    certificate_security_state: typing.Optional[CertificateSecurityState] = None\n\n    #: The type of Safety Tip triggered on the page. Note that this field will be set even if the Safety Tip UI was not actually shown.\n    safety_tip_info: typing.Optional[SafetyTipInfo] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"securityState\"] = self.security_state.to_json()\n        json[\"securityStateIssueIds\"] = [i for i in self.security_state_issue_ids]\n        if self.certificate_security_state is not None:\n            json[\"certificateSecurityState\"] = self.certificate_security_state.to_json()\n        if self.safety_tip_info is not None:\n            json[\"safetyTipInfo\"] = self.safety_tip_info.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; VisibleSecurityState:\n        return cls(\n            security_state=SecurityState.from_json(json[\"securityState\"]),\n            security_state_issue_ids=[str(i) for i in json[\"securityStateIssueIds\"]],\n            certificate_security_state=(\n                CertificateSecurityState.from_json(json[\"certificateSecurityState\"])\n                if json.get(\"certificateSecurityState\", None) is not None\n                else None\n            ),\n            safety_tip_info=(\n                SafetyTipInfo.from_json(json[\"safetyTipInfo\"])\n                if json.get(\"safetyTipInfo\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityState.certificate_security_state","title":"<code>certificate_security_state: typing.Optional[CertificateSecurityState] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityState.safety_tip_info","title":"<code>safety_tip_info: typing.Optional[SafetyTipInfo] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityState.security_state","title":"<code>security_state: SecurityState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityState.security_state_issue_ids","title":"<code>security_state_issue_ids: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityState.__init__","title":"<code>__init__(security_state, security_state_issue_ids, certificate_security_state=None, safety_tip_info=None)</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityState.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; VisibleSecurityState:\n    return cls(\n        security_state=SecurityState.from_json(json[\"securityState\"]),\n        security_state_issue_ids=[str(i) for i in json[\"securityStateIssueIds\"]],\n        certificate_security_state=(\n            CertificateSecurityState.from_json(json[\"certificateSecurityState\"])\n            if json.get(\"certificateSecurityState\", None) is not None\n            else None\n        ),\n        safety_tip_info=(\n            SafetyTipInfo.from_json(json[\"safetyTipInfo\"])\n            if json.get(\"safetyTipInfo\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityState.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"securityState\"] = self.security_state.to_json()\n    json[\"securityStateIssueIds\"] = [i for i in self.security_state_issue_ids]\n    if self.certificate_security_state is not None:\n        json[\"certificateSecurityState\"] = self.certificate_security_state.to_json()\n    if self.safety_tip_info is not None:\n        json[\"safetyTipInfo\"] = self.safety_tip_info.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityStateChanged","title":"<code>VisibleSecurityStateChanged</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>The security state of the page changed.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>@event_class(\"Security.visibleSecurityStateChanged\")\n@dataclass\nclass VisibleSecurityStateChanged:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    The security state of the page changed.\n    \"\"\"\n\n    #: Security state information about the page.\n    visible_security_state: VisibleSecurityState\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; VisibleSecurityStateChanged:\n        return cls(\n            visible_security_state=VisibleSecurityState.from_json(\n                json[\"visibleSecurityState\"]\n            )\n        )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityStateChanged.visible_security_state","title":"<code>visible_security_state: VisibleSecurityState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityStateChanged.__init__","title":"<code>__init__(visible_security_state)</code>","text":""},{"location":"reference/cdp/security/#zendriver.cdp.security.VisibleSecurityStateChanged.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/security.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; VisibleSecurityStateChanged:\n    return cls(\n        visible_security_state=VisibleSecurityState.from_json(\n            json[\"visibleSecurityState\"]\n        )\n    )\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.disable","title":"<code>disable()</code>","text":"<p>Disables tracking security state changes.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables tracking security state changes.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Security.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.enable","title":"<code>enable()</code>","text":"<p>Enables tracking security state changes.</p> Source code in <code>zendriver/cdp/security.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables tracking security state changes.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Security.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.handle_certificate_error","title":"<code>handle_certificate_error(event_id, action)</code>","text":"<p>Handles a certificate error that fired a certificateError event.</p> <p>.. deprecated:: 1.3</p> <p>Parameters:</p> Name Type Description Default <code>event_id</code> <code>int</code> <p>The ID of the event.</p> required <code>action</code> <code>CertificateErrorAction</code> <p>The action to take on the certificate error.</p> required Source code in <code>zendriver/cdp/security.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef handle_certificate_error(\n    event_id: int, action: CertificateErrorAction\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Handles a certificate error that fired a certificateError event.\n\n    .. deprecated:: 1.3\n\n    :param event_id: The ID of the event.\n    :param action: The action to take on the certificate error.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"eventId\"] = event_id\n    params[\"action\"] = action.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Security.handleCertificateError\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.set_ignore_certificate_errors","title":"<code>set_ignore_certificate_errors(ignore)</code>","text":"<p>Enable/disable whether all certificate errors should be ignored.</p> <p>Parameters:</p> Name Type Description Default <code>ignore</code> <code>bool</code> <p>If true, all certificate errors will be ignored.</p> required Source code in <code>zendriver/cdp/security.py</code> <pre><code>def set_ignore_certificate_errors(\n    ignore: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enable/disable whether all certificate errors should be ignored.\n\n    :param ignore: If true, all certificate errors will be ignored.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"ignore\"] = ignore\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Security.setIgnoreCertificateErrors\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/security/#zendriver.cdp.security.set_override_certificate_errors","title":"<code>set_override_certificate_errors(override)</code>","text":"<p>Enable/disable overriding certificate errors. If enabled, all certificate error events need to be handled by the DevTools client and should be answered with <code>handleCertificateError</code> commands.</p> <p>.. deprecated:: 1.3</p> <p>Parameters:</p> Name Type Description Default <code>override</code> <code>bool</code> <p>If true, certificate errors will be overridden.</p> required Source code in <code>zendriver/cdp/security.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef set_override_certificate_errors(\n    override: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enable/disable overriding certificate errors. If enabled, all certificate error events need to\n    be handled by the DevTools client and should be answered with ``handleCertificateError`` commands.\n\n    .. deprecated:: 1.3\n\n    :param override: If true, certificate errors will be overridden.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"override\"] = override\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Security.setOverrideCertificateErrors\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/","title":"service_worker","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.RegistrationID","title":"<code>RegistrationID</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>class RegistrationID(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; RegistrationID:\n        return cls(json)\n\n    def __repr__(self):\n        return \"RegistrationID({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.RegistrationID.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def __repr__(self):\n    return \"RegistrationID({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.RegistrationID.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; RegistrationID:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.RegistrationID.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerErrorMessage","title":"<code>ServiceWorkerErrorMessage</code>  <code>dataclass</code>","text":"<p>ServiceWorker error message.</p> Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@dataclass\nclass ServiceWorkerErrorMessage:\n    \"\"\"\n    ServiceWorker error message.\n    \"\"\"\n\n    error_message: str\n\n    registration_id: RegistrationID\n\n    version_id: str\n\n    source_url: str\n\n    line_number: int\n\n    column_number: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"errorMessage\"] = self.error_message\n        json[\"registrationId\"] = self.registration_id.to_json()\n        json[\"versionId\"] = self.version_id\n        json[\"sourceURL\"] = self.source_url\n        json[\"lineNumber\"] = self.line_number\n        json[\"columnNumber\"] = self.column_number\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ServiceWorkerErrorMessage:\n        return cls(\n            error_message=str(json[\"errorMessage\"]),\n            registration_id=RegistrationID.from_json(json[\"registrationId\"]),\n            version_id=str(json[\"versionId\"]),\n            source_url=str(json[\"sourceURL\"]),\n            line_number=int(json[\"lineNumber\"]),\n            column_number=int(json[\"columnNumber\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerErrorMessage.column_number","title":"<code>column_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerErrorMessage.error_message","title":"<code>error_message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerErrorMessage.line_number","title":"<code>line_number: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerErrorMessage.registration_id","title":"<code>registration_id: RegistrationID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerErrorMessage.source_url","title":"<code>source_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerErrorMessage.version_id","title":"<code>version_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerErrorMessage.__init__","title":"<code>__init__(error_message, registration_id, version_id, source_url, line_number, column_number)</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerErrorMessage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ServiceWorkerErrorMessage:\n    return cls(\n        error_message=str(json[\"errorMessage\"]),\n        registration_id=RegistrationID.from_json(json[\"registrationId\"]),\n        version_id=str(json[\"versionId\"]),\n        source_url=str(json[\"sourceURL\"]),\n        line_number=int(json[\"lineNumber\"]),\n        column_number=int(json[\"columnNumber\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerErrorMessage.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"errorMessage\"] = self.error_message\n    json[\"registrationId\"] = self.registration_id.to_json()\n    json[\"versionId\"] = self.version_id\n    json[\"sourceURL\"] = self.source_url\n    json[\"lineNumber\"] = self.line_number\n    json[\"columnNumber\"] = self.column_number\n    return json\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerRegistration","title":"<code>ServiceWorkerRegistration</code>  <code>dataclass</code>","text":"<p>ServiceWorker registration.</p> Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@dataclass\nclass ServiceWorkerRegistration:\n    \"\"\"\n    ServiceWorker registration.\n    \"\"\"\n\n    registration_id: RegistrationID\n\n    scope_url: str\n\n    is_deleted: bool\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"registrationId\"] = self.registration_id.to_json()\n        json[\"scopeURL\"] = self.scope_url\n        json[\"isDeleted\"] = self.is_deleted\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ServiceWorkerRegistration:\n        return cls(\n            registration_id=RegistrationID.from_json(json[\"registrationId\"]),\n            scope_url=str(json[\"scopeURL\"]),\n            is_deleted=bool(json[\"isDeleted\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerRegistration.is_deleted","title":"<code>is_deleted: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerRegistration.registration_id","title":"<code>registration_id: RegistrationID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerRegistration.scope_url","title":"<code>scope_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerRegistration.__init__","title":"<code>__init__(registration_id, scope_url, is_deleted)</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerRegistration.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ServiceWorkerRegistration:\n    return cls(\n        registration_id=RegistrationID.from_json(json[\"registrationId\"]),\n        scope_url=str(json[\"scopeURL\"]),\n        is_deleted=bool(json[\"isDeleted\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerRegistration.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"registrationId\"] = self.registration_id.to_json()\n    json[\"scopeURL\"] = self.scope_url\n    json[\"isDeleted\"] = self.is_deleted\n    return json\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion","title":"<code>ServiceWorkerVersion</code>  <code>dataclass</code>","text":"<p>ServiceWorker version.</p> Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@dataclass\nclass ServiceWorkerVersion:\n    \"\"\"\n    ServiceWorker version.\n    \"\"\"\n\n    version_id: str\n\n    registration_id: RegistrationID\n\n    script_url: str\n\n    running_status: ServiceWorkerVersionRunningStatus\n\n    status: ServiceWorkerVersionStatus\n\n    #: The Last-Modified header value of the main script.\n    script_last_modified: typing.Optional[float] = None\n\n    #: The time at which the response headers of the main script were received from the server.\n    #: For cached script it is the last time the cache entry was validated.\n    script_response_time: typing.Optional[float] = None\n\n    controlled_clients: typing.Optional[typing.List[target.TargetID]] = None\n\n    target_id: typing.Optional[target.TargetID] = None\n\n    router_rules: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"versionId\"] = self.version_id\n        json[\"registrationId\"] = self.registration_id.to_json()\n        json[\"scriptURL\"] = self.script_url\n        json[\"runningStatus\"] = self.running_status.to_json()\n        json[\"status\"] = self.status.to_json()\n        if self.script_last_modified is not None:\n            json[\"scriptLastModified\"] = self.script_last_modified\n        if self.script_response_time is not None:\n            json[\"scriptResponseTime\"] = self.script_response_time\n        if self.controlled_clients is not None:\n            json[\"controlledClients\"] = [i.to_json() for i in self.controlled_clients]\n        if self.target_id is not None:\n            json[\"targetId\"] = self.target_id.to_json()\n        if self.router_rules is not None:\n            json[\"routerRules\"] = self.router_rules\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ServiceWorkerVersion:\n        return cls(\n            version_id=str(json[\"versionId\"]),\n            registration_id=RegistrationID.from_json(json[\"registrationId\"]),\n            script_url=str(json[\"scriptURL\"]),\n            running_status=ServiceWorkerVersionRunningStatus.from_json(\n                json[\"runningStatus\"]\n            ),\n            status=ServiceWorkerVersionStatus.from_json(json[\"status\"]),\n            script_last_modified=(\n                float(json[\"scriptLastModified\"])\n                if json.get(\"scriptLastModified\", None) is not None\n                else None\n            ),\n            script_response_time=(\n                float(json[\"scriptResponseTime\"])\n                if json.get(\"scriptResponseTime\", None) is not None\n                else None\n            ),\n            controlled_clients=(\n                [target.TargetID.from_json(i) for i in json[\"controlledClients\"]]\n                if json.get(\"controlledClients\", None) is not None\n                else None\n            ),\n            target_id=(\n                target.TargetID.from_json(json[\"targetId\"])\n                if json.get(\"targetId\", None) is not None\n                else None\n            ),\n            router_rules=(\n                str(json[\"routerRules\"])\n                if json.get(\"routerRules\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.controlled_clients","title":"<code>controlled_clients: typing.Optional[typing.List[target.TargetID]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.registration_id","title":"<code>registration_id: RegistrationID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.router_rules","title":"<code>router_rules: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.running_status","title":"<code>running_status: ServiceWorkerVersionRunningStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.script_last_modified","title":"<code>script_last_modified: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.script_response_time","title":"<code>script_response_time: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.script_url","title":"<code>script_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.status","title":"<code>status: ServiceWorkerVersionStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.target_id","title":"<code>target_id: typing.Optional[target.TargetID] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.version_id","title":"<code>version_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.__init__","title":"<code>__init__(version_id, registration_id, script_url, running_status, status, script_last_modified=None, script_response_time=None, controlled_clients=None, target_id=None, router_rules=None)</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ServiceWorkerVersion:\n    return cls(\n        version_id=str(json[\"versionId\"]),\n        registration_id=RegistrationID.from_json(json[\"registrationId\"]),\n        script_url=str(json[\"scriptURL\"]),\n        running_status=ServiceWorkerVersionRunningStatus.from_json(\n            json[\"runningStatus\"]\n        ),\n        status=ServiceWorkerVersionStatus.from_json(json[\"status\"]),\n        script_last_modified=(\n            float(json[\"scriptLastModified\"])\n            if json.get(\"scriptLastModified\", None) is not None\n            else None\n        ),\n        script_response_time=(\n            float(json[\"scriptResponseTime\"])\n            if json.get(\"scriptResponseTime\", None) is not None\n            else None\n        ),\n        controlled_clients=(\n            [target.TargetID.from_json(i) for i in json[\"controlledClients\"]]\n            if json.get(\"controlledClients\", None) is not None\n            else None\n        ),\n        target_id=(\n            target.TargetID.from_json(json[\"targetId\"])\n            if json.get(\"targetId\", None) is not None\n            else None\n        ),\n        router_rules=(\n            str(json[\"routerRules\"])\n            if json.get(\"routerRules\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersion.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"versionId\"] = self.version_id\n    json[\"registrationId\"] = self.registration_id.to_json()\n    json[\"scriptURL\"] = self.script_url\n    json[\"runningStatus\"] = self.running_status.to_json()\n    json[\"status\"] = self.status.to_json()\n    if self.script_last_modified is not None:\n        json[\"scriptLastModified\"] = self.script_last_modified\n    if self.script_response_time is not None:\n        json[\"scriptResponseTime\"] = self.script_response_time\n    if self.controlled_clients is not None:\n        json[\"controlledClients\"] = [i.to_json() for i in self.controlled_clients]\n    if self.target_id is not None:\n        json[\"targetId\"] = self.target_id.to_json()\n    if self.router_rules is not None:\n        json[\"routerRules\"] = self.router_rules\n    return json\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionRunningStatus","title":"<code>ServiceWorkerVersionRunningStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>class ServiceWorkerVersionRunningStatus(enum.Enum):\n    STOPPED = \"stopped\"\n    STARTING = \"starting\"\n    RUNNING = \"running\"\n    STOPPING = \"stopping\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ServiceWorkerVersionRunningStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionRunningStatus.RUNNING","title":"<code>RUNNING = 'running'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionRunningStatus.STARTING","title":"<code>STARTING = 'starting'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionRunningStatus.STOPPED","title":"<code>STOPPED = 'stopped'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionRunningStatus.STOPPING","title":"<code>STOPPING = 'stopping'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionRunningStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ServiceWorkerVersionRunningStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionRunningStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionStatus","title":"<code>ServiceWorkerVersionStatus</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>class ServiceWorkerVersionStatus(enum.Enum):\n    NEW = \"new\"\n    INSTALLING = \"installing\"\n    INSTALLED = \"installed\"\n    ACTIVATING = \"activating\"\n    ACTIVATED = \"activated\"\n    REDUNDANT = \"redundant\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ServiceWorkerVersionStatus:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionStatus.ACTIVATED","title":"<code>ACTIVATED = 'activated'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionStatus.ACTIVATING","title":"<code>ACTIVATING = 'activating'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionStatus.INSTALLED","title":"<code>INSTALLED = 'installed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionStatus.INSTALLING","title":"<code>INSTALLING = 'installing'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionStatus.NEW","title":"<code>NEW = 'new'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionStatus.REDUNDANT","title":"<code>REDUNDANT = 'redundant'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionStatus.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ServiceWorkerVersionStatus:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.ServiceWorkerVersionStatus.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerErrorReported","title":"<code>WorkerErrorReported</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@event_class(\"ServiceWorker.workerErrorReported\")\n@dataclass\nclass WorkerErrorReported:\n    error_message: ServiceWorkerErrorMessage\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WorkerErrorReported:\n        return cls(\n            error_message=ServiceWorkerErrorMessage.from_json(json[\"errorMessage\"])\n        )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerErrorReported.error_message","title":"<code>error_message: ServiceWorkerErrorMessage</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerErrorReported.__init__","title":"<code>__init__(error_message)</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerErrorReported.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WorkerErrorReported:\n    return cls(\n        error_message=ServiceWorkerErrorMessage.from_json(json[\"errorMessage\"])\n    )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerRegistrationUpdated","title":"<code>WorkerRegistrationUpdated</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@event_class(\"ServiceWorker.workerRegistrationUpdated\")\n@dataclass\nclass WorkerRegistrationUpdated:\n    registrations: typing.List[ServiceWorkerRegistration]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WorkerRegistrationUpdated:\n        return cls(\n            registrations=[\n                ServiceWorkerRegistration.from_json(i) for i in json[\"registrations\"]\n            ]\n        )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerRegistrationUpdated.registrations","title":"<code>registrations: typing.List[ServiceWorkerRegistration]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerRegistrationUpdated.__init__","title":"<code>__init__(registrations)</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerRegistrationUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WorkerRegistrationUpdated:\n    return cls(\n        registrations=[\n            ServiceWorkerRegistration.from_json(i) for i in json[\"registrations\"]\n        ]\n    )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerVersionUpdated","title":"<code>WorkerVersionUpdated</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@event_class(\"ServiceWorker.workerVersionUpdated\")\n@dataclass\nclass WorkerVersionUpdated:\n    versions: typing.List[ServiceWorkerVersion]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; WorkerVersionUpdated:\n        return cls(\n            versions=[ServiceWorkerVersion.from_json(i) for i in json[\"versions\"]]\n        )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerVersionUpdated.versions","title":"<code>versions: typing.List[ServiceWorkerVersion]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerVersionUpdated.__init__","title":"<code>__init__(versions)</code>","text":""},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.WorkerVersionUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; WorkerVersionUpdated:\n    return cls(\n        versions=[ServiceWorkerVersion.from_json(i) for i in json[\"versions\"]]\n    )\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.deliver_push_message","title":"<code>deliver_push_message(origin, registration_id, data)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> required <code>registration_id</code> <code>RegistrationID</code> required <code>data</code> <code>str</code> required Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def deliver_push_message(\n    origin: str, registration_id: RegistrationID, data: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param origin:\n    :param registration_id:\n    :param data:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    params[\"registrationId\"] = registration_id.to_json()\n    params[\"data\"] = data\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.deliverPushMessage\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.disable","title":"<code>disable()</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.dispatch_periodic_sync_event","title":"<code>dispatch_periodic_sync_event(origin, registration_id, tag)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> required <code>registration_id</code> <code>RegistrationID</code> required <code>tag</code> <code>str</code> required Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def dispatch_periodic_sync_event(\n    origin: str, registration_id: RegistrationID, tag: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param origin:\n    :param registration_id:\n    :param tag:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    params[\"registrationId\"] = registration_id.to_json()\n    params[\"tag\"] = tag\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.dispatchPeriodicSyncEvent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.dispatch_sync_event","title":"<code>dispatch_sync_event(origin, registration_id, tag, last_chance)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> required <code>registration_id</code> <code>RegistrationID</code> required <code>tag</code> <code>str</code> required <code>last_chance</code> <code>bool</code> required Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def dispatch_sync_event(\n    origin: str, registration_id: RegistrationID, tag: str, last_chance: bool\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param origin:\n    :param registration_id:\n    :param tag:\n    :param last_chance:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    params[\"registrationId\"] = registration_id.to_json()\n    params[\"tag\"] = tag\n    params[\"lastChance\"] = last_chance\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.dispatchSyncEvent\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.enable","title":"<code>enable()</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.inspect_worker","title":"<code>inspect_worker(version_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>version_id</code> <code>str</code> required Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def inspect_worker(version_id: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param version_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"versionId\"] = version_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.inspectWorker\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.set_force_update_on_page_load","title":"<code>set_force_update_on_page_load(force_update_on_page_load)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>force_update_on_page_load</code> <code>bool</code> required Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def set_force_update_on_page_load(\n    force_update_on_page_load: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param force_update_on_page_load:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"forceUpdateOnPageLoad\"] = force_update_on_page_load\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.setForceUpdateOnPageLoad\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.skip_waiting","title":"<code>skip_waiting(scope_url)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>scope_url</code> <code>str</code> required Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def skip_waiting(scope_url: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param scope_url:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scopeURL\"] = scope_url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.skipWaiting\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.start_worker","title":"<code>start_worker(scope_url)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>scope_url</code> <code>str</code> required Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def start_worker(scope_url: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param scope_url:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scopeURL\"] = scope_url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.startWorker\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.stop_all_workers","title":"<code>stop_all_workers()</code>","text":"Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def stop_all_workers() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.stopAllWorkers\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.stop_worker","title":"<code>stop_worker(version_id)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>version_id</code> <code>str</code> required Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def stop_worker(version_id: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param version_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"versionId\"] = version_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.stopWorker\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.unregister","title":"<code>unregister(scope_url)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>scope_url</code> <code>str</code> required Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def unregister(scope_url: str) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param scope_url:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scopeURL\"] = scope_url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.unregister\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/service_worker/#zendriver.cdp.service_worker.update_registration","title":"<code>update_registration(scope_url)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>scope_url</code> <code>str</code> required Source code in <code>zendriver/cdp/service_worker.py</code> <pre><code>def update_registration(\n    scope_url: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    :param scope_url:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"scopeURL\"] = scope_url\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"ServiceWorker.updateRegistration\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/","title":"storage","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableDedupKey","title":"<code>AttributionReportingAggregatableDedupKey</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingAggregatableDedupKey:\n    filters: AttributionReportingFilterPair\n\n    dedup_key: typing.Optional[UnsignedInt64AsBase10] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"filters\"] = self.filters.to_json()\n        if self.dedup_key is not None:\n            json[\"dedupKey\"] = self.dedup_key.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingAggregatableDedupKey:\n        return cls(\n            filters=AttributionReportingFilterPair.from_json(json[\"filters\"]),\n            dedup_key=(\n                UnsignedInt64AsBase10.from_json(json[\"dedupKey\"])\n                if json.get(\"dedupKey\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableDedupKey.dedup_key","title":"<code>dedup_key: typing.Optional[UnsignedInt64AsBase10] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableDedupKey.filters","title":"<code>filters: AttributionReportingFilterPair</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableDedupKey.__init__","title":"<code>__init__(filters, dedup_key=None)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableDedupKey.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingAggregatableDedupKey:\n    return cls(\n        filters=AttributionReportingFilterPair.from_json(json[\"filters\"]),\n        dedup_key=(\n            UnsignedInt64AsBase10.from_json(json[\"dedupKey\"])\n            if json.get(\"dedupKey\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableDedupKey.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"filters\"] = self.filters.to_json()\n    if self.dedup_key is not None:\n        json[\"dedupKey\"] = self.dedup_key.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult","title":"<code>AttributionReportingAggregatableResult</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class AttributionReportingAggregatableResult(enum.Enum):\n    SUCCESS = \"success\"\n    INTERNAL_ERROR = \"internalError\"\n    NO_CAPACITY_FOR_ATTRIBUTION_DESTINATION = \"noCapacityForAttributionDestination\"\n    NO_MATCHING_SOURCES = \"noMatchingSources\"\n    EXCESSIVE_ATTRIBUTIONS = \"excessiveAttributions\"\n    EXCESSIVE_REPORTING_ORIGINS = \"excessiveReportingOrigins\"\n    NO_HISTOGRAMS = \"noHistograms\"\n    INSUFFICIENT_BUDGET = \"insufficientBudget\"\n    NO_MATCHING_SOURCE_FILTER_DATA = \"noMatchingSourceFilterData\"\n    NOT_REGISTERED = \"notRegistered\"\n    PROHIBITED_BY_BROWSER_POLICY = \"prohibitedByBrowserPolicy\"\n    DEDUPLICATED = \"deduplicated\"\n    REPORT_WINDOW_PASSED = \"reportWindowPassed\"\n    EXCESSIVE_REPORTS = \"excessiveReports\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AttributionReportingAggregatableResult:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.DEDUPLICATED","title":"<code>DEDUPLICATED = 'deduplicated'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.EXCESSIVE_ATTRIBUTIONS","title":"<code>EXCESSIVE_ATTRIBUTIONS = 'excessiveAttributions'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.EXCESSIVE_REPORTING_ORIGINS","title":"<code>EXCESSIVE_REPORTING_ORIGINS = 'excessiveReportingOrigins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.EXCESSIVE_REPORTS","title":"<code>EXCESSIVE_REPORTS = 'excessiveReports'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.INSUFFICIENT_BUDGET","title":"<code>INSUFFICIENT_BUDGET = 'insufficientBudget'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.INTERNAL_ERROR","title":"<code>INTERNAL_ERROR = 'internalError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.NOT_REGISTERED","title":"<code>NOT_REGISTERED = 'notRegistered'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.NO_CAPACITY_FOR_ATTRIBUTION_DESTINATION","title":"<code>NO_CAPACITY_FOR_ATTRIBUTION_DESTINATION = 'noCapacityForAttributionDestination'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.NO_HISTOGRAMS","title":"<code>NO_HISTOGRAMS = 'noHistograms'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.NO_MATCHING_SOURCES","title":"<code>NO_MATCHING_SOURCES = 'noMatchingSources'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.NO_MATCHING_SOURCE_FILTER_DATA","title":"<code>NO_MATCHING_SOURCE_FILTER_DATA = 'noMatchingSourceFilterData'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.PROHIBITED_BY_BROWSER_POLICY","title":"<code>PROHIBITED_BY_BROWSER_POLICY = 'prohibitedByBrowserPolicy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.REPORT_WINDOW_PASSED","title":"<code>REPORT_WINDOW_PASSED = 'reportWindowPassed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.SUCCESS","title":"<code>SUCCESS = 'success'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AttributionReportingAggregatableResult:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableResult.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableTriggerData","title":"<code>AttributionReportingAggregatableTriggerData</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingAggregatableTriggerData:\n    key_piece: UnsignedInt128AsBase16\n\n    source_keys: typing.List[str]\n\n    filters: AttributionReportingFilterPair\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"keyPiece\"] = self.key_piece.to_json()\n        json[\"sourceKeys\"] = [i for i in self.source_keys]\n        json[\"filters\"] = self.filters.to_json()\n        return json\n\n    @classmethod\n    def from_json(\n        cls, json: T_JSON_DICT\n    ) -&gt; AttributionReportingAggregatableTriggerData:\n        return cls(\n            key_piece=UnsignedInt128AsBase16.from_json(json[\"keyPiece\"]),\n            source_keys=[str(i) for i in json[\"sourceKeys\"]],\n            filters=AttributionReportingFilterPair.from_json(json[\"filters\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableTriggerData.filters","title":"<code>filters: AttributionReportingFilterPair</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableTriggerData.key_piece","title":"<code>key_piece: UnsignedInt128AsBase16</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableTriggerData.source_keys","title":"<code>source_keys: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableTriggerData.__init__","title":"<code>__init__(key_piece, source_keys, filters)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableTriggerData.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(\n    cls, json: T_JSON_DICT\n) -&gt; AttributionReportingAggregatableTriggerData:\n    return cls(\n        key_piece=UnsignedInt128AsBase16.from_json(json[\"keyPiece\"]),\n        source_keys=[str(i) for i in json[\"sourceKeys\"]],\n        filters=AttributionReportingFilterPair.from_json(json[\"filters\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableTriggerData.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"keyPiece\"] = self.key_piece.to_json()\n    json[\"sourceKeys\"] = [i for i in self.source_keys]\n    json[\"filters\"] = self.filters.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueDictEntry","title":"<code>AttributionReportingAggregatableValueDictEntry</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingAggregatableValueDictEntry:\n    key: str\n\n    #: number instead of integer because not all uint32 can be represented by\n    #: int\n    value: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"key\"] = self.key\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(\n        cls, json: T_JSON_DICT\n    ) -&gt; AttributionReportingAggregatableValueDictEntry:\n        return cls(\n            key=str(json[\"key\"]),\n            value=float(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueDictEntry.key","title":"<code>key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueDictEntry.value","title":"<code>value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueDictEntry.__init__","title":"<code>__init__(key, value)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueDictEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(\n    cls, json: T_JSON_DICT\n) -&gt; AttributionReportingAggregatableValueDictEntry:\n    return cls(\n        key=str(json[\"key\"]),\n        value=float(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueDictEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"key\"] = self.key\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueEntry","title":"<code>AttributionReportingAggregatableValueEntry</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingAggregatableValueEntry:\n    values: typing.List[AttributionReportingAggregatableValueDictEntry]\n\n    filters: AttributionReportingFilterPair\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"values\"] = [i.to_json() for i in self.values]\n        json[\"filters\"] = self.filters.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingAggregatableValueEntry:\n        return cls(\n            values=[\n                AttributionReportingAggregatableValueDictEntry.from_json(i)\n                for i in json[\"values\"]\n            ],\n            filters=AttributionReportingFilterPair.from_json(json[\"filters\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueEntry.filters","title":"<code>filters: AttributionReportingFilterPair</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueEntry.values","title":"<code>values: typing.List[AttributionReportingAggregatableValueDictEntry]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueEntry.__init__","title":"<code>__init__(values, filters)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingAggregatableValueEntry:\n    return cls(\n        values=[\n            AttributionReportingAggregatableValueDictEntry.from_json(i)\n            for i in json[\"values\"]\n        ],\n        filters=AttributionReportingFilterPair.from_json(json[\"filters\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregatableValueEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"values\"] = [i.to_json() for i in self.values]\n    json[\"filters\"] = self.filters.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregationKeysEntry","title":"<code>AttributionReportingAggregationKeysEntry</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingAggregationKeysEntry:\n    key: str\n\n    value: UnsignedInt128AsBase16\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"key\"] = self.key\n        json[\"value\"] = self.value.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingAggregationKeysEntry:\n        return cls(\n            key=str(json[\"key\"]),\n            value=UnsignedInt128AsBase16.from_json(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregationKeysEntry.key","title":"<code>key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregationKeysEntry.value","title":"<code>value: UnsignedInt128AsBase16</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregationKeysEntry.__init__","title":"<code>__init__(key, value)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregationKeysEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingAggregationKeysEntry:\n    return cls(\n        key=str(json[\"key\"]),\n        value=UnsignedInt128AsBase16.from_json(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingAggregationKeysEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"key\"] = self.key\n    json[\"value\"] = self.value.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult","title":"<code>AttributionReportingEventLevelResult</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class AttributionReportingEventLevelResult(enum.Enum):\n    SUCCESS = \"success\"\n    SUCCESS_DROPPED_LOWER_PRIORITY = \"successDroppedLowerPriority\"\n    INTERNAL_ERROR = \"internalError\"\n    NO_CAPACITY_FOR_ATTRIBUTION_DESTINATION = \"noCapacityForAttributionDestination\"\n    NO_MATCHING_SOURCES = \"noMatchingSources\"\n    DEDUPLICATED = \"deduplicated\"\n    EXCESSIVE_ATTRIBUTIONS = \"excessiveAttributions\"\n    PRIORITY_TOO_LOW = \"priorityTooLow\"\n    NEVER_ATTRIBUTED_SOURCE = \"neverAttributedSource\"\n    EXCESSIVE_REPORTING_ORIGINS = \"excessiveReportingOrigins\"\n    NO_MATCHING_SOURCE_FILTER_DATA = \"noMatchingSourceFilterData\"\n    PROHIBITED_BY_BROWSER_POLICY = \"prohibitedByBrowserPolicy\"\n    NO_MATCHING_CONFIGURATIONS = \"noMatchingConfigurations\"\n    EXCESSIVE_REPORTS = \"excessiveReports\"\n    FALSELY_ATTRIBUTED_SOURCE = \"falselyAttributedSource\"\n    REPORT_WINDOW_PASSED = \"reportWindowPassed\"\n    NOT_REGISTERED = \"notRegistered\"\n    REPORT_WINDOW_NOT_STARTED = \"reportWindowNotStarted\"\n    NO_MATCHING_TRIGGER_DATA = \"noMatchingTriggerData\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AttributionReportingEventLevelResult:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.DEDUPLICATED","title":"<code>DEDUPLICATED = 'deduplicated'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.EXCESSIVE_ATTRIBUTIONS","title":"<code>EXCESSIVE_ATTRIBUTIONS = 'excessiveAttributions'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.EXCESSIVE_REPORTING_ORIGINS","title":"<code>EXCESSIVE_REPORTING_ORIGINS = 'excessiveReportingOrigins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.EXCESSIVE_REPORTS","title":"<code>EXCESSIVE_REPORTS = 'excessiveReports'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.FALSELY_ATTRIBUTED_SOURCE","title":"<code>FALSELY_ATTRIBUTED_SOURCE = 'falselyAttributedSource'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.INTERNAL_ERROR","title":"<code>INTERNAL_ERROR = 'internalError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.NEVER_ATTRIBUTED_SOURCE","title":"<code>NEVER_ATTRIBUTED_SOURCE = 'neverAttributedSource'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.NOT_REGISTERED","title":"<code>NOT_REGISTERED = 'notRegistered'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.NO_CAPACITY_FOR_ATTRIBUTION_DESTINATION","title":"<code>NO_CAPACITY_FOR_ATTRIBUTION_DESTINATION = 'noCapacityForAttributionDestination'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.NO_MATCHING_CONFIGURATIONS","title":"<code>NO_MATCHING_CONFIGURATIONS = 'noMatchingConfigurations'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.NO_MATCHING_SOURCES","title":"<code>NO_MATCHING_SOURCES = 'noMatchingSources'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.NO_MATCHING_SOURCE_FILTER_DATA","title":"<code>NO_MATCHING_SOURCE_FILTER_DATA = 'noMatchingSourceFilterData'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.NO_MATCHING_TRIGGER_DATA","title":"<code>NO_MATCHING_TRIGGER_DATA = 'noMatchingTriggerData'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.PRIORITY_TOO_LOW","title":"<code>PRIORITY_TOO_LOW = 'priorityTooLow'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.PROHIBITED_BY_BROWSER_POLICY","title":"<code>PROHIBITED_BY_BROWSER_POLICY = 'prohibitedByBrowserPolicy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.REPORT_WINDOW_NOT_STARTED","title":"<code>REPORT_WINDOW_NOT_STARTED = 'reportWindowNotStarted'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.REPORT_WINDOW_PASSED","title":"<code>REPORT_WINDOW_PASSED = 'reportWindowPassed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.SUCCESS","title":"<code>SUCCESS = 'success'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.SUCCESS_DROPPED_LOWER_PRIORITY","title":"<code>SUCCESS_DROPPED_LOWER_PRIORITY = 'successDroppedLowerPriority'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AttributionReportingEventLevelResult:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventLevelResult.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventReportWindows","title":"<code>AttributionReportingEventReportWindows</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingEventReportWindows:\n    #: duration in seconds\n    start: int\n\n    #: duration in seconds\n    ends: typing.List[int]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"start\"] = self.start\n        json[\"ends\"] = [i for i in self.ends]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingEventReportWindows:\n        return cls(\n            start=int(json[\"start\"]),\n            ends=[int(i) for i in json[\"ends\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventReportWindows.ends","title":"<code>ends: typing.List[int]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventReportWindows.start","title":"<code>start: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventReportWindows.__init__","title":"<code>__init__(start, ends)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventReportWindows.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingEventReportWindows:\n    return cls(\n        start=int(json[\"start\"]),\n        ends=[int(i) for i in json[\"ends\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventReportWindows.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"start\"] = self.start\n    json[\"ends\"] = [i for i in self.ends]\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventTriggerData","title":"<code>AttributionReportingEventTriggerData</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingEventTriggerData:\n    data: UnsignedInt64AsBase10\n\n    priority: SignedInt64AsBase10\n\n    filters: AttributionReportingFilterPair\n\n    dedup_key: typing.Optional[UnsignedInt64AsBase10] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"data\"] = self.data.to_json()\n        json[\"priority\"] = self.priority.to_json()\n        json[\"filters\"] = self.filters.to_json()\n        if self.dedup_key is not None:\n            json[\"dedupKey\"] = self.dedup_key.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingEventTriggerData:\n        return cls(\n            data=UnsignedInt64AsBase10.from_json(json[\"data\"]),\n            priority=SignedInt64AsBase10.from_json(json[\"priority\"]),\n            filters=AttributionReportingFilterPair.from_json(json[\"filters\"]),\n            dedup_key=(\n                UnsignedInt64AsBase10.from_json(json[\"dedupKey\"])\n                if json.get(\"dedupKey\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventTriggerData.data","title":"<code>data: UnsignedInt64AsBase10</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventTriggerData.dedup_key","title":"<code>dedup_key: typing.Optional[UnsignedInt64AsBase10] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventTriggerData.filters","title":"<code>filters: AttributionReportingFilterPair</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventTriggerData.priority","title":"<code>priority: SignedInt64AsBase10</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventTriggerData.__init__","title":"<code>__init__(data, priority, filters, dedup_key=None)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventTriggerData.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingEventTriggerData:\n    return cls(\n        data=UnsignedInt64AsBase10.from_json(json[\"data\"]),\n        priority=SignedInt64AsBase10.from_json(json[\"priority\"]),\n        filters=AttributionReportingFilterPair.from_json(json[\"filters\"]),\n        dedup_key=(\n            UnsignedInt64AsBase10.from_json(json[\"dedupKey\"])\n            if json.get(\"dedupKey\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingEventTriggerData.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"data\"] = self.data.to_json()\n    json[\"priority\"] = self.priority.to_json()\n    json[\"filters\"] = self.filters.to_json()\n    if self.dedup_key is not None:\n        json[\"dedupKey\"] = self.dedup_key.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterConfig","title":"<code>AttributionReportingFilterConfig</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingFilterConfig:\n    filter_values: typing.List[AttributionReportingFilterDataEntry]\n\n    #: duration in seconds\n    lookback_window: typing.Optional[int] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"filterValues\"] = [i.to_json() for i in self.filter_values]\n        if self.lookback_window is not None:\n            json[\"lookbackWindow\"] = self.lookback_window\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingFilterConfig:\n        return cls(\n            filter_values=[\n                AttributionReportingFilterDataEntry.from_json(i)\n                for i in json[\"filterValues\"]\n            ],\n            lookback_window=(\n                int(json[\"lookbackWindow\"])\n                if json.get(\"lookbackWindow\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterConfig.filter_values","title":"<code>filter_values: typing.List[AttributionReportingFilterDataEntry]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterConfig.lookback_window","title":"<code>lookback_window: typing.Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterConfig.__init__","title":"<code>__init__(filter_values, lookback_window=None)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingFilterConfig:\n    return cls(\n        filter_values=[\n            AttributionReportingFilterDataEntry.from_json(i)\n            for i in json[\"filterValues\"]\n        ],\n        lookback_window=(\n            int(json[\"lookbackWindow\"])\n            if json.get(\"lookbackWindow\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"filterValues\"] = [i.to_json() for i in self.filter_values]\n    if self.lookback_window is not None:\n        json[\"lookbackWindow\"] = self.lookback_window\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterDataEntry","title":"<code>AttributionReportingFilterDataEntry</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingFilterDataEntry:\n    key: str\n\n    values: typing.List[str]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"key\"] = self.key\n        json[\"values\"] = [i for i in self.values]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingFilterDataEntry:\n        return cls(\n            key=str(json[\"key\"]),\n            values=[str(i) for i in json[\"values\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterDataEntry.key","title":"<code>key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterDataEntry.values","title":"<code>values: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterDataEntry.__init__","title":"<code>__init__(key, values)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterDataEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingFilterDataEntry:\n    return cls(\n        key=str(json[\"key\"]),\n        values=[str(i) for i in json[\"values\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterDataEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"key\"] = self.key\n    json[\"values\"] = [i for i in self.values]\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterPair","title":"<code>AttributionReportingFilterPair</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingFilterPair:\n    filters: typing.List[AttributionReportingFilterConfig]\n\n    not_filters: typing.List[AttributionReportingFilterConfig]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"filters\"] = [i.to_json() for i in self.filters]\n        json[\"notFilters\"] = [i.to_json() for i in self.not_filters]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingFilterPair:\n        return cls(\n            filters=[\n                AttributionReportingFilterConfig.from_json(i) for i in json[\"filters\"]\n            ],\n            not_filters=[\n                AttributionReportingFilterConfig.from_json(i)\n                for i in json[\"notFilters\"]\n            ],\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterPair.filters","title":"<code>filters: typing.List[AttributionReportingFilterConfig]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterPair.not_filters","title":"<code>not_filters: typing.List[AttributionReportingFilterConfig]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterPair.__init__","title":"<code>__init__(filters, not_filters)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterPair.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingFilterPair:\n    return cls(\n        filters=[\n            AttributionReportingFilterConfig.from_json(i) for i in json[\"filters\"]\n        ],\n        not_filters=[\n            AttributionReportingFilterConfig.from_json(i)\n            for i in json[\"notFilters\"]\n        ],\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingFilterPair.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"filters\"] = [i.to_json() for i in self.filters]\n    json[\"notFilters\"] = [i.to_json() for i in self.not_filters]\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistered","title":"<code>AttributionReportingSourceRegistered</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.attributionReportingSourceRegistered\")\n@dataclass\nclass AttributionReportingSourceRegistered:\n    \"\"\"\n    **EXPERIMENTAL**\n\n\n    \"\"\"\n\n    registration: AttributionReportingSourceRegistration\n    result: AttributionReportingSourceRegistrationResult\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingSourceRegistered:\n        return cls(\n            registration=AttributionReportingSourceRegistration.from_json(\n                json[\"registration\"]\n            ),\n            result=AttributionReportingSourceRegistrationResult.from_json(\n                json[\"result\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistered.registration","title":"<code>registration: AttributionReportingSourceRegistration</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistered.result","title":"<code>result: AttributionReportingSourceRegistrationResult</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistered.__init__","title":"<code>__init__(registration, result)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistered.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingSourceRegistered:\n    return cls(\n        registration=AttributionReportingSourceRegistration.from_json(\n            json[\"registration\"]\n        ),\n        result=AttributionReportingSourceRegistrationResult.from_json(\n            json[\"result\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration","title":"<code>AttributionReportingSourceRegistration</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingSourceRegistration:\n    time: network.TimeSinceEpoch\n\n    #: duration in seconds\n    expiry: int\n\n    trigger_specs: typing.List[AttributionReportingTriggerSpec]\n\n    #: duration in seconds\n    aggregatable_report_window: int\n\n    type_: AttributionReportingSourceType\n\n    source_origin: str\n\n    reporting_origin: str\n\n    destination_sites: typing.List[str]\n\n    event_id: UnsignedInt64AsBase10\n\n    priority: SignedInt64AsBase10\n\n    filter_data: typing.List[AttributionReportingFilterDataEntry]\n\n    aggregation_keys: typing.List[AttributionReportingAggregationKeysEntry]\n\n    trigger_data_matching: AttributionReportingTriggerDataMatching\n\n    debug_key: typing.Optional[UnsignedInt64AsBase10] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"time\"] = self.time.to_json()\n        json[\"expiry\"] = self.expiry\n        json[\"triggerSpecs\"] = [i.to_json() for i in self.trigger_specs]\n        json[\"aggregatableReportWindow\"] = self.aggregatable_report_window\n        json[\"type\"] = self.type_.to_json()\n        json[\"sourceOrigin\"] = self.source_origin\n        json[\"reportingOrigin\"] = self.reporting_origin\n        json[\"destinationSites\"] = [i for i in self.destination_sites]\n        json[\"eventId\"] = self.event_id.to_json()\n        json[\"priority\"] = self.priority.to_json()\n        json[\"filterData\"] = [i.to_json() for i in self.filter_data]\n        json[\"aggregationKeys\"] = [i.to_json() for i in self.aggregation_keys]\n        json[\"triggerDataMatching\"] = self.trigger_data_matching.to_json()\n        if self.debug_key is not None:\n            json[\"debugKey\"] = self.debug_key.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingSourceRegistration:\n        return cls(\n            time=network.TimeSinceEpoch.from_json(json[\"time\"]),\n            expiry=int(json[\"expiry\"]),\n            trigger_specs=[\n                AttributionReportingTriggerSpec.from_json(i)\n                for i in json[\"triggerSpecs\"]\n            ],\n            aggregatable_report_window=int(json[\"aggregatableReportWindow\"]),\n            type_=AttributionReportingSourceType.from_json(json[\"type\"]),\n            source_origin=str(json[\"sourceOrigin\"]),\n            reporting_origin=str(json[\"reportingOrigin\"]),\n            destination_sites=[str(i) for i in json[\"destinationSites\"]],\n            event_id=UnsignedInt64AsBase10.from_json(json[\"eventId\"]),\n            priority=SignedInt64AsBase10.from_json(json[\"priority\"]),\n            filter_data=[\n                AttributionReportingFilterDataEntry.from_json(i)\n                for i in json[\"filterData\"]\n            ],\n            aggregation_keys=[\n                AttributionReportingAggregationKeysEntry.from_json(i)\n                for i in json[\"aggregationKeys\"]\n            ],\n            trigger_data_matching=AttributionReportingTriggerDataMatching.from_json(\n                json[\"triggerDataMatching\"]\n            ),\n            debug_key=(\n                UnsignedInt64AsBase10.from_json(json[\"debugKey\"])\n                if json.get(\"debugKey\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.aggregatable_report_window","title":"<code>aggregatable_report_window: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.aggregation_keys","title":"<code>aggregation_keys: typing.List[AttributionReportingAggregationKeysEntry]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.debug_key","title":"<code>debug_key: typing.Optional[UnsignedInt64AsBase10] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.destination_sites","title":"<code>destination_sites: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.event_id","title":"<code>event_id: UnsignedInt64AsBase10</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.expiry","title":"<code>expiry: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.filter_data","title":"<code>filter_data: typing.List[AttributionReportingFilterDataEntry]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.priority","title":"<code>priority: SignedInt64AsBase10</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.reporting_origin","title":"<code>reporting_origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.source_origin","title":"<code>source_origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.time","title":"<code>time: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.trigger_data_matching","title":"<code>trigger_data_matching: AttributionReportingTriggerDataMatching</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.trigger_specs","title":"<code>trigger_specs: typing.List[AttributionReportingTriggerSpec]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.type_","title":"<code>type_: AttributionReportingSourceType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.__init__","title":"<code>__init__(time, expiry, trigger_specs, aggregatable_report_window, type_, source_origin, reporting_origin, destination_sites, event_id, priority, filter_data, aggregation_keys, trigger_data_matching, debug_key=None)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingSourceRegistration:\n    return cls(\n        time=network.TimeSinceEpoch.from_json(json[\"time\"]),\n        expiry=int(json[\"expiry\"]),\n        trigger_specs=[\n            AttributionReportingTriggerSpec.from_json(i)\n            for i in json[\"triggerSpecs\"]\n        ],\n        aggregatable_report_window=int(json[\"aggregatableReportWindow\"]),\n        type_=AttributionReportingSourceType.from_json(json[\"type\"]),\n        source_origin=str(json[\"sourceOrigin\"]),\n        reporting_origin=str(json[\"reportingOrigin\"]),\n        destination_sites=[str(i) for i in json[\"destinationSites\"]],\n        event_id=UnsignedInt64AsBase10.from_json(json[\"eventId\"]),\n        priority=SignedInt64AsBase10.from_json(json[\"priority\"]),\n        filter_data=[\n            AttributionReportingFilterDataEntry.from_json(i)\n            for i in json[\"filterData\"]\n        ],\n        aggregation_keys=[\n            AttributionReportingAggregationKeysEntry.from_json(i)\n            for i in json[\"aggregationKeys\"]\n        ],\n        trigger_data_matching=AttributionReportingTriggerDataMatching.from_json(\n            json[\"triggerDataMatching\"]\n        ),\n        debug_key=(\n            UnsignedInt64AsBase10.from_json(json[\"debugKey\"])\n            if json.get(\"debugKey\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistration.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"time\"] = self.time.to_json()\n    json[\"expiry\"] = self.expiry\n    json[\"triggerSpecs\"] = [i.to_json() for i in self.trigger_specs]\n    json[\"aggregatableReportWindow\"] = self.aggregatable_report_window\n    json[\"type\"] = self.type_.to_json()\n    json[\"sourceOrigin\"] = self.source_origin\n    json[\"reportingOrigin\"] = self.reporting_origin\n    json[\"destinationSites\"] = [i for i in self.destination_sites]\n    json[\"eventId\"] = self.event_id.to_json()\n    json[\"priority\"] = self.priority.to_json()\n    json[\"filterData\"] = [i.to_json() for i in self.filter_data]\n    json[\"aggregationKeys\"] = [i.to_json() for i in self.aggregation_keys]\n    json[\"triggerDataMatching\"] = self.trigger_data_matching.to_json()\n    if self.debug_key is not None:\n        json[\"debugKey\"] = self.debug_key.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult","title":"<code>AttributionReportingSourceRegistrationResult</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class AttributionReportingSourceRegistrationResult(enum.Enum):\n    SUCCESS = \"success\"\n    INTERNAL_ERROR = \"internalError\"\n    INSUFFICIENT_SOURCE_CAPACITY = \"insufficientSourceCapacity\"\n    INSUFFICIENT_UNIQUE_DESTINATION_CAPACITY = \"insufficientUniqueDestinationCapacity\"\n    EXCESSIVE_REPORTING_ORIGINS = \"excessiveReportingOrigins\"\n    PROHIBITED_BY_BROWSER_POLICY = \"prohibitedByBrowserPolicy\"\n    SUCCESS_NOISED = \"successNoised\"\n    DESTINATION_REPORTING_LIMIT_REACHED = \"destinationReportingLimitReached\"\n    DESTINATION_GLOBAL_LIMIT_REACHED = \"destinationGlobalLimitReached\"\n    DESTINATION_BOTH_LIMITS_REACHED = \"destinationBothLimitsReached\"\n    REPORTING_ORIGINS_PER_SITE_LIMIT_REACHED = \"reportingOriginsPerSiteLimitReached\"\n    EXCEEDS_MAX_CHANNEL_CAPACITY = \"exceedsMaxChannelCapacity\"\n    EXCEEDS_MAX_TRIGGER_STATE_CARDINALITY = \"exceedsMaxTriggerStateCardinality\"\n    DESTINATION_PER_DAY_REPORTING_LIMIT_REACHED = (\n        \"destinationPerDayReportingLimitReached\"\n    )\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AttributionReportingSourceRegistrationResult:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.DESTINATION_BOTH_LIMITS_REACHED","title":"<code>DESTINATION_BOTH_LIMITS_REACHED = 'destinationBothLimitsReached'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.DESTINATION_GLOBAL_LIMIT_REACHED","title":"<code>DESTINATION_GLOBAL_LIMIT_REACHED = 'destinationGlobalLimitReached'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.DESTINATION_PER_DAY_REPORTING_LIMIT_REACHED","title":"<code>DESTINATION_PER_DAY_REPORTING_LIMIT_REACHED = 'destinationPerDayReportingLimitReached'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.DESTINATION_REPORTING_LIMIT_REACHED","title":"<code>DESTINATION_REPORTING_LIMIT_REACHED = 'destinationReportingLimitReached'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.EXCEEDS_MAX_CHANNEL_CAPACITY","title":"<code>EXCEEDS_MAX_CHANNEL_CAPACITY = 'exceedsMaxChannelCapacity'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.EXCEEDS_MAX_TRIGGER_STATE_CARDINALITY","title":"<code>EXCEEDS_MAX_TRIGGER_STATE_CARDINALITY = 'exceedsMaxTriggerStateCardinality'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.EXCESSIVE_REPORTING_ORIGINS","title":"<code>EXCESSIVE_REPORTING_ORIGINS = 'excessiveReportingOrigins'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.INSUFFICIENT_SOURCE_CAPACITY","title":"<code>INSUFFICIENT_SOURCE_CAPACITY = 'insufficientSourceCapacity'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.INSUFFICIENT_UNIQUE_DESTINATION_CAPACITY","title":"<code>INSUFFICIENT_UNIQUE_DESTINATION_CAPACITY = 'insufficientUniqueDestinationCapacity'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.INTERNAL_ERROR","title":"<code>INTERNAL_ERROR = 'internalError'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.PROHIBITED_BY_BROWSER_POLICY","title":"<code>PROHIBITED_BY_BROWSER_POLICY = 'prohibitedByBrowserPolicy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.REPORTING_ORIGINS_PER_SITE_LIMIT_REACHED","title":"<code>REPORTING_ORIGINS_PER_SITE_LIMIT_REACHED = 'reportingOriginsPerSiteLimitReached'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.SUCCESS","title":"<code>SUCCESS = 'success'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.SUCCESS_NOISED","title":"<code>SUCCESS_NOISED = 'successNoised'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AttributionReportingSourceRegistrationResult:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationResult.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationTimeConfig","title":"<code>AttributionReportingSourceRegistrationTimeConfig</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class AttributionReportingSourceRegistrationTimeConfig(enum.Enum):\n    INCLUDE = \"include\"\n    EXCLUDE = \"exclude\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AttributionReportingSourceRegistrationTimeConfig:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationTimeConfig.EXCLUDE","title":"<code>EXCLUDE = 'exclude'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationTimeConfig.INCLUDE","title":"<code>INCLUDE = 'include'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationTimeConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AttributionReportingSourceRegistrationTimeConfig:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceRegistrationTimeConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceType","title":"<code>AttributionReportingSourceType</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class AttributionReportingSourceType(enum.Enum):\n    NAVIGATION = \"navigation\"\n    EVENT = \"event\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AttributionReportingSourceType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceType.EVENT","title":"<code>EVENT = 'event'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceType.NAVIGATION","title":"<code>NAVIGATION = 'navigation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AttributionReportingSourceType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingSourceType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerDataMatching","title":"<code>AttributionReportingTriggerDataMatching</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class AttributionReportingTriggerDataMatching(enum.Enum):\n    EXACT = \"exact\"\n    MODULUS = \"modulus\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AttributionReportingTriggerDataMatching:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerDataMatching.EXACT","title":"<code>EXACT = 'exact'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerDataMatching.MODULUS","title":"<code>MODULUS = 'modulus'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerDataMatching.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AttributionReportingTriggerDataMatching:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerDataMatching.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistered","title":"<code>AttributionReportingTriggerRegistered</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.attributionReportingTriggerRegistered\")\n@dataclass\nclass AttributionReportingTriggerRegistered:\n    \"\"\"\n    **EXPERIMENTAL**\n\n\n    \"\"\"\n\n    registration: AttributionReportingTriggerRegistration\n    event_level: AttributionReportingEventLevelResult\n    aggregatable: AttributionReportingAggregatableResult\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingTriggerRegistered:\n        return cls(\n            registration=AttributionReportingTriggerRegistration.from_json(\n                json[\"registration\"]\n            ),\n            event_level=AttributionReportingEventLevelResult.from_json(\n                json[\"eventLevel\"]\n            ),\n            aggregatable=AttributionReportingAggregatableResult.from_json(\n                json[\"aggregatable\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistered.aggregatable","title":"<code>aggregatable: AttributionReportingAggregatableResult</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistered.event_level","title":"<code>event_level: AttributionReportingEventLevelResult</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistered.registration","title":"<code>registration: AttributionReportingTriggerRegistration</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistered.__init__","title":"<code>__init__(registration, event_level, aggregatable)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistered.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingTriggerRegistered:\n    return cls(\n        registration=AttributionReportingTriggerRegistration.from_json(\n            json[\"registration\"]\n        ),\n        event_level=AttributionReportingEventLevelResult.from_json(\n            json[\"eventLevel\"]\n        ),\n        aggregatable=AttributionReportingAggregatableResult.from_json(\n            json[\"aggregatable\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration","title":"<code>AttributionReportingTriggerRegistration</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingTriggerRegistration:\n    filters: AttributionReportingFilterPair\n\n    aggregatable_dedup_keys: typing.List[AttributionReportingAggregatableDedupKey]\n\n    event_trigger_data: typing.List[AttributionReportingEventTriggerData]\n\n    aggregatable_trigger_data: typing.List[AttributionReportingAggregatableTriggerData]\n\n    aggregatable_values: typing.List[AttributionReportingAggregatableValueEntry]\n\n    debug_reporting: bool\n\n    source_registration_time_config: AttributionReportingSourceRegistrationTimeConfig\n\n    debug_key: typing.Optional[UnsignedInt64AsBase10] = None\n\n    aggregation_coordinator_origin: typing.Optional[str] = None\n\n    trigger_context_id: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"filters\"] = self.filters.to_json()\n        json[\"aggregatableDedupKeys\"] = [\n            i.to_json() for i in self.aggregatable_dedup_keys\n        ]\n        json[\"eventTriggerData\"] = [i.to_json() for i in self.event_trigger_data]\n        json[\"aggregatableTriggerData\"] = [\n            i.to_json() for i in self.aggregatable_trigger_data\n        ]\n        json[\"aggregatableValues\"] = [i.to_json() for i in self.aggregatable_values]\n        json[\"debugReporting\"] = self.debug_reporting\n        json[\"sourceRegistrationTimeConfig\"] = (\n            self.source_registration_time_config.to_json()\n        )\n        if self.debug_key is not None:\n            json[\"debugKey\"] = self.debug_key.to_json()\n        if self.aggregation_coordinator_origin is not None:\n            json[\"aggregationCoordinatorOrigin\"] = self.aggregation_coordinator_origin\n        if self.trigger_context_id is not None:\n            json[\"triggerContextId\"] = self.trigger_context_id\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingTriggerRegistration:\n        return cls(\n            filters=AttributionReportingFilterPair.from_json(json[\"filters\"]),\n            aggregatable_dedup_keys=[\n                AttributionReportingAggregatableDedupKey.from_json(i)\n                for i in json[\"aggregatableDedupKeys\"]\n            ],\n            event_trigger_data=[\n                AttributionReportingEventTriggerData.from_json(i)\n                for i in json[\"eventTriggerData\"]\n            ],\n            aggregatable_trigger_data=[\n                AttributionReportingAggregatableTriggerData.from_json(i)\n                for i in json[\"aggregatableTriggerData\"]\n            ],\n            aggregatable_values=[\n                AttributionReportingAggregatableValueEntry.from_json(i)\n                for i in json[\"aggregatableValues\"]\n            ],\n            debug_reporting=bool(json[\"debugReporting\"]),\n            source_registration_time_config=AttributionReportingSourceRegistrationTimeConfig.from_json(\n                json[\"sourceRegistrationTimeConfig\"]\n            ),\n            debug_key=(\n                UnsignedInt64AsBase10.from_json(json[\"debugKey\"])\n                if json.get(\"debugKey\", None) is not None\n                else None\n            ),\n            aggregation_coordinator_origin=(\n                str(json[\"aggregationCoordinatorOrigin\"])\n                if json.get(\"aggregationCoordinatorOrigin\", None) is not None\n                else None\n            ),\n            trigger_context_id=(\n                str(json[\"triggerContextId\"])\n                if json.get(\"triggerContextId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.aggregatable_dedup_keys","title":"<code>aggregatable_dedup_keys: typing.List[AttributionReportingAggregatableDedupKey]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.aggregatable_trigger_data","title":"<code>aggregatable_trigger_data: typing.List[AttributionReportingAggregatableTriggerData]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.aggregatable_values","title":"<code>aggregatable_values: typing.List[AttributionReportingAggregatableValueEntry]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.aggregation_coordinator_origin","title":"<code>aggregation_coordinator_origin: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.debug_key","title":"<code>debug_key: typing.Optional[UnsignedInt64AsBase10] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.debug_reporting","title":"<code>debug_reporting: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.event_trigger_data","title":"<code>event_trigger_data: typing.List[AttributionReportingEventTriggerData]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.filters","title":"<code>filters: AttributionReportingFilterPair</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.source_registration_time_config","title":"<code>source_registration_time_config: AttributionReportingSourceRegistrationTimeConfig</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.trigger_context_id","title":"<code>trigger_context_id: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.__init__","title":"<code>__init__(filters, aggregatable_dedup_keys, event_trigger_data, aggregatable_trigger_data, aggregatable_values, debug_reporting, source_registration_time_config, debug_key=None, aggregation_coordinator_origin=None, trigger_context_id=None)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingTriggerRegistration:\n    return cls(\n        filters=AttributionReportingFilterPair.from_json(json[\"filters\"]),\n        aggregatable_dedup_keys=[\n            AttributionReportingAggregatableDedupKey.from_json(i)\n            for i in json[\"aggregatableDedupKeys\"]\n        ],\n        event_trigger_data=[\n            AttributionReportingEventTriggerData.from_json(i)\n            for i in json[\"eventTriggerData\"]\n        ],\n        aggregatable_trigger_data=[\n            AttributionReportingAggregatableTriggerData.from_json(i)\n            for i in json[\"aggregatableTriggerData\"]\n        ],\n        aggregatable_values=[\n            AttributionReportingAggregatableValueEntry.from_json(i)\n            for i in json[\"aggregatableValues\"]\n        ],\n        debug_reporting=bool(json[\"debugReporting\"]),\n        source_registration_time_config=AttributionReportingSourceRegistrationTimeConfig.from_json(\n            json[\"sourceRegistrationTimeConfig\"]\n        ),\n        debug_key=(\n            UnsignedInt64AsBase10.from_json(json[\"debugKey\"])\n            if json.get(\"debugKey\", None) is not None\n            else None\n        ),\n        aggregation_coordinator_origin=(\n            str(json[\"aggregationCoordinatorOrigin\"])\n            if json.get(\"aggregationCoordinatorOrigin\", None) is not None\n            else None\n        ),\n        trigger_context_id=(\n            str(json[\"triggerContextId\"])\n            if json.get(\"triggerContextId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerRegistration.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"filters\"] = self.filters.to_json()\n    json[\"aggregatableDedupKeys\"] = [\n        i.to_json() for i in self.aggregatable_dedup_keys\n    ]\n    json[\"eventTriggerData\"] = [i.to_json() for i in self.event_trigger_data]\n    json[\"aggregatableTriggerData\"] = [\n        i.to_json() for i in self.aggregatable_trigger_data\n    ]\n    json[\"aggregatableValues\"] = [i.to_json() for i in self.aggregatable_values]\n    json[\"debugReporting\"] = self.debug_reporting\n    json[\"sourceRegistrationTimeConfig\"] = (\n        self.source_registration_time_config.to_json()\n    )\n    if self.debug_key is not None:\n        json[\"debugKey\"] = self.debug_key.to_json()\n    if self.aggregation_coordinator_origin is not None:\n        json[\"aggregationCoordinatorOrigin\"] = self.aggregation_coordinator_origin\n    if self.trigger_context_id is not None:\n        json[\"triggerContextId\"] = self.trigger_context_id\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerSpec","title":"<code>AttributionReportingTriggerSpec</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass AttributionReportingTriggerSpec:\n    #: number instead of integer because not all uint32 can be represented by\n    #: int\n    trigger_data: typing.List[float]\n\n    event_report_windows: AttributionReportingEventReportWindows\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"triggerData\"] = [i for i in self.trigger_data]\n        json[\"eventReportWindows\"] = self.event_report_windows.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingTriggerSpec:\n        return cls(\n            trigger_data=[float(i) for i in json[\"triggerData\"]],\n            event_report_windows=AttributionReportingEventReportWindows.from_json(\n                json[\"eventReportWindows\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerSpec.event_report_windows","title":"<code>event_report_windows: AttributionReportingEventReportWindows</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerSpec.trigger_data","title":"<code>trigger_data: typing.List[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerSpec.__init__","title":"<code>__init__(trigger_data, event_report_windows)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerSpec.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttributionReportingTriggerSpec:\n    return cls(\n        trigger_data=[float(i) for i in json[\"triggerData\"]],\n        event_report_windows=AttributionReportingEventReportWindows.from_json(\n            json[\"eventReportWindows\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.AttributionReportingTriggerSpec.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"triggerData\"] = [i for i in self.trigger_data]\n    json[\"eventReportWindows\"] = self.event_report_windows.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageContentUpdated","title":"<code>CacheStorageContentUpdated</code>  <code>dataclass</code>","text":"<p>A cache's contents have been modified.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.cacheStorageContentUpdated\")\n@dataclass\nclass CacheStorageContentUpdated:\n    \"\"\"\n    A cache's contents have been modified.\n    \"\"\"\n\n    #: Origin to update.\n    origin: str\n    #: Storage key to update.\n    storage_key: str\n    #: Storage bucket to update.\n    bucket_id: str\n    #: Name of cache in origin.\n    cache_name: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CacheStorageContentUpdated:\n        return cls(\n            origin=str(json[\"origin\"]),\n            storage_key=str(json[\"storageKey\"]),\n            bucket_id=str(json[\"bucketId\"]),\n            cache_name=str(json[\"cacheName\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageContentUpdated.bucket_id","title":"<code>bucket_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageContentUpdated.cache_name","title":"<code>cache_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageContentUpdated.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageContentUpdated.storage_key","title":"<code>storage_key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageContentUpdated.__init__","title":"<code>__init__(origin, storage_key, bucket_id, cache_name)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageContentUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CacheStorageContentUpdated:\n    return cls(\n        origin=str(json[\"origin\"]),\n        storage_key=str(json[\"storageKey\"]),\n        bucket_id=str(json[\"bucketId\"]),\n        cache_name=str(json[\"cacheName\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageListUpdated","title":"<code>CacheStorageListUpdated</code>  <code>dataclass</code>","text":"<p>A cache has been added/deleted.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.cacheStorageListUpdated\")\n@dataclass\nclass CacheStorageListUpdated:\n    \"\"\"\n    A cache has been added/deleted.\n    \"\"\"\n\n    #: Origin to update.\n    origin: str\n    #: Storage key to update.\n    storage_key: str\n    #: Storage bucket to update.\n    bucket_id: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CacheStorageListUpdated:\n        return cls(\n            origin=str(json[\"origin\"]),\n            storage_key=str(json[\"storageKey\"]),\n            bucket_id=str(json[\"bucketId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageListUpdated.bucket_id","title":"<code>bucket_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageListUpdated.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageListUpdated.storage_key","title":"<code>storage_key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageListUpdated.__init__","title":"<code>__init__(origin, storage_key, bucket_id)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.CacheStorageListUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CacheStorageListUpdated:\n    return cls(\n        origin=str(json[\"origin\"]),\n        storage_key=str(json[\"storageKey\"]),\n        bucket_id=str(json[\"bucketId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBContentUpdated","title":"<code>IndexedDBContentUpdated</code>  <code>dataclass</code>","text":"<p>The origin's IndexedDB object store has been modified.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.indexedDBContentUpdated\")\n@dataclass\nclass IndexedDBContentUpdated:\n    \"\"\"\n    The origin's IndexedDB object store has been modified.\n    \"\"\"\n\n    #: Origin to update.\n    origin: str\n    #: Storage key to update.\n    storage_key: str\n    #: Storage bucket to update.\n    bucket_id: str\n    #: Database to update.\n    database_name: str\n    #: ObjectStore to update.\n    object_store_name: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; IndexedDBContentUpdated:\n        return cls(\n            origin=str(json[\"origin\"]),\n            storage_key=str(json[\"storageKey\"]),\n            bucket_id=str(json[\"bucketId\"]),\n            database_name=str(json[\"databaseName\"]),\n            object_store_name=str(json[\"objectStoreName\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBContentUpdated.bucket_id","title":"<code>bucket_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBContentUpdated.database_name","title":"<code>database_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBContentUpdated.object_store_name","title":"<code>object_store_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBContentUpdated.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBContentUpdated.storage_key","title":"<code>storage_key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBContentUpdated.__init__","title":"<code>__init__(origin, storage_key, bucket_id, database_name, object_store_name)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBContentUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; IndexedDBContentUpdated:\n    return cls(\n        origin=str(json[\"origin\"]),\n        storage_key=str(json[\"storageKey\"]),\n        bucket_id=str(json[\"bucketId\"]),\n        database_name=str(json[\"databaseName\"]),\n        object_store_name=str(json[\"objectStoreName\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBListUpdated","title":"<code>IndexedDBListUpdated</code>  <code>dataclass</code>","text":"<p>The origin's IndexedDB database list has been modified.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.indexedDBListUpdated\")\n@dataclass\nclass IndexedDBListUpdated:\n    \"\"\"\n    The origin's IndexedDB database list has been modified.\n    \"\"\"\n\n    #: Origin to update.\n    origin: str\n    #: Storage key to update.\n    storage_key: str\n    #: Storage bucket to update.\n    bucket_id: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; IndexedDBListUpdated:\n        return cls(\n            origin=str(json[\"origin\"]),\n            storage_key=str(json[\"storageKey\"]),\n            bucket_id=str(json[\"bucketId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBListUpdated.bucket_id","title":"<code>bucket_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBListUpdated.origin","title":"<code>origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBListUpdated.storage_key","title":"<code>storage_key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBListUpdated.__init__","title":"<code>__init__(origin, storage_key, bucket_id)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.IndexedDBListUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; IndexedDBListUpdated:\n    return cls(\n        origin=str(json[\"origin\"]),\n        storage_key=str(json[\"storageKey\"]),\n        bucket_id=str(json[\"bucketId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType","title":"<code>InterestGroupAccessType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of interest group access types.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class InterestGroupAccessType(enum.Enum):\n    \"\"\"\n    Enum of interest group access types.\n    \"\"\"\n\n    JOIN = \"join\"\n    LEAVE = \"leave\"\n    UPDATE = \"update\"\n    LOADED = \"loaded\"\n    BID = \"bid\"\n    WIN = \"win\"\n    ADDITIONAL_BID = \"additionalBid\"\n    ADDITIONAL_BID_WIN = \"additionalBidWin\"\n    TOP_LEVEL_BID = \"topLevelBid\"\n    TOP_LEVEL_ADDITIONAL_BID = \"topLevelAdditionalBid\"\n    CLEAR = \"clear\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; InterestGroupAccessType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.ADDITIONAL_BID","title":"<code>ADDITIONAL_BID = 'additionalBid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.ADDITIONAL_BID_WIN","title":"<code>ADDITIONAL_BID_WIN = 'additionalBidWin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.BID","title":"<code>BID = 'bid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.CLEAR","title":"<code>CLEAR = 'clear'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.JOIN","title":"<code>JOIN = 'join'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.LEAVE","title":"<code>LEAVE = 'leave'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.LOADED","title":"<code>LOADED = 'loaded'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.TOP_LEVEL_ADDITIONAL_BID","title":"<code>TOP_LEVEL_ADDITIONAL_BID = 'topLevelAdditionalBid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.TOP_LEVEL_BID","title":"<code>TOP_LEVEL_BID = 'topLevelBid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.UPDATE","title":"<code>UPDATE = 'update'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.WIN","title":"<code>WIN = 'win'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; InterestGroupAccessType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed","title":"<code>InterestGroupAccessed</code>  <code>dataclass</code>","text":"<p>One of the interest groups was accessed. Note that these events are global to all targets sharing an interest group store.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.interestGroupAccessed\")\n@dataclass\nclass InterestGroupAccessed:\n    \"\"\"\n    One of the interest groups was accessed. Note that these events are global\n    to all targets sharing an interest group store.\n    \"\"\"\n\n    access_time: network.TimeSinceEpoch\n    type_: InterestGroupAccessType\n    owner_origin: str\n    name: str\n    #: For topLevelBid/topLevelAdditionalBid, and when appropriate,\n    #: win and additionalBidWin\n    component_seller_origin: typing.Optional[str]\n    #: For bid or somethingBid event, if done locally and not on a server.\n    bid: typing.Optional[float]\n    bid_currency: typing.Optional[str]\n    #: For non-global events --- links to interestGroupAuctionEvent\n    unique_auction_id: typing.Optional[InterestGroupAuctionId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InterestGroupAccessed:\n        return cls(\n            access_time=network.TimeSinceEpoch.from_json(json[\"accessTime\"]),\n            type_=InterestGroupAccessType.from_json(json[\"type\"]),\n            owner_origin=str(json[\"ownerOrigin\"]),\n            name=str(json[\"name\"]),\n            component_seller_origin=(\n                str(json[\"componentSellerOrigin\"])\n                if json.get(\"componentSellerOrigin\", None) is not None\n                else None\n            ),\n            bid=float(json[\"bid\"]) if json.get(\"bid\", None) is not None else None,\n            bid_currency=(\n                str(json[\"bidCurrency\"])\n                if json.get(\"bidCurrency\", None) is not None\n                else None\n            ),\n            unique_auction_id=(\n                InterestGroupAuctionId.from_json(json[\"uniqueAuctionId\"])\n                if json.get(\"uniqueAuctionId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed.access_time","title":"<code>access_time: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed.bid","title":"<code>bid: typing.Optional[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed.bid_currency","title":"<code>bid_currency: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed.component_seller_origin","title":"<code>component_seller_origin: typing.Optional[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed.owner_origin","title":"<code>owner_origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed.type_","title":"<code>type_: InterestGroupAccessType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed.unique_auction_id","title":"<code>unique_auction_id: typing.Optional[InterestGroupAuctionId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed.__init__","title":"<code>__init__(access_time, type_, owner_origin, name, component_seller_origin, bid, bid_currency, unique_auction_id)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAccessed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InterestGroupAccessed:\n    return cls(\n        access_time=network.TimeSinceEpoch.from_json(json[\"accessTime\"]),\n        type_=InterestGroupAccessType.from_json(json[\"type\"]),\n        owner_origin=str(json[\"ownerOrigin\"]),\n        name=str(json[\"name\"]),\n        component_seller_origin=(\n            str(json[\"componentSellerOrigin\"])\n            if json.get(\"componentSellerOrigin\", None) is not None\n            else None\n        ),\n        bid=float(json[\"bid\"]) if json.get(\"bid\", None) is not None else None,\n        bid_currency=(\n            str(json[\"bidCurrency\"])\n            if json.get(\"bidCurrency\", None) is not None\n            else None\n        ),\n        unique_auction_id=(\n            InterestGroupAuctionId.from_json(json[\"uniqueAuctionId\"])\n            if json.get(\"uniqueAuctionId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventOccurred","title":"<code>InterestGroupAuctionEventOccurred</code>  <code>dataclass</code>","text":"<p>An auction involving interest groups is taking place. These events are target-specific.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.interestGroupAuctionEventOccurred\")\n@dataclass\nclass InterestGroupAuctionEventOccurred:\n    \"\"\"\n    An auction involving interest groups is taking place. These events are\n    target-specific.\n    \"\"\"\n\n    event_time: network.TimeSinceEpoch\n    type_: InterestGroupAuctionEventType\n    unique_auction_id: InterestGroupAuctionId\n    #: Set for child auctions.\n    parent_auction_id: typing.Optional[InterestGroupAuctionId]\n    #: Set for started and configResolved\n    auction_config: typing.Optional[dict]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InterestGroupAuctionEventOccurred:\n        return cls(\n            event_time=network.TimeSinceEpoch.from_json(json[\"eventTime\"]),\n            type_=InterestGroupAuctionEventType.from_json(json[\"type\"]),\n            unique_auction_id=InterestGroupAuctionId.from_json(json[\"uniqueAuctionId\"]),\n            parent_auction_id=(\n                InterestGroupAuctionId.from_json(json[\"parentAuctionId\"])\n                if json.get(\"parentAuctionId\", None) is not None\n                else None\n            ),\n            auction_config=(\n                dict(json[\"auctionConfig\"])\n                if json.get(\"auctionConfig\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventOccurred.auction_config","title":"<code>auction_config: typing.Optional[dict]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventOccurred.event_time","title":"<code>event_time: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventOccurred.parent_auction_id","title":"<code>parent_auction_id: typing.Optional[InterestGroupAuctionId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventOccurred.type_","title":"<code>type_: InterestGroupAuctionEventType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventOccurred.unique_auction_id","title":"<code>unique_auction_id: InterestGroupAuctionId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventOccurred.__init__","title":"<code>__init__(event_time, type_, unique_auction_id, parent_auction_id, auction_config)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventOccurred.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InterestGroupAuctionEventOccurred:\n    return cls(\n        event_time=network.TimeSinceEpoch.from_json(json[\"eventTime\"]),\n        type_=InterestGroupAuctionEventType.from_json(json[\"type\"]),\n        unique_auction_id=InterestGroupAuctionId.from_json(json[\"uniqueAuctionId\"]),\n        parent_auction_id=(\n            InterestGroupAuctionId.from_json(json[\"parentAuctionId\"])\n            if json.get(\"parentAuctionId\", None) is not None\n            else None\n        ),\n        auction_config=(\n            dict(json[\"auctionConfig\"])\n            if json.get(\"auctionConfig\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventType","title":"<code>InterestGroupAuctionEventType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of auction events.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class InterestGroupAuctionEventType(enum.Enum):\n    \"\"\"\n    Enum of auction events.\n    \"\"\"\n\n    STARTED = \"started\"\n    CONFIG_RESOLVED = \"configResolved\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; InterestGroupAuctionEventType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventType.CONFIG_RESOLVED","title":"<code>CONFIG_RESOLVED = 'configResolved'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventType.STARTED","title":"<code>STARTED = 'started'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; InterestGroupAuctionEventType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionEventType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionFetchType","title":"<code>InterestGroupAuctionFetchType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of network fetches auctions can do.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class InterestGroupAuctionFetchType(enum.Enum):\n    \"\"\"\n    Enum of network fetches auctions can do.\n    \"\"\"\n\n    BIDDER_JS = \"bidderJs\"\n    BIDDER_WASM = \"bidderWasm\"\n    SELLER_JS = \"sellerJs\"\n    BIDDER_TRUSTED_SIGNALS = \"bidderTrustedSignals\"\n    SELLER_TRUSTED_SIGNALS = \"sellerTrustedSignals\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; InterestGroupAuctionFetchType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionFetchType.BIDDER_JS","title":"<code>BIDDER_JS = 'bidderJs'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionFetchType.BIDDER_TRUSTED_SIGNALS","title":"<code>BIDDER_TRUSTED_SIGNALS = 'bidderTrustedSignals'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionFetchType.BIDDER_WASM","title":"<code>BIDDER_WASM = 'bidderWasm'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionFetchType.SELLER_JS","title":"<code>SELLER_JS = 'sellerJs'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionFetchType.SELLER_TRUSTED_SIGNALS","title":"<code>SELLER_TRUSTED_SIGNALS = 'sellerTrustedSignals'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionFetchType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; InterestGroupAuctionFetchType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionFetchType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionId","title":"<code>InterestGroupAuctionId</code>","text":"<p>               Bases: <code>str</code></p> <p>Protected audience interest group auction identifier.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class InterestGroupAuctionId(str):\n    \"\"\"\n    Protected audience interest group auction identifier.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; InterestGroupAuctionId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"InterestGroupAuctionId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def __repr__(self):\n    return \"InterestGroupAuctionId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; InterestGroupAuctionId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionNetworkRequestCreated","title":"<code>InterestGroupAuctionNetworkRequestCreated</code>  <code>dataclass</code>","text":"<p>Specifies which auctions a particular network fetch may be related to, and in what role. Note that it is not ordered with respect to Network.requestWillBeSent (but will happen before loadingFinished loadingFailed).</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.interestGroupAuctionNetworkRequestCreated\")\n@dataclass\nclass InterestGroupAuctionNetworkRequestCreated:\n    \"\"\"\n    Specifies which auctions a particular network fetch may be related to, and\n    in what role. Note that it is not ordered with respect to\n    Network.requestWillBeSent (but will happen before loadingFinished\n    loadingFailed).\n    \"\"\"\n\n    type_: InterestGroupAuctionFetchType\n    request_id: network.RequestId\n    #: This is the set of the auctions using the worklet that issued this\n    #: request.  In the case of trusted signals, it's possible that only some of\n    #: them actually care about the keys being queried.\n    auctions: typing.List[InterestGroupAuctionId]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; InterestGroupAuctionNetworkRequestCreated:\n        return cls(\n            type_=InterestGroupAuctionFetchType.from_json(json[\"type\"]),\n            request_id=network.RequestId.from_json(json[\"requestId\"]),\n            auctions=[InterestGroupAuctionId.from_json(i) for i in json[\"auctions\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionNetworkRequestCreated.auctions","title":"<code>auctions: typing.List[InterestGroupAuctionId]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionNetworkRequestCreated.request_id","title":"<code>request_id: network.RequestId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionNetworkRequestCreated.type_","title":"<code>type_: InterestGroupAuctionFetchType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionNetworkRequestCreated.__init__","title":"<code>__init__(type_, request_id, auctions)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.InterestGroupAuctionNetworkRequestCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; InterestGroupAuctionNetworkRequestCreated:\n    return cls(\n        type_=InterestGroupAuctionFetchType.from_json(json[\"type\"]),\n        request_id=network.RequestId.from_json(json[\"requestId\"]),\n        auctions=[InterestGroupAuctionId.from_json(i) for i in json[\"auctions\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.RelatedWebsiteSet","title":"<code>RelatedWebsiteSet</code>  <code>dataclass</code>","text":"<p>A single Related Website Set object.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass RelatedWebsiteSet:\n    \"\"\"\n    A single Related Website Set object.\n    \"\"\"\n\n    #: The primary site of this set, along with the ccTLDs if there is any.\n    primary_sites: typing.List[str]\n\n    #: The associated sites of this set, along with the ccTLDs if there is any.\n    associated_sites: typing.List[str]\n\n    #: The service sites of this set, along with the ccTLDs if there is any.\n    service_sites: typing.List[str]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"primarySites\"] = [i for i in self.primary_sites]\n        json[\"associatedSites\"] = [i for i in self.associated_sites]\n        json[\"serviceSites\"] = [i for i in self.service_sites]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RelatedWebsiteSet:\n        return cls(\n            primary_sites=[str(i) for i in json[\"primarySites\"]],\n            associated_sites=[str(i) for i in json[\"associatedSites\"]],\n            service_sites=[str(i) for i in json[\"serviceSites\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.RelatedWebsiteSet.associated_sites","title":"<code>associated_sites: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.RelatedWebsiteSet.primary_sites","title":"<code>primary_sites: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.RelatedWebsiteSet.service_sites","title":"<code>service_sites: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.RelatedWebsiteSet.__init__","title":"<code>__init__(primary_sites, associated_sites, service_sites)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.RelatedWebsiteSet.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RelatedWebsiteSet:\n    return cls(\n        primary_sites=[str(i) for i in json[\"primarySites\"]],\n        associated_sites=[str(i) for i in json[\"associatedSites\"]],\n        service_sites=[str(i) for i in json[\"serviceSites\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.RelatedWebsiteSet.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"primarySites\"] = [i for i in self.primary_sites]\n    json[\"associatedSites\"] = [i for i in self.associated_sites]\n    json[\"serviceSites\"] = [i for i in self.service_sites]\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SerializedStorageKey","title":"<code>SerializedStorageKey</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class SerializedStorageKey(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SerializedStorageKey:\n        return cls(json)\n\n    def __repr__(self):\n        return \"SerializedStorageKey({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SerializedStorageKey.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def __repr__(self):\n    return \"SerializedStorageKey({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SerializedStorageKey.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SerializedStorageKey:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SerializedStorageKey.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams","title":"<code>SharedStorageAccessParams</code>  <code>dataclass</code>","text":"<p>Bundles the parameters for shared storage access events whose presence/absence can vary according to SharedStorageAccessType.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass SharedStorageAccessParams:\n    \"\"\"\n    Bundles the parameters for shared storage access events whose\n    presence/absence can vary according to SharedStorageAccessType.\n    \"\"\"\n\n    #: Spec of the module script URL.\n    #: Present only for SharedStorageAccessType.documentAddModule.\n    script_source_url: typing.Optional[str] = None\n\n    #: Name of the registered operation to be run.\n    #: Present only for SharedStorageAccessType.documentRun and\n    #: SharedStorageAccessType.documentSelectURL.\n    operation_name: typing.Optional[str] = None\n\n    #: The operation's serialized data in bytes (converted to a string).\n    #: Present only for SharedStorageAccessType.documentRun and\n    #: SharedStorageAccessType.documentSelectURL.\n    serialized_data: typing.Optional[str] = None\n\n    #: Array of candidate URLs' specs, along with any associated metadata.\n    #: Present only for SharedStorageAccessType.documentSelectURL.\n    urls_with_metadata: typing.Optional[typing.List[SharedStorageUrlWithMetadata]] = (\n        None\n    )\n\n    #: Key for a specific entry in an origin's shared storage.\n    #: Present only for SharedStorageAccessType.documentSet,\n    #: SharedStorageAccessType.documentAppend,\n    #: SharedStorageAccessType.documentDelete,\n    #: SharedStorageAccessType.workletSet,\n    #: SharedStorageAccessType.workletAppend,\n    #: SharedStorageAccessType.workletDelete,\n    #: SharedStorageAccessType.workletGet,\n    #: SharedStorageAccessType.headerSet,\n    #: SharedStorageAccessType.headerAppend, and\n    #: SharedStorageAccessType.headerDelete.\n    key: typing.Optional[str] = None\n\n    #: Value for a specific entry in an origin's shared storage.\n    #: Present only for SharedStorageAccessType.documentSet,\n    #: SharedStorageAccessType.documentAppend,\n    #: SharedStorageAccessType.workletSet,\n    #: SharedStorageAccessType.workletAppend,\n    #: SharedStorageAccessType.headerSet, and\n    #: SharedStorageAccessType.headerAppend.\n    value: typing.Optional[str] = None\n\n    #: Whether or not to set an entry for a key if that key is already present.\n    #: Present only for SharedStorageAccessType.documentSet,\n    #: SharedStorageAccessType.workletSet, and\n    #: SharedStorageAccessType.headerSet.\n    ignore_if_present: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.script_source_url is not None:\n            json[\"scriptSourceUrl\"] = self.script_source_url\n        if self.operation_name is not None:\n            json[\"operationName\"] = self.operation_name\n        if self.serialized_data is not None:\n            json[\"serializedData\"] = self.serialized_data\n        if self.urls_with_metadata is not None:\n            json[\"urlsWithMetadata\"] = [i.to_json() for i in self.urls_with_metadata]\n        if self.key is not None:\n            json[\"key\"] = self.key\n        if self.value is not None:\n            json[\"value\"] = self.value\n        if self.ignore_if_present is not None:\n            json[\"ignoreIfPresent\"] = self.ignore_if_present\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageAccessParams:\n        return cls(\n            script_source_url=(\n                str(json[\"scriptSourceUrl\"])\n                if json.get(\"scriptSourceUrl\", None) is not None\n                else None\n            ),\n            operation_name=(\n                str(json[\"operationName\"])\n                if json.get(\"operationName\", None) is not None\n                else None\n            ),\n            serialized_data=(\n                str(json[\"serializedData\"])\n                if json.get(\"serializedData\", None) is not None\n                else None\n            ),\n            urls_with_metadata=(\n                [\n                    SharedStorageUrlWithMetadata.from_json(i)\n                    for i in json[\"urlsWithMetadata\"]\n                ]\n                if json.get(\"urlsWithMetadata\", None) is not None\n                else None\n            ),\n            key=str(json[\"key\"]) if json.get(\"key\", None) is not None else None,\n            value=str(json[\"value\"]) if json.get(\"value\", None) is not None else None,\n            ignore_if_present=(\n                bool(json[\"ignoreIfPresent\"])\n                if json.get(\"ignoreIfPresent\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams.ignore_if_present","title":"<code>ignore_if_present: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams.key","title":"<code>key: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams.operation_name","title":"<code>operation_name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams.script_source_url","title":"<code>script_source_url: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams.serialized_data","title":"<code>serialized_data: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams.urls_with_metadata","title":"<code>urls_with_metadata: typing.Optional[typing.List[SharedStorageUrlWithMetadata]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams.value","title":"<code>value: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams.__init__","title":"<code>__init__(script_source_url=None, operation_name=None, serialized_data=None, urls_with_metadata=None, key=None, value=None, ignore_if_present=None)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageAccessParams:\n    return cls(\n        script_source_url=(\n            str(json[\"scriptSourceUrl\"])\n            if json.get(\"scriptSourceUrl\", None) is not None\n            else None\n        ),\n        operation_name=(\n            str(json[\"operationName\"])\n            if json.get(\"operationName\", None) is not None\n            else None\n        ),\n        serialized_data=(\n            str(json[\"serializedData\"])\n            if json.get(\"serializedData\", None) is not None\n            else None\n        ),\n        urls_with_metadata=(\n            [\n                SharedStorageUrlWithMetadata.from_json(i)\n                for i in json[\"urlsWithMetadata\"]\n            ]\n            if json.get(\"urlsWithMetadata\", None) is not None\n            else None\n        ),\n        key=str(json[\"key\"]) if json.get(\"key\", None) is not None else None,\n        value=str(json[\"value\"]) if json.get(\"value\", None) is not None else None,\n        ignore_if_present=(\n            bool(json[\"ignoreIfPresent\"])\n            if json.get(\"ignoreIfPresent\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessParams.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.script_source_url is not None:\n        json[\"scriptSourceUrl\"] = self.script_source_url\n    if self.operation_name is not None:\n        json[\"operationName\"] = self.operation_name\n    if self.serialized_data is not None:\n        json[\"serializedData\"] = self.serialized_data\n    if self.urls_with_metadata is not None:\n        json[\"urlsWithMetadata\"] = [i.to_json() for i in self.urls_with_metadata]\n    if self.key is not None:\n        json[\"key\"] = self.key\n    if self.value is not None:\n        json[\"value\"] = self.value\n    if self.ignore_if_present is not None:\n        json[\"ignoreIfPresent\"] = self.ignore_if_present\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType","title":"<code>SharedStorageAccessType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of shared storage access types.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class SharedStorageAccessType(enum.Enum):\n    \"\"\"\n    Enum of shared storage access types.\n    \"\"\"\n\n    DOCUMENT_ADD_MODULE = \"documentAddModule\"\n    DOCUMENT_SELECT_URL = \"documentSelectURL\"\n    DOCUMENT_RUN = \"documentRun\"\n    DOCUMENT_SET = \"documentSet\"\n    DOCUMENT_APPEND = \"documentAppend\"\n    DOCUMENT_DELETE = \"documentDelete\"\n    DOCUMENT_CLEAR = \"documentClear\"\n    DOCUMENT_GET = \"documentGet\"\n    WORKLET_SET = \"workletSet\"\n    WORKLET_APPEND = \"workletAppend\"\n    WORKLET_DELETE = \"workletDelete\"\n    WORKLET_CLEAR = \"workletClear\"\n    WORKLET_GET = \"workletGet\"\n    WORKLET_KEYS = \"workletKeys\"\n    WORKLET_ENTRIES = \"workletEntries\"\n    WORKLET_LENGTH = \"workletLength\"\n    WORKLET_REMAINING_BUDGET = \"workletRemainingBudget\"\n    HEADER_SET = \"headerSet\"\n    HEADER_APPEND = \"headerAppend\"\n    HEADER_DELETE = \"headerDelete\"\n    HEADER_CLEAR = \"headerClear\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SharedStorageAccessType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.DOCUMENT_ADD_MODULE","title":"<code>DOCUMENT_ADD_MODULE = 'documentAddModule'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.DOCUMENT_APPEND","title":"<code>DOCUMENT_APPEND = 'documentAppend'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.DOCUMENT_CLEAR","title":"<code>DOCUMENT_CLEAR = 'documentClear'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.DOCUMENT_DELETE","title":"<code>DOCUMENT_DELETE = 'documentDelete'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.DOCUMENT_GET","title":"<code>DOCUMENT_GET = 'documentGet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.DOCUMENT_RUN","title":"<code>DOCUMENT_RUN = 'documentRun'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.DOCUMENT_SELECT_URL","title":"<code>DOCUMENT_SELECT_URL = 'documentSelectURL'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.DOCUMENT_SET","title":"<code>DOCUMENT_SET = 'documentSet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.HEADER_APPEND","title":"<code>HEADER_APPEND = 'headerAppend'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.HEADER_CLEAR","title":"<code>HEADER_CLEAR = 'headerClear'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.HEADER_DELETE","title":"<code>HEADER_DELETE = 'headerDelete'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.HEADER_SET","title":"<code>HEADER_SET = 'headerSet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.WORKLET_APPEND","title":"<code>WORKLET_APPEND = 'workletAppend'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.WORKLET_CLEAR","title":"<code>WORKLET_CLEAR = 'workletClear'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.WORKLET_DELETE","title":"<code>WORKLET_DELETE = 'workletDelete'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.WORKLET_ENTRIES","title":"<code>WORKLET_ENTRIES = 'workletEntries'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.WORKLET_GET","title":"<code>WORKLET_GET = 'workletGet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.WORKLET_KEYS","title":"<code>WORKLET_KEYS = 'workletKeys'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.WORKLET_LENGTH","title":"<code>WORKLET_LENGTH = 'workletLength'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.WORKLET_REMAINING_BUDGET","title":"<code>WORKLET_REMAINING_BUDGET = 'workletRemainingBudget'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.WORKLET_SET","title":"<code>WORKLET_SET = 'workletSet'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SharedStorageAccessType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessed","title":"<code>SharedStorageAccessed</code>  <code>dataclass</code>","text":"<p>Shared storage was accessed by the associated page. The following parameters are included in all events.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.sharedStorageAccessed\")\n@dataclass\nclass SharedStorageAccessed:\n    \"\"\"\n    Shared storage was accessed by the associated page.\n    The following parameters are included in all events.\n    \"\"\"\n\n    #: Time of the access.\n    access_time: network.TimeSinceEpoch\n    #: Enum value indicating the Shared Storage API method invoked.\n    type_: SharedStorageAccessType\n    #: DevTools Frame Token for the primary frame tree's root.\n    main_frame_id: page.FrameId\n    #: Serialized origin for the context that invoked the Shared Storage API.\n    owner_origin: str\n    #: The sub-parameters wrapped by ``params`` are all optional and their\n    #: presence/absence depends on ``type``.\n    params: SharedStorageAccessParams\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageAccessed:\n        return cls(\n            access_time=network.TimeSinceEpoch.from_json(json[\"accessTime\"]),\n            type_=SharedStorageAccessType.from_json(json[\"type\"]),\n            main_frame_id=page.FrameId.from_json(json[\"mainFrameId\"]),\n            owner_origin=str(json[\"ownerOrigin\"]),\n            params=SharedStorageAccessParams.from_json(json[\"params\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessed.access_time","title":"<code>access_time: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessed.main_frame_id","title":"<code>main_frame_id: page.FrameId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessed.owner_origin","title":"<code>owner_origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessed.params","title":"<code>params: SharedStorageAccessParams</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessed.type_","title":"<code>type_: SharedStorageAccessType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessed.__init__","title":"<code>__init__(access_time, type_, main_frame_id, owner_origin, params)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageAccessed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageAccessed:\n    return cls(\n        access_time=network.TimeSinceEpoch.from_json(json[\"accessTime\"]),\n        type_=SharedStorageAccessType.from_json(json[\"type\"]),\n        main_frame_id=page.FrameId.from_json(json[\"mainFrameId\"]),\n        owner_origin=str(json[\"ownerOrigin\"]),\n        params=SharedStorageAccessParams.from_json(json[\"params\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageEntry","title":"<code>SharedStorageEntry</code>  <code>dataclass</code>","text":"<p>Struct for a single key-value pair in an origin's shared storage.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass SharedStorageEntry:\n    \"\"\"\n    Struct for a single key-value pair in an origin's shared storage.\n    \"\"\"\n\n    key: str\n\n    value: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"key\"] = self.key\n        json[\"value\"] = self.value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageEntry:\n        return cls(\n            key=str(json[\"key\"]),\n            value=str(json[\"value\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageEntry.key","title":"<code>key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageEntry.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageEntry.__init__","title":"<code>__init__(key, value)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageEntry:\n    return cls(\n        key=str(json[\"key\"]),\n        value=str(json[\"value\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"key\"] = self.key\n    json[\"value\"] = self.value\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageMetadata","title":"<code>SharedStorageMetadata</code>  <code>dataclass</code>","text":"<p>Details for an origin's shared storage.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass SharedStorageMetadata:\n    \"\"\"\n    Details for an origin's shared storage.\n    \"\"\"\n\n    #: Time when the origin's shared storage was last created.\n    creation_time: network.TimeSinceEpoch\n\n    #: Number of key-value pairs stored in origin's shared storage.\n    length: int\n\n    #: Current amount of bits of entropy remaining in the navigation budget.\n    remaining_budget: float\n\n    #: Total number of bytes stored as key-value pairs in origin's shared\n    #: storage.\n    bytes_used: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"creationTime\"] = self.creation_time.to_json()\n        json[\"length\"] = self.length\n        json[\"remainingBudget\"] = self.remaining_budget\n        json[\"bytesUsed\"] = self.bytes_used\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageMetadata:\n        return cls(\n            creation_time=network.TimeSinceEpoch.from_json(json[\"creationTime\"]),\n            length=int(json[\"length\"]),\n            remaining_budget=float(json[\"remainingBudget\"]),\n            bytes_used=int(json[\"bytesUsed\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageMetadata.bytes_used","title":"<code>bytes_used: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageMetadata.creation_time","title":"<code>creation_time: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageMetadata.length","title":"<code>length: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageMetadata.remaining_budget","title":"<code>remaining_budget: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageMetadata.__init__","title":"<code>__init__(creation_time, length, remaining_budget, bytes_used)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageMetadata.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageMetadata:\n    return cls(\n        creation_time=network.TimeSinceEpoch.from_json(json[\"creationTime\"]),\n        length=int(json[\"length\"]),\n        remaining_budget=float(json[\"remainingBudget\"]),\n        bytes_used=int(json[\"bytesUsed\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageMetadata.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"creationTime\"] = self.creation_time.to_json()\n    json[\"length\"] = self.length\n    json[\"remainingBudget\"] = self.remaining_budget\n    json[\"bytesUsed\"] = self.bytes_used\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageReportingMetadata","title":"<code>SharedStorageReportingMetadata</code>  <code>dataclass</code>","text":"<p>Pair of reporting metadata details for a candidate URL for <code>selectURL()</code>.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass SharedStorageReportingMetadata:\n    \"\"\"\n    Pair of reporting metadata details for a candidate URL for ``selectURL()``.\n    \"\"\"\n\n    event_type: str\n\n    reporting_url: str\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"eventType\"] = self.event_type\n        json[\"reportingUrl\"] = self.reporting_url\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageReportingMetadata:\n        return cls(\n            event_type=str(json[\"eventType\"]),\n            reporting_url=str(json[\"reportingUrl\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageReportingMetadata.event_type","title":"<code>event_type: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageReportingMetadata.reporting_url","title":"<code>reporting_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageReportingMetadata.__init__","title":"<code>__init__(event_type, reporting_url)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageReportingMetadata.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageReportingMetadata:\n    return cls(\n        event_type=str(json[\"eventType\"]),\n        reporting_url=str(json[\"reportingUrl\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageReportingMetadata.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"eventType\"] = self.event_type\n    json[\"reportingUrl\"] = self.reporting_url\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageUrlWithMetadata","title":"<code>SharedStorageUrlWithMetadata</code>  <code>dataclass</code>","text":"<p>Bundles a candidate URL with its reporting metadata.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass SharedStorageUrlWithMetadata:\n    \"\"\"\n    Bundles a candidate URL with its reporting metadata.\n    \"\"\"\n\n    #: Spec of candidate URL.\n    url: str\n\n    #: Any associated reporting metadata.\n    reporting_metadata: typing.List[SharedStorageReportingMetadata]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"url\"] = self.url\n        json[\"reportingMetadata\"] = [i.to_json() for i in self.reporting_metadata]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageUrlWithMetadata:\n        return cls(\n            url=str(json[\"url\"]),\n            reporting_metadata=[\n                SharedStorageReportingMetadata.from_json(i)\n                for i in json[\"reportingMetadata\"]\n            ],\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageUrlWithMetadata.reporting_metadata","title":"<code>reporting_metadata: typing.List[SharedStorageReportingMetadata]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageUrlWithMetadata.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageUrlWithMetadata.__init__","title":"<code>__init__(url, reporting_metadata)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageUrlWithMetadata.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; SharedStorageUrlWithMetadata:\n    return cls(\n        url=str(json[\"url\"]),\n        reporting_metadata=[\n            SharedStorageReportingMetadata.from_json(i)\n            for i in json[\"reportingMetadata\"]\n        ],\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SharedStorageUrlWithMetadata.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"url\"] = self.url\n    json[\"reportingMetadata\"] = [i.to_json() for i in self.reporting_metadata]\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SignedInt64AsBase10","title":"<code>SignedInt64AsBase10</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class SignedInt64AsBase10(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SignedInt64AsBase10:\n        return cls(json)\n\n    def __repr__(self):\n        return \"SignedInt64AsBase10({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SignedInt64AsBase10.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def __repr__(self):\n    return \"SignedInt64AsBase10({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SignedInt64AsBase10.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SignedInt64AsBase10:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.SignedInt64AsBase10.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucket","title":"<code>StorageBucket</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass StorageBucket:\n    storage_key: SerializedStorageKey\n\n    #: If not specified, it is the default bucket of the storageKey.\n    name: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"storageKey\"] = self.storage_key.to_json()\n        if self.name is not None:\n            json[\"name\"] = self.name\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StorageBucket:\n        return cls(\n            storage_key=SerializedStorageKey.from_json(json[\"storageKey\"]),\n            name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucket.name","title":"<code>name: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucket.storage_key","title":"<code>storage_key: SerializedStorageKey</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucket.__init__","title":"<code>__init__(storage_key, name=None)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucket.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StorageBucket:\n    return cls(\n        storage_key=SerializedStorageKey.from_json(json[\"storageKey\"]),\n        name=str(json[\"name\"]) if json.get(\"name\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucket.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"storageKey\"] = self.storage_key.to_json()\n    if self.name is not None:\n        json[\"name\"] = self.name\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketCreatedOrUpdated","title":"<code>StorageBucketCreatedOrUpdated</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.storageBucketCreatedOrUpdated\")\n@dataclass\nclass StorageBucketCreatedOrUpdated:\n    bucket_info: StorageBucketInfo\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StorageBucketCreatedOrUpdated:\n        return cls(bucket_info=StorageBucketInfo.from_json(json[\"bucketInfo\"]))\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketCreatedOrUpdated.bucket_info","title":"<code>bucket_info: StorageBucketInfo</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketCreatedOrUpdated.__init__","title":"<code>__init__(bucket_info)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketCreatedOrUpdated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StorageBucketCreatedOrUpdated:\n    return cls(bucket_info=StorageBucketInfo.from_json(json[\"bucketInfo\"]))\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketDeleted","title":"<code>StorageBucketDeleted</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@event_class(\"Storage.storageBucketDeleted\")\n@dataclass\nclass StorageBucketDeleted:\n    bucket_id: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StorageBucketDeleted:\n        return cls(bucket_id=str(json[\"bucketId\"]))\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketDeleted.bucket_id","title":"<code>bucket_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketDeleted.__init__","title":"<code>__init__(bucket_id)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketDeleted.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StorageBucketDeleted:\n    return cls(bucket_id=str(json[\"bucketId\"]))\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketInfo","title":"<code>StorageBucketInfo</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass StorageBucketInfo:\n    bucket: StorageBucket\n\n    id_: str\n\n    expiration: network.TimeSinceEpoch\n\n    #: Storage quota (bytes).\n    quota: float\n\n    persistent: bool\n\n    durability: StorageBucketsDurability\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"bucket\"] = self.bucket.to_json()\n        json[\"id\"] = self.id_\n        json[\"expiration\"] = self.expiration.to_json()\n        json[\"quota\"] = self.quota\n        json[\"persistent\"] = self.persistent\n        json[\"durability\"] = self.durability.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; StorageBucketInfo:\n        return cls(\n            bucket=StorageBucket.from_json(json[\"bucket\"]),\n            id_=str(json[\"id\"]),\n            expiration=network.TimeSinceEpoch.from_json(json[\"expiration\"]),\n            quota=float(json[\"quota\"]),\n            persistent=bool(json[\"persistent\"]),\n            durability=StorageBucketsDurability.from_json(json[\"durability\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketInfo.bucket","title":"<code>bucket: StorageBucket</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketInfo.durability","title":"<code>durability: StorageBucketsDurability</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketInfo.expiration","title":"<code>expiration: network.TimeSinceEpoch</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketInfo.id_","title":"<code>id_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketInfo.persistent","title":"<code>persistent: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketInfo.quota","title":"<code>quota: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketInfo.__init__","title":"<code>__init__(bucket, id_, expiration, quota, persistent, durability)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; StorageBucketInfo:\n    return cls(\n        bucket=StorageBucket.from_json(json[\"bucket\"]),\n        id_=str(json[\"id\"]),\n        expiration=network.TimeSinceEpoch.from_json(json[\"expiration\"]),\n        quota=float(json[\"quota\"]),\n        persistent=bool(json[\"persistent\"]),\n        durability=StorageBucketsDurability.from_json(json[\"durability\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketInfo.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"bucket\"] = self.bucket.to_json()\n    json[\"id\"] = self.id_\n    json[\"expiration\"] = self.expiration.to_json()\n    json[\"quota\"] = self.quota\n    json[\"persistent\"] = self.persistent\n    json[\"durability\"] = self.durability.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketsDurability","title":"<code>StorageBucketsDurability</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class StorageBucketsDurability(enum.Enum):\n    RELAXED = \"relaxed\"\n    STRICT = \"strict\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; StorageBucketsDurability:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketsDurability.RELAXED","title":"<code>RELAXED = 'relaxed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketsDurability.STRICT","title":"<code>STRICT = 'strict'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketsDurability.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; StorageBucketsDurability:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageBucketsDurability.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType","title":"<code>StorageType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of possible storage types.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class StorageType(enum.Enum):\n    \"\"\"\n    Enum of possible storage types.\n    \"\"\"\n\n    APPCACHE = \"appcache\"\n    COOKIES = \"cookies\"\n    FILE_SYSTEMS = \"file_systems\"\n    INDEXEDDB = \"indexeddb\"\n    LOCAL_STORAGE = \"local_storage\"\n    SHADER_CACHE = \"shader_cache\"\n    WEBSQL = \"websql\"\n    SERVICE_WORKERS = \"service_workers\"\n    CACHE_STORAGE = \"cache_storage\"\n    INTEREST_GROUPS = \"interest_groups\"\n    SHARED_STORAGE = \"shared_storage\"\n    STORAGE_BUCKETS = \"storage_buckets\"\n    ALL_ = \"all\"\n    OTHER = \"other\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; StorageType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.ALL_","title":"<code>ALL_ = 'all'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.APPCACHE","title":"<code>APPCACHE = 'appcache'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.CACHE_STORAGE","title":"<code>CACHE_STORAGE = 'cache_storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.COOKIES","title":"<code>COOKIES = 'cookies'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.FILE_SYSTEMS","title":"<code>FILE_SYSTEMS = 'file_systems'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.INDEXEDDB","title":"<code>INDEXEDDB = 'indexeddb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.INTEREST_GROUPS","title":"<code>INTEREST_GROUPS = 'interest_groups'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.LOCAL_STORAGE","title":"<code>LOCAL_STORAGE = 'local_storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.OTHER","title":"<code>OTHER = 'other'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.SERVICE_WORKERS","title":"<code>SERVICE_WORKERS = 'service_workers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.SHADER_CACHE","title":"<code>SHADER_CACHE = 'shader_cache'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.SHARED_STORAGE","title":"<code>SHARED_STORAGE = 'shared_storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.STORAGE_BUCKETS","title":"<code>STORAGE_BUCKETS = 'storage_buckets'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.WEBSQL","title":"<code>WEBSQL = 'websql'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; StorageType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.StorageType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.TrustTokens","title":"<code>TrustTokens</code>  <code>dataclass</code>","text":"<p>Pair of issuer origin and number of available (signed, but not used) Trust Tokens from that issuer.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass TrustTokens:\n    \"\"\"\n    Pair of issuer origin and number of available (signed, but not used) Trust\n    Tokens from that issuer.\n    \"\"\"\n\n    issuer_origin: str\n\n    count: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"issuerOrigin\"] = self.issuer_origin\n        json[\"count\"] = self.count\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TrustTokens:\n        return cls(\n            issuer_origin=str(json[\"issuerOrigin\"]),\n            count=float(json[\"count\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.TrustTokens.count","title":"<code>count: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.TrustTokens.issuer_origin","title":"<code>issuer_origin: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.TrustTokens.__init__","title":"<code>__init__(issuer_origin, count)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.TrustTokens.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TrustTokens:\n    return cls(\n        issuer_origin=str(json[\"issuerOrigin\"]),\n        count=float(json[\"count\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.TrustTokens.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"issuerOrigin\"] = self.issuer_origin\n    json[\"count\"] = self.count\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UnsignedInt128AsBase16","title":"<code>UnsignedInt128AsBase16</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class UnsignedInt128AsBase16(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; UnsignedInt128AsBase16:\n        return cls(json)\n\n    def __repr__(self):\n        return \"UnsignedInt128AsBase16({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UnsignedInt128AsBase16.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def __repr__(self):\n    return \"UnsignedInt128AsBase16({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UnsignedInt128AsBase16.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; UnsignedInt128AsBase16:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UnsignedInt128AsBase16.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UnsignedInt64AsBase10","title":"<code>UnsignedInt64AsBase10</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>class UnsignedInt64AsBase10(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; UnsignedInt64AsBase10:\n        return cls(json)\n\n    def __repr__(self):\n        return \"UnsignedInt64AsBase10({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UnsignedInt64AsBase10.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def __repr__(self):\n    return \"UnsignedInt64AsBase10({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UnsignedInt64AsBase10.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; UnsignedInt64AsBase10:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UnsignedInt64AsBase10.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UsageForType","title":"<code>UsageForType</code>  <code>dataclass</code>","text":"<p>Usage for a storage type.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@dataclass\nclass UsageForType:\n    \"\"\"\n    Usage for a storage type.\n    \"\"\"\n\n    #: Name of storage type.\n    storage_type: StorageType\n\n    #: Storage usage (bytes).\n    usage: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"storageType\"] = self.storage_type.to_json()\n        json[\"usage\"] = self.usage\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; UsageForType:\n        return cls(\n            storage_type=StorageType.from_json(json[\"storageType\"]),\n            usage=float(json[\"usage\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UsageForType.storage_type","title":"<code>storage_type: StorageType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UsageForType.usage","title":"<code>usage: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UsageForType.__init__","title":"<code>__init__(storage_type, usage)</code>","text":""},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UsageForType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; UsageForType:\n    return cls(\n        storage_type=StorageType.from_json(json[\"storageType\"]),\n        usage=float(json[\"usage\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.UsageForType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"storageType\"] = self.storage_type.to_json()\n    json[\"usage\"] = self.usage\n    return json\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.clear_cookies","title":"<code>clear_cookies(browser_context_id=None)</code>","text":"<p>Clears cookies.</p> <p>Parameters:</p> Name Type Description Default <code>browser_context_id</code> <code>Optional[BrowserContextID]</code> <p>(Optional) Browser context to use when called on the browser endpoint.</p> <code>None</code> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def clear_cookies(\n    browser_context_id: typing.Optional[browser.BrowserContextID] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears cookies.\n\n    :param browser_context_id: *(Optional)* Browser context to use when called on the browser endpoint.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if browser_context_id is not None:\n        params[\"browserContextId\"] = browser_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.clearCookies\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.clear_data_for_origin","title":"<code>clear_data_for_origin(origin, storage_types)</code>","text":"<p>Clears storage for origin.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> <p>Security origin.</p> required <code>storage_types</code> <code>str</code> <p>Comma separated list of StorageType to clear.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def clear_data_for_origin(\n    origin: str, storage_types: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears storage for origin.\n\n    :param origin: Security origin.\n    :param storage_types: Comma separated list of StorageType to clear.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    params[\"storageTypes\"] = storage_types\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.clearDataForOrigin\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.clear_data_for_storage_key","title":"<code>clear_data_for_storage_key(storage_key, storage_types)</code>","text":"<p>Clears storage for storage key.</p> <p>Parameters:</p> Name Type Description Default <code>storage_key</code> <code>str</code> <p>Storage key.</p> required <code>storage_types</code> <code>str</code> <p>Comma separated list of StorageType to clear.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def clear_data_for_storage_key(\n    storage_key: str, storage_types: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears storage for storage key.\n\n    :param storage_key: Storage key.\n    :param storage_types: Comma separated list of StorageType to clear.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"storageKey\"] = storage_key\n    params[\"storageTypes\"] = storage_types\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.clearDataForStorageKey\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.clear_shared_storage_entries","title":"<code>clear_shared_storage_entries(owner_origin)</code>","text":"<p>Clears all entries for a given origin's shared storage.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>owner_origin</code> <code>str</code> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def clear_shared_storage_entries(\n    owner_origin: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears all entries for a given origin's shared storage.\n\n    **EXPERIMENTAL**\n\n    :param owner_origin:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"ownerOrigin\"] = owner_origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.clearSharedStorageEntries\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.clear_trust_tokens","title":"<code>clear_trust_tokens(issuer_origin)</code>","text":"<p>Removes all Trust Tokens issued by the provided issuerOrigin. Leaves other stored data, including the issuer's Redemption Records, intact.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>issuer_origin</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, bool]</code> <p>True if any tokens were deleted, false otherwise.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def clear_trust_tokens(\n    issuer_origin: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]:\n    \"\"\"\n    Removes all Trust Tokens issued by the provided issuerOrigin.\n    Leaves other stored data, including the issuer's Redemption Records, intact.\n\n    **EXPERIMENTAL**\n\n    :param issuer_origin:\n    :returns: True if any tokens were deleted, false otherwise.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"issuerOrigin\"] = issuer_origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.clearTrustTokens\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return bool(json[\"didDeleteTokens\"])\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.delete_shared_storage_entry","title":"<code>delete_shared_storage_entry(owner_origin, key)</code>","text":"<p>Deletes entry for <code>key</code> (if it exists) for a given origin's shared storage.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>owner_origin</code> <code>str</code> required <code>key</code> <code>str</code> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def delete_shared_storage_entry(\n    owner_origin: str, key: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Deletes entry for ``key`` (if it exists) for a given origin's shared storage.\n\n    **EXPERIMENTAL**\n\n    :param owner_origin:\n    :param key:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"ownerOrigin\"] = owner_origin\n    params[\"key\"] = key\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.deleteSharedStorageEntry\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.delete_storage_bucket","title":"<code>delete_storage_bucket(bucket)</code>","text":"<p>Deletes the Storage Bucket with the given storage key and bucket name.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>bucket</code> <code>StorageBucket</code> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def delete_storage_bucket(\n    bucket: StorageBucket,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Deletes the Storage Bucket with the given storage key and bucket name.\n\n    **EXPERIMENTAL**\n\n    :param bucket:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"bucket\"] = bucket.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.deleteStorageBucket\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.get_cookies","title":"<code>get_cookies(browser_context_id=None)</code>","text":"<p>Returns all browser cookies.</p> <p>Parameters:</p> Name Type Description Default <code>browser_context_id</code> <code>Optional[BrowserContextID]</code> <p>(Optional) Browser context to use when called on the browser endpoint.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Cookie]]</code> <p>Array of cookie objects.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def get_cookies(\n    browser_context_id: typing.Optional[browser.BrowserContextID] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[network.Cookie]]:\n    \"\"\"\n    Returns all browser cookies.\n\n    :param browser_context_id: *(Optional)* Browser context to use when called on the browser endpoint.\n    :returns: Array of cookie objects.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if browser_context_id is not None:\n        params[\"browserContextId\"] = browser_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.getCookies\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [network.Cookie.from_json(i) for i in json[\"cookies\"]]\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.get_interest_group_details","title":"<code>get_interest_group_details(owner_origin, name)</code>","text":"<p>Gets details for a named interest group.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>owner_origin</code> <code>str</code> required <code>name</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, dict]</code> <p>This largely corresponds to: https://wicg.github.io/turtledove/#dictdef-generatebidinterestgroup but has absolute expirationTime instead of relative lifetimeMs and also adds joiningOrigin.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def get_interest_group_details(\n    owner_origin: str, name: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, dict]:\n    \"\"\"\n    Gets details for a named interest group.\n\n    **EXPERIMENTAL**\n\n    :param owner_origin:\n    :param name:\n    :returns: This largely corresponds to: https://wicg.github.io/turtledove/#dictdef-generatebidinterestgroup but has absolute expirationTime instead of relative lifetimeMs and also adds joiningOrigin.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"ownerOrigin\"] = owner_origin\n    params[\"name\"] = name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.getInterestGroupDetails\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return dict(json[\"details\"])\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.get_related_website_sets","title":"<code>get_related_website_sets()</code>","text":"<p>Returns the effective Related Website Sets in use by this profile for the browser session. The effective Related Website Sets will not change during a browser session.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[RelatedWebsiteSet]]</code> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def get_related_website_sets() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[RelatedWebsiteSet]]\n):\n    \"\"\"\n    Returns the effective Related Website Sets in use by this profile for the browser\n    session. The effective Related Website Sets will not change during a browser session.\n\n    **EXPERIMENTAL**\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.getRelatedWebsiteSets\",\n    }\n    json = yield cmd_dict\n    return [RelatedWebsiteSet.from_json(i) for i in json[\"sets\"]]\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.get_shared_storage_entries","title":"<code>get_shared_storage_entries(owner_origin)</code>","text":"<p>Gets the entries in an given origin's shared storage.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>owner_origin</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[SharedStorageEntry]]</code> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def get_shared_storage_entries(\n    owner_origin: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[SharedStorageEntry]]:\n    \"\"\"\n    Gets the entries in an given origin's shared storage.\n\n    **EXPERIMENTAL**\n\n    :param owner_origin:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"ownerOrigin\"] = owner_origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.getSharedStorageEntries\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [SharedStorageEntry.from_json(i) for i in json[\"entries\"]]\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.get_shared_storage_metadata","title":"<code>get_shared_storage_metadata(owner_origin)</code>","text":"<p>Gets metadata for an origin's shared storage.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>owner_origin</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SharedStorageMetadata]</code> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def get_shared_storage_metadata(\n    owner_origin: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, SharedStorageMetadata]:\n    \"\"\"\n    Gets metadata for an origin's shared storage.\n\n    **EXPERIMENTAL**\n\n    :param owner_origin:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"ownerOrigin\"] = owner_origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.getSharedStorageMetadata\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return SharedStorageMetadata.from_json(json[\"metadata\"])\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.get_storage_key_for_frame","title":"<code>get_storage_key_for_frame(frame_id)</code>","text":"<p>Returns a storage key given a frame id.</p> <p>Parameters:</p> Name Type Description Default <code>frame_id</code> <code>FrameId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SerializedStorageKey]</code> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def get_storage_key_for_frame(\n    frame_id: page.FrameId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, SerializedStorageKey]:\n    \"\"\"\n    Returns a storage key given a frame id.\n\n    :param frame_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"frameId\"] = frame_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.getStorageKeyForFrame\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return SerializedStorageKey.from_json(json[\"storageKey\"])\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.get_trust_tokens","title":"<code>get_trust_tokens()</code>","text":"<p>Returns the number of stored Trust Tokens per issuer for the current browsing context.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[TrustTokens]]</code> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def get_trust_tokens() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[TrustTokens]]\n):\n    \"\"\"\n    Returns the number of stored Trust Tokens per issuer for the\n    current browsing context.\n\n    **EXPERIMENTAL**\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.getTrustTokens\",\n    }\n    json = yield cmd_dict\n    return [TrustTokens.from_json(i) for i in json[\"tokens\"]]\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.get_usage_and_quota","title":"<code>get_usage_and_quota(origin)</code>","text":"<p>Returns usage and quota in bytes.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> <p>Security origin.</p> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[float, float, bool, List[UsageForType]]]</code> <p>A tuple with the following items:  0. usage - Storage usage (bytes). 1. quota - Storage quota (bytes). 2. overrideActive - Whether or not the origin has an active storage quota override 3. usageBreakdown - Storage usage per type (bytes).</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def get_usage_and_quota(\n    origin: str,\n) -&gt; typing.Generator[\n    T_JSON_DICT,\n    T_JSON_DICT,\n    typing.Tuple[float, float, bool, typing.List[UsageForType]],\n]:\n    \"\"\"\n    Returns usage and quota in bytes.\n\n    :param origin: Security origin.\n    :returns: A tuple with the following items:\n\n        0. **usage** - Storage usage (bytes).\n        1. **quota** - Storage quota (bytes).\n        2. **overrideActive** - Whether or not the origin has an active storage quota override\n        3. **usageBreakdown** - Storage usage per type (bytes).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.getUsageAndQuota\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (\n        float(json[\"usage\"]),\n        float(json[\"quota\"]),\n        bool(json[\"overrideActive\"]),\n        [UsageForType.from_json(i) for i in json[\"usageBreakdown\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.override_quota_for_origin","title":"<code>override_quota_for_origin(origin, quota_size=None)</code>","text":"<p>Override quota for the specified origin</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> <p>Security origin.</p> required <code>quota_size</code> <code>Optional[float]</code> <p>(Optional) The quota size (in bytes) to override the original quota with. If this is called multiple times, the overridden quota will be equal to the quotaSize provided in the final call. If this is called without specifying a quotaSize, the quota will be reset to the default value for the specified origin. If this is called multiple times with different origins, the override will be maintained for each origin until it is disabled (called without a quotaSize).</p> <code>None</code> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def override_quota_for_origin(\n    origin: str, quota_size: typing.Optional[float] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Override quota for the specified origin\n\n    **EXPERIMENTAL**\n\n    :param origin: Security origin.\n    :param quota_size: *(Optional)* The quota size (in bytes) to override the original quota with. If this is called multiple times, the overridden quota will be equal to the quotaSize provided in the final call. If this is called without specifying a quotaSize, the quota will be reset to the default value for the specified origin. If this is called multiple times with different origins, the override will be maintained for each origin until it is disabled (called without a quotaSize).\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    if quota_size is not None:\n        params[\"quotaSize\"] = quota_size\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.overrideQuotaForOrigin\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.reset_shared_storage_budget","title":"<code>reset_shared_storage_budget(owner_origin)</code>","text":"<p>Resets the budget for <code>ownerOrigin</code> by clearing all budget withdrawals.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>owner_origin</code> <code>str</code> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def reset_shared_storage_budget(\n    owner_origin: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Resets the budget for ``ownerOrigin`` by clearing all budget withdrawals.\n\n    **EXPERIMENTAL**\n\n    :param owner_origin:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"ownerOrigin\"] = owner_origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.resetSharedStorageBudget\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.run_bounce_tracking_mitigations","title":"<code>run_bounce_tracking_mitigations()</code>","text":"<p>Deletes state for sites identified as potential bounce trackers, immediately.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[str]]</code> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def run_bounce_tracking_mitigations() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]\n):\n    \"\"\"\n    Deletes state for sites identified as potential bounce trackers, immediately.\n\n    **EXPERIMENTAL**\n\n    :returns:\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.runBounceTrackingMitigations\",\n    }\n    json = yield cmd_dict\n    return [str(i) for i in json[\"deletedSites\"]]\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.send_pending_attribution_reports","title":"<code>send_pending_attribution_reports()</code>","text":"<p>Sends all pending Attribution Reports immediately, regardless of their scheduled report time.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, int]</code> <p>The number of reports that were sent.</p> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def send_pending_attribution_reports() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, int]\n):\n    \"\"\"\n    Sends all pending Attribution Reports immediately, regardless of their\n    scheduled report time.\n\n    **EXPERIMENTAL**\n\n    :returns: The number of reports that were sent.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.sendPendingAttributionReports\",\n    }\n    json = yield cmd_dict\n    return int(json[\"numSent\"])\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.set_attribution_reporting_local_testing_mode","title":"<code>set_attribution_reporting_local_testing_mode(enabled)</code>","text":"<p>https://wicg.github.io/attribution-reporting-api/</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>If enabled, noise is suppressed and reports are sent immediately.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def set_attribution_reporting_local_testing_mode(\n    enabled: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    https://wicg.github.io/attribution-reporting-api/\n\n    **EXPERIMENTAL**\n\n    :param enabled: If enabled, noise is suppressed and reports are sent immediately.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.setAttributionReportingLocalTestingMode\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.set_attribution_reporting_tracking","title":"<code>set_attribution_reporting_tracking(enable)</code>","text":"<p>Enables/disables issuing of Attribution Reporting events.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enable</code> <code>bool</code> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def set_attribution_reporting_tracking(\n    enable: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables/disables issuing of Attribution Reporting events.\n\n    **EXPERIMENTAL**\n\n    :param enable:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enable\"] = enable\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.setAttributionReportingTracking\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.set_cookies","title":"<code>set_cookies(cookies, browser_context_id=None)</code>","text":"<p>Sets given cookies.</p> <p>Parameters:</p> Name Type Description Default <code>cookies</code> <code>List[CookieParam]</code> <p>Cookies to be set.</p> required <code>browser_context_id</code> <code>Optional[BrowserContextID]</code> <p>(Optional) Browser context to use when called on the browser endpoint.</p> <code>None</code> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def set_cookies(\n    cookies: typing.List[network.CookieParam],\n    browser_context_id: typing.Optional[browser.BrowserContextID] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets given cookies.\n\n    :param cookies: Cookies to be set.\n    :param browser_context_id: *(Optional)* Browser context to use when called on the browser endpoint.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"cookies\"] = [i.to_json() for i in cookies]\n    if browser_context_id is not None:\n        params[\"browserContextId\"] = browser_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.setCookies\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.set_interest_group_auction_tracking","title":"<code>set_interest_group_auction_tracking(enable)</code>","text":"<p>Enables/Disables issuing of interestGroupAuctionEventOccurred and interestGroupAuctionNetworkRequestCreated.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enable</code> <code>bool</code> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def set_interest_group_auction_tracking(\n    enable: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables/Disables issuing of interestGroupAuctionEventOccurred and\n    interestGroupAuctionNetworkRequestCreated.\n\n    **EXPERIMENTAL**\n\n    :param enable:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enable\"] = enable\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.setInterestGroupAuctionTracking\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.set_interest_group_tracking","title":"<code>set_interest_group_tracking(enable)</code>","text":"<p>Enables/Disables issuing of interestGroupAccessed events.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enable</code> <code>bool</code> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def set_interest_group_tracking(\n    enable: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables/Disables issuing of interestGroupAccessed events.\n\n    **EXPERIMENTAL**\n\n    :param enable:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enable\"] = enable\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.setInterestGroupTracking\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.set_shared_storage_entry","title":"<code>set_shared_storage_entry(owner_origin, key, value, ignore_if_present=None)</code>","text":"<p>Sets entry with <code>key</code> and <code>value</code> for a given origin's shared storage.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>owner_origin</code> <code>str</code> required <code>key</code> <code>str</code> required <code>value</code> <code>str</code> required <code>ignore_if_present</code> <code>Optional[bool]</code> <p>(Optional) If <code>ignoreIfPresent```` is included and true, then only sets the entry if ````key</code> doesn't already exist.</p> <code>None</code> Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def set_shared_storage_entry(\n    owner_origin: str,\n    key: str,\n    value: str,\n    ignore_if_present: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets entry with ``key`` and ``value`` for a given origin's shared storage.\n\n    **EXPERIMENTAL**\n\n    :param owner_origin:\n    :param key:\n    :param value:\n    :param ignore_if_present: *(Optional)* If ```ignoreIfPresent```` is included and true, then only sets the entry if ````key``` doesn't already exist.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"ownerOrigin\"] = owner_origin\n    params[\"key\"] = key\n    params[\"value\"] = value\n    if ignore_if_present is not None:\n        params[\"ignoreIfPresent\"] = ignore_if_present\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.setSharedStorageEntry\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.set_shared_storage_tracking","title":"<code>set_shared_storage_tracking(enable)</code>","text":"<p>Enables/disables issuing of sharedStorageAccessed events.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>enable</code> <code>bool</code> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def set_shared_storage_tracking(\n    enable: bool,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables/disables issuing of sharedStorageAccessed events.\n\n    **EXPERIMENTAL**\n\n    :param enable:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"enable\"] = enable\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.setSharedStorageTracking\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.set_storage_bucket_tracking","title":"<code>set_storage_bucket_tracking(storage_key, enable)</code>","text":"<p>Set tracking for a storage key's buckets.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>storage_key</code> <code>str</code> required <code>enable</code> <code>bool</code> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def set_storage_bucket_tracking(\n    storage_key: str, enable: bool\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Set tracking for a storage key's buckets.\n\n    **EXPERIMENTAL**\n\n    :param storage_key:\n    :param enable:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"storageKey\"] = storage_key\n    params[\"enable\"] = enable\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.setStorageBucketTracking\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.track_cache_storage_for_origin","title":"<code>track_cache_storage_for_origin(origin)</code>","text":"<p>Registers origin to be notified when an update occurs to its cache storage list.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> <p>Security origin.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def track_cache_storage_for_origin(\n    origin: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Registers origin to be notified when an update occurs to its cache storage list.\n\n    :param origin: Security origin.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.trackCacheStorageForOrigin\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.track_cache_storage_for_storage_key","title":"<code>track_cache_storage_for_storage_key(storage_key)</code>","text":"<p>Registers storage key to be notified when an update occurs to its cache storage list.</p> <p>Parameters:</p> Name Type Description Default <code>storage_key</code> <code>str</code> <p>Storage key.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def track_cache_storage_for_storage_key(\n    storage_key: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Registers storage key to be notified when an update occurs to its cache storage list.\n\n    :param storage_key: Storage key.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"storageKey\"] = storage_key\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.trackCacheStorageForStorageKey\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.track_indexed_db_for_origin","title":"<code>track_indexed_db_for_origin(origin)</code>","text":"<p>Registers origin to be notified when an update occurs to its IndexedDB.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> <p>Security origin.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def track_indexed_db_for_origin(\n    origin: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Registers origin to be notified when an update occurs to its IndexedDB.\n\n    :param origin: Security origin.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.trackIndexedDBForOrigin\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.track_indexed_db_for_storage_key","title":"<code>track_indexed_db_for_storage_key(storage_key)</code>","text":"<p>Registers storage key to be notified when an update occurs to its IndexedDB.</p> <p>Parameters:</p> Name Type Description Default <code>storage_key</code> <code>str</code> <p>Storage key.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def track_indexed_db_for_storage_key(\n    storage_key: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Registers storage key to be notified when an update occurs to its IndexedDB.\n\n    :param storage_key: Storage key.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"storageKey\"] = storage_key\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.trackIndexedDBForStorageKey\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.untrack_cache_storage_for_origin","title":"<code>untrack_cache_storage_for_origin(origin)</code>","text":"<p>Unregisters origin from receiving notifications for cache storage.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> <p>Security origin.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def untrack_cache_storage_for_origin(\n    origin: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Unregisters origin from receiving notifications for cache storage.\n\n    :param origin: Security origin.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.untrackCacheStorageForOrigin\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.untrack_cache_storage_for_storage_key","title":"<code>untrack_cache_storage_for_storage_key(storage_key)</code>","text":"<p>Unregisters storage key from receiving notifications for cache storage.</p> <p>Parameters:</p> Name Type Description Default <code>storage_key</code> <code>str</code> <p>Storage key.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def untrack_cache_storage_for_storage_key(\n    storage_key: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Unregisters storage key from receiving notifications for cache storage.\n\n    :param storage_key: Storage key.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"storageKey\"] = storage_key\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.untrackCacheStorageForStorageKey\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.untrack_indexed_db_for_origin","title":"<code>untrack_indexed_db_for_origin(origin)</code>","text":"<p>Unregisters origin from receiving notifications for IndexedDB.</p> <p>Parameters:</p> Name Type Description Default <code>origin</code> <code>str</code> <p>Security origin.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def untrack_indexed_db_for_origin(\n    origin: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Unregisters origin from receiving notifications for IndexedDB.\n\n    :param origin: Security origin.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"origin\"] = origin\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.untrackIndexedDBForOrigin\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/storage/#zendriver.cdp.storage.untrack_indexed_db_for_storage_key","title":"<code>untrack_indexed_db_for_storage_key(storage_key)</code>","text":"<p>Unregisters storage key from receiving notifications for IndexedDB.</p> <p>Parameters:</p> Name Type Description Default <code>storage_key</code> <code>str</code> <p>Storage key.</p> required Source code in <code>zendriver/cdp/storage.py</code> <pre><code>def untrack_indexed_db_for_storage_key(\n    storage_key: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Unregisters storage key from receiving notifications for IndexedDB.\n\n    :param storage_key: Storage key.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"storageKey\"] = storage_key\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Storage.untrackIndexedDBForStorageKey\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/system_info/","title":"system_info","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice","title":"<code>GPUDevice</code>  <code>dataclass</code>","text":"<p>Describes a single graphics processor (GPU).</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@dataclass\nclass GPUDevice:\n    \"\"\"\n    Describes a single graphics processor (GPU).\n    \"\"\"\n\n    #: PCI ID of the GPU vendor, if available; 0 otherwise.\n    vendor_id: float\n\n    #: PCI ID of the GPU device, if available; 0 otherwise.\n    device_id: float\n\n    #: String description of the GPU vendor, if the PCI ID is not available.\n    vendor_string: str\n\n    #: String description of the GPU device, if the PCI ID is not available.\n    device_string: str\n\n    #: String description of the GPU driver vendor.\n    driver_vendor: str\n\n    #: String description of the GPU driver version.\n    driver_version: str\n\n    #: Sub sys ID of the GPU, only available on Windows.\n    sub_sys_id: typing.Optional[float] = None\n\n    #: Revision of the GPU, only available on Windows.\n    revision: typing.Optional[float] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"vendorId\"] = self.vendor_id\n        json[\"deviceId\"] = self.device_id\n        json[\"vendorString\"] = self.vendor_string\n        json[\"deviceString\"] = self.device_string\n        json[\"driverVendor\"] = self.driver_vendor\n        json[\"driverVersion\"] = self.driver_version\n        if self.sub_sys_id is not None:\n            json[\"subSysId\"] = self.sub_sys_id\n        if self.revision is not None:\n            json[\"revision\"] = self.revision\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; GPUDevice:\n        return cls(\n            vendor_id=float(json[\"vendorId\"]),\n            device_id=float(json[\"deviceId\"]),\n            vendor_string=str(json[\"vendorString\"]),\n            device_string=str(json[\"deviceString\"]),\n            driver_vendor=str(json[\"driverVendor\"]),\n            driver_version=str(json[\"driverVersion\"]),\n            sub_sys_id=(\n                float(json[\"subSysId\"])\n                if json.get(\"subSysId\", None) is not None\n                else None\n            ),\n            revision=(\n                float(json[\"revision\"])\n                if json.get(\"revision\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.device_id","title":"<code>device_id: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.device_string","title":"<code>device_string: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.driver_vendor","title":"<code>driver_vendor: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.driver_version","title":"<code>driver_version: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.revision","title":"<code>revision: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.sub_sys_id","title":"<code>sub_sys_id: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.vendor_id","title":"<code>vendor_id: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.vendor_string","title":"<code>vendor_string: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.__init__","title":"<code>__init__(vendor_id, device_id, vendor_string, device_string, driver_vendor, driver_version, sub_sys_id=None, revision=None)</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; GPUDevice:\n    return cls(\n        vendor_id=float(json[\"vendorId\"]),\n        device_id=float(json[\"deviceId\"]),\n        vendor_string=str(json[\"vendorString\"]),\n        device_string=str(json[\"deviceString\"]),\n        driver_vendor=str(json[\"driverVendor\"]),\n        driver_version=str(json[\"driverVersion\"]),\n        sub_sys_id=(\n            float(json[\"subSysId\"])\n            if json.get(\"subSysId\", None) is not None\n            else None\n        ),\n        revision=(\n            float(json[\"revision\"])\n            if json.get(\"revision\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUDevice.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"vendorId\"] = self.vendor_id\n    json[\"deviceId\"] = self.device_id\n    json[\"vendorString\"] = self.vendor_string\n    json[\"deviceString\"] = self.device_string\n    json[\"driverVendor\"] = self.driver_vendor\n    json[\"driverVersion\"] = self.driver_version\n    if self.sub_sys_id is not None:\n        json[\"subSysId\"] = self.sub_sys_id\n    if self.revision is not None:\n        json[\"revision\"] = self.revision\n    return json\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo","title":"<code>GPUInfo</code>  <code>dataclass</code>","text":"<p>Provides information about the GPU(s) on the system.</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@dataclass\nclass GPUInfo:\n    \"\"\"\n    Provides information about the GPU(s) on the system.\n    \"\"\"\n\n    #: The graphics devices on the system. Element 0 is the primary GPU.\n    devices: typing.List[GPUDevice]\n\n    #: An optional array of GPU driver bug workarounds.\n    driver_bug_workarounds: typing.List[str]\n\n    #: Supported accelerated video decoding capabilities.\n    video_decoding: typing.List[VideoDecodeAcceleratorCapability]\n\n    #: Supported accelerated video encoding capabilities.\n    video_encoding: typing.List[VideoEncodeAcceleratorCapability]\n\n    #: Supported accelerated image decoding capabilities.\n    image_decoding: typing.List[ImageDecodeAcceleratorCapability]\n\n    #: An optional dictionary of additional GPU related attributes.\n    aux_attributes: typing.Optional[dict] = None\n\n    #: An optional dictionary of graphics features and their status.\n    feature_status: typing.Optional[dict] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"devices\"] = [i.to_json() for i in self.devices]\n        json[\"driverBugWorkarounds\"] = [i for i in self.driver_bug_workarounds]\n        json[\"videoDecoding\"] = [i.to_json() for i in self.video_decoding]\n        json[\"videoEncoding\"] = [i.to_json() for i in self.video_encoding]\n        json[\"imageDecoding\"] = [i.to_json() for i in self.image_decoding]\n        if self.aux_attributes is not None:\n            json[\"auxAttributes\"] = self.aux_attributes\n        if self.feature_status is not None:\n            json[\"featureStatus\"] = self.feature_status\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; GPUInfo:\n        return cls(\n            devices=[GPUDevice.from_json(i) for i in json[\"devices\"]],\n            driver_bug_workarounds=[str(i) for i in json[\"driverBugWorkarounds\"]],\n            video_decoding=[\n                VideoDecodeAcceleratorCapability.from_json(i)\n                for i in json[\"videoDecoding\"]\n            ],\n            video_encoding=[\n                VideoEncodeAcceleratorCapability.from_json(i)\n                for i in json[\"videoEncoding\"]\n            ],\n            image_decoding=[\n                ImageDecodeAcceleratorCapability.from_json(i)\n                for i in json[\"imageDecoding\"]\n            ],\n            aux_attributes=(\n                dict(json[\"auxAttributes\"])\n                if json.get(\"auxAttributes\", None) is not None\n                else None\n            ),\n            feature_status=(\n                dict(json[\"featureStatus\"])\n                if json.get(\"featureStatus\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo.aux_attributes","title":"<code>aux_attributes: typing.Optional[dict] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo.devices","title":"<code>devices: typing.List[GPUDevice]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo.driver_bug_workarounds","title":"<code>driver_bug_workarounds: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo.feature_status","title":"<code>feature_status: typing.Optional[dict] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo.image_decoding","title":"<code>image_decoding: typing.List[ImageDecodeAcceleratorCapability]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo.video_decoding","title":"<code>video_decoding: typing.List[VideoDecodeAcceleratorCapability]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo.video_encoding","title":"<code>video_encoding: typing.List[VideoEncodeAcceleratorCapability]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo.__init__","title":"<code>__init__(devices, driver_bug_workarounds, video_decoding, video_encoding, image_decoding, aux_attributes=None, feature_status=None)</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; GPUInfo:\n    return cls(\n        devices=[GPUDevice.from_json(i) for i in json[\"devices\"]],\n        driver_bug_workarounds=[str(i) for i in json[\"driverBugWorkarounds\"]],\n        video_decoding=[\n            VideoDecodeAcceleratorCapability.from_json(i)\n            for i in json[\"videoDecoding\"]\n        ],\n        video_encoding=[\n            VideoEncodeAcceleratorCapability.from_json(i)\n            for i in json[\"videoEncoding\"]\n        ],\n        image_decoding=[\n            ImageDecodeAcceleratorCapability.from_json(i)\n            for i in json[\"imageDecoding\"]\n        ],\n        aux_attributes=(\n            dict(json[\"auxAttributes\"])\n            if json.get(\"auxAttributes\", None) is not None\n            else None\n        ),\n        feature_status=(\n            dict(json[\"featureStatus\"])\n            if json.get(\"featureStatus\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.GPUInfo.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"devices\"] = [i.to_json() for i in self.devices]\n    json[\"driverBugWorkarounds\"] = [i for i in self.driver_bug_workarounds]\n    json[\"videoDecoding\"] = [i.to_json() for i in self.video_decoding]\n    json[\"videoEncoding\"] = [i.to_json() for i in self.video_encoding]\n    json[\"imageDecoding\"] = [i.to_json() for i in self.image_decoding]\n    if self.aux_attributes is not None:\n        json[\"auxAttributes\"] = self.aux_attributes\n    if self.feature_status is not None:\n        json[\"featureStatus\"] = self.feature_status\n    return json\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageDecodeAcceleratorCapability","title":"<code>ImageDecodeAcceleratorCapability</code>  <code>dataclass</code>","text":"<p>Describes a supported image decoding profile with its associated minimum and maximum resolutions and subsampling.</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@dataclass\nclass ImageDecodeAcceleratorCapability:\n    \"\"\"\n    Describes a supported image decoding profile with its associated minimum and\n    maximum resolutions and subsampling.\n    \"\"\"\n\n    #: Image coded, e.g. Jpeg.\n    image_type: ImageType\n\n    #: Maximum supported dimensions of the image in pixels.\n    max_dimensions: Size\n\n    #: Minimum supported dimensions of the image in pixels.\n    min_dimensions: Size\n\n    #: Optional array of supported subsampling formats, e.g. 4:2:0, if known.\n    subsamplings: typing.List[SubsamplingFormat]\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"imageType\"] = self.image_type.to_json()\n        json[\"maxDimensions\"] = self.max_dimensions.to_json()\n        json[\"minDimensions\"] = self.min_dimensions.to_json()\n        json[\"subsamplings\"] = [i.to_json() for i in self.subsamplings]\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ImageDecodeAcceleratorCapability:\n        return cls(\n            image_type=ImageType.from_json(json[\"imageType\"]),\n            max_dimensions=Size.from_json(json[\"maxDimensions\"]),\n            min_dimensions=Size.from_json(json[\"minDimensions\"]),\n            subsamplings=[SubsamplingFormat.from_json(i) for i in json[\"subsamplings\"]],\n        )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageDecodeAcceleratorCapability.image_type","title":"<code>image_type: ImageType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageDecodeAcceleratorCapability.max_dimensions","title":"<code>max_dimensions: Size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageDecodeAcceleratorCapability.min_dimensions","title":"<code>min_dimensions: Size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageDecodeAcceleratorCapability.subsamplings","title":"<code>subsamplings: typing.List[SubsamplingFormat]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageDecodeAcceleratorCapability.__init__","title":"<code>__init__(image_type, max_dimensions, min_dimensions, subsamplings)</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageDecodeAcceleratorCapability.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ImageDecodeAcceleratorCapability:\n    return cls(\n        image_type=ImageType.from_json(json[\"imageType\"]),\n        max_dimensions=Size.from_json(json[\"maxDimensions\"]),\n        min_dimensions=Size.from_json(json[\"minDimensions\"]),\n        subsamplings=[SubsamplingFormat.from_json(i) for i in json[\"subsamplings\"]],\n    )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageDecodeAcceleratorCapability.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"imageType\"] = self.image_type.to_json()\n    json[\"maxDimensions\"] = self.max_dimensions.to_json()\n    json[\"minDimensions\"] = self.min_dimensions.to_json()\n    json[\"subsamplings\"] = [i.to_json() for i in self.subsamplings]\n    return json\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageType","title":"<code>ImageType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Image format of a given image.</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>class ImageType(enum.Enum):\n    \"\"\"\n    Image format of a given image.\n    \"\"\"\n\n    JPEG = \"jpeg\"\n    WEBP = \"webp\"\n    UNKNOWN = \"unknown\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ImageType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageType.JPEG","title":"<code>JPEG = 'jpeg'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageType.UNKNOWN","title":"<code>UNKNOWN = 'unknown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageType.WEBP","title":"<code>WEBP = 'webp'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ImageType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ImageType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ProcessInfo","title":"<code>ProcessInfo</code>  <code>dataclass</code>","text":"<p>Represents process info.</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@dataclass\nclass ProcessInfo:\n    \"\"\"\n    Represents process info.\n    \"\"\"\n\n    #: Specifies process type.\n    type_: str\n\n    #: Specifies process id.\n    id_: int\n\n    #: Specifies cumulative CPU usage in seconds across all threads of the\n    #: process since the process start.\n    cpu_time: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"type\"] = self.type_\n        json[\"id\"] = self.id_\n        json[\"cpuTime\"] = self.cpu_time\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ProcessInfo:\n        return cls(\n            type_=str(json[\"type\"]),\n            id_=int(json[\"id\"]),\n            cpu_time=float(json[\"cpuTime\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ProcessInfo.cpu_time","title":"<code>cpu_time: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ProcessInfo.id_","title":"<code>id_: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ProcessInfo.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ProcessInfo.__init__","title":"<code>__init__(type_, id_, cpu_time)</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ProcessInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ProcessInfo:\n    return cls(\n        type_=str(json[\"type\"]),\n        id_=int(json[\"id\"]),\n        cpu_time=float(json[\"cpuTime\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.ProcessInfo.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"type\"] = self.type_\n    json[\"id\"] = self.id_\n    json[\"cpuTime\"] = self.cpu_time\n    return json\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.Size","title":"<code>Size</code>  <code>dataclass</code>","text":"<p>Describes the width and height dimensions of an entity.</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@dataclass\nclass Size:\n    \"\"\"\n    Describes the width and height dimensions of an entity.\n    \"\"\"\n\n    #: Width in pixels.\n    width: int\n\n    #: Height in pixels.\n    height: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"width\"] = self.width\n        json[\"height\"] = self.height\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Size:\n        return cls(\n            width=int(json[\"width\"]),\n            height=int(json[\"height\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.Size.height","title":"<code>height: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.Size.width","title":"<code>width: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.Size.__init__","title":"<code>__init__(width, height)</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.Size.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Size:\n    return cls(\n        width=int(json[\"width\"]),\n        height=int(json[\"height\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.Size.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"width\"] = self.width\n    json[\"height\"] = self.height\n    return json\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.SubsamplingFormat","title":"<code>SubsamplingFormat</code>","text":"<p>               Bases: <code>Enum</code></p> <p>YUV subsampling type of the pixels of a given image.</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>class SubsamplingFormat(enum.Enum):\n    \"\"\"\n    YUV subsampling type of the pixels of a given image.\n    \"\"\"\n\n    YUV420 = \"yuv420\"\n    YUV422 = \"yuv422\"\n    YUV444 = \"yuv444\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SubsamplingFormat:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.SubsamplingFormat.YUV420","title":"<code>YUV420 = 'yuv420'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.SubsamplingFormat.YUV422","title":"<code>YUV422 = 'yuv422'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.SubsamplingFormat.YUV444","title":"<code>YUV444 = 'yuv444'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.SubsamplingFormat.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SubsamplingFormat:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.SubsamplingFormat.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoDecodeAcceleratorCapability","title":"<code>VideoDecodeAcceleratorCapability</code>  <code>dataclass</code>","text":"<p>Describes a supported video decoding profile with its associated minimum and maximum resolutions.</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@dataclass\nclass VideoDecodeAcceleratorCapability:\n    \"\"\"\n    Describes a supported video decoding profile with its associated minimum and\n    maximum resolutions.\n    \"\"\"\n\n    #: Video codec profile that is supported, e.g. VP9 Profile 2.\n    profile: str\n\n    #: Maximum video dimensions in pixels supported for this ``profile``.\n    max_resolution: Size\n\n    #: Minimum video dimensions in pixels supported for this ``profile``.\n    min_resolution: Size\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"profile\"] = self.profile\n        json[\"maxResolution\"] = self.max_resolution.to_json()\n        json[\"minResolution\"] = self.min_resolution.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; VideoDecodeAcceleratorCapability:\n        return cls(\n            profile=str(json[\"profile\"]),\n            max_resolution=Size.from_json(json[\"maxResolution\"]),\n            min_resolution=Size.from_json(json[\"minResolution\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoDecodeAcceleratorCapability.max_resolution","title":"<code>max_resolution: Size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoDecodeAcceleratorCapability.min_resolution","title":"<code>min_resolution: Size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoDecodeAcceleratorCapability.profile","title":"<code>profile: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoDecodeAcceleratorCapability.__init__","title":"<code>__init__(profile, max_resolution, min_resolution)</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoDecodeAcceleratorCapability.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; VideoDecodeAcceleratorCapability:\n    return cls(\n        profile=str(json[\"profile\"]),\n        max_resolution=Size.from_json(json[\"maxResolution\"]),\n        min_resolution=Size.from_json(json[\"minResolution\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoDecodeAcceleratorCapability.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"profile\"] = self.profile\n    json[\"maxResolution\"] = self.max_resolution.to_json()\n    json[\"minResolution\"] = self.min_resolution.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoEncodeAcceleratorCapability","title":"<code>VideoEncodeAcceleratorCapability</code>  <code>dataclass</code>","text":"<p>Describes a supported video encoding profile with its associated maximum resolution and maximum framerate.</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@dataclass\nclass VideoEncodeAcceleratorCapability:\n    \"\"\"\n    Describes a supported video encoding profile with its associated maximum\n    resolution and maximum framerate.\n    \"\"\"\n\n    #: Video codec profile that is supported, e.g H264 Main.\n    profile: str\n\n    #: Maximum video dimensions in pixels supported for this ``profile``.\n    max_resolution: Size\n\n    #: Maximum encoding framerate in frames per second supported for this\n    #: ``profile``, as fraction's numerator and denominator, e.g. 24/1 fps,\n    #: 24000/1001 fps, etc.\n    max_framerate_numerator: int\n\n    max_framerate_denominator: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"profile\"] = self.profile\n        json[\"maxResolution\"] = self.max_resolution.to_json()\n        json[\"maxFramerateNumerator\"] = self.max_framerate_numerator\n        json[\"maxFramerateDenominator\"] = self.max_framerate_denominator\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; VideoEncodeAcceleratorCapability:\n        return cls(\n            profile=str(json[\"profile\"]),\n            max_resolution=Size.from_json(json[\"maxResolution\"]),\n            max_framerate_numerator=int(json[\"maxFramerateNumerator\"]),\n            max_framerate_denominator=int(json[\"maxFramerateDenominator\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoEncodeAcceleratorCapability.max_framerate_denominator","title":"<code>max_framerate_denominator: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoEncodeAcceleratorCapability.max_framerate_numerator","title":"<code>max_framerate_numerator: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoEncodeAcceleratorCapability.max_resolution","title":"<code>max_resolution: Size</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoEncodeAcceleratorCapability.profile","title":"<code>profile: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoEncodeAcceleratorCapability.__init__","title":"<code>__init__(profile, max_resolution, max_framerate_numerator, max_framerate_denominator)</code>","text":""},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoEncodeAcceleratorCapability.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; VideoEncodeAcceleratorCapability:\n    return cls(\n        profile=str(json[\"profile\"]),\n        max_resolution=Size.from_json(json[\"maxResolution\"]),\n        max_framerate_numerator=int(json[\"maxFramerateNumerator\"]),\n        max_framerate_denominator=int(json[\"maxFramerateDenominator\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.VideoEncodeAcceleratorCapability.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"profile\"] = self.profile\n    json[\"maxResolution\"] = self.max_resolution.to_json()\n    json[\"maxFramerateNumerator\"] = self.max_framerate_numerator\n    json[\"maxFramerateDenominator\"] = self.max_framerate_denominator\n    return json\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.get_feature_state","title":"<code>get_feature_state(feature_state)</code>","text":"<p>Returns information about the feature state.</p> <p>Parameters:</p> Name Type Description Default <code>feature_state</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, bool]</code> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def get_feature_state(\n    feature_state: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]:\n    \"\"\"\n    Returns information about the feature state.\n\n    :param feature_state:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"featureState\"] = feature_state\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"SystemInfo.getFeatureState\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return bool(json[\"featureEnabled\"])\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.get_info","title":"<code>get_info()</code>","text":"<p>Returns information about the system.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[GPUInfo, str, str, str]]</code> <p>A tuple with the following items:  0. gpu - Information about the GPUs on the system. 1. modelName - A platform-dependent description of the model of the machine. On Mac OS, this is, for example, 'MacBookPro'. Will be the empty string if not supported. 2. modelVersion - A platform-dependent description of the version of the machine. On Mac OS, this is, for example, '10.1'. Will be the empty string if not supported. 3. commandLine - The command line string used to launch the browser. Will be the empty string if not supported.</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def get_info() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[GPUInfo, str, str, str]]\n):\n    \"\"\"\n    Returns information about the system.\n\n    :returns: A tuple with the following items:\n\n        0. **gpu** - Information about the GPUs on the system.\n        1. **modelName** - A platform-dependent description of the model of the machine. On Mac OS, this is, for example, 'MacBookPro'. Will be the empty string if not supported.\n        2. **modelVersion** - A platform-dependent description of the version of the machine. On Mac OS, this is, for example, '10.1'. Will be the empty string if not supported.\n        3. **commandLine** - The command line string used to launch the browser. Will be the empty string if not supported.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"SystemInfo.getInfo\",\n    }\n    json = yield cmd_dict\n    return (\n        GPUInfo.from_json(json[\"gpu\"]),\n        str(json[\"modelName\"]),\n        str(json[\"modelVersion\"]),\n        str(json[\"commandLine\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/system_info/#zendriver.cdp.system_info.get_process_info","title":"<code>get_process_info()</code>","text":"<p>Returns information about all running processes.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[ProcessInfo]]</code> <p>An array of process info blocks.</p> Source code in <code>zendriver/cdp/system_info.py</code> <pre><code>def get_process_info() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[ProcessInfo]]\n):\n    \"\"\"\n    Returns information about all running processes.\n\n    :returns: An array of process info blocks.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"SystemInfo.getProcessInfo\",\n    }\n    json = yield cmd_dict\n    return [ProcessInfo.from_json(i) for i in json[\"processInfo\"]]\n</code></pre>"},{"location":"reference/cdp/target/","title":"target","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.AttachedToTarget","title":"<code>AttachedToTarget</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Issued when attached to target because of auto-attach or <code>attachToTarget</code> command.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>@event_class(\"Target.attachedToTarget\")\n@dataclass\nclass AttachedToTarget:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Issued when attached to target because of auto-attach or ``attachToTarget`` command.\n    \"\"\"\n\n    #: Identifier assigned to the session used to send/receive messages.\n    session_id: SessionID\n    target_info: TargetInfo\n    waiting_for_debugger: bool\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AttachedToTarget:\n        return cls(\n            session_id=SessionID.from_json(json[\"sessionId\"]),\n            target_info=TargetInfo.from_json(json[\"targetInfo\"]),\n            waiting_for_debugger=bool(json[\"waitingForDebugger\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.AttachedToTarget.session_id","title":"<code>session_id: SessionID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.AttachedToTarget.target_info","title":"<code>target_info: TargetInfo</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.AttachedToTarget.waiting_for_debugger","title":"<code>waiting_for_debugger: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.AttachedToTarget.__init__","title":"<code>__init__(session_id, target_info, waiting_for_debugger)</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.AttachedToTarget.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AttachedToTarget:\n    return cls(\n        session_id=SessionID.from_json(json[\"sessionId\"]),\n        target_info=TargetInfo.from_json(json[\"targetInfo\"]),\n        waiting_for_debugger=bool(json[\"waitingForDebugger\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.DetachedFromTarget","title":"<code>DetachedFromTarget</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Issued when detached from target for any reason (including <code>detachFromTarget</code> command). Can be issued multiple times per target if multiple sessions have been attached to it.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>@event_class(\"Target.detachedFromTarget\")\n@dataclass\nclass DetachedFromTarget:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Issued when detached from target for any reason (including ``detachFromTarget`` command). Can be\n    issued multiple times per target if multiple sessions have been attached to it.\n    \"\"\"\n\n    #: Detached session identifier.\n    session_id: SessionID\n    #: Deprecated.\n    target_id: typing.Optional[TargetID]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DetachedFromTarget:\n        return cls(\n            session_id=SessionID.from_json(json[\"sessionId\"]),\n            target_id=(\n                TargetID.from_json(json[\"targetId\"])\n                if json.get(\"targetId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.DetachedFromTarget.session_id","title":"<code>session_id: SessionID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.DetachedFromTarget.target_id","title":"<code>target_id: typing.Optional[TargetID]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.DetachedFromTarget.__init__","title":"<code>__init__(session_id, target_id)</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.DetachedFromTarget.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DetachedFromTarget:\n    return cls(\n        session_id=SessionID.from_json(json[\"sessionId\"]),\n        target_id=(\n            TargetID.from_json(json[\"targetId\"])\n            if json.get(\"targetId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.FilterEntry","title":"<code>FilterEntry</code>  <code>dataclass</code>","text":"<p>A filter used by target query/discovery/auto-attach operations.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>@dataclass\nclass FilterEntry:\n    \"\"\"\n    A filter used by target query/discovery/auto-attach operations.\n    \"\"\"\n\n    #: If set, causes exclusion of matching targets from the list.\n    exclude: typing.Optional[bool] = None\n\n    #: If not present, matches any type.\n    type_: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.exclude is not None:\n            json[\"exclude\"] = self.exclude\n        if self.type_ is not None:\n            json[\"type\"] = self.type_\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; FilterEntry:\n        return cls(\n            exclude=(\n                bool(json[\"exclude\"]) if json.get(\"exclude\", None) is not None else None\n            ),\n            type_=str(json[\"type\"]) if json.get(\"type\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.FilterEntry.exclude","title":"<code>exclude: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.FilterEntry.type_","title":"<code>type_: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.FilterEntry.__init__","title":"<code>__init__(exclude=None, type_=None)</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.FilterEntry.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; FilterEntry:\n    return cls(\n        exclude=(\n            bool(json[\"exclude\"]) if json.get(\"exclude\", None) is not None else None\n        ),\n        type_=str(json[\"type\"]) if json.get(\"type\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.FilterEntry.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.exclude is not None:\n        json[\"exclude\"] = self.exclude\n    if self.type_ is not None:\n        json[\"type\"] = self.type_\n    return json\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.ReceivedMessageFromTarget","title":"<code>ReceivedMessageFromTarget</code>  <code>dataclass</code>","text":"<p>Notifies about a new protocol message received from the session (as reported in <code>attachedToTarget</code> event).</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>@event_class(\"Target.receivedMessageFromTarget\")\n@dataclass\nclass ReceivedMessageFromTarget:\n    \"\"\"\n    Notifies about a new protocol message received from the session (as reported in\n    ``attachedToTarget`` event).\n    \"\"\"\n\n    #: Identifier of a session which sends a message.\n    session_id: SessionID\n    message: str\n    #: Deprecated.\n    target_id: typing.Optional[TargetID]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ReceivedMessageFromTarget:\n        return cls(\n            session_id=SessionID.from_json(json[\"sessionId\"]),\n            message=str(json[\"message\"]),\n            target_id=(\n                TargetID.from_json(json[\"targetId\"])\n                if json.get(\"targetId\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.ReceivedMessageFromTarget.message","title":"<code>message: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.ReceivedMessageFromTarget.session_id","title":"<code>session_id: SessionID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.ReceivedMessageFromTarget.target_id","title":"<code>target_id: typing.Optional[TargetID]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.ReceivedMessageFromTarget.__init__","title":"<code>__init__(session_id, message, target_id)</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.ReceivedMessageFromTarget.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ReceivedMessageFromTarget:\n    return cls(\n        session_id=SessionID.from_json(json[\"sessionId\"]),\n        message=str(json[\"message\"]),\n        target_id=(\n            TargetID.from_json(json[\"targetId\"])\n            if json.get(\"targetId\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.RemoteLocation","title":"<code>RemoteLocation</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@dataclass\nclass RemoteLocation:\n    host: str\n\n    port: int\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"host\"] = self.host\n        json[\"port\"] = self.port\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; RemoteLocation:\n        return cls(\n            host=str(json[\"host\"]),\n            port=int(json[\"port\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.RemoteLocation.host","title":"<code>host: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.RemoteLocation.port","title":"<code>port: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.RemoteLocation.__init__","title":"<code>__init__(host, port)</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.RemoteLocation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; RemoteLocation:\n    return cls(\n        host=str(json[\"host\"]),\n        port=int(json[\"port\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.RemoteLocation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"host\"] = self.host\n    json[\"port\"] = self.port\n    return json\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.SessionID","title":"<code>SessionID</code>","text":"<p>               Bases: <code>str</code></p> <p>Unique identifier of attached debugging session.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>class SessionID(str):\n    \"\"\"\n    Unique identifier of attached debugging session.\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; SessionID:\n        return cls(json)\n\n    def __repr__(self):\n        return \"SessionID({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.SessionID.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>def __repr__(self):\n    return \"SessionID({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.SessionID.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; SessionID:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.SessionID.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetCrashed","title":"<code>TargetCrashed</code>  <code>dataclass</code>","text":"<p>Issued when a target has crashed.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>@event_class(\"Target.targetCrashed\")\n@dataclass\nclass TargetCrashed:\n    \"\"\"\n    Issued when a target has crashed.\n    \"\"\"\n\n    target_id: TargetID\n    #: Termination status type.\n    status: str\n    #: Termination error code.\n    error_code: int\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TargetCrashed:\n        return cls(\n            target_id=TargetID.from_json(json[\"targetId\"]),\n            status=str(json[\"status\"]),\n            error_code=int(json[\"errorCode\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetCrashed.error_code","title":"<code>error_code: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetCrashed.status","title":"<code>status: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetCrashed.target_id","title":"<code>target_id: TargetID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetCrashed.__init__","title":"<code>__init__(target_id, status, error_code)</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetCrashed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TargetCrashed:\n    return cls(\n        target_id=TargetID.from_json(json[\"targetId\"]),\n        status=str(json[\"status\"]),\n        error_code=int(json[\"errorCode\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetCreated","title":"<code>TargetCreated</code>  <code>dataclass</code>","text":"<p>Issued when a possible inspection target is created.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>@event_class(\"Target.targetCreated\")\n@dataclass\nclass TargetCreated:\n    \"\"\"\n    Issued when a possible inspection target is created.\n    \"\"\"\n\n    target_info: TargetInfo\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TargetCreated:\n        return cls(target_info=TargetInfo.from_json(json[\"targetInfo\"]))\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetCreated.target_info","title":"<code>target_info: TargetInfo</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetCreated.__init__","title":"<code>__init__(target_info)</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TargetCreated:\n    return cls(target_info=TargetInfo.from_json(json[\"targetInfo\"]))\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetDestroyed","title":"<code>TargetDestroyed</code>  <code>dataclass</code>","text":"<p>Issued when a target is destroyed.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>@event_class(\"Target.targetDestroyed\")\n@dataclass\nclass TargetDestroyed:\n    \"\"\"\n    Issued when a target is destroyed.\n    \"\"\"\n\n    target_id: TargetID\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TargetDestroyed:\n        return cls(target_id=TargetID.from_json(json[\"targetId\"]))\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetDestroyed.target_id","title":"<code>target_id: TargetID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetDestroyed.__init__","title":"<code>__init__(target_id)</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetDestroyed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TargetDestroyed:\n    return cls(target_id=TargetID.from_json(json[\"targetId\"]))\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetFilter","title":"<code>TargetFilter</code>","text":"<p>               Bases: <code>list</code></p> <p>The entries in TargetFilter are matched sequentially against targets and the first entry that matches determines if the target is included or not, depending on the value of <code>exclude</code> field in the entry. If filter is not specified, the one assumed is [{type: \"browser\", exclude: true}, {type: \"tab\", exclude: true}, {}] (i.e. include everything but <code>browser</code> and <code>tab</code>).</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>class TargetFilter(list):\n    \"\"\"\n    The entries in TargetFilter are matched sequentially against targets and\n    the first entry that matches determines if the target is included or not,\n    depending on the value of ``exclude`` field in the entry.\n    If filter is not specified, the one assumed is\n    [{type: \"browser\", exclude: true}, {type: \"tab\", exclude: true}, {}]\n    (i.e. include everything but ``browser`` and ``tab``).\n    \"\"\"\n\n    def to_json(self) -&gt; typing.List[FilterEntry]:\n        return self\n\n    @classmethod\n    def from_json(cls, json: typing.List[FilterEntry]) -&gt; TargetFilter:\n        return cls(json)\n\n    def __repr__(self):\n        return \"TargetFilter({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetFilter.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>def __repr__(self):\n    return \"TargetFilter({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetFilter.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: typing.List[FilterEntry]) -&gt; TargetFilter:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetFilter.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>def to_json(self) -&gt; typing.List[FilterEntry]:\n    return self\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetID","title":"<code>TargetID</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>class TargetID(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; TargetID:\n        return cls(json)\n\n    def __repr__(self):\n        return \"TargetID({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetID.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>def __repr__(self):\n    return \"TargetID({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetID.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; TargetID:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetID.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo","title":"<code>TargetInfo</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@dataclass\nclass TargetInfo:\n    target_id: TargetID\n\n    #: List of types: https://source.chromium.org/chromium/chromium/src/+/main:content/browser/devtools/devtools_agent_host_impl.cc?ss=chromium&amp;q=f:devtools%20-f:out%20%22::kTypeTab%5B%5D%22\n    type_: str\n\n    title: str\n\n    url: str\n\n    #: Whether the target has an attached client.\n    attached: bool\n\n    #: Whether the target has access to the originating window.\n    can_access_opener: bool\n\n    #: Opener target Id\n    opener_id: typing.Optional[TargetID] = None\n\n    #: Frame id of originating window (is only set if target has an opener).\n    opener_frame_id: typing.Optional[page.FrameId] = None\n\n    browser_context_id: typing.Optional[browser.BrowserContextID] = None\n\n    #: Provides additional details for specific target types. For example, for\n    #: the type of \"page\", this may be set to \"portal\" or \"prerender\".\n    subtype: typing.Optional[str] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"targetId\"] = self.target_id.to_json()\n        json[\"type\"] = self.type_\n        json[\"title\"] = self.title\n        json[\"url\"] = self.url\n        json[\"attached\"] = self.attached\n        json[\"canAccessOpener\"] = self.can_access_opener\n        if self.opener_id is not None:\n            json[\"openerId\"] = self.opener_id.to_json()\n        if self.opener_frame_id is not None:\n            json[\"openerFrameId\"] = self.opener_frame_id.to_json()\n        if self.browser_context_id is not None:\n            json[\"browserContextId\"] = self.browser_context_id.to_json()\n        if self.subtype is not None:\n            json[\"subtype\"] = self.subtype\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TargetInfo:\n        return cls(\n            target_id=TargetID.from_json(json[\"targetId\"]),\n            type_=str(json[\"type\"]),\n            title=str(json[\"title\"]),\n            url=str(json[\"url\"]),\n            attached=bool(json[\"attached\"]),\n            can_access_opener=bool(json[\"canAccessOpener\"]),\n            opener_id=(\n                TargetID.from_json(json[\"openerId\"])\n                if json.get(\"openerId\", None) is not None\n                else None\n            ),\n            opener_frame_id=(\n                page.FrameId.from_json(json[\"openerFrameId\"])\n                if json.get(\"openerFrameId\", None) is not None\n                else None\n            ),\n            browser_context_id=(\n                browser.BrowserContextID.from_json(json[\"browserContextId\"])\n                if json.get(\"browserContextId\", None) is not None\n                else None\n            ),\n            subtype=(\n                str(json[\"subtype\"]) if json.get(\"subtype\", None) is not None else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.attached","title":"<code>attached: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.browser_context_id","title":"<code>browser_context_id: typing.Optional[browser.BrowserContextID] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.can_access_opener","title":"<code>can_access_opener: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.opener_frame_id","title":"<code>opener_frame_id: typing.Optional[page.FrameId] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.opener_id","title":"<code>opener_id: typing.Optional[TargetID] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.subtype","title":"<code>subtype: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.target_id","title":"<code>target_id: TargetID</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.title","title":"<code>title: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.type_","title":"<code>type_: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.url","title":"<code>url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.__init__","title":"<code>__init__(target_id, type_, title, url, attached, can_access_opener, opener_id=None, opener_frame_id=None, browser_context_id=None, subtype=None)</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TargetInfo:\n    return cls(\n        target_id=TargetID.from_json(json[\"targetId\"]),\n        type_=str(json[\"type\"]),\n        title=str(json[\"title\"]),\n        url=str(json[\"url\"]),\n        attached=bool(json[\"attached\"]),\n        can_access_opener=bool(json[\"canAccessOpener\"]),\n        opener_id=(\n            TargetID.from_json(json[\"openerId\"])\n            if json.get(\"openerId\", None) is not None\n            else None\n        ),\n        opener_frame_id=(\n            page.FrameId.from_json(json[\"openerFrameId\"])\n            if json.get(\"openerFrameId\", None) is not None\n            else None\n        ),\n        browser_context_id=(\n            browser.BrowserContextID.from_json(json[\"browserContextId\"])\n            if json.get(\"browserContextId\", None) is not None\n            else None\n        ),\n        subtype=(\n            str(json[\"subtype\"]) if json.get(\"subtype\", None) is not None else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfo.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"targetId\"] = self.target_id.to_json()\n    json[\"type\"] = self.type_\n    json[\"title\"] = self.title\n    json[\"url\"] = self.url\n    json[\"attached\"] = self.attached\n    json[\"canAccessOpener\"] = self.can_access_opener\n    if self.opener_id is not None:\n        json[\"openerId\"] = self.opener_id.to_json()\n    if self.opener_frame_id is not None:\n        json[\"openerFrameId\"] = self.opener_frame_id.to_json()\n    if self.browser_context_id is not None:\n        json[\"browserContextId\"] = self.browser_context_id.to_json()\n    if self.subtype is not None:\n        json[\"subtype\"] = self.subtype\n    return json\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfoChanged","title":"<code>TargetInfoChanged</code>  <code>dataclass</code>","text":"<p>Issued when some information about a target has changed. This only happens between <code>targetCreated</code> and <code>targetDestroyed</code>.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>@event_class(\"Target.targetInfoChanged\")\n@dataclass\nclass TargetInfoChanged:\n    \"\"\"\n    Issued when some information about a target has changed. This only happens between\n    ``targetCreated`` and ``targetDestroyed``.\n    \"\"\"\n\n    target_info: TargetInfo\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TargetInfoChanged:\n        return cls(target_info=TargetInfo.from_json(json[\"targetInfo\"]))\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfoChanged.target_info","title":"<code>target_info: TargetInfo</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfoChanged.__init__","title":"<code>__init__(target_info)</code>","text":""},{"location":"reference/cdp/target/#zendriver.cdp.target.TargetInfoChanged.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/target.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TargetInfoChanged:\n    return cls(target_info=TargetInfo.from_json(json[\"targetInfo\"]))\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.activate_target","title":"<code>activate_target(target_id)</code>","text":"<p>Activates (focuses) the target.</p> <p>Parameters:</p> Name Type Description Default <code>target_id</code> <code>TargetID</code> required Source code in <code>zendriver/cdp/target.py</code> <pre><code>def activate_target(\n    target_id: TargetID,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Activates (focuses) the target.\n\n    :param target_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"targetId\"] = target_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.activateTarget\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.attach_to_browser_target","title":"<code>attach_to_browser_target()</code>","text":"<p>Attaches to the browser target, only uses flat sessionId mode.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SessionID]</code> <p>Id assigned to the session.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def attach_to_browser_target() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, SessionID]:\n    \"\"\"\n    Attaches to the browser target, only uses flat sessionId mode.\n\n    **EXPERIMENTAL**\n\n    :returns: Id assigned to the session.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.attachToBrowserTarget\",\n    }\n    json = yield cmd_dict\n    return SessionID.from_json(json[\"sessionId\"])\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.attach_to_target","title":"<code>attach_to_target(target_id, flatten=None)</code>","text":"<p>Attaches to the target with given id.</p> <p>Parameters:</p> Name Type Description Default <code>target_id</code> <code>TargetID</code> required <code>flatten</code> <code>Optional[bool]</code> <p>(Optional) Enables \"flat\" access to the session via specifying sessionId attribute in the commands. We plan to make this the default, deprecate non-flattened mode, and eventually retire it. See crbug.com/991325.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, SessionID]</code> <p>Id assigned to the session.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def attach_to_target(\n    target_id: TargetID, flatten: typing.Optional[bool] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, SessionID]:\n    \"\"\"\n    Attaches to the target with given id.\n\n    :param target_id:\n    :param flatten: *(Optional)* Enables \"flat\" access to the session via specifying sessionId attribute in the commands. We plan to make this the default, deprecate non-flattened mode, and eventually retire it. See crbug.com/991325.\n    :returns: Id assigned to the session.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"targetId\"] = target_id.to_json()\n    if flatten is not None:\n        params[\"flatten\"] = flatten\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.attachToTarget\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return SessionID.from_json(json[\"sessionId\"])\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.auto_attach_related","title":"<code>auto_attach_related(target_id, wait_for_debugger_on_start, filter_=None)</code>","text":"<p>Adds the specified target to the list of targets that will be monitored for any related target creation (such as child frames, child workers and new versions of service worker) and reported through <code>attachedToTarget</code>. The specified target is also auto-attached. This cancels the effect of any previous <code>setAutoAttach</code> and is also cancelled by subsequent <code>setAutoAttach</code>. Only available at the Browser target.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>target_id</code> <code>TargetID</code> required <code>wait_for_debugger_on_start</code> <code>bool</code> <p>Whether to pause new targets when attaching to them. Use <code>Runtime.runIfWaitingForDebugger</code> to run paused targets.</p> required <code>filter_</code> <code>Optional[TargetFilter]</code> <p>(EXPERIMENTAL) (Optional) Only targets matching filter will be attached.</p> <code>None</code> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def auto_attach_related(\n    target_id: TargetID,\n    wait_for_debugger_on_start: bool,\n    filter_: typing.Optional[TargetFilter] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Adds the specified target to the list of targets that will be monitored for any related target\n    creation (such as child frames, child workers and new versions of service worker) and reported\n    through ``attachedToTarget``. The specified target is also auto-attached.\n    This cancels the effect of any previous ``setAutoAttach`` and is also cancelled by subsequent\n    ``setAutoAttach``. Only available at the Browser target.\n\n    **EXPERIMENTAL**\n\n    :param target_id:\n    :param wait_for_debugger_on_start: Whether to pause new targets when attaching to them. Use ```Runtime.runIfWaitingForDebugger``` to run paused targets.\n    :param filter_: **(EXPERIMENTAL)** *(Optional)* Only targets matching filter will be attached.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"targetId\"] = target_id.to_json()\n    params[\"waitForDebuggerOnStart\"] = wait_for_debugger_on_start\n    if filter_ is not None:\n        params[\"filter\"] = filter_.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.autoAttachRelated\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.close_target","title":"<code>close_target(target_id)</code>","text":"<p>Closes the target. If the target is a page that gets closed too.</p> <p>Parameters:</p> Name Type Description Default <code>target_id</code> <code>TargetID</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, bool]</code> <p>Always set to true. If an error occurs, the response indicates protocol error.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def close_target(\n    target_id: TargetID,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, bool]:\n    \"\"\"\n    Closes the target. If the target is a page that gets closed too.\n\n    :param target_id:\n    :returns: Always set to true. If an error occurs, the response indicates protocol error.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"targetId\"] = target_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.closeTarget\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return bool(json[\"success\"])\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.create_browser_context","title":"<code>create_browser_context(dispose_on_detach=None, proxy_server=None, proxy_bypass_list=None, origins_with_universal_network_access=None)</code>","text":"<p>Creates a new empty BrowserContext. Similar to an incognito profile but you can have more than one.</p> <p>Parameters:</p> Name Type Description Default <code>dispose_on_detach</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) If specified, disposes this context when debugging session disconnects.</p> <code>None</code> <code>proxy_server</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) Proxy server, similar to the one passed to --proxy-server</p> <code>None</code> <code>proxy_bypass_list</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) Proxy bypass list, similar to the one passed to --proxy-bypass-list</p> <code>None</code> <code>origins_with_universal_network_access</code> <code>Optional[List[str]]</code> <p>(EXPERIMENTAL) (Optional) An optional list of origins to grant unlimited cross-origin access to. Parts of the URL other than those constituting origin are ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, BrowserContextID]</code> <p>The id of the context created.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def create_browser_context(\n    dispose_on_detach: typing.Optional[bool] = None,\n    proxy_server: typing.Optional[str] = None,\n    proxy_bypass_list: typing.Optional[str] = None,\n    origins_with_universal_network_access: typing.Optional[typing.List[str]] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, browser.BrowserContextID]:\n    \"\"\"\n    Creates a new empty BrowserContext. Similar to an incognito profile but you can have more than\n    one.\n\n    :param dispose_on_detach: **(EXPERIMENTAL)** *(Optional)* If specified, disposes this context when debugging session disconnects.\n    :param proxy_server: **(EXPERIMENTAL)** *(Optional)* Proxy server, similar to the one passed to --proxy-server\n    :param proxy_bypass_list: **(EXPERIMENTAL)** *(Optional)* Proxy bypass list, similar to the one passed to --proxy-bypass-list\n    :param origins_with_universal_network_access: **(EXPERIMENTAL)** *(Optional)* An optional list of origins to grant unlimited cross-origin access to. Parts of the URL other than those constituting origin are ignored.\n    :returns: The id of the context created.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if dispose_on_detach is not None:\n        params[\"disposeOnDetach\"] = dispose_on_detach\n    if proxy_server is not None:\n        params[\"proxyServer\"] = proxy_server\n    if proxy_bypass_list is not None:\n        params[\"proxyBypassList\"] = proxy_bypass_list\n    if origins_with_universal_network_access is not None:\n        params[\"originsWithUniversalNetworkAccess\"] = [\n            i for i in origins_with_universal_network_access\n        ]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.createBrowserContext\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return browser.BrowserContextID.from_json(json[\"browserContextId\"])\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.create_target","title":"<code>create_target(url, width=None, height=None, browser_context_id=None, enable_begin_frame_control=None, new_window=None, background=None, for_tab=None)</code>","text":"<p>Creates a new page.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The initial URL the page will be navigated to. An empty string indicates about:blank.</p> required <code>width</code> <code>Optional[int]</code> <p>(Optional) Frame width in DIP (headless chrome only).</p> <code>None</code> <code>height</code> <code>Optional[int]</code> <p>(Optional) Frame height in DIP (headless chrome only).</p> <code>None</code> <code>browser_context_id</code> <code>Optional[BrowserContextID]</code> <p>(EXPERIMENTAL) (Optional) The browser context to create the page in.</p> <code>None</code> <code>enable_begin_frame_control</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether BeginFrames for this target will be controlled via DevTools (headless chrome only, not supported on MacOS yet, false by default).</p> <code>None</code> <code>new_window</code> <code>Optional[bool]</code> <p>(Optional) Whether to create a new Window or Tab (chrome-only, false by default).</p> <code>None</code> <code>background</code> <code>Optional[bool]</code> <p>(Optional) Whether to create the target in background or foreground (chrome-only, false by default).</p> <code>None</code> <code>for_tab</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Whether to create the target of type \"tab\".</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, TargetID]</code> <p>The id of the page opened.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def create_target(\n    url: str,\n    width: typing.Optional[int] = None,\n    height: typing.Optional[int] = None,\n    browser_context_id: typing.Optional[browser.BrowserContextID] = None,\n    enable_begin_frame_control: typing.Optional[bool] = None,\n    new_window: typing.Optional[bool] = None,\n    background: typing.Optional[bool] = None,\n    for_tab: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, TargetID]:\n    \"\"\"\n    Creates a new page.\n\n    :param url: The initial URL the page will be navigated to. An empty string indicates about:blank.\n    :param width: *(Optional)* Frame width in DIP (headless chrome only).\n    :param height: *(Optional)* Frame height in DIP (headless chrome only).\n    :param browser_context_id: **(EXPERIMENTAL)** *(Optional)* The browser context to create the page in.\n    :param enable_begin_frame_control: **(EXPERIMENTAL)** *(Optional)* Whether BeginFrames for this target will be controlled via DevTools (headless chrome only, not supported on MacOS yet, false by default).\n    :param new_window: *(Optional)* Whether to create a new Window or Tab (chrome-only, false by default).\n    :param background: *(Optional)* Whether to create the target in background or foreground (chrome-only, false by default).\n    :param for_tab: **(EXPERIMENTAL)** *(Optional)* Whether to create the target of type \"tab\".\n    :returns: The id of the page opened.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"url\"] = url\n    if width is not None:\n        params[\"width\"] = width\n    if height is not None:\n        params[\"height\"] = height\n    if browser_context_id is not None:\n        params[\"browserContextId\"] = browser_context_id.to_json()\n    if enable_begin_frame_control is not None:\n        params[\"enableBeginFrameControl\"] = enable_begin_frame_control\n    if new_window is not None:\n        params[\"newWindow\"] = new_window\n    if background is not None:\n        params[\"background\"] = background\n    if for_tab is not None:\n        params[\"forTab\"] = for_tab\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.createTarget\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return TargetID.from_json(json[\"targetId\"])\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.detach_from_target","title":"<code>detach_from_target(session_id=None, target_id=None)</code>","text":"<p>Detaches session with given id.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>Optional[SessionID]</code> <p>(Optional) Session to detach.</p> <code>None</code> <code>target_id</code> <code>Optional[TargetID]</code> <p>(DEPRECATED) (Optional) Deprecated.</p> <code>None</code> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def detach_from_target(\n    session_id: typing.Optional[SessionID] = None,\n    target_id: typing.Optional[TargetID] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Detaches session with given id.\n\n    :param session_id: *(Optional)* Session to detach.\n    :param target_id: **(DEPRECATED)** *(Optional)* Deprecated.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if session_id is not None:\n        params[\"sessionId\"] = session_id.to_json()\n    if target_id is not None:\n        params[\"targetId\"] = target_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.detachFromTarget\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.dispose_browser_context","title":"<code>dispose_browser_context(browser_context_id)</code>","text":"<p>Deletes a BrowserContext. All the belonging pages will be closed without calling their beforeunload hooks.</p> <p>Parameters:</p> Name Type Description Default <code>browser_context_id</code> <code>BrowserContextID</code> required Source code in <code>zendriver/cdp/target.py</code> <pre><code>def dispose_browser_context(\n    browser_context_id: browser.BrowserContextID,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Deletes a BrowserContext. All the belonging pages will be closed without calling their\n    beforeunload hooks.\n\n    :param browser_context_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"browserContextId\"] = browser_context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.disposeBrowserContext\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.expose_dev_tools_protocol","title":"<code>expose_dev_tools_protocol(target_id, binding_name=None)</code>","text":"<p>Inject object to the target's main frame that provides a communication channel with browser target.</p> <p>Injected object will be available as <code>window[bindingName]</code>.</p> <p>The object has the following API: - <code>binding.send(json)</code> - a method to send messages over the remote debugging protocol - <code>binding.onmessage = json =&gt; handleMessage(json)</code> - a callback that will be called for the protocol notifications and command responses.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>target_id</code> <code>TargetID</code> required <code>binding_name</code> <code>Optional[str]</code> <p>(Optional) Binding name, 'cdp' if not specified.</p> <code>None</code> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def expose_dev_tools_protocol(\n    target_id: TargetID, binding_name: typing.Optional[str] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Inject object to the target's main frame that provides a communication\n    channel with browser target.\n\n    Injected object will be available as ``window[bindingName]``.\n\n    The object has the following API:\n    - ``binding.send(json)`` - a method to send messages over the remote debugging protocol\n    - ``binding.onmessage = json =&gt; handleMessage(json)`` - a callback that will be called for the protocol notifications and command responses.\n\n    **EXPERIMENTAL**\n\n    :param target_id:\n    :param binding_name: *(Optional)* Binding name, 'cdp' if not specified.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"targetId\"] = target_id.to_json()\n    if binding_name is not None:\n        params[\"bindingName\"] = binding_name\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.exposeDevToolsProtocol\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.get_browser_contexts","title":"<code>get_browser_contexts()</code>","text":"<p>Returns all browser contexts created with <code>Target.createBrowserContext</code> method.</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[BrowserContextID]]</code> <p>An array of browser context ids.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def get_browser_contexts() -&gt; (\n    typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[browser.BrowserContextID]]\n):\n    \"\"\"\n    Returns all browser contexts created with ``Target.createBrowserContext`` method.\n\n    :returns: An array of browser context ids.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.getBrowserContexts\",\n    }\n    json = yield cmd_dict\n    return [browser.BrowserContextID.from_json(i) for i in json[\"browserContextIds\"]]\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.get_target_info","title":"<code>get_target_info(target_id=None)</code>","text":"<p>Returns information about a target.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>target_id</code> <code>Optional[TargetID]</code> <p>(Optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, TargetInfo]</code> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def get_target_info(\n    target_id: typing.Optional[TargetID] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, TargetInfo]:\n    \"\"\"\n    Returns information about a target.\n\n    **EXPERIMENTAL**\n\n    :param target_id: *(Optional)*\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if target_id is not None:\n        params[\"targetId\"] = target_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.getTargetInfo\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return TargetInfo.from_json(json[\"targetInfo\"])\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.get_targets","title":"<code>get_targets(filter_=None)</code>","text":"<p>Retrieves a list of available targets.</p> <p>Parameters:</p> Name Type Description Default <code>filter_</code> <code>Optional[TargetFilter]</code> <p>(EXPERIMENTAL) (Optional) Only targets matching filter will be reported. If filter is not specified and target discovery is currently enabled, a filter used for target discovery is used for consistency.</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[TargetInfo]]</code> <p>The list of targets.</p> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def get_targets(\n    filter_: typing.Optional[TargetFilter] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[TargetInfo]]:\n    \"\"\"\n    Retrieves a list of available targets.\n\n    :param filter_: **(EXPERIMENTAL)** *(Optional)* Only targets matching filter will be reported. If filter is not specified and target discovery is currently enabled, a filter used for target discovery is used for consistency.\n    :returns: The list of targets.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if filter_ is not None:\n        params[\"filter\"] = filter_.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.getTargets\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [TargetInfo.from_json(i) for i in json[\"targetInfos\"]]\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.send_message_to_target","title":"<code>send_message_to_target(message, session_id=None, target_id=None)</code>","text":"<p>Sends protocol message over session with given id. Consider using flat mode instead; see commands attachToTarget, setAutoAttach, and crbug.com/991325.</p> <p>.. deprecated:: 1.3</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> required <code>session_id</code> <code>Optional[SessionID]</code> <p>(Optional) Identifier of the session.</p> <code>None</code> <code>target_id</code> <code>Optional[TargetID]</code> <p>(DEPRECATED) (Optional) Deprecated.</p> <code>None</code> Source code in <code>zendriver/cdp/target.py</code> <pre><code>@deprecated(version=\"1.3\")\ndef send_message_to_target(\n    message: str,\n    session_id: typing.Optional[SessionID] = None,\n    target_id: typing.Optional[TargetID] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sends protocol message over session with given id.\n    Consider using flat mode instead; see commands attachToTarget, setAutoAttach,\n    and crbug.com/991325.\n\n    .. deprecated:: 1.3\n\n    :param message:\n    :param session_id: *(Optional)* Identifier of the session.\n    :param target_id: **(DEPRECATED)** *(Optional)* Deprecated.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"message\"] = message\n    if session_id is not None:\n        params[\"sessionId\"] = session_id.to_json()\n    if target_id is not None:\n        params[\"targetId\"] = target_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.sendMessageToTarget\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.set_auto_attach","title":"<code>set_auto_attach(auto_attach, wait_for_debugger_on_start, flatten=None, filter_=None)</code>","text":"<p>Controls whether to automatically attach to new targets which are considered to be related to this one. When turned on, attaches to all existing related targets as well. When turned off, automatically detaches from all currently attached targets. This also clears all targets added by <code>autoAttachRelated</code> from the list of targets to watch for creation of related targets.</p> <p>Parameters:</p> Name Type Description Default <code>auto_attach</code> <code>bool</code> <p>Whether to auto-attach to related targets.</p> required <code>wait_for_debugger_on_start</code> <code>bool</code> <p>Whether to pause new targets when attaching to them. Use <code>Runtime.runIfWaitingForDebugger</code> to run paused targets.</p> required <code>flatten</code> <code>Optional[bool]</code> <p>(EXPERIMENTAL) (Optional) Enables \"flat\" access to the session via specifying sessionId attribute in the commands. We plan to make this the default, deprecate non-flattened mode, and eventually retire it. See crbug.com/991325.</p> <code>None</code> <code>filter_</code> <code>Optional[TargetFilter]</code> <p>(EXPERIMENTAL) (Optional) Only targets matching filter will be attached.</p> <code>None</code> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def set_auto_attach(\n    auto_attach: bool,\n    wait_for_debugger_on_start: bool,\n    flatten: typing.Optional[bool] = None,\n    filter_: typing.Optional[TargetFilter] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Controls whether to automatically attach to new targets which are considered to be related to\n    this one. When turned on, attaches to all existing related targets as well. When turned off,\n    automatically detaches from all currently attached targets.\n    This also clears all targets added by ``autoAttachRelated`` from the list of targets to watch\n    for creation of related targets.\n\n    :param auto_attach: Whether to auto-attach to related targets.\n    :param wait_for_debugger_on_start: Whether to pause new targets when attaching to them. Use ```Runtime.runIfWaitingForDebugger``` to run paused targets.\n    :param flatten: **(EXPERIMENTAL)** *(Optional)* Enables \"flat\" access to the session via specifying sessionId attribute in the commands. We plan to make this the default, deprecate non-flattened mode, and eventually retire it. See crbug.com/991325.\n    :param filter_: **(EXPERIMENTAL)** *(Optional)* Only targets matching filter will be attached.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"autoAttach\"] = auto_attach\n    params[\"waitForDebuggerOnStart\"] = wait_for_debugger_on_start\n    if flatten is not None:\n        params[\"flatten\"] = flatten\n    if filter_ is not None:\n        params[\"filter\"] = filter_.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.setAutoAttach\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.set_discover_targets","title":"<code>set_discover_targets(discover, filter_=None)</code>","text":"<p>Controls whether to discover available targets and notify via <code>targetCreated/targetInfoChanged/targetDestroyed</code> events.</p> <p>Parameters:</p> Name Type Description Default <code>discover</code> <code>bool</code> <p>Whether to discover available targets.</p> required <code>filter_</code> <code>Optional[TargetFilter]</code> <p>(EXPERIMENTAL) (Optional) Only targets matching filter will be attached. If <code>discover```` is false, ````filter</code> must be omitted or empty.</p> <code>None</code> Source code in <code>zendriver/cdp/target.py</code> <pre><code>def set_discover_targets(\n    discover: bool, filter_: typing.Optional[TargetFilter] = None\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Controls whether to discover available targets and notify via\n    ``targetCreated/targetInfoChanged/targetDestroyed`` events.\n\n    :param discover: Whether to discover available targets.\n    :param filter_: **(EXPERIMENTAL)** *(Optional)* Only targets matching filter will be attached. If ```discover```` is false, ````filter``` must be omitted or empty.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"discover\"] = discover\n    if filter_ is not None:\n        params[\"filter\"] = filter_.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.setDiscoverTargets\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/target/#zendriver.cdp.target.set_remote_locations","title":"<code>set_remote_locations(locations)</code>","text":"<p>Enables target discovery for the specified locations, when <code>setDiscoverTargets</code> was set to <code>true</code>.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>locations</code> <code>List[RemoteLocation]</code> <p>List of remote locations.</p> required Source code in <code>zendriver/cdp/target.py</code> <pre><code>def set_remote_locations(\n    locations: typing.List[RemoteLocation],\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables target discovery for the specified locations, when ``setDiscoverTargets`` was set to\n    ``true``.\n\n    **EXPERIMENTAL**\n\n    :param locations: List of remote locations.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"locations\"] = [i.to_json() for i in locations]\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Target.setRemoteLocations\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/tethering/","title":"tethering","text":""},{"location":"reference/cdp/tethering/#zendriver.cdp.tethering.Accepted","title":"<code>Accepted</code>  <code>dataclass</code>","text":"<p>Informs that port was successfully bound and got a specified connection id.</p> Source code in <code>zendriver/cdp/tethering.py</code> <pre><code>@event_class(\"Tethering.accepted\")\n@dataclass\nclass Accepted:\n    \"\"\"\n    Informs that port was successfully bound and got a specified connection id.\n    \"\"\"\n\n    #: Port number that was successfully bound.\n    port: int\n    #: Connection id to be used.\n    connection_id: str\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Accepted:\n        return cls(port=int(json[\"port\"]), connection_id=str(json[\"connectionId\"]))\n</code></pre>"},{"location":"reference/cdp/tethering/#zendriver.cdp.tethering.Accepted.connection_id","title":"<code>connection_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tethering/#zendriver.cdp.tethering.Accepted.port","title":"<code>port: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tethering/#zendriver.cdp.tethering.Accepted.__init__","title":"<code>__init__(port, connection_id)</code>","text":""},{"location":"reference/cdp/tethering/#zendriver.cdp.tethering.Accepted.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/tethering.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Accepted:\n    return cls(port=int(json[\"port\"]), connection_id=str(json[\"connectionId\"]))\n</code></pre>"},{"location":"reference/cdp/tethering/#zendriver.cdp.tethering.bind","title":"<code>bind(port)</code>","text":"<p>Request browser port binding.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>Port number to bind.</p> required Source code in <code>zendriver/cdp/tethering.py</code> <pre><code>def bind(port: int) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Request browser port binding.\n\n    :param port: Port number to bind.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"port\"] = port\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Tethering.bind\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/tethering/#zendriver.cdp.tethering.unbind","title":"<code>unbind(port)</code>","text":"<p>Request browser port unbinding.</p> <p>Parameters:</p> Name Type Description Default <code>port</code> <code>int</code> <p>Port number to unbind.</p> required Source code in <code>zendriver/cdp/tethering.py</code> <pre><code>def unbind(port: int) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Request browser port unbinding.\n\n    :param port: Port number to unbind.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"port\"] = port\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Tethering.unbind\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/tracing/","title":"tracing","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.BufferUsage","title":"<code>BufferUsage</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@event_class(\"Tracing.bufferUsage\")\n@dataclass\nclass BufferUsage:\n    \"\"\"\n    **EXPERIMENTAL**\n\n\n    \"\"\"\n\n    #: A number in range [0..1] that indicates the used size of event buffer as a fraction of its\n    #: total size.\n    percent_full: typing.Optional[float]\n    #: An approximate number of events in the trace log.\n    event_count: typing.Optional[float]\n    #: A number in range [0..1] that indicates the used size of event buffer as a fraction of its\n    #: total size.\n    value: typing.Optional[float]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BufferUsage:\n        return cls(\n            percent_full=(\n                float(json[\"percentFull\"])\n                if json.get(\"percentFull\", None) is not None\n                else None\n            ),\n            event_count=(\n                float(json[\"eventCount\"])\n                if json.get(\"eventCount\", None) is not None\n                else None\n            ),\n            value=float(json[\"value\"]) if json.get(\"value\", None) is not None else None,\n        )\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.BufferUsage.event_count","title":"<code>event_count: typing.Optional[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.BufferUsage.percent_full","title":"<code>percent_full: typing.Optional[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.BufferUsage.value","title":"<code>value: typing.Optional[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.BufferUsage.__init__","title":"<code>__init__(percent_full, event_count, value)</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.BufferUsage.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BufferUsage:\n    return cls(\n        percent_full=(\n            float(json[\"percentFull\"])\n            if json.get(\"percentFull\", None) is not None\n            else None\n        ),\n        event_count=(\n            float(json[\"eventCount\"])\n            if json.get(\"eventCount\", None) is not None\n            else None\n        ),\n        value=float(json[\"value\"]) if json.get(\"value\", None) is not None else None,\n    )\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.DataCollected","title":"<code>DataCollected</code>  <code>dataclass</code>","text":"<p>EXPERIMENTAL</p> <p>Contains a bucket of collected trace events. When tracing is stopped collected events will be sent as a sequence of dataCollected events followed by tracingComplete event.</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@event_class(\"Tracing.dataCollected\")\n@dataclass\nclass DataCollected:\n    \"\"\"\n    **EXPERIMENTAL**\n\n    Contains a bucket of collected trace events. When tracing is stopped collected events will be\n    sent as a sequence of dataCollected events followed by tracingComplete event.\n    \"\"\"\n\n    value: typing.List[dict]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; DataCollected:\n        return cls(value=[dict(i) for i in json[\"value\"]])\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.DataCollected.value","title":"<code>value: typing.List[dict]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.DataCollected.__init__","title":"<code>__init__(value)</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.DataCollected.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; DataCollected:\n    return cls(value=[dict(i) for i in json[\"value\"]])\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.MemoryDumpConfig","title":"<code>MemoryDumpConfig</code>","text":"<p>               Bases: <code>dict</code></p> <p>Configuration for memory dump. Used only when \"memory-infra\" category is enabled.</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>class MemoryDumpConfig(dict):\n    \"\"\"\n    Configuration for memory dump. Used only when \"memory-infra\" category is enabled.\n    \"\"\"\n\n    def to_json(self) -&gt; dict:\n        return self\n\n    @classmethod\n    def from_json(cls, json: dict) -&gt; MemoryDumpConfig:\n        return cls(json)\n\n    def __repr__(self):\n        return \"MemoryDumpConfig({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.MemoryDumpConfig.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def __repr__(self):\n    return \"MemoryDumpConfig({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.MemoryDumpConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@classmethod\ndef from_json(cls, json: dict) -&gt; MemoryDumpConfig:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.MemoryDumpConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def to_json(self) -&gt; dict:\n    return self\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.MemoryDumpLevelOfDetail","title":"<code>MemoryDumpLevelOfDetail</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Details exposed when memory request explicitly declared. Keep consistent with memory_dump_request_args.h and memory_instrumentation.mojom</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>class MemoryDumpLevelOfDetail(enum.Enum):\n    \"\"\"\n    Details exposed when memory request explicitly declared.\n    Keep consistent with memory_dump_request_args.h and\n    memory_instrumentation.mojom\n    \"\"\"\n\n    BACKGROUND = \"background\"\n    LIGHT = \"light\"\n    DETAILED = \"detailed\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; MemoryDumpLevelOfDetail:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.MemoryDumpLevelOfDetail.BACKGROUND","title":"<code>BACKGROUND = 'background'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.MemoryDumpLevelOfDetail.DETAILED","title":"<code>DETAILED = 'detailed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.MemoryDumpLevelOfDetail.LIGHT","title":"<code>LIGHT = 'light'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.MemoryDumpLevelOfDetail.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; MemoryDumpLevelOfDetail:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.MemoryDumpLevelOfDetail.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.StreamCompression","title":"<code>StreamCompression</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Compression type to use for traces returned via streams.</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>class StreamCompression(enum.Enum):\n    \"\"\"\n    Compression type to use for traces returned via streams.\n    \"\"\"\n\n    NONE = \"none\"\n    GZIP = \"gzip\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; StreamCompression:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.StreamCompression.GZIP","title":"<code>GZIP = 'gzip'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.StreamCompression.NONE","title":"<code>NONE = 'none'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.StreamCompression.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; StreamCompression:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.StreamCompression.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.StreamFormat","title":"<code>StreamFormat</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Data format of a trace. Can be either the legacy JSON format or the protocol buffer format. Note that the JSON format will be deprecated soon.</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>class StreamFormat(enum.Enum):\n    \"\"\"\n    Data format of a trace. Can be either the legacy JSON format or the\n    protocol buffer format. Note that the JSON format will be deprecated soon.\n    \"\"\"\n\n    JSON = \"json\"\n    PROTO = \"proto\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; StreamFormat:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.StreamFormat.JSON","title":"<code>JSON = 'json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.StreamFormat.PROTO","title":"<code>PROTO = 'proto'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.StreamFormat.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; StreamFormat:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.StreamFormat.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig","title":"<code>TraceConfig</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@dataclass\nclass TraceConfig:\n    #: Controls how the trace buffer stores data.\n    record_mode: typing.Optional[str] = None\n\n    #: Size of the trace buffer in kilobytes. If not specified or zero is passed, a default value\n    #: of 200 MB would be used.\n    trace_buffer_size_in_kb: typing.Optional[float] = None\n\n    #: Turns on JavaScript stack sampling.\n    enable_sampling: typing.Optional[bool] = None\n\n    #: Turns on system tracing.\n    enable_systrace: typing.Optional[bool] = None\n\n    #: Turns on argument filter.\n    enable_argument_filter: typing.Optional[bool] = None\n\n    #: Included category filters.\n    included_categories: typing.Optional[typing.List[str]] = None\n\n    #: Excluded category filters.\n    excluded_categories: typing.Optional[typing.List[str]] = None\n\n    #: Configuration to synthesize the delays in tracing.\n    synthetic_delays: typing.Optional[typing.List[str]] = None\n\n    #: Configuration for memory dump triggers. Used only when \"memory-infra\" category is enabled.\n    memory_dump_config: typing.Optional[MemoryDumpConfig] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        if self.record_mode is not None:\n            json[\"recordMode\"] = self.record_mode\n        if self.trace_buffer_size_in_kb is not None:\n            json[\"traceBufferSizeInKb\"] = self.trace_buffer_size_in_kb\n        if self.enable_sampling is not None:\n            json[\"enableSampling\"] = self.enable_sampling\n        if self.enable_systrace is not None:\n            json[\"enableSystrace\"] = self.enable_systrace\n        if self.enable_argument_filter is not None:\n            json[\"enableArgumentFilter\"] = self.enable_argument_filter\n        if self.included_categories is not None:\n            json[\"includedCategories\"] = [i for i in self.included_categories]\n        if self.excluded_categories is not None:\n            json[\"excludedCategories\"] = [i for i in self.excluded_categories]\n        if self.synthetic_delays is not None:\n            json[\"syntheticDelays\"] = [i for i in self.synthetic_delays]\n        if self.memory_dump_config is not None:\n            json[\"memoryDumpConfig\"] = self.memory_dump_config.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TraceConfig:\n        return cls(\n            record_mode=(\n                str(json[\"recordMode\"])\n                if json.get(\"recordMode\", None) is not None\n                else None\n            ),\n            trace_buffer_size_in_kb=(\n                float(json[\"traceBufferSizeInKb\"])\n                if json.get(\"traceBufferSizeInKb\", None) is not None\n                else None\n            ),\n            enable_sampling=(\n                bool(json[\"enableSampling\"])\n                if json.get(\"enableSampling\", None) is not None\n                else None\n            ),\n            enable_systrace=(\n                bool(json[\"enableSystrace\"])\n                if json.get(\"enableSystrace\", None) is not None\n                else None\n            ),\n            enable_argument_filter=(\n                bool(json[\"enableArgumentFilter\"])\n                if json.get(\"enableArgumentFilter\", None) is not None\n                else None\n            ),\n            included_categories=(\n                [str(i) for i in json[\"includedCategories\"]]\n                if json.get(\"includedCategories\", None) is not None\n                else None\n            ),\n            excluded_categories=(\n                [str(i) for i in json[\"excludedCategories\"]]\n                if json.get(\"excludedCategories\", None) is not None\n                else None\n            ),\n            synthetic_delays=(\n                [str(i) for i in json[\"syntheticDelays\"]]\n                if json.get(\"syntheticDelays\", None) is not None\n                else None\n            ),\n            memory_dump_config=(\n                MemoryDumpConfig.from_json(json[\"memoryDumpConfig\"])\n                if json.get(\"memoryDumpConfig\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.enable_argument_filter","title":"<code>enable_argument_filter: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.enable_sampling","title":"<code>enable_sampling: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.enable_systrace","title":"<code>enable_systrace: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.excluded_categories","title":"<code>excluded_categories: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.included_categories","title":"<code>included_categories: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.memory_dump_config","title":"<code>memory_dump_config: typing.Optional[MemoryDumpConfig] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.record_mode","title":"<code>record_mode: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.synthetic_delays","title":"<code>synthetic_delays: typing.Optional[typing.List[str]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.trace_buffer_size_in_kb","title":"<code>trace_buffer_size_in_kb: typing.Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.__init__","title":"<code>__init__(record_mode=None, trace_buffer_size_in_kb=None, enable_sampling=None, enable_systrace=None, enable_argument_filter=None, included_categories=None, excluded_categories=None, synthetic_delays=None, memory_dump_config=None)</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TraceConfig:\n    return cls(\n        record_mode=(\n            str(json[\"recordMode\"])\n            if json.get(\"recordMode\", None) is not None\n            else None\n        ),\n        trace_buffer_size_in_kb=(\n            float(json[\"traceBufferSizeInKb\"])\n            if json.get(\"traceBufferSizeInKb\", None) is not None\n            else None\n        ),\n        enable_sampling=(\n            bool(json[\"enableSampling\"])\n            if json.get(\"enableSampling\", None) is not None\n            else None\n        ),\n        enable_systrace=(\n            bool(json[\"enableSystrace\"])\n            if json.get(\"enableSystrace\", None) is not None\n            else None\n        ),\n        enable_argument_filter=(\n            bool(json[\"enableArgumentFilter\"])\n            if json.get(\"enableArgumentFilter\", None) is not None\n            else None\n        ),\n        included_categories=(\n            [str(i) for i in json[\"includedCategories\"]]\n            if json.get(\"includedCategories\", None) is not None\n            else None\n        ),\n        excluded_categories=(\n            [str(i) for i in json[\"excludedCategories\"]]\n            if json.get(\"excludedCategories\", None) is not None\n            else None\n        ),\n        synthetic_delays=(\n            [str(i) for i in json[\"syntheticDelays\"]]\n            if json.get(\"syntheticDelays\", None) is not None\n            else None\n        ),\n        memory_dump_config=(\n            MemoryDumpConfig.from_json(json[\"memoryDumpConfig\"])\n            if json.get(\"memoryDumpConfig\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TraceConfig.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    if self.record_mode is not None:\n        json[\"recordMode\"] = self.record_mode\n    if self.trace_buffer_size_in_kb is not None:\n        json[\"traceBufferSizeInKb\"] = self.trace_buffer_size_in_kb\n    if self.enable_sampling is not None:\n        json[\"enableSampling\"] = self.enable_sampling\n    if self.enable_systrace is not None:\n        json[\"enableSystrace\"] = self.enable_systrace\n    if self.enable_argument_filter is not None:\n        json[\"enableArgumentFilter\"] = self.enable_argument_filter\n    if self.included_categories is not None:\n        json[\"includedCategories\"] = [i for i in self.included_categories]\n    if self.excluded_categories is not None:\n        json[\"excludedCategories\"] = [i for i in self.excluded_categories]\n    if self.synthetic_delays is not None:\n        json[\"syntheticDelays\"] = [i for i in self.synthetic_delays]\n    if self.memory_dump_config is not None:\n        json[\"memoryDumpConfig\"] = self.memory_dump_config.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingBackend","title":"<code>TracingBackend</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Backend type to use for tracing. <code>chrome</code> uses the Chrome-integrated tracing service and is supported on all platforms. <code>system</code> is only supported on Chrome OS and uses the Perfetto system tracing service. <code>auto</code> chooses <code>system</code> when the perfettoConfig provided to Tracing.start specifies at least one non-Chrome data source; otherwise uses <code>chrome</code>.</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>class TracingBackend(enum.Enum):\n    \"\"\"\n    Backend type to use for tracing. ``chrome`` uses the Chrome-integrated\n    tracing service and is supported on all platforms. ``system`` is only\n    supported on Chrome OS and uses the Perfetto system tracing service.\n    ``auto`` chooses ``system`` when the perfettoConfig provided to Tracing.start\n    specifies at least one non-Chrome data source; otherwise uses ``chrome``.\n    \"\"\"\n\n    AUTO = \"auto\"\n    CHROME = \"chrome\"\n    SYSTEM = \"system\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; TracingBackend:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingBackend.AUTO","title":"<code>AUTO = 'auto'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingBackend.CHROME","title":"<code>CHROME = 'chrome'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingBackend.SYSTEM","title":"<code>SYSTEM = 'system'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingBackend.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; TracingBackend:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingBackend.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingComplete","title":"<code>TracingComplete</code>  <code>dataclass</code>","text":"<p>Signals that tracing is stopped and there is no trace buffers pending flush, all data were delivered via dataCollected events.</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@event_class(\"Tracing.tracingComplete\")\n@dataclass\nclass TracingComplete:\n    \"\"\"\n    Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n    delivered via dataCollected events.\n    \"\"\"\n\n    #: Indicates whether some trace data is known to have been lost, e.g. because the trace ring\n    #: buffer wrapped around.\n    data_loss_occurred: bool\n    #: A handle of the stream that holds resulting trace data.\n    stream: typing.Optional[io.StreamHandle]\n    #: Trace data format of returned stream.\n    trace_format: typing.Optional[StreamFormat]\n    #: Compression format of returned stream.\n    stream_compression: typing.Optional[StreamCompression]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; TracingComplete:\n        return cls(\n            data_loss_occurred=bool(json[\"dataLossOccurred\"]),\n            stream=(\n                io.StreamHandle.from_json(json[\"stream\"])\n                if json.get(\"stream\", None) is not None\n                else None\n            ),\n            trace_format=(\n                StreamFormat.from_json(json[\"traceFormat\"])\n                if json.get(\"traceFormat\", None) is not None\n                else None\n            ),\n            stream_compression=(\n                StreamCompression.from_json(json[\"streamCompression\"])\n                if json.get(\"streamCompression\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingComplete.data_loss_occurred","title":"<code>data_loss_occurred: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingComplete.stream","title":"<code>stream: typing.Optional[io.StreamHandle]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingComplete.stream_compression","title":"<code>stream_compression: typing.Optional[StreamCompression]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingComplete.trace_format","title":"<code>trace_format: typing.Optional[StreamFormat]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingComplete.__init__","title":"<code>__init__(data_loss_occurred, stream, trace_format, stream_compression)</code>","text":""},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.TracingComplete.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; TracingComplete:\n    return cls(\n        data_loss_occurred=bool(json[\"dataLossOccurred\"]),\n        stream=(\n            io.StreamHandle.from_json(json[\"stream\"])\n            if json.get(\"stream\", None) is not None\n            else None\n        ),\n        trace_format=(\n            StreamFormat.from_json(json[\"traceFormat\"])\n            if json.get(\"traceFormat\", None) is not None\n            else None\n        ),\n        stream_compression=(\n            StreamCompression.from_json(json[\"streamCompression\"])\n            if json.get(\"streamCompression\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.end","title":"<code>end()</code>","text":"<p>Stop trace events collection.</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def end() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Stop trace events collection.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Tracing.end\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.get_categories","title":"<code>get_categories()</code>","text":"<p>Gets supported tracing categories.</p> <p>EXPERIMENTAL</p> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[str]]</code> <p>A list of supported tracing categories.</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def get_categories() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[str]]:\n    \"\"\"\n    Gets supported tracing categories.\n\n    **EXPERIMENTAL**\n\n    :returns: A list of supported tracing categories.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Tracing.getCategories\",\n    }\n    json = yield cmd_dict\n    return [str(i) for i in json[\"categories\"]]\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.record_clock_sync_marker","title":"<code>record_clock_sync_marker(sync_id)</code>","text":"<p>Record a clock sync marker in the trace.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>sync_id</code> <code>str</code> <p>The ID of this clock sync marker</p> required Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def record_clock_sync_marker(\n    sync_id: str,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Record a clock sync marker in the trace.\n\n    **EXPERIMENTAL**\n\n    :param sync_id: The ID of this clock sync marker\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"syncId\"] = sync_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Tracing.recordClockSyncMarker\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.request_memory_dump","title":"<code>request_memory_dump(deterministic=None, level_of_detail=None)</code>","text":"<p>Request a global memory dump.</p> <p>EXPERIMENTAL</p> <p>Parameters:</p> Name Type Description Default <code>deterministic</code> <code>Optional[bool]</code> <p>(Optional) Enables more deterministic results by forcing garbage collection</p> <code>None</code> <code>level_of_detail</code> <code>Optional[MemoryDumpLevelOfDetail]</code> <p>(Optional) Specifies level of details in memory dump. Defaults to \"detailed\".</p> <code>None</code> <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Tuple[str, bool]]</code> <p>A tuple with the following items:  0. dumpGuid - GUID of the resulting global memory dump. 1. success - True iff the global memory dump succeeded.</p> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def request_memory_dump(\n    deterministic: typing.Optional[bool] = None,\n    level_of_detail: typing.Optional[MemoryDumpLevelOfDetail] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.Tuple[str, bool]]:\n    \"\"\"\n    Request a global memory dump.\n\n    **EXPERIMENTAL**\n\n    :param deterministic: *(Optional)* Enables more deterministic results by forcing garbage collection\n    :param level_of_detail: *(Optional)* Specifies level of details in memory dump. Defaults to \"detailed\".\n    :returns: A tuple with the following items:\n\n        0. **dumpGuid** - GUID of the resulting global memory dump.\n        1. **success** - True iff the global memory dump succeeded.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if deterministic is not None:\n        params[\"deterministic\"] = deterministic\n    if level_of_detail is not None:\n        params[\"levelOfDetail\"] = level_of_detail.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Tracing.requestMemoryDump\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return (str(json[\"dumpGuid\"]), bool(json[\"success\"]))\n</code></pre>"},{"location":"reference/cdp/tracing/#zendriver.cdp.tracing.start","title":"<code>start(categories=None, options=None, buffer_usage_reporting_interval=None, transfer_mode=None, stream_format=None, stream_compression=None, trace_config=None, perfetto_config=None, tracing_backend=None)</code>","text":"<p>Start trace events collection.</p> <p>Parameters:</p> Name Type Description Default <code>categories</code> <code>Optional[str]</code> <p>(DEPRECATED) (EXPERIMENTAL) (Optional) Category/tag filter</p> <code>None</code> <code>options</code> <code>Optional[str]</code> <p>(DEPRECATED) (EXPERIMENTAL) (Optional) Tracing options</p> <code>None</code> <code>buffer_usage_reporting_interval</code> <code>Optional[float]</code> <p>(EXPERIMENTAL) (Optional) If set, the agent will issue bufferUsage events at this interval, specified in milliseconds</p> <code>None</code> <code>transfer_mode</code> <code>Optional[str]</code> <p>(Optional) Whether to report trace events as series of dataCollected events or to save trace to a stream (defaults to ```ReportEvents````).</p> <code>None</code> <code>stream_format</code> <code>Optional[StreamFormat]</code> <p>(Optional) Trace data format to use. This only applies when using <code>ReturnAsStream</code> transfer mode (defaults to <code>json</code>).</p> <code>None</code> <code>stream_compression</code> <code>Optional[StreamCompression]</code> <p>(EXPERIMENTAL) (Optional) Compression format to use. This only applies when using <code>ReturnAsStream</code> transfer mode (defaults to <code>none</code>)</p> <code>None</code> <code>trace_config</code> <code>Optional[TraceConfig]</code> <p>(Optional)</p> <code>None</code> <code>perfetto_config</code> <code>Optional[str]</code> <p>(EXPERIMENTAL) (Optional) Base64-encoded serialized perfetto.protos.TraceConfig protobuf message When specified, the parameters <code>categories</code>, <code>options</code>, <code>traceConfig</code> are ignored. (Encoded as a base64 string when passed over JSON)</p> <code>None</code> <code>tracing_backend</code> <code>Optional[TracingBackend]</code> <p>(EXPERIMENTAL) (Optional) Backend type (defaults to <code>`auto</code>)</p> <code>None</code> Source code in <code>zendriver/cdp/tracing.py</code> <pre><code>def start(\n    categories: typing.Optional[str] = None,\n    options: typing.Optional[str] = None,\n    buffer_usage_reporting_interval: typing.Optional[float] = None,\n    transfer_mode: typing.Optional[str] = None,\n    stream_format: typing.Optional[StreamFormat] = None,\n    stream_compression: typing.Optional[StreamCompression] = None,\n    trace_config: typing.Optional[TraceConfig] = None,\n    perfetto_config: typing.Optional[str] = None,\n    tracing_backend: typing.Optional[TracingBackend] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Start trace events collection.\n\n    :param categories: **(DEPRECATED)** **(EXPERIMENTAL)** *(Optional)* Category/tag filter\n    :param options: **(DEPRECATED)** **(EXPERIMENTAL)** *(Optional)* Tracing options\n    :param buffer_usage_reporting_interval: **(EXPERIMENTAL)** *(Optional)* If set, the agent will issue bufferUsage events at this interval, specified in milliseconds\n    :param transfer_mode: *(Optional)* Whether to report trace events as series of dataCollected events or to save trace to a stream (defaults to ```ReportEvents````).\n    :param stream_format: *(Optional)* Trace data format to use. This only applies when using ````ReturnAsStream```` transfer mode (defaults to ````json````).\n    :param stream_compression: **(EXPERIMENTAL)** *(Optional)* Compression format to use. This only applies when using ````ReturnAsStream```` transfer mode (defaults to ````none````)\n    :param trace_config: *(Optional)*\n    :param perfetto_config: **(EXPERIMENTAL)** *(Optional)* Base64-encoded serialized perfetto.protos.TraceConfig protobuf message When specified, the parameters ````categories````, ````options````, ````traceConfig```` are ignored. (Encoded as a base64 string when passed over JSON)\n    :param tracing_backend: **(EXPERIMENTAL)** *(Optional)* Backend type (defaults to ````auto```)\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if categories is not None:\n        params[\"categories\"] = categories\n    if options is not None:\n        params[\"options\"] = options\n    if buffer_usage_reporting_interval is not None:\n        params[\"bufferUsageReportingInterval\"] = buffer_usage_reporting_interval\n    if transfer_mode is not None:\n        params[\"transferMode\"] = transfer_mode\n    if stream_format is not None:\n        params[\"streamFormat\"] = stream_format.to_json()\n    if stream_compression is not None:\n        params[\"streamCompression\"] = stream_compression.to_json()\n    if trace_config is not None:\n        params[\"traceConfig\"] = trace_config.to_json()\n    if perfetto_config is not None:\n        params[\"perfettoConfig\"] = perfetto_config\n    if tracing_backend is not None:\n        params[\"tracingBackend\"] = tracing_backend.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"Tracing.start\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/util/","title":"util","text":""},{"location":"reference/cdp/util/#zendriver.cdp.util.T_JSON_DICT","title":"<code>T_JSON_DICT = typing.Dict[str, typing.Any]</code>  <code>module-attribute</code>","text":""},{"location":"reference/cdp/util/#zendriver.cdp.util.event_class","title":"<code>event_class(method)</code>","text":"<p>A decorator that registers a class as an event class.</p> Source code in <code>zendriver/cdp/util.py</code> <pre><code>def event_class(method):\n    \"\"\"A decorator that registers a class as an event class.\"\"\"\n\n    def decorate(cls):\n        _event_parsers[method] = cls\n        return cls\n\n    return decorate\n</code></pre>"},{"location":"reference/cdp/util/#zendriver.cdp.util.parse_json_event","title":"<code>parse_json_event(json)</code>","text":"<p>Parse a JSON dictionary into a CDP event.</p> Source code in <code>zendriver/cdp/util.py</code> <pre><code>def parse_json_event(json: T_JSON_DICT) -&gt; typing.Any:\n    \"\"\"Parse a JSON dictionary into a CDP event.\"\"\"\n    return _event_parsers[json[\"method\"]].from_json(json[\"params\"])\n</code></pre>"},{"location":"reference/cdp/web_audio/","title":"web_audio","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListener","title":"<code>AudioListener</code>  <code>dataclass</code>","text":"<p>Protocol object for AudioListener</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@dataclass\nclass AudioListener:\n    \"\"\"\n    Protocol object for AudioListener\n    \"\"\"\n\n    listener_id: GraphObjectId\n\n    context_id: GraphObjectId\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"listenerId\"] = self.listener_id.to_json()\n        json[\"contextId\"] = self.context_id.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AudioListener:\n        return cls(\n            listener_id=GraphObjectId.from_json(json[\"listenerId\"]),\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListener.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListener.listener_id","title":"<code>listener_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListener.__init__","title":"<code>__init__(listener_id, context_id)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListener.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AudioListener:\n    return cls(\n        listener_id=GraphObjectId.from_json(json[\"listenerId\"]),\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListener.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"listenerId\"] = self.listener_id.to_json()\n    json[\"contextId\"] = self.context_id.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListenerCreated","title":"<code>AudioListenerCreated</code>  <code>dataclass</code>","text":"<p>Notifies that the construction of an AudioListener has finished.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.audioListenerCreated\")\n@dataclass\nclass AudioListenerCreated:\n    \"\"\"\n    Notifies that the construction of an AudioListener has finished.\n    \"\"\"\n\n    listener: AudioListener\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AudioListenerCreated:\n        return cls(listener=AudioListener.from_json(json[\"listener\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListenerCreated.listener","title":"<code>listener: AudioListener</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListenerCreated.__init__","title":"<code>__init__(listener)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListenerCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AudioListenerCreated:\n    return cls(listener=AudioListener.from_json(json[\"listener\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListenerWillBeDestroyed","title":"<code>AudioListenerWillBeDestroyed</code>  <code>dataclass</code>","text":"<p>Notifies that a new AudioListener has been created.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.audioListenerWillBeDestroyed\")\n@dataclass\nclass AudioListenerWillBeDestroyed:\n    \"\"\"\n    Notifies that a new AudioListener has been created.\n    \"\"\"\n\n    context_id: GraphObjectId\n    listener_id: GraphObjectId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AudioListenerWillBeDestroyed:\n        return cls(\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n            listener_id=GraphObjectId.from_json(json[\"listenerId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListenerWillBeDestroyed.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListenerWillBeDestroyed.listener_id","title":"<code>listener_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListenerWillBeDestroyed.__init__","title":"<code>__init__(context_id, listener_id)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioListenerWillBeDestroyed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AudioListenerWillBeDestroyed:\n    return cls(\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        listener_id=GraphObjectId.from_json(json[\"listenerId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode","title":"<code>AudioNode</code>  <code>dataclass</code>","text":"<p>Protocol object for AudioNode</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@dataclass\nclass AudioNode:\n    \"\"\"\n    Protocol object for AudioNode\n    \"\"\"\n\n    node_id: GraphObjectId\n\n    context_id: GraphObjectId\n\n    node_type: NodeType\n\n    number_of_inputs: float\n\n    number_of_outputs: float\n\n    channel_count: float\n\n    channel_count_mode: ChannelCountMode\n\n    channel_interpretation: ChannelInterpretation\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"nodeId\"] = self.node_id.to_json()\n        json[\"contextId\"] = self.context_id.to_json()\n        json[\"nodeType\"] = self.node_type.to_json()\n        json[\"numberOfInputs\"] = self.number_of_inputs\n        json[\"numberOfOutputs\"] = self.number_of_outputs\n        json[\"channelCount\"] = self.channel_count\n        json[\"channelCountMode\"] = self.channel_count_mode.to_json()\n        json[\"channelInterpretation\"] = self.channel_interpretation.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AudioNode:\n        return cls(\n            node_id=GraphObjectId.from_json(json[\"nodeId\"]),\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n            node_type=NodeType.from_json(json[\"nodeType\"]),\n            number_of_inputs=float(json[\"numberOfInputs\"]),\n            number_of_outputs=float(json[\"numberOfOutputs\"]),\n            channel_count=float(json[\"channelCount\"]),\n            channel_count_mode=ChannelCountMode.from_json(json[\"channelCountMode\"]),\n            channel_interpretation=ChannelInterpretation.from_json(\n                json[\"channelInterpretation\"]\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.channel_count","title":"<code>channel_count: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.channel_count_mode","title":"<code>channel_count_mode: ChannelCountMode</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.channel_interpretation","title":"<code>channel_interpretation: ChannelInterpretation</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.node_id","title":"<code>node_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.node_type","title":"<code>node_type: NodeType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.number_of_inputs","title":"<code>number_of_inputs: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.number_of_outputs","title":"<code>number_of_outputs: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.__init__","title":"<code>__init__(node_id, context_id, node_type, number_of_inputs, number_of_outputs, channel_count, channel_count_mode, channel_interpretation)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AudioNode:\n    return cls(\n        node_id=GraphObjectId.from_json(json[\"nodeId\"]),\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        node_type=NodeType.from_json(json[\"nodeType\"]),\n        number_of_inputs=float(json[\"numberOfInputs\"]),\n        number_of_outputs=float(json[\"numberOfOutputs\"]),\n        channel_count=float(json[\"channelCount\"]),\n        channel_count_mode=ChannelCountMode.from_json(json[\"channelCountMode\"]),\n        channel_interpretation=ChannelInterpretation.from_json(\n            json[\"channelInterpretation\"]\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"nodeId\"] = self.node_id.to_json()\n    json[\"contextId\"] = self.context_id.to_json()\n    json[\"nodeType\"] = self.node_type.to_json()\n    json[\"numberOfInputs\"] = self.number_of_inputs\n    json[\"numberOfOutputs\"] = self.number_of_outputs\n    json[\"channelCount\"] = self.channel_count\n    json[\"channelCountMode\"] = self.channel_count_mode.to_json()\n    json[\"channelInterpretation\"] = self.channel_interpretation.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNodeCreated","title":"<code>AudioNodeCreated</code>  <code>dataclass</code>","text":"<p>Notifies that a new AudioNode has been created.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.audioNodeCreated\")\n@dataclass\nclass AudioNodeCreated:\n    \"\"\"\n    Notifies that a new AudioNode has been created.\n    \"\"\"\n\n    node: AudioNode\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AudioNodeCreated:\n        return cls(node=AudioNode.from_json(json[\"node\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNodeCreated.node","title":"<code>node: AudioNode</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNodeCreated.__init__","title":"<code>__init__(node)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNodeCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AudioNodeCreated:\n    return cls(node=AudioNode.from_json(json[\"node\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNodeWillBeDestroyed","title":"<code>AudioNodeWillBeDestroyed</code>  <code>dataclass</code>","text":"<p>Notifies that an existing AudioNode has been destroyed.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.audioNodeWillBeDestroyed\")\n@dataclass\nclass AudioNodeWillBeDestroyed:\n    \"\"\"\n    Notifies that an existing AudioNode has been destroyed.\n    \"\"\"\n\n    context_id: GraphObjectId\n    node_id: GraphObjectId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AudioNodeWillBeDestroyed:\n        return cls(\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n            node_id=GraphObjectId.from_json(json[\"nodeId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNodeWillBeDestroyed.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNodeWillBeDestroyed.node_id","title":"<code>node_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNodeWillBeDestroyed.__init__","title":"<code>__init__(context_id, node_id)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioNodeWillBeDestroyed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AudioNodeWillBeDestroyed:\n    return cls(\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        node_id=GraphObjectId.from_json(json[\"nodeId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam","title":"<code>AudioParam</code>  <code>dataclass</code>","text":"<p>Protocol object for AudioParam</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@dataclass\nclass AudioParam:\n    \"\"\"\n    Protocol object for AudioParam\n    \"\"\"\n\n    param_id: GraphObjectId\n\n    node_id: GraphObjectId\n\n    context_id: GraphObjectId\n\n    param_type: ParamType\n\n    rate: AutomationRate\n\n    default_value: float\n\n    min_value: float\n\n    max_value: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"paramId\"] = self.param_id.to_json()\n        json[\"nodeId\"] = self.node_id.to_json()\n        json[\"contextId\"] = self.context_id.to_json()\n        json[\"paramType\"] = self.param_type.to_json()\n        json[\"rate\"] = self.rate.to_json()\n        json[\"defaultValue\"] = self.default_value\n        json[\"minValue\"] = self.min_value\n        json[\"maxValue\"] = self.max_value\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AudioParam:\n        return cls(\n            param_id=GraphObjectId.from_json(json[\"paramId\"]),\n            node_id=GraphObjectId.from_json(json[\"nodeId\"]),\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n            param_type=ParamType.from_json(json[\"paramType\"]),\n            rate=AutomationRate.from_json(json[\"rate\"]),\n            default_value=float(json[\"defaultValue\"]),\n            min_value=float(json[\"minValue\"]),\n            max_value=float(json[\"maxValue\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.default_value","title":"<code>default_value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.max_value","title":"<code>max_value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.min_value","title":"<code>min_value: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.node_id","title":"<code>node_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.param_id","title":"<code>param_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.param_type","title":"<code>param_type: ParamType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.rate","title":"<code>rate: AutomationRate</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.__init__","title":"<code>__init__(param_id, node_id, context_id, param_type, rate, default_value, min_value, max_value)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AudioParam:\n    return cls(\n        param_id=GraphObjectId.from_json(json[\"paramId\"]),\n        node_id=GraphObjectId.from_json(json[\"nodeId\"]),\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        param_type=ParamType.from_json(json[\"paramType\"]),\n        rate=AutomationRate.from_json(json[\"rate\"]),\n        default_value=float(json[\"defaultValue\"]),\n        min_value=float(json[\"minValue\"]),\n        max_value=float(json[\"maxValue\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParam.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"paramId\"] = self.param_id.to_json()\n    json[\"nodeId\"] = self.node_id.to_json()\n    json[\"contextId\"] = self.context_id.to_json()\n    json[\"paramType\"] = self.param_type.to_json()\n    json[\"rate\"] = self.rate.to_json()\n    json[\"defaultValue\"] = self.default_value\n    json[\"minValue\"] = self.min_value\n    json[\"maxValue\"] = self.max_value\n    return json\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParamCreated","title":"<code>AudioParamCreated</code>  <code>dataclass</code>","text":"<p>Notifies that a new AudioParam has been created.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.audioParamCreated\")\n@dataclass\nclass AudioParamCreated:\n    \"\"\"\n    Notifies that a new AudioParam has been created.\n    \"\"\"\n\n    param: AudioParam\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AudioParamCreated:\n        return cls(param=AudioParam.from_json(json[\"param\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParamCreated.param","title":"<code>param: AudioParam</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParamCreated.__init__","title":"<code>__init__(param)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParamCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AudioParamCreated:\n    return cls(param=AudioParam.from_json(json[\"param\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParamWillBeDestroyed","title":"<code>AudioParamWillBeDestroyed</code>  <code>dataclass</code>","text":"<p>Notifies that an existing AudioParam has been destroyed.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.audioParamWillBeDestroyed\")\n@dataclass\nclass AudioParamWillBeDestroyed:\n    \"\"\"\n    Notifies that an existing AudioParam has been destroyed.\n    \"\"\"\n\n    context_id: GraphObjectId\n    node_id: GraphObjectId\n    param_id: GraphObjectId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; AudioParamWillBeDestroyed:\n        return cls(\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n            node_id=GraphObjectId.from_json(json[\"nodeId\"]),\n            param_id=GraphObjectId.from_json(json[\"paramId\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParamWillBeDestroyed.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParamWillBeDestroyed.node_id","title":"<code>node_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParamWillBeDestroyed.param_id","title":"<code>param_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParamWillBeDestroyed.__init__","title":"<code>__init__(context_id, node_id, param_id)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AudioParamWillBeDestroyed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; AudioParamWillBeDestroyed:\n    return cls(\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        node_id=GraphObjectId.from_json(json[\"nodeId\"]),\n        param_id=GraphObjectId.from_json(json[\"paramId\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AutomationRate","title":"<code>AutomationRate</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of AudioParam::AutomationRate from the spec</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>class AutomationRate(enum.Enum):\n    \"\"\"\n    Enum of AudioParam::AutomationRate from the spec\n    \"\"\"\n\n    A_RATE = \"a-rate\"\n    K_RATE = \"k-rate\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AutomationRate:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AutomationRate.A_RATE","title":"<code>A_RATE = 'a-rate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AutomationRate.K_RATE","title":"<code>K_RATE = 'k-rate'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AutomationRate.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AutomationRate:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.AutomationRate.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext","title":"<code>BaseAudioContext</code>  <code>dataclass</code>","text":"<p>Protocol object for BaseAudioContext</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@dataclass\nclass BaseAudioContext:\n    \"\"\"\n    Protocol object for BaseAudioContext\n    \"\"\"\n\n    context_id: GraphObjectId\n\n    context_type: ContextType\n\n    context_state: ContextState\n\n    #: Platform-dependent callback buffer size.\n    callback_buffer_size: float\n\n    #: Number of output channels supported by audio hardware in use.\n    max_output_channel_count: float\n\n    #: Context sample rate.\n    sample_rate: float\n\n    realtime_data: typing.Optional[ContextRealtimeData] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"contextId\"] = self.context_id.to_json()\n        json[\"contextType\"] = self.context_type.to_json()\n        json[\"contextState\"] = self.context_state.to_json()\n        json[\"callbackBufferSize\"] = self.callback_buffer_size\n        json[\"maxOutputChannelCount\"] = self.max_output_channel_count\n        json[\"sampleRate\"] = self.sample_rate\n        if self.realtime_data is not None:\n            json[\"realtimeData\"] = self.realtime_data.to_json()\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; BaseAudioContext:\n        return cls(\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n            context_type=ContextType.from_json(json[\"contextType\"]),\n            context_state=ContextState.from_json(json[\"contextState\"]),\n            callback_buffer_size=float(json[\"callbackBufferSize\"]),\n            max_output_channel_count=float(json[\"maxOutputChannelCount\"]),\n            sample_rate=float(json[\"sampleRate\"]),\n            realtime_data=(\n                ContextRealtimeData.from_json(json[\"realtimeData\"])\n                if json.get(\"realtimeData\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext.callback_buffer_size","title":"<code>callback_buffer_size: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext.context_state","title":"<code>context_state: ContextState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext.context_type","title":"<code>context_type: ContextType</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext.max_output_channel_count","title":"<code>max_output_channel_count: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext.realtime_data","title":"<code>realtime_data: typing.Optional[ContextRealtimeData] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext.sample_rate","title":"<code>sample_rate: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext.__init__","title":"<code>__init__(context_id, context_type, context_state, callback_buffer_size, max_output_channel_count, sample_rate, realtime_data=None)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; BaseAudioContext:\n    return cls(\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        context_type=ContextType.from_json(json[\"contextType\"]),\n        context_state=ContextState.from_json(json[\"contextState\"]),\n        callback_buffer_size=float(json[\"callbackBufferSize\"]),\n        max_output_channel_count=float(json[\"maxOutputChannelCount\"]),\n        sample_rate=float(json[\"sampleRate\"]),\n        realtime_data=(\n            ContextRealtimeData.from_json(json[\"realtimeData\"])\n            if json.get(\"realtimeData\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.BaseAudioContext.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"contextId\"] = self.context_id.to_json()\n    json[\"contextType\"] = self.context_type.to_json()\n    json[\"contextState\"] = self.context_state.to_json()\n    json[\"callbackBufferSize\"] = self.callback_buffer_size\n    json[\"maxOutputChannelCount\"] = self.max_output_channel_count\n    json[\"sampleRate\"] = self.sample_rate\n    if self.realtime_data is not None:\n        json[\"realtimeData\"] = self.realtime_data.to_json()\n    return json\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelCountMode","title":"<code>ChannelCountMode</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of AudioNode::ChannelCountMode from the spec</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>class ChannelCountMode(enum.Enum):\n    \"\"\"\n    Enum of AudioNode::ChannelCountMode from the spec\n    \"\"\"\n\n    CLAMPED_MAX = \"clamped-max\"\n    EXPLICIT = \"explicit\"\n    MAX_ = \"max\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ChannelCountMode:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelCountMode.CLAMPED_MAX","title":"<code>CLAMPED_MAX = 'clamped-max'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelCountMode.EXPLICIT","title":"<code>EXPLICIT = 'explicit'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelCountMode.MAX_","title":"<code>MAX_ = 'max'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelCountMode.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ChannelCountMode:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelCountMode.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelInterpretation","title":"<code>ChannelInterpretation</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of AudioNode::ChannelInterpretation from the spec</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>class ChannelInterpretation(enum.Enum):\n    \"\"\"\n    Enum of AudioNode::ChannelInterpretation from the spec\n    \"\"\"\n\n    DISCRETE = \"discrete\"\n    SPEAKERS = \"speakers\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ChannelInterpretation:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelInterpretation.DISCRETE","title":"<code>DISCRETE = 'discrete'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelInterpretation.SPEAKERS","title":"<code>SPEAKERS = 'speakers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelInterpretation.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ChannelInterpretation:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ChannelInterpretation.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextChanged","title":"<code>ContextChanged</code>  <code>dataclass</code>","text":"<p>Notifies that existing BaseAudioContext has changed some properties (id stays the same)..</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.contextChanged\")\n@dataclass\nclass ContextChanged:\n    \"\"\"\n    Notifies that existing BaseAudioContext has changed some properties (id stays the same)..\n    \"\"\"\n\n    context: BaseAudioContext\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ContextChanged:\n        return cls(context=BaseAudioContext.from_json(json[\"context\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextChanged.context","title":"<code>context: BaseAudioContext</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextChanged.__init__","title":"<code>__init__(context)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextChanged.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ContextChanged:\n    return cls(context=BaseAudioContext.from_json(json[\"context\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextCreated","title":"<code>ContextCreated</code>  <code>dataclass</code>","text":"<p>Notifies that a new BaseAudioContext has been created.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.contextCreated\")\n@dataclass\nclass ContextCreated:\n    \"\"\"\n    Notifies that a new BaseAudioContext has been created.\n    \"\"\"\n\n    context: BaseAudioContext\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ContextCreated:\n        return cls(context=BaseAudioContext.from_json(json[\"context\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextCreated.context","title":"<code>context: BaseAudioContext</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextCreated.__init__","title":"<code>__init__(context)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextCreated.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ContextCreated:\n    return cls(context=BaseAudioContext.from_json(json[\"context\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextRealtimeData","title":"<code>ContextRealtimeData</code>  <code>dataclass</code>","text":"<p>Fields in AudioContext that change in real-time.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@dataclass\nclass ContextRealtimeData:\n    \"\"\"\n    Fields in AudioContext that change in real-time.\n    \"\"\"\n\n    #: The current context time in second in BaseAudioContext.\n    current_time: float\n\n    #: The time spent on rendering graph divided by render quantum duration,\n    #: and multiplied by 100. 100 means the audio renderer reached the full\n    #: capacity and glitch may occur.\n    render_capacity: float\n\n    #: A running mean of callback interval.\n    callback_interval_mean: float\n\n    #: A running variance of callback interval.\n    callback_interval_variance: float\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"currentTime\"] = self.current_time\n        json[\"renderCapacity\"] = self.render_capacity\n        json[\"callbackIntervalMean\"] = self.callback_interval_mean\n        json[\"callbackIntervalVariance\"] = self.callback_interval_variance\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ContextRealtimeData:\n        return cls(\n            current_time=float(json[\"currentTime\"]),\n            render_capacity=float(json[\"renderCapacity\"]),\n            callback_interval_mean=float(json[\"callbackIntervalMean\"]),\n            callback_interval_variance=float(json[\"callbackIntervalVariance\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextRealtimeData.callback_interval_mean","title":"<code>callback_interval_mean: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextRealtimeData.callback_interval_variance","title":"<code>callback_interval_variance: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextRealtimeData.current_time","title":"<code>current_time: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextRealtimeData.render_capacity","title":"<code>render_capacity: float</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextRealtimeData.__init__","title":"<code>__init__(current_time, render_capacity, callback_interval_mean, callback_interval_variance)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextRealtimeData.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ContextRealtimeData:\n    return cls(\n        current_time=float(json[\"currentTime\"]),\n        render_capacity=float(json[\"renderCapacity\"]),\n        callback_interval_mean=float(json[\"callbackIntervalMean\"]),\n        callback_interval_variance=float(json[\"callbackIntervalVariance\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextRealtimeData.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"currentTime\"] = self.current_time\n    json[\"renderCapacity\"] = self.render_capacity\n    json[\"callbackIntervalMean\"] = self.callback_interval_mean\n    json[\"callbackIntervalVariance\"] = self.callback_interval_variance\n    return json\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextState","title":"<code>ContextState</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of AudioContextState from the spec</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>class ContextState(enum.Enum):\n    \"\"\"\n    Enum of AudioContextState from the spec\n    \"\"\"\n\n    SUSPENDED = \"suspended\"\n    RUNNING = \"running\"\n    CLOSED = \"closed\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ContextState:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextState.CLOSED","title":"<code>CLOSED = 'closed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextState.RUNNING","title":"<code>RUNNING = 'running'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextState.SUSPENDED","title":"<code>SUSPENDED = 'suspended'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextState.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ContextState:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextState.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextType","title":"<code>ContextType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum of BaseAudioContext types</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>class ContextType(enum.Enum):\n    \"\"\"\n    Enum of BaseAudioContext types\n    \"\"\"\n\n    REALTIME = \"realtime\"\n    OFFLINE = \"offline\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ContextType:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextType.OFFLINE","title":"<code>OFFLINE = 'offline'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextType.REALTIME","title":"<code>REALTIME = 'realtime'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ContextType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextWillBeDestroyed","title":"<code>ContextWillBeDestroyed</code>  <code>dataclass</code>","text":"<p>Notifies that an existing BaseAudioContext will be destroyed.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.contextWillBeDestroyed\")\n@dataclass\nclass ContextWillBeDestroyed:\n    \"\"\"\n    Notifies that an existing BaseAudioContext will be destroyed.\n    \"\"\"\n\n    context_id: GraphObjectId\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; ContextWillBeDestroyed:\n        return cls(context_id=GraphObjectId.from_json(json[\"contextId\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextWillBeDestroyed.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextWillBeDestroyed.__init__","title":"<code>__init__(context_id)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ContextWillBeDestroyed.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; ContextWillBeDestroyed:\n    return cls(context_id=GraphObjectId.from_json(json[\"contextId\"]))\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.GraphObjectId","title":"<code>GraphObjectId</code>","text":"<p>               Bases: <code>str</code></p> <p>An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>class GraphObjectId(str):\n    \"\"\"\n    An unique ID for a graph object (AudioContext, AudioNode, AudioParam) in Web Audio API\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; GraphObjectId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"GraphObjectId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.GraphObjectId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def __repr__(self):\n    return \"GraphObjectId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.GraphObjectId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; GraphObjectId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.GraphObjectId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamConnected","title":"<code>NodeParamConnected</code>  <code>dataclass</code>","text":"<p>Notifies that an AudioNode is connected to an AudioParam.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.nodeParamConnected\")\n@dataclass\nclass NodeParamConnected:\n    \"\"\"\n    Notifies that an AudioNode is connected to an AudioParam.\n    \"\"\"\n\n    context_id: GraphObjectId\n    source_id: GraphObjectId\n    destination_id: GraphObjectId\n    source_output_index: typing.Optional[float]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NodeParamConnected:\n        return cls(\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n            source_id=GraphObjectId.from_json(json[\"sourceId\"]),\n            destination_id=GraphObjectId.from_json(json[\"destinationId\"]),\n            source_output_index=(\n                float(json[\"sourceOutputIndex\"])\n                if json.get(\"sourceOutputIndex\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamConnected.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamConnected.destination_id","title":"<code>destination_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamConnected.source_id","title":"<code>source_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamConnected.source_output_index","title":"<code>source_output_index: typing.Optional[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamConnected.__init__","title":"<code>__init__(context_id, source_id, destination_id, source_output_index)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamConnected.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NodeParamConnected:\n    return cls(\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        source_id=GraphObjectId.from_json(json[\"sourceId\"]),\n        destination_id=GraphObjectId.from_json(json[\"destinationId\"]),\n        source_output_index=(\n            float(json[\"sourceOutputIndex\"])\n            if json.get(\"sourceOutputIndex\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamDisconnected","title":"<code>NodeParamDisconnected</code>  <code>dataclass</code>","text":"<p>Notifies that an AudioNode is disconnected to an AudioParam.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.nodeParamDisconnected\")\n@dataclass\nclass NodeParamDisconnected:\n    \"\"\"\n    Notifies that an AudioNode is disconnected to an AudioParam.\n    \"\"\"\n\n    context_id: GraphObjectId\n    source_id: GraphObjectId\n    destination_id: GraphObjectId\n    source_output_index: typing.Optional[float]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NodeParamDisconnected:\n        return cls(\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n            source_id=GraphObjectId.from_json(json[\"sourceId\"]),\n            destination_id=GraphObjectId.from_json(json[\"destinationId\"]),\n            source_output_index=(\n                float(json[\"sourceOutputIndex\"])\n                if json.get(\"sourceOutputIndex\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamDisconnected.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamDisconnected.destination_id","title":"<code>destination_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamDisconnected.source_id","title":"<code>source_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamDisconnected.source_output_index","title":"<code>source_output_index: typing.Optional[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamDisconnected.__init__","title":"<code>__init__(context_id, source_id, destination_id, source_output_index)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeParamDisconnected.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NodeParamDisconnected:\n    return cls(\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        source_id=GraphObjectId.from_json(json[\"sourceId\"]),\n        destination_id=GraphObjectId.from_json(json[\"destinationId\"]),\n        source_output_index=(\n            float(json[\"sourceOutputIndex\"])\n            if json.get(\"sourceOutputIndex\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeType","title":"<code>NodeType</code>","text":"<p>               Bases: <code>str</code></p> <p>Enum of AudioNode types</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>class NodeType(str):\n    \"\"\"\n    Enum of AudioNode types\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; NodeType:\n        return cls(json)\n\n    def __repr__(self):\n        return \"NodeType({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeType.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def __repr__(self):\n    return \"NodeType({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; NodeType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodeType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesConnected","title":"<code>NodesConnected</code>  <code>dataclass</code>","text":"<p>Notifies that two AudioNodes are connected.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.nodesConnected\")\n@dataclass\nclass NodesConnected:\n    \"\"\"\n    Notifies that two AudioNodes are connected.\n    \"\"\"\n\n    context_id: GraphObjectId\n    source_id: GraphObjectId\n    destination_id: GraphObjectId\n    source_output_index: typing.Optional[float]\n    destination_input_index: typing.Optional[float]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NodesConnected:\n        return cls(\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n            source_id=GraphObjectId.from_json(json[\"sourceId\"]),\n            destination_id=GraphObjectId.from_json(json[\"destinationId\"]),\n            source_output_index=(\n                float(json[\"sourceOutputIndex\"])\n                if json.get(\"sourceOutputIndex\", None) is not None\n                else None\n            ),\n            destination_input_index=(\n                float(json[\"destinationInputIndex\"])\n                if json.get(\"destinationInputIndex\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesConnected.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesConnected.destination_id","title":"<code>destination_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesConnected.destination_input_index","title":"<code>destination_input_index: typing.Optional[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesConnected.source_id","title":"<code>source_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesConnected.source_output_index","title":"<code>source_output_index: typing.Optional[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesConnected.__init__","title":"<code>__init__(context_id, source_id, destination_id, source_output_index, destination_input_index)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesConnected.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NodesConnected:\n    return cls(\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        source_id=GraphObjectId.from_json(json[\"sourceId\"]),\n        destination_id=GraphObjectId.from_json(json[\"destinationId\"]),\n        source_output_index=(\n            float(json[\"sourceOutputIndex\"])\n            if json.get(\"sourceOutputIndex\", None) is not None\n            else None\n        ),\n        destination_input_index=(\n            float(json[\"destinationInputIndex\"])\n            if json.get(\"destinationInputIndex\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesDisconnected","title":"<code>NodesDisconnected</code>  <code>dataclass</code>","text":"<p>Notifies that AudioNodes are disconnected. The destination can be null, and it means all the outgoing connections from the source are disconnected.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@event_class(\"WebAudio.nodesDisconnected\")\n@dataclass\nclass NodesDisconnected:\n    \"\"\"\n    Notifies that AudioNodes are disconnected. The destination can be null, and it means all the outgoing connections from the source are disconnected.\n    \"\"\"\n\n    context_id: GraphObjectId\n    source_id: GraphObjectId\n    destination_id: GraphObjectId\n    source_output_index: typing.Optional[float]\n    destination_input_index: typing.Optional[float]\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; NodesDisconnected:\n        return cls(\n            context_id=GraphObjectId.from_json(json[\"contextId\"]),\n            source_id=GraphObjectId.from_json(json[\"sourceId\"]),\n            destination_id=GraphObjectId.from_json(json[\"destinationId\"]),\n            source_output_index=(\n                float(json[\"sourceOutputIndex\"])\n                if json.get(\"sourceOutputIndex\", None) is not None\n                else None\n            ),\n            destination_input_index=(\n                float(json[\"destinationInputIndex\"])\n                if json.get(\"destinationInputIndex\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesDisconnected.context_id","title":"<code>context_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesDisconnected.destination_id","title":"<code>destination_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesDisconnected.destination_input_index","title":"<code>destination_input_index: typing.Optional[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesDisconnected.source_id","title":"<code>source_id: GraphObjectId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesDisconnected.source_output_index","title":"<code>source_output_index: typing.Optional[float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesDisconnected.__init__","title":"<code>__init__(context_id, source_id, destination_id, source_output_index, destination_input_index)</code>","text":""},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.NodesDisconnected.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; NodesDisconnected:\n    return cls(\n        context_id=GraphObjectId.from_json(json[\"contextId\"]),\n        source_id=GraphObjectId.from_json(json[\"sourceId\"]),\n        destination_id=GraphObjectId.from_json(json[\"destinationId\"]),\n        source_output_index=(\n            float(json[\"sourceOutputIndex\"])\n            if json.get(\"sourceOutputIndex\", None) is not None\n            else None\n        ),\n        destination_input_index=(\n            float(json[\"destinationInputIndex\"])\n            if json.get(\"destinationInputIndex\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ParamType","title":"<code>ParamType</code>","text":"<p>               Bases: <code>str</code></p> <p>Enum of AudioParam types</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>class ParamType(str):\n    \"\"\"\n    Enum of AudioParam types\n    \"\"\"\n\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; ParamType:\n        return cls(json)\n\n    def __repr__(self):\n        return \"ParamType({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ParamType.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def __repr__(self):\n    return \"ParamType({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ParamType.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; ParamType:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.ParamType.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.disable","title":"<code>disable()</code>","text":"<p>Disables the WebAudio domain.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disables the WebAudio domain.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAudio.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.enable","title":"<code>enable()</code>","text":"<p>Enables the WebAudio domain and starts sending context lifetime events.</p> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def enable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enables the WebAudio domain and starts sending context lifetime events.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAudio.enable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_audio/#zendriver.cdp.web_audio.get_realtime_data","title":"<code>get_realtime_data(context_id)</code>","text":"<p>Fetch the realtime data from the registered contexts.</p> <p>Parameters:</p> Name Type Description Default <code>context_id</code> <code>GraphObjectId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, ContextRealtimeData]</code> Source code in <code>zendriver/cdp/web_audio.py</code> <pre><code>def get_realtime_data(\n    context_id: GraphObjectId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, ContextRealtimeData]:\n    \"\"\"\n    Fetch the realtime data from the registered contexts.\n\n    :param context_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"contextId\"] = context_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAudio.getRealtimeData\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return ContextRealtimeData.from_json(json[\"realtimeData\"])\n</code></pre>"},{"location":"reference/cdp/web_authn/","title":"web_authn","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorId","title":"<code>AuthenticatorId</code>","text":"<p>               Bases: <code>str</code></p> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>class AuthenticatorId(str):\n    def to_json(self) -&gt; str:\n        return self\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AuthenticatorId:\n        return cls(json)\n\n    def __repr__(self):\n        return \"AuthenticatorId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorId.__repr__","title":"<code>__repr__()</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def __repr__(self):\n    return \"AuthenticatorId({})\".format(super().__repr__())\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorId.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AuthenticatorId:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorId.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorProtocol","title":"<code>AuthenticatorProtocol</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>class AuthenticatorProtocol(enum.Enum):\n    U2F = \"u2f\"\n    CTAP2 = \"ctap2\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AuthenticatorProtocol:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorProtocol.CTAP2","title":"<code>CTAP2 = 'ctap2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorProtocol.U2F","title":"<code>U2F = 'u2f'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorProtocol.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AuthenticatorProtocol:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorProtocol.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorTransport","title":"<code>AuthenticatorTransport</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>class AuthenticatorTransport(enum.Enum):\n    USB = \"usb\"\n    NFC = \"nfc\"\n    BLE = \"ble\"\n    CABLE = \"cable\"\n    INTERNAL = \"internal\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; AuthenticatorTransport:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorTransport.BLE","title":"<code>BLE = 'ble'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorTransport.CABLE","title":"<code>CABLE = 'cable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorTransport.INTERNAL","title":"<code>INTERNAL = 'internal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorTransport.NFC","title":"<code>NFC = 'nfc'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorTransport.USB","title":"<code>USB = 'usb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorTransport.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; AuthenticatorTransport:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.AuthenticatorTransport.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential","title":"<code>Credential</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@dataclass\nclass Credential:\n    credential_id: str\n\n    is_resident_credential: bool\n\n    #: The ECDSA P-256 private key in PKCS#8 format. (Encoded as a base64 string when passed over JSON)\n    private_key: str\n\n    #: Signature counter. This is incremented by one for each successful\n    #: assertion.\n    #: See https://w3c.github.io/webauthn/#signature-counter\n    sign_count: int\n\n    #: Relying Party ID the credential is scoped to. Must be set when adding a\n    #: credential.\n    rp_id: typing.Optional[str] = None\n\n    #: An opaque byte sequence with a maximum size of 64 bytes mapping the\n    #: credential to a specific user. (Encoded as a base64 string when passed over JSON)\n    user_handle: typing.Optional[str] = None\n\n    #: The large blob associated with the credential.\n    #: See https://w3c.github.io/webauthn/#sctn-large-blob-extension (Encoded as a base64 string when passed over JSON)\n    large_blob: typing.Optional[str] = None\n\n    #: Assertions returned by this credential will have the backup eligibility\n    #: (BE) flag set to this value. Defaults to the authenticator's\n    #: defaultBackupEligibility value.\n    backup_eligibility: typing.Optional[bool] = None\n\n    #: Assertions returned by this credential will have the backup state (BS)\n    #: flag set to this value. Defaults to the authenticator's\n    #: defaultBackupState value.\n    backup_state: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"credentialId\"] = self.credential_id\n        json[\"isResidentCredential\"] = self.is_resident_credential\n        json[\"privateKey\"] = self.private_key\n        json[\"signCount\"] = self.sign_count\n        if self.rp_id is not None:\n            json[\"rpId\"] = self.rp_id\n        if self.user_handle is not None:\n            json[\"userHandle\"] = self.user_handle\n        if self.large_blob is not None:\n            json[\"largeBlob\"] = self.large_blob\n        if self.backup_eligibility is not None:\n            json[\"backupEligibility\"] = self.backup_eligibility\n        if self.backup_state is not None:\n            json[\"backupState\"] = self.backup_state\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; Credential:\n        return cls(\n            credential_id=str(json[\"credentialId\"]),\n            is_resident_credential=bool(json[\"isResidentCredential\"]),\n            private_key=str(json[\"privateKey\"]),\n            sign_count=int(json[\"signCount\"]),\n            rp_id=str(json[\"rpId\"]) if json.get(\"rpId\", None) is not None else None,\n            user_handle=(\n                str(json[\"userHandle\"])\n                if json.get(\"userHandle\", None) is not None\n                else None\n            ),\n            large_blob=(\n                str(json[\"largeBlob\"])\n                if json.get(\"largeBlob\", None) is not None\n                else None\n            ),\n            backup_eligibility=(\n                bool(json[\"backupEligibility\"])\n                if json.get(\"backupEligibility\", None) is not None\n                else None\n            ),\n            backup_state=(\n                bool(json[\"backupState\"])\n                if json.get(\"backupState\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.backup_eligibility","title":"<code>backup_eligibility: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.backup_state","title":"<code>backup_state: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.credential_id","title":"<code>credential_id: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.is_resident_credential","title":"<code>is_resident_credential: bool</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.large_blob","title":"<code>large_blob: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.private_key","title":"<code>private_key: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.rp_id","title":"<code>rp_id: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.sign_count","title":"<code>sign_count: int</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.user_handle","title":"<code>user_handle: typing.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.__init__","title":"<code>__init__(credential_id, is_resident_credential, private_key, sign_count, rp_id=None, user_handle=None, large_blob=None, backup_eligibility=None, backup_state=None)</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; Credential:\n    return cls(\n        credential_id=str(json[\"credentialId\"]),\n        is_resident_credential=bool(json[\"isResidentCredential\"]),\n        private_key=str(json[\"privateKey\"]),\n        sign_count=int(json[\"signCount\"]),\n        rp_id=str(json[\"rpId\"]) if json.get(\"rpId\", None) is not None else None,\n        user_handle=(\n            str(json[\"userHandle\"])\n            if json.get(\"userHandle\", None) is not None\n            else None\n        ),\n        large_blob=(\n            str(json[\"largeBlob\"])\n            if json.get(\"largeBlob\", None) is not None\n            else None\n        ),\n        backup_eligibility=(\n            bool(json[\"backupEligibility\"])\n            if json.get(\"backupEligibility\", None) is not None\n            else None\n        ),\n        backup_state=(\n            bool(json[\"backupState\"])\n            if json.get(\"backupState\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Credential.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"credentialId\"] = self.credential_id\n    json[\"isResidentCredential\"] = self.is_resident_credential\n    json[\"privateKey\"] = self.private_key\n    json[\"signCount\"] = self.sign_count\n    if self.rp_id is not None:\n        json[\"rpId\"] = self.rp_id\n    if self.user_handle is not None:\n        json[\"userHandle\"] = self.user_handle\n    if self.large_blob is not None:\n        json[\"largeBlob\"] = self.large_blob\n    if self.backup_eligibility is not None:\n        json[\"backupEligibility\"] = self.backup_eligibility\n    if self.backup_state is not None:\n        json[\"backupState\"] = self.backup_state\n    return json\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.CredentialAdded","title":"<code>CredentialAdded</code>  <code>dataclass</code>","text":"<p>Triggered when a credential is added to an authenticator.</p> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@event_class(\"WebAuthn.credentialAdded\")\n@dataclass\nclass CredentialAdded:\n    \"\"\"\n    Triggered when a credential is added to an authenticator.\n    \"\"\"\n\n    authenticator_id: AuthenticatorId\n    credential: Credential\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CredentialAdded:\n        return cls(\n            authenticator_id=AuthenticatorId.from_json(json[\"authenticatorId\"]),\n            credential=Credential.from_json(json[\"credential\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.CredentialAdded.authenticator_id","title":"<code>authenticator_id: AuthenticatorId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.CredentialAdded.credential","title":"<code>credential: Credential</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.CredentialAdded.__init__","title":"<code>__init__(authenticator_id, credential)</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.CredentialAdded.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CredentialAdded:\n    return cls(\n        authenticator_id=AuthenticatorId.from_json(json[\"authenticatorId\"]),\n        credential=Credential.from_json(json[\"credential\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.CredentialAsserted","title":"<code>CredentialAsserted</code>  <code>dataclass</code>","text":"<p>Triggered when a credential is used in a webauthn assertion.</p> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@event_class(\"WebAuthn.credentialAsserted\")\n@dataclass\nclass CredentialAsserted:\n    \"\"\"\n    Triggered when a credential is used in a webauthn assertion.\n    \"\"\"\n\n    authenticator_id: AuthenticatorId\n    credential: Credential\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; CredentialAsserted:\n        return cls(\n            authenticator_id=AuthenticatorId.from_json(json[\"authenticatorId\"]),\n            credential=Credential.from_json(json[\"credential\"]),\n        )\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.CredentialAsserted.authenticator_id","title":"<code>authenticator_id: AuthenticatorId</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.CredentialAsserted.credential","title":"<code>credential: Credential</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.CredentialAsserted.__init__","title":"<code>__init__(authenticator_id, credential)</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.CredentialAsserted.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; CredentialAsserted:\n    return cls(\n        authenticator_id=AuthenticatorId.from_json(json[\"authenticatorId\"]),\n        credential=Credential.from_json(json[\"credential\"]),\n    )\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Ctap2Version","title":"<code>Ctap2Version</code>","text":"<p>               Bases: <code>Enum</code></p> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>class Ctap2Version(enum.Enum):\n    CTAP2_0 = \"ctap2_0\"\n    CTAP2_1 = \"ctap2_1\"\n\n    def to_json(self) -&gt; str:\n        return self.value\n\n    @classmethod\n    def from_json(cls, json: str) -&gt; Ctap2Version:\n        return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Ctap2Version.CTAP2_0","title":"<code>CTAP2_0 = 'ctap2_0'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Ctap2Version.CTAP2_1","title":"<code>CTAP2_1 = 'ctap2_1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Ctap2Version.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@classmethod\ndef from_json(cls, json: str) -&gt; Ctap2Version:\n    return cls(json)\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.Ctap2Version.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def to_json(self) -&gt; str:\n    return self.value\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions","title":"<code>VirtualAuthenticatorOptions</code>  <code>dataclass</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@dataclass\nclass VirtualAuthenticatorOptions:\n    protocol: AuthenticatorProtocol\n\n    transport: AuthenticatorTransport\n\n    #: Defaults to ctap2_0. Ignored if ``protocol`` == u2f.\n    ctap2_version: typing.Optional[Ctap2Version] = None\n\n    #: Defaults to false.\n    has_resident_key: typing.Optional[bool] = None\n\n    #: Defaults to false.\n    has_user_verification: typing.Optional[bool] = None\n\n    #: If set to true, the authenticator will support the largeBlob extension.\n    #: https://w3c.github.io/webauthn#largeBlob\n    #: Defaults to false.\n    has_large_blob: typing.Optional[bool] = None\n\n    #: If set to true, the authenticator will support the credBlob extension.\n    #: https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-credBlob-extension\n    #: Defaults to false.\n    has_cred_blob: typing.Optional[bool] = None\n\n    #: If set to true, the authenticator will support the minPinLength extension.\n    #: https://fidoalliance.org/specs/fido-v2.1-ps-20210615/fido-client-to-authenticator-protocol-v2.1-ps-20210615.html#sctn-minpinlength-extension\n    #: Defaults to false.\n    has_min_pin_length: typing.Optional[bool] = None\n\n    #: If set to true, the authenticator will support the prf extension.\n    #: https://w3c.github.io/webauthn/#prf-extension\n    #: Defaults to false.\n    has_prf: typing.Optional[bool] = None\n\n    #: If set to true, tests of user presence will succeed immediately.\n    #: Otherwise, they will not be resolved. Defaults to true.\n    automatic_presence_simulation: typing.Optional[bool] = None\n\n    #: Sets whether User Verification succeeds or fails for an authenticator.\n    #: Defaults to false.\n    is_user_verified: typing.Optional[bool] = None\n\n    #: Credentials created by this authenticator will have the backup\n    #: eligibility (BE) flag set to this value. Defaults to false.\n    #: https://w3c.github.io/webauthn/#sctn-credential-backup\n    default_backup_eligibility: typing.Optional[bool] = None\n\n    #: Credentials created by this authenticator will have the backup state\n    #: (BS) flag set to this value. Defaults to false.\n    #: https://w3c.github.io/webauthn/#sctn-credential-backup\n    default_backup_state: typing.Optional[bool] = None\n\n    def to_json(self) -&gt; T_JSON_DICT:\n        json: T_JSON_DICT = dict()\n        json[\"protocol\"] = self.protocol.to_json()\n        json[\"transport\"] = self.transport.to_json()\n        if self.ctap2_version is not None:\n            json[\"ctap2Version\"] = self.ctap2_version.to_json()\n        if self.has_resident_key is not None:\n            json[\"hasResidentKey\"] = self.has_resident_key\n        if self.has_user_verification is not None:\n            json[\"hasUserVerification\"] = self.has_user_verification\n        if self.has_large_blob is not None:\n            json[\"hasLargeBlob\"] = self.has_large_blob\n        if self.has_cred_blob is not None:\n            json[\"hasCredBlob\"] = self.has_cred_blob\n        if self.has_min_pin_length is not None:\n            json[\"hasMinPinLength\"] = self.has_min_pin_length\n        if self.has_prf is not None:\n            json[\"hasPrf\"] = self.has_prf\n        if self.automatic_presence_simulation is not None:\n            json[\"automaticPresenceSimulation\"] = self.automatic_presence_simulation\n        if self.is_user_verified is not None:\n            json[\"isUserVerified\"] = self.is_user_verified\n        if self.default_backup_eligibility is not None:\n            json[\"defaultBackupEligibility\"] = self.default_backup_eligibility\n        if self.default_backup_state is not None:\n            json[\"defaultBackupState\"] = self.default_backup_state\n        return json\n\n    @classmethod\n    def from_json(cls, json: T_JSON_DICT) -&gt; VirtualAuthenticatorOptions:\n        return cls(\n            protocol=AuthenticatorProtocol.from_json(json[\"protocol\"]),\n            transport=AuthenticatorTransport.from_json(json[\"transport\"]),\n            ctap2_version=(\n                Ctap2Version.from_json(json[\"ctap2Version\"])\n                if json.get(\"ctap2Version\", None) is not None\n                else None\n            ),\n            has_resident_key=(\n                bool(json[\"hasResidentKey\"])\n                if json.get(\"hasResidentKey\", None) is not None\n                else None\n            ),\n            has_user_verification=(\n                bool(json[\"hasUserVerification\"])\n                if json.get(\"hasUserVerification\", None) is not None\n                else None\n            ),\n            has_large_blob=(\n                bool(json[\"hasLargeBlob\"])\n                if json.get(\"hasLargeBlob\", None) is not None\n                else None\n            ),\n            has_cred_blob=(\n                bool(json[\"hasCredBlob\"])\n                if json.get(\"hasCredBlob\", None) is not None\n                else None\n            ),\n            has_min_pin_length=(\n                bool(json[\"hasMinPinLength\"])\n                if json.get(\"hasMinPinLength\", None) is not None\n                else None\n            ),\n            has_prf=(\n                bool(json[\"hasPrf\"]) if json.get(\"hasPrf\", None) is not None else None\n            ),\n            automatic_presence_simulation=(\n                bool(json[\"automaticPresenceSimulation\"])\n                if json.get(\"automaticPresenceSimulation\", None) is not None\n                else None\n            ),\n            is_user_verified=(\n                bool(json[\"isUserVerified\"])\n                if json.get(\"isUserVerified\", None) is not None\n                else None\n            ),\n            default_backup_eligibility=(\n                bool(json[\"defaultBackupEligibility\"])\n                if json.get(\"defaultBackupEligibility\", None) is not None\n                else None\n            ),\n            default_backup_state=(\n                bool(json[\"defaultBackupState\"])\n                if json.get(\"defaultBackupState\", None) is not None\n                else None\n            ),\n        )\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.automatic_presence_simulation","title":"<code>automatic_presence_simulation: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.ctap2_version","title":"<code>ctap2_version: typing.Optional[Ctap2Version] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.default_backup_eligibility","title":"<code>default_backup_eligibility: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.default_backup_state","title":"<code>default_backup_state: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.has_cred_blob","title":"<code>has_cred_blob: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.has_large_blob","title":"<code>has_large_blob: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.has_min_pin_length","title":"<code>has_min_pin_length: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.has_prf","title":"<code>has_prf: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.has_resident_key","title":"<code>has_resident_key: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.has_user_verification","title":"<code>has_user_verification: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.is_user_verified","title":"<code>is_user_verified: typing.Optional[bool] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.protocol","title":"<code>protocol: AuthenticatorProtocol</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.transport","title":"<code>transport: AuthenticatorTransport</code>  <code>instance-attribute</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.__init__","title":"<code>__init__(protocol, transport, ctap2_version=None, has_resident_key=None, has_user_verification=None, has_large_blob=None, has_cred_blob=None, has_min_pin_length=None, has_prf=None, automatic_presence_simulation=None, is_user_verified=None, default_backup_eligibility=None, default_backup_state=None)</code>","text":""},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.from_json","title":"<code>from_json(json)</code>  <code>classmethod</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>@classmethod\ndef from_json(cls, json: T_JSON_DICT) -&gt; VirtualAuthenticatorOptions:\n    return cls(\n        protocol=AuthenticatorProtocol.from_json(json[\"protocol\"]),\n        transport=AuthenticatorTransport.from_json(json[\"transport\"]),\n        ctap2_version=(\n            Ctap2Version.from_json(json[\"ctap2Version\"])\n            if json.get(\"ctap2Version\", None) is not None\n            else None\n        ),\n        has_resident_key=(\n            bool(json[\"hasResidentKey\"])\n            if json.get(\"hasResidentKey\", None) is not None\n            else None\n        ),\n        has_user_verification=(\n            bool(json[\"hasUserVerification\"])\n            if json.get(\"hasUserVerification\", None) is not None\n            else None\n        ),\n        has_large_blob=(\n            bool(json[\"hasLargeBlob\"])\n            if json.get(\"hasLargeBlob\", None) is not None\n            else None\n        ),\n        has_cred_blob=(\n            bool(json[\"hasCredBlob\"])\n            if json.get(\"hasCredBlob\", None) is not None\n            else None\n        ),\n        has_min_pin_length=(\n            bool(json[\"hasMinPinLength\"])\n            if json.get(\"hasMinPinLength\", None) is not None\n            else None\n        ),\n        has_prf=(\n            bool(json[\"hasPrf\"]) if json.get(\"hasPrf\", None) is not None else None\n        ),\n        automatic_presence_simulation=(\n            bool(json[\"automaticPresenceSimulation\"])\n            if json.get(\"automaticPresenceSimulation\", None) is not None\n            else None\n        ),\n        is_user_verified=(\n            bool(json[\"isUserVerified\"])\n            if json.get(\"isUserVerified\", None) is not None\n            else None\n        ),\n        default_backup_eligibility=(\n            bool(json[\"defaultBackupEligibility\"])\n            if json.get(\"defaultBackupEligibility\", None) is not None\n            else None\n        ),\n        default_backup_state=(\n            bool(json[\"defaultBackupState\"])\n            if json.get(\"defaultBackupState\", None) is not None\n            else None\n        ),\n    )\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.VirtualAuthenticatorOptions.to_json","title":"<code>to_json()</code>","text":"Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def to_json(self) -&gt; T_JSON_DICT:\n    json: T_JSON_DICT = dict()\n    json[\"protocol\"] = self.protocol.to_json()\n    json[\"transport\"] = self.transport.to_json()\n    if self.ctap2_version is not None:\n        json[\"ctap2Version\"] = self.ctap2_version.to_json()\n    if self.has_resident_key is not None:\n        json[\"hasResidentKey\"] = self.has_resident_key\n    if self.has_user_verification is not None:\n        json[\"hasUserVerification\"] = self.has_user_verification\n    if self.has_large_blob is not None:\n        json[\"hasLargeBlob\"] = self.has_large_blob\n    if self.has_cred_blob is not None:\n        json[\"hasCredBlob\"] = self.has_cred_blob\n    if self.has_min_pin_length is not None:\n        json[\"hasMinPinLength\"] = self.has_min_pin_length\n    if self.has_prf is not None:\n        json[\"hasPrf\"] = self.has_prf\n    if self.automatic_presence_simulation is not None:\n        json[\"automaticPresenceSimulation\"] = self.automatic_presence_simulation\n    if self.is_user_verified is not None:\n        json[\"isUserVerified\"] = self.is_user_verified\n    if self.default_backup_eligibility is not None:\n        json[\"defaultBackupEligibility\"] = self.default_backup_eligibility\n    if self.default_backup_state is not None:\n        json[\"defaultBackupState\"] = self.default_backup_state\n    return json\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.add_credential","title":"<code>add_credential(authenticator_id, credential)</code>","text":"<p>Adds the credential to the specified authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>authenticator_id</code> <code>AuthenticatorId</code> required <code>credential</code> <code>Credential</code> required Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def add_credential(\n    authenticator_id: AuthenticatorId, credential: Credential\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Adds the credential to the specified authenticator.\n\n    :param authenticator_id:\n    :param credential:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"authenticatorId\"] = authenticator_id.to_json()\n    params[\"credential\"] = credential.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.addCredential\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.add_virtual_authenticator","title":"<code>add_virtual_authenticator(options)</code>","text":"<p>Creates and adds a virtual authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>VirtualAuthenticatorOptions</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, AuthenticatorId]</code> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def add_virtual_authenticator(\n    options: VirtualAuthenticatorOptions,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, AuthenticatorId]:\n    \"\"\"\n    Creates and adds a virtual authenticator.\n\n    :param options:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"options\"] = options.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.addVirtualAuthenticator\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return AuthenticatorId.from_json(json[\"authenticatorId\"])\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.clear_credentials","title":"<code>clear_credentials(authenticator_id)</code>","text":"<p>Clears all the credentials from the specified device.</p> <p>Parameters:</p> Name Type Description Default <code>authenticator_id</code> <code>AuthenticatorId</code> required Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def clear_credentials(\n    authenticator_id: AuthenticatorId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Clears all the credentials from the specified device.\n\n    :param authenticator_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"authenticatorId\"] = authenticator_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.clearCredentials\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.disable","title":"<code>disable()</code>","text":"<p>Disable the WebAuthn domain.</p> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def disable() -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Disable the WebAuthn domain.\n    \"\"\"\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.disable\",\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.enable","title":"<code>enable(enable_ui=None)</code>","text":"<p>Enable the WebAuthn domain and start intercepting credential storage and retrieval with a virtual authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>enable_ui</code> <code>Optional[bool]</code> <p>(Optional) Whether to enable the WebAuthn user interface. Enabling the UI is recommended for debugging and demo purposes, as it is closer to the real experience. Disabling the UI is recommended for automated testing. Supported at the embedder's discretion if UI is available. Defaults to false.</p> <code>None</code> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def enable(\n    enable_ui: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Enable the WebAuthn domain and start intercepting credential storage and\n    retrieval with a virtual authenticator.\n\n    :param enable_ui: *(Optional)* Whether to enable the WebAuthn user interface. Enabling the UI is recommended for debugging and demo purposes, as it is closer to the real experience. Disabling the UI is recommended for automated testing. Supported at the embedder's discretion if UI is available. Defaults to false.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    if enable_ui is not None:\n        params[\"enableUI\"] = enable_ui\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.enable\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.get_credential","title":"<code>get_credential(authenticator_id, credential_id)</code>","text":"<p>Returns a single credential stored in the given virtual authenticator that matches the credential ID.</p> <p>Parameters:</p> Name Type Description Default <code>authenticator_id</code> <code>AuthenticatorId</code> required <code>credential_id</code> <code>str</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, Credential]</code> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def get_credential(\n    authenticator_id: AuthenticatorId, credential_id: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, Credential]:\n    \"\"\"\n    Returns a single credential stored in the given virtual authenticator that\n    matches the credential ID.\n\n    :param authenticator_id:\n    :param credential_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"authenticatorId\"] = authenticator_id.to_json()\n    params[\"credentialId\"] = credential_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.getCredential\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return Credential.from_json(json[\"credential\"])\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.get_credentials","title":"<code>get_credentials(authenticator_id)</code>","text":"<p>Returns all the credentials stored in the given virtual authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>authenticator_id</code> <code>AuthenticatorId</code> required <p>Returns:</p> Type Description <code>Generator[T_JSON_DICT, T_JSON_DICT, List[Credential]]</code> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def get_credentials(\n    authenticator_id: AuthenticatorId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, typing.List[Credential]]:\n    \"\"\"\n    Returns all the credentials stored in the given virtual authenticator.\n\n    :param authenticator_id:\n    :returns:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"authenticatorId\"] = authenticator_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.getCredentials\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n    return [Credential.from_json(i) for i in json[\"credentials\"]]\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.remove_credential","title":"<code>remove_credential(authenticator_id, credential_id)</code>","text":"<p>Removes a credential from the authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>authenticator_id</code> <code>AuthenticatorId</code> required <code>credential_id</code> <code>str</code> required Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def remove_credential(\n    authenticator_id: AuthenticatorId, credential_id: str\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes a credential from the authenticator.\n\n    :param authenticator_id:\n    :param credential_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"authenticatorId\"] = authenticator_id.to_json()\n    params[\"credentialId\"] = credential_id\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.removeCredential\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.remove_virtual_authenticator","title":"<code>remove_virtual_authenticator(authenticator_id)</code>","text":"<p>Removes the given authenticator.</p> <p>Parameters:</p> Name Type Description Default <code>authenticator_id</code> <code>AuthenticatorId</code> required Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def remove_virtual_authenticator(\n    authenticator_id: AuthenticatorId,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Removes the given authenticator.\n\n    :param authenticator_id:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"authenticatorId\"] = authenticator_id.to_json()\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.removeVirtualAuthenticator\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.set_automatic_presence_simulation","title":"<code>set_automatic_presence_simulation(authenticator_id, enabled)</code>","text":"<p>Sets whether tests of user presence will succeed immediately (if true) or fail to resolve (if false) for an authenticator. The default is true.</p> <p>Parameters:</p> Name Type Description Default <code>authenticator_id</code> <code>AuthenticatorId</code> required <code>enabled</code> <code>bool</code> required Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def set_automatic_presence_simulation(\n    authenticator_id: AuthenticatorId, enabled: bool\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets whether tests of user presence will succeed immediately (if true) or fail to resolve (if false) for an authenticator.\n    The default is true.\n\n    :param authenticator_id:\n    :param enabled:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"authenticatorId\"] = authenticator_id.to_json()\n    params[\"enabled\"] = enabled\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.setAutomaticPresenceSimulation\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.set_credential_properties","title":"<code>set_credential_properties(authenticator_id, credential_id, backup_eligibility=None, backup_state=None)</code>","text":"<p>Allows setting credential properties. https://w3c.github.io/webauthn/#sctn-automation-set-credential-properties</p> <p>Parameters:</p> Name Type Description Default <code>authenticator_id</code> <code>AuthenticatorId</code> required <code>credential_id</code> <code>str</code> required <code>backup_eligibility</code> <code>Optional[bool]</code> <p>(Optional)</p> <code>None</code> <code>backup_state</code> <code>Optional[bool]</code> <p>(Optional)</p> <code>None</code> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def set_credential_properties(\n    authenticator_id: AuthenticatorId,\n    credential_id: str,\n    backup_eligibility: typing.Optional[bool] = None,\n    backup_state: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Allows setting credential properties.\n    https://w3c.github.io/webauthn/#sctn-automation-set-credential-properties\n\n    :param authenticator_id:\n    :param credential_id:\n    :param backup_eligibility: *(Optional)*\n    :param backup_state: *(Optional)*\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"authenticatorId\"] = authenticator_id.to_json()\n    params[\"credentialId\"] = credential_id\n    if backup_eligibility is not None:\n        params[\"backupEligibility\"] = backup_eligibility\n    if backup_state is not None:\n        params[\"backupState\"] = backup_state\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.setCredentialProperties\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.set_response_override_bits","title":"<code>set_response_override_bits(authenticator_id, is_bogus_signature=None, is_bad_uv=None, is_bad_up=None)</code>","text":"<p>Resets parameters isBogusSignature, isBadUV, isBadUP to false if they are not present.</p> <p>Parameters:</p> Name Type Description Default <code>authenticator_id</code> <code>AuthenticatorId</code> required <code>is_bogus_signature</code> <code>Optional[bool]</code> <p>(Optional) If isBogusSignature is set, overrides the signature in the authenticator response to be zero. Defaults to false.</p> <code>None</code> <code>is_bad_uv</code> <code>Optional[bool]</code> <p>(Optional) If isBadUV is set, overrides the UV bit in the flags in the authenticator response to be zero. Defaults to false.</p> <code>None</code> <code>is_bad_up</code> <code>Optional[bool]</code> <p>(Optional) If isBadUP is set, overrides the UP bit in the flags in the authenticator response to be zero. Defaults to false.</p> <code>None</code> Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def set_response_override_bits(\n    authenticator_id: AuthenticatorId,\n    is_bogus_signature: typing.Optional[bool] = None,\n    is_bad_uv: typing.Optional[bool] = None,\n    is_bad_up: typing.Optional[bool] = None,\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Resets parameters isBogusSignature, isBadUV, isBadUP to false if they are not present.\n\n    :param authenticator_id:\n    :param is_bogus_signature: *(Optional)* If isBogusSignature is set, overrides the signature in the authenticator response to be zero. Defaults to false.\n    :param is_bad_uv: *(Optional)* If isBadUV is set, overrides the UV bit in the flags in the authenticator response to be zero. Defaults to false.\n    :param is_bad_up: *(Optional)* If isBadUP is set, overrides the UP bit in the flags in the authenticator response to be zero. Defaults to false.\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"authenticatorId\"] = authenticator_id.to_json()\n    if is_bogus_signature is not None:\n        params[\"isBogusSignature\"] = is_bogus_signature\n    if is_bad_uv is not None:\n        params[\"isBadUV\"] = is_bad_uv\n    if is_bad_up is not None:\n        params[\"isBadUP\"] = is_bad_up\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.setResponseOverrideBits\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"},{"location":"reference/cdp/web_authn/#zendriver.cdp.web_authn.set_user_verified","title":"<code>set_user_verified(authenticator_id, is_user_verified)</code>","text":"<p>Sets whether User Verification succeeds or fails for an authenticator. The default is true.</p> <p>Parameters:</p> Name Type Description Default <code>authenticator_id</code> <code>AuthenticatorId</code> required <code>is_user_verified</code> <code>bool</code> required Source code in <code>zendriver/cdp/web_authn.py</code> <pre><code>def set_user_verified(\n    authenticator_id: AuthenticatorId, is_user_verified: bool\n) -&gt; typing.Generator[T_JSON_DICT, T_JSON_DICT, None]:\n    \"\"\"\n    Sets whether User Verification succeeds or fails for an authenticator.\n    The default is true.\n\n    :param authenticator_id:\n    :param is_user_verified:\n    \"\"\"\n    params: T_JSON_DICT = dict()\n    params[\"authenticatorId\"] = authenticator_id.to_json()\n    params[\"isUserVerified\"] = is_user_verified\n    cmd_dict: T_JSON_DICT = {\n        \"method\": \"WebAuthn.setUserVerified\",\n        \"params\": params,\n    }\n    json = yield cmd_dict\n</code></pre>"}]}